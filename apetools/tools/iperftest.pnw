The Iperf Test
==============

A module to hold an iperf test tool.

<<name='imports', echo=False>>=
# apetools
from apetools.baseclass import BaseClass
from apetools.commons.errors import CommandError

#this folder
from sleep import Sleep 
from killall import KillAll, KillAllError
@

<<name='constants', echo=False>>=
SIGKILL = 9
@

.. currentmodule:: apetools.tools.iperftest

Errors
------

The `IperfTestError` is raised if there was an iperf-related error (as opposed to, say, a connection-related error).

.. uml::

   IperfTestError -|> CommandError

<<name='IperfTestError', echo=False>>=
class IperfTestError(CommandError):
    """
    A error to raise if there was an iperf-specific problem
    """
# end class IperfTestError
@

.. _iperf-test:

The Iperf Test
--------------

The `IperfTest` runs a single test, taking care of both sides of the connection (client and server).

.. autosummary::
   :toctree: api

   IperfTest

.. uml::

   IperfTest -|> BaseClass
   IperfTest '1' o-- '2' IperfCommand
   IperfTest o-- Sleep
   IperfTest o-- Kill
   IperfTest : sender_command
   IperfTest : receiver_command
   IperfTest : sleep
   IperfTest : wait_events
   IperfTest : kill
   
* See :ref:`IperfCommand <iperf-command>` runs the actual iperf-commands

* :ref:`Sleep <sleep-command>` provides a sleep after the server is started so the client does not start too soon

* :ref:`Kill <kill-command>` is used to kill all pre-existing iperf-sessions.
   
<<name='IperfTest', echo=False>>=
class IperfTest(BaseClass):
    """
    The Iperf Test runs a single iperf test.
    """
    def __init__(self, sender_command=None, receiver_command=None, sleep=None,
                 wait_events=None):
        """
        :param:

         - `sender_command`: an IperfCommand bundled with client parameters
         - `receiver_command`: IperfCommand bundled with server parameters
         - `sleep`: A Sleep object with the sleep time preset
         - `wait_events`: list of events to wait for
        """
        super(IperfTest, self).__init__()
        self.sender_command = sender_command
        self.receiver_command = receiver_command
        self.wait_events = wait_events
        self._sleep = sleep
        self._kill = None
        return

    @property
    def kill(self):
        """
        :return: iperf process killer
        """
        if self._kill is None:
            self._kill = KillAll(name="iperf")
        return self._kill

    @property
    def sleep(self):
        """
        :return: A sleep
        """
        if self._sleep is None:
            self._sleep = Sleep(1)
        return self._sleep

    def kill_processes(self, connection):
        """
        Kills iperf processes over the connection

         * If the default level fails, tries a -9

        :param:

         - `connection`: connection to the host for the KillAll
        """
        self.kill.level = None
        self.kill.connection = connection
        try:
            self.kill()
        except KillAllError as error:
            self.logger.warning(error)
            self.kill.level = SIGKILL
            self.kill()            
        return
    
    def __call__(self, sender, receiver, filename):
        """
        Runs the test.

        :param:

         - `sender`: a device to originate traffic
         - `receiver`: A device to receive traffic
         - `filename`: a filename to use for output

        :raise: IperfTestError if wait_events time out
        """
        # set the target address in the iperf command to the receiver (server)
        self.sender_command.parameters.client = receiver.address

        self.logger.info("Killing Existing Iperf Processes")
        self.kill_processes(sender.connection)
        self.kill_processes(receiver.connection)
        self.logger.info("Running Iperf: {2} ({0}) -> {3} ({1})".format(sender.address, receiver.address,
                                                                        sender.role, receiver.role))
        self.logger.info("Starting the iperf server (receiver)")

        self.receiver_command.start(receiver, filename)
        self.logger.info("Sleeping to let the server start.")
        self.sleep()

        # allow other processes to block the iperf client-start
        if self.wait_events is not None:
            time_out = self.sender_command.max_time
            if not self.wait_events.wait(time_out):
                raise IperfTestError("Timed out waiting for event.")                
        self.logger.info("Running the client (sender)")

        self.sender_command.run(sender, filename)
        if self.receiver_command.running:
            # This was added to force the dumping of UDP server output
            self.logger.info("Killing the server on {0}".format(receiver.connection.hostname))
            self.kill_processes(receiver.connection)
            #self.receiver_command.abort()
        return
# end class IperfTest
@

The Call
--------

The main interface with the `IperfTest` is its call-method::

   test = IperfTest(sender_command, receiver_command)
   test(sender, receiver, filename)

The process:

   #. Set the target address in the iperf command to the receiver (server)::
   
        self.sender_command.parameters.client = receiver.address

   #. Kill the existing iperf processes::
   
        self.kill(sender.connection)
        self.kill(receiver.connection)
   
   #. Start the iperf-server and sleep to let it get set-up::
   
        self.receiver_command.start(receiver, filename)   
        self.sleep()

   #. Allow other processes to block the iperf client-start
   
        if self.wait_events is not None:
            time_out = self.sender_command.max_time
            if not self.wait_events.wait(time_out):
                raise IperfTestError("Timed out waiting for event.")                

   #. Run the client
   
        self.sender_command.run(sender, filename)

   #. Check if the server is still running and kill it if it is::
   
        if self.receiver_command.running:
            self.kill(receiver.connection)
        
