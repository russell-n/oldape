Oat Bran
========

Oat Bran helps with regular expressions.

Names are uppercased to avoid keyword clashes.

<<name='imports', echo=False>>=
# python standard library
import string
@

Groups
------

.. module:: apetools.parsers.oatbran
.. autosummary:: 
   :toctree: api

   GROUP
   NAMED
   CLASS
   NOT
   NOT_FOLLOWED_BY
   NOT_PRECEDED_BY

<<name='GROUP', echo=False>>=
def GROUP(e):
    """
    puts the argument in a group

    :param:

     - `e`: a string regular expression

    :return: grouped regular expression (string)
    """
    return "({e})".format(e=e)
@

<<name='NAMED', echo=False>>=
def NAMED(n, e):
    """
    Puts the expression in a named-group

    :param:

     - `n`: the name of the group
     - `e`: regular expression

    :return: named-group
    """
    return "(?P<{n}>{e})".format(n=n, e=e)
@

<<name='CLASS', echo=False>>=
def CLASS(e):
    """
    puts e in a character class

    :param:

     - `e`: a regular expression

    :return: character class
    """
    return "[{e}]".format(e=e)
@

<<name='NOT', echo=False>>=
def NOT(e):
    """
    match only if none of the characters in e are there

    :param:

     - `e`: characters to not match
     
    :return: character class not to match
    """
    return "[^{e}]+".format(e=e)
@

<<name='NOT_FOLLOWED_BY', echo=False>>=
def NOT_FOLLOWED_BY(e):
    """
    look-ahead group

    :param:

     - `e`: expression that can't follow preceding string
     
    :return: not-followed by look ahead group
    """
    return "(?!{e})".format(e=e)
@

<<name='NOT_PRECEDED_BY', echo=False>>=
def NOT_PRECEDED_BY(e):
    """
    look-behind group

    :param:

     - `e`: expression that can't precede what follows

    :return: negative look-behind group
    """
    return "(?<!{e})".format(e=e)
@

Cardinality
-----------

<<name='globals'>>=
ONE_OR_MORE = "+"
ZERO_OR_MORE = '*'
ZERO_OR_ONE = "?"
EXACTLY = "{{{0}}}"
@

.. autosummary::
   :toctree: api

   M_TO_N
   M_to_N_ONLY

<<name='M_TO_N', echo=False>>=
def M_TO_N(m, n, e):
    """
    match from m to n occurences of e

    :param:

     - `m`: the minimum required number of matches
     - `n`: the maximum number of  matches
     - `e`: the expression to match
    """
    return "{e}{{{m},{n}}}".format(m=m, n=n, e=e)
@

<<name='M_TO_N_ONLY', echo=False>>=
def M_TO_N_ONLY(m, n, e):
    """
    match from m to n occurences of e as an entire word
    (not a sub-string of a longer word)    

    :param:

     - `m`: the minimum required number of matches
     - `n`: the maximum number of  matches
     - `e`: the expression t match
    """
    return r"\b{e}{{{m},{n}}}\b".format(m=m, n=n, e=e)
@    
    
Escapes
-------

<<name='globals'>>=
DECIMAL_POINT = r'\.'
L_BRACKET = r"\["
R_BRACKET = r"\]"
@

Operators
---------

<<name='globals'>>=
OR = "|"
@

.. autosummary::
   :toctree: api

   WORD_BOUNDARY
   STRING_BOUNDARY

<<name='WORD_BOUNDARY', echo=False>>=
def WORD_BOUNDARY(e):
    """
    adds word-boundaries

    :param: 

     - `e`: expression to bound

    :return: expression than matches entire words
    """
    return r"\b{e}\b".format(e=e)
@

<<name='STRING_BOUNDARY', echo=False>>=
def STRING_BOUNDARY(e):
    """
    :return: expr that matches an entire line
    """
    return r"^{e}$".format(e=e)
@

String Help
-----------

<<name='string_help'>>=
STRING_START = "^"
STRING_END = "$"
ALPHA_NUM = r"\w"
ALPHA_NUMS = ALPHA_NUM + ONE_OR_MORE
@

Anything And Everything
-----------------------

<<name='anything_and_everything'>>=
ANYTHING = r"."
EVERYTHING = ANYTHING + ZERO_OR_MORE
@

Numbers
-------

<<name='numbers', wrap=False>>=
DIGIT = r"\d"
NOT_DIGIT = r"\D"
NON_ZERO = CLASS("1-9")
SINGLE_DIGIT = WORD_BOUNDARY(DIGIT)
TWO_DIGITS = WORD_BOUNDARY(NON_ZERO + DIGIT)
ONE_HUNDREDS = WORD_BOUNDARY("1" + DIGIT + DIGIT)
NATURAL = DIGIT + ONE_OR_MORE

INTEGER = (NOT_PRECEDED_BY(DECIMAL_POINT) +  "-" + ZERO_OR_ONE + 
           NATURAL + NOT_FOLLOWED_BY(DECIMAL_POINT))

FLOAT = "-" + ZERO_OR_ONE + NATURAL + DECIMAL_POINT + NATURAL
REAL = GROUP(FLOAT + OR + INTEGER)
HEX = CLASS(string.hexdigits)
HEXADECIMALS = HEX + ONE_OR_MORE
@

Spaces
------

<<name='spaces'>>=
SPACE = r"\s"
SPACES = SPACE + ONE_OR_MORE
NOT_SPACE = r'\S'
NOT_SPACES = NOT_SPACE + ONE_OR_MORE
OPTIONAL_SPACES = SPACE + ZERO_OR_MORE
@

Common Constants
----------------

<<name='common_constants'>>=
DASH = "-"
LETTER = CLASS(e=string.ascii_letters)
LETTERS = LETTER + ONE_OR_MORE
OPTIONAL_LETTERS = LETTER + ZERO_OR_MORE
@

Networking
----------

<<name='networking', wrap=False>>=
DOT = DECIMAL_POINT
OCTET = GROUP(e=OR.join([SINGLE_DIGIT, TWO_DIGITS, ONE_HUNDREDS,
                         WORD_BOUNDARY("2[0-4][0-9]"), WORD_BOUNDARY("25[0-5]")]))

IP_ADDRESS = DOT.join([OCTET] * 4)

# from commons.expressions
MAC_ADDRESS_NAME = "mac_address"
HEX_PAIR = HEX + EXACTLY.format(2)
MAC_ADDRESS = NAMED(n=MAC_ADDRESS_NAME,
                    e=":".join([HEX_PAIR] * 6))
@
