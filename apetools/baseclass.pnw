The BaseClass
=============

This is a module for base classes that have common methods to inherit.

<<name='imports', echo=False>>=
# python standard library
import logging
@

<<name='constants', echo=False>>=
DOT_JOIN = "{0}.{1}"
@

The BaseClass
-------------

The `BaseClass` sets up a logger for its children so that the module and class names are printed in the logging information.

.. module:: apetools.baseclass
.. autosummary::
   :toctree: api

   BaseClass
   BaseClass.logger
   
<<name="BaseClass", echo=False>>=
class BaseClass(object):
    """
    This class holds the minimum common features.
    """
    def __init__(self):
        self._logger = None
        return

    @property
    def logger(self):
        """
        :return: A logging object with module name and class name set.
        """
        if self._logger is None:
            self._logger = logging.getLogger(DOT_JOIN.format(self.__module__,
                                  self.__class__.__name__))
        return self._logger
# end BaseClass
@

The BaseThreadClass
-------------------

The `BaseThreadClass` extends the `BaseClass` by adding a `run_thread` method that calls (an as yet undefined) `run` method and catches any exceptions and logs the traceback. This way if the `run_thread` method is run in a thread and it crashes there will be more information in the logging (hopefully). This probably could be done with a decorator as well.

.. uml::

   BaseClass <|-- BaseThreadClass

.. autosummary::
   :toctree: api

   BaseThreadClass
   BaseThreadClass.run_thread
   
<<name='BaseThreadClass', echo=False>>=
class BaseThreadClass(BaseClass):
    """
    Extends the base-class with a run_thread method that logs the traceback on error.
    """
    def __init__(self):
        super(BaseThreadClass, self).__init__()
        self._logger = None
        return

    def run_thread(self, *args, **kwargs):
        """
        To use:

           * define run(*args, **kwargs) in child
           * use self.run_thread as target for thread
        
        :param: Whatever self.run accepts
        :precondition: self.run method exists and is thread-safe
        """
        try:
            self.run(*args, **kwargs)
        except Exception as error:
            import traceback
            self.logger.debug(traceback.format_exc())
            self.logger.error(error)
        return        
# end BaseThreadClass
@
