The Log Follower
================
.. currentmodule:: apetools.watchers.logfollower
The `LogFollower` executes a `tail -f` on a file and sends the output to a file. The motivation for it comes from the fact that I want to capture `syslog`, `kern.log`, etc. output. It is implemented as an extension of the `LogWatcher` but all it really does is over-ride the `execute` method so that it uses `tail` instead of `cat`.

.. uml::

   LogFollower -|> LogWatcher
   LogFollower : (output, error) execute()

.. autosummary::
   :toctree: api

   LogFollower

<<name='imports', echo=False>>=
from apetools.watchers.logwatcher import LogWatcher
@
<<name='LogFollower', echo=False>>=
class LogFollower(LogWatcher):
    """
    A file-follower
    """
    def __init__(self, *args, **kwargs):
        """
        Takes whatever parameters the LogFollower does
        """
        super(LogFollower, self).__init__(*args, **kwargs)
        return

    def execute(self):
        """
        Overrides LogWatcher.execute to use tail

        :return: stdout, stderr from self.connection
        """
        with self.connection.lock:
            output, error = self.connection.tail(' -f {0}'.format(self.arguments))
        return output, error
@
   

