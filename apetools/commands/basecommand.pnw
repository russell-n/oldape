The Base Command
================


A base for certain (simple) commands.

<<name='imports', echo=False>>=
# python standard library
from abc import ABCMeta, abstractmethod
from threading import Thread

#apetools
from apetools.baseclass import BaseThreadClass
@

The BaseThreadedCommand
-----------------------

This is an abstract base class for threaded commands. Children of it will raise an exception on instantiation if the `run` and `stop` methods are not defined. The main interface to it is the `__call__` which will pass in any arguments given to the `run_thread` method (inherited from the `BaseThreadClass`).

.. autosummary::
   :toctree: api

   BaseThreadedCommand

.. uml::

   BaseThreadedCommand -|> BaseThreadClass
   BaseThreadedCommand : logger
   BaseThreadedCommand : stopped
   BaseThreadedCommand : thread
   BaseThreadedCommand : run()
   BaseThreadedCommand : stop()
   BaseThreadedCommand : __call__(*args, **kwargs)

* To understand the `run_thread` see :ref:`BaseThreadClass <base-thread-class>`.   

<<name='BaseThreadedCommand', echo=False>>=
class BaseThreadedCommand(BaseThreadClass):
    """
    An abstract base-class for simple commands to run in a thread
    """
    __metaclass__ = ABCMeta
    def __init__(self):
        """
        Only instantiates the BaseClass and sets the properties
        """
        super(BaseThreadedCommand, self).__init__()
        self._logger = None
        self.stopped = False
        self._thread = None
        return

    @abstractmethod
    def run(self):
        """
        The method put into the thread.
        """
        return

    @abstractmethod
    def stop(self):
        """
        :postcondition: the thread is stopped 
        """
        return
    
    def __call__(self, *args, **kwargs):
        """
        The main interface for the command.

        Calls run and puts it in a daemonized thread.

        :postcondition: self.thread is a running thread
        """
        #import pudb;pudb.set_trace()
        self.thread = Thread(target=self.run_thread, args=args,
                             kwargs=kwargs)
        self.thread.daemon = True
        self.thread.start()
        return

    def __del__(self):
        """
        :postcondition: `stop` is called.
        :postcondition: connection is closed
        """
        self.stop()
        return
# end class BaseThreadedCommand
@
