
The Iperf Command
=================
A module to hold a generic iperf command.

.. currentmodule:: apetools.commands.iperfcommand
<<name='imports', echo=False>>=
#python standard library
import threading
import time
import os

#apetools
from apetools.baseclass import BaseThreadClass
from apetools.devices.basedevice import BaseDeviceEnum
from apetools.commons import errors
from apetools.commons import readoutput
from apetools.pipes.storagepipe import StoragePipe, StoragePipeEnum
from apetools.parsers.sumparser import SumParser
from apetools.parameters.iperf_common_parameters import IperfParametersEnum

ConfigurationError = errors.ConfigurationError
CommandError = errors.CommandError
@

Errors Raised
-------------

.. _iperf-error:

IperfError
~~~~~~~~~~

The `IperfError` is raised if a problem with the connection between the client and server is detected.

.. uml::

   IperfError -|> CommandError

.. autosummary::
   :toctree: api

   IperfError

<<name='IperfError', echo=False>>=
class IperfError(CommandError):
    """
    An IperfError indicates a connection problem between the client and server.
    """
# end class IperfError
@

IperfCommandError
~~~~~~~~~~~~~~~~~

The `IperfCommandError` is raised if an error in the command-string is detected.

.. uml::

   IperfCommandError -|> ConfigurationError

.. autosummary::
   :toctree: api

   IperfCommandError

<<name='IperfCommandError', echo=False>>=
class IperfCommandError(ConfigurationError):
    """
    an error to raise if the settings are unknown
    """
# end class IperfCommandError
@

The Iperf Command Enum
----------------------

The `IperfCommandEnum` holds string constants for the :ref:`IperfCommand <iperf-command>`.

.. uml::

   IperfCommandEnum : client
   IperfCommandEnum : server
   IperfCommandEnum : time
   IperfCommandEnum : eof
   IperfCommandEnum : newline
   IperfCommandEnum : udp
   IperfCommandEnum : path
   IperfCommandEnum : iperf

<<name='IperfCommandEnum', echo=False>>=
class IperfCommandEnum(object):
    __slots__ = ()
    client = "client"
    server = "server"
    time = 'time'
    eof = ""
    newline = "\n"
    udp = 'udp'
    path = 'path'
    iperf = 'iperf'
# end IperfCommandEnum
@


.. _iperf-command:

The Iperf Command
-----------------

The `IperfCommand` executes iperf commands. This is very old code so it is not well-documented.


Daemon Mode
~~~~~~~~~~~

The most recent change is a check for the `--daemon` flag in the parameters. If this is there, then it is assumed that the server will want to start, redirect the output to a file, then close the connection to the device. Another object will then have to kill the iperf process and copy it if the output is wanted. This is being implemented speciffically for the `ipad` running downlink iperf traffic. It probably will not work in other cases.

Because the server is running in a thread, it will set a ``self.last_filename`` property so that users will know where to get the remote file.

.. autosummary::
   :toctree: api

   IperfCommand

.. uml::

   IperfCommand -|> BaseThreadClass
   IperfCommand o-- StoragePipe
   IperfCommand : parameters
   IperfCommand : output
   IperfCommand : role
   IperfCommand : base_filename
   IperfCommand : raw_iperf
   IperfCommand : parser
   IperfCommand : run(device, filename, server)
   IperfCommand : start(device, filename)
   IperfCommand : __call__(device, filename, server)
   IperfCommand : last_filename
   IperfCommand : is_daemon

<<name='IperfCommand', echo=False>>=
class IperfCommand(BaseThreadClass):
    """
    An Iperf Command executes iperf commands
    """
    def __init__(self, parameters, output, role, base_filename="", subdirectory="raw_iperf"):
        """
        :param:

         - `parameters`: An IperfParameter to use
         - `output`: A Storage Pipe
         - `role`: client or server
         - `base_filename`: string to add to all filenames
         - `subdirectory`: A folder to put the iperf files intn
        """
        super(IperfCommand, self).__init__()
        self.role = role
        self._parameters = None
        self.parameters = parameters
        self._parser  = None
        self._output = None
        self.output = output
        self.base_filename = base_filename
        self.output.extend_path(subdirectory) 

        self._max_time = None
        self._now = None

        self.running = False
        self.stop = False
        self._is_daemon = None
        return

    def get_output_filename(self):
        """
        Returns self.last_filename extended by the StorageOutput

         * This is another ipad hack

        :return: output-file name
        """
        if self.last_filename is not None:
            return self.output.storage.get_filename(self.last_filename)
    
    @property
    def parameters(self):
        """
        The iperf parameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters and re-sets is_daemon
        """
        self._is_daemon = None
        self._parameters = parameters
        return
    
    @property
    def is_daemon(self):
        """
        If this is run is a server, will it be a daemon?
        """
        if self._is_daemon is None:
            self._is_daemon = self.parameters.daemon is not None
        return self._is_daemon

    @property
    def parser(self):
        """
        :return: SumParser pipeline (if this is the client)
        """
        if self._parser is None:
            threads = None
            if self.parameters.parallel is not None:
                threads = int(self.parameters.parallel.split()[-1])
            parser = SumParser(threads=threads)
            self._parser = StoragePipe(role=StoragePipeEnum.sink,
                                       transform=parser,
                add_timestamp=True)            
        return self._parser
    
    @property
    def output(self):
        """
        :return: the storage pipeline for raw iperf output
        """        
        return self._output

    @output.setter
    def output(self, out):
        """
        :param:

         - `out`: an output pipeline object
        """
        if self.parser is not None:
            self.parser.path = out.path
            self.parser.extend_path("parsed")
            out.target = self.parser
            out.role = StoragePipeEnum.start
        self._output = out
        return

    @property
    def now(self):
        """
        :return: time-function to check for timeouts
        """
        if self._now is None:
            if self.role == IperfCommandEnum.client:
                self._now = time.time
            else:
                self._now = lambda: 0
        return self._now

    def filename(self, filename, node_type):
        """
        :param:

         - `filename`: base filename to add prefix to
         - `node_type`: the device.role
         
        :return: a prefix to add to the filename given
        :raise: ConfigurationError if self.role or node_type are unknown
        """
        if hasattr(self.parameters, IperfParametersEnum.udp):
            filename = "udp_" + filename
        else:
            filename = "tcp_" + filename
        if self.role == IperfCommandEnum.client:
            filename = self.base_filename + filename
            if node_type == BaseDeviceEnum.node:
                return "sent_from_node_" + filename
            elif node_type == BaseDeviceEnum.tpc:
                return "sent_to_node_" + filename
            else:
                raise IperfCommandError("Unknown device.role: '{0}'".format(node_type))
        elif self.role == IperfCommandEnum.server:
            if node_type == BaseDeviceEnum.node:
                return "received_by_node_" + filename
            elif node_type == BaseDeviceEnum.tpc:
                return "received_by_tpc_" + filename
            else:
                raise IperfCommandError("Unknown device.role: '{0}'".format(node_type))
        raise IperfCommandError("Unknown Iperf Role: '{0}'".format(self.role))
        return 

    @property
    def max_time(self):
        """
        :return: the maximum amount of time to run
        """
        if self._max_time is None:
            self._max_time = 0
            if hasattr(self.parameters, IperfCommandEnum.time):
                self._max_time = max(120, 1.5 * float(self.parameters.time.split()[-1]))
        return self._max_time
    
    def validate(self, line):
        """
        :param:

         - `line`: a line of output

        :raise: IperfError if an error is detected
        """
        #self.logger.debug("Validating: " + line)
        if "No route to host" in line:
            self.logger.error(line)
            raise IperfError("Unable to connect to host")
        elif "Connection refused" in line:
            self.logger.error(line)
            raise IperfError("Iperf server not running on remote host")
        elif "Address already in use" in line:
            self.logger.warning(line)
            #raise IperfError("Another server is already running.")
        elif "connect failed" in line:
            self.logger.error(line)
            raise IperfError("Client Unable to connect ({0})".format(line))
        return

    def abort(self):
        """
        :postcondition: self.stop is True      
        """
        self.stop = True
        return

    def send_line(self, output, line):
        """
        Sends the line to the pipeline output. Traps StopIteration exceptions
        """
        try:
            output.send(line)
        except StopIteration:
            self.logger.debug("End of file reached")
            pass
        return
        
    def run_daemon(self, device, filename, server=False):
        """
        Run the iperf command as a daemon, redirecting output to a file and detaching

        * This was specifically created for the ipad, probably won't work otherwise

        * The user of this method is responsible for getting the file from the device

        :param:

         - `device`: A device to issue the command on
         - `filename`: a base-name to use for the output file.

        :postcondition: self.last_filename is path to remote output file
        :postcondition: self.device = device (this is another ipad thin)
        """
        self.device = device
        filename = self.filename(filename, device.role)
        # the output is really a storage pipe, not a storage output
        self.last_filename = self.output.storage.timestamp(filename)
        #self.output.unset_emit()
        parameters = str(self.parameters) + " > " + self.last_filename
        self.logger.debug("Executing parameters: {0}".format(parameters))
        
        with device.connection.lock:
            self.logger.debug("Waiting for the connection lock")
            self.logger.info("running iperf {0}".format(parameters))
            output, error = device.connection.iperf(parameters)
            self.logger.info('Closing the connection to the device')
            # don't use connection.close(), it looks like you're running `sh close`
            device.connection._client.close()
            self.logger.debug("Out of the connection lock")

        self.running = True
        #file_output = self.output.open(filename=filename)
        #for line in readoutput.ValidatingOutput(output, self.validate):
        #    if len(line.strip()):
        #        self.logger.debug(line.rstrip(newline))
        #    self.send_line(file_output, line)
        #    
        #    if self.now() > abort_time:
        #        # We've run too long, something is wrong (abort path)
        #        self.send_line(end_of_file)
        #        self.abort = False
        #        self.running = False
        #        raise IperfError("Expected runtime: {0} Actual: {1} (aborting)".format(self.parameters.time,
        #                                                                               self.now() - start_time))
        #    if self.stop:
        #        # someone has asked us to stop (stop path)
        #        self.send_line(end_of_file)
        #        self.stop = False
        #        self.logger.debug("Aborting")
        #        break
        
        err = error.readline()
        
        if len(err):
            self.logger.debug(err)
        return

    def run(self, device, filename, server=False):
        """
        Run the iperf command and send to the output

        :param:

         - `device`: A device to issue the command on
         - `filename`: a base-name to use for the output file.

        :raise: IperfError if runtime is greater than self.parameters.time
        """
        filename = self.filename(filename, device.role)
        is_udp = hasattr(self.parameters, IperfCommandEnum.udp)
        self.output.unset_emit()        
        #if not server:
        #    if not is_udp:
        #        self.output.set_emit()
        #    else:
        #        self.output.unset_emit()
        #else:
        #    if is_udp:
        #        self.output.set_emit()
        #    else:
        #        self.output.unset_emit()
        #

        self.logger.debug("Executing parameters: {0}".format(self.parameters))
        
        with device.connection.lock:
            self.logger.debug("Waiting for the connection lock")
            self.logger.info("running iperf {0}".format(self.parameters))
            output, error = device.connection.iperf(str(self.parameters))
            self.logger.debug("Out of the connection lock")
        start_time = time.time()
        abort_time = start_time + self.max_time
        self.running = True
        newline = IperfCommandEnum.newline
        end_of_file = IperfCommandEnum.eof
        
        file_output = self.output.open(filename=filename)
        for line in readoutput.ValidatingOutput(output, self.validate):
            if len(line.strip()):
                self.logger.debug(line.rstrip(newline))
            self.send_line(file_output, line)
            
            if self.now() > abort_time:
                # We've run too long, something is wrong (abort path)
                self.send_line(end_of_file)
                self.abort = False
                self.running = False
                raise IperfError("Expected runtime: {0} Actual: {1} (aborting)".format(self.parameters.time,
                                                                                       self.now() - start_time))
            if self.stop:
                # someone has asked us to stop (stop path)
                self.send_line(end_of_file)
                self.stop = False
                self.logger.debug("Aborting")
                break
        
        self.running = False

        # checking stderr will raise an exception because we're always closing the connection
        #self.logger.debug("Checking stderr")
        #err = error.readline(timeout=1)
        #
        #if len(err):
        #    self.validate(err)
        return

    def start(self, device, filename, server=True):
        """
        This runs the iperf command in a thread so it won't block execution.
        
        :param:

         - `device`: device to issue the iperf command
         - `filename`: base filename to use for output file

        :postcondition: iperf command started in self.thread
        """
        if self.parameters.daemon is not None:
            run_method = self.run_daemon
        else:
            run_method = self.run
        self.thread = threading.Thread(target=run_method, name='IperfCommand',
                                       kwargs={'device':device,
                                               'filename':filename,
                                               'server':server})
        self.thread.daemon = True
        self.thread.start()
        return

    def __str__(self):
        return self.name

    def __call__(self, device, filename, server):
        """
        This is a pass-through to ``run`` to make it match the newer classes
    
        Run the iperf command and send to the output

        :param:

         - `device`: A device to issue the command on
         - `filename`: a base-name to use for the output file.

        :raise: IperfError if runtime is greater than self.parameters.time
        """
        return self.run(device, filename, server)
    
# end IperfCommand
@

The `run` Method
----------------

There are two parts to the `IperfCommand.run` method:

   #. Setup
   
   #. Traverse

Setup
~~~~~

The setup involves the following steps:

   #. Add tags to the filename to make it easier to identify::

       filename = self.filename(filename, device.role)

   #. Turn off the output pipeline's screen output so the parser can do it instead::

       self.output.unset_emit()

   #. Open an output file using the updated filename::

       file_output = self.output(filename = filename)

   #. Wait for the connection lock (in case others have the connection) and run the command::

       with device.connection.lock:
           output, error = device.connection.iperf(str(self.parameters))

   #. Calculate start and end times and set the current state to running::

       start_time = time()
       abort_time = start_time + self.max_time
       self.running = True

* The ``self.max_time`` property is used so that a different value can be returned depending on whethe this is a server of client.
       
Traverse
~~~~~~~~

The traversal of the output has three paths:

   #. The main path

   #. The abort (timeout) path

   #. The (external) stop path

The Main Path
+++++++++++++

The main path is a traversal of the output from the command call::

   for line in ValidatingOutput(output, self.validate):
       self.send_line(file_output, line)

The ``send_line`` method traps `StopIteration` exceptions which the would be raised when the output pipeline detects an end-of-file character.

The Abort Path
++++++++++++++

Sometimes devices will stop generating output without quitting and so the `standard-output` will raise a `timeout` forever without reaching an end-of-file character. To prevent this from blocking a timeout is calculated which takes precedence over the end-of-file if it is reached. This is only set for the client, since the server is normally run in a thread.

The abort path is implemented as an extension of the main path (it immediately follows the `send_line` call)::

    if self.now() > abort_time:
        self.send_line(end_of_file)
        raise IperfError("aborting")

This is an abbreviation, the actual error-message is longer. The reason for the ``now`` method is that in the case that this is a server we do not want to actually calculate a real time.

The Stop Path
+++++++++++++

The stop path is reached if an external agent has asked us to stop. Note that for servers if this call is made after all the output has been read then it will be stuck waiting for the next-line and will reach the stop only on the resumption of output. This is probably not the desired outcome. It would be better to kill the iperf process itself, otherwise you will have a condition where you are trying to consume all the output and then setting stop immediately between the last line read and before reaching the top of the loop again.

Experiments with sending control characters to standard-in seem to indicate that it will not kill the server. However, closing the connection will. 

..
    if self.stop:
        # someone has asked us to stop (stop path)
        self.send_line(end_of_file)
        self.stop = False
        self.logger.debug("Aborting")
        break
    
The Cleanup
-----------

After the standard output traversal is completed the `running` state is set to False and standard-error is checked.

.. warning:: If the `abort` or `stop` paths were taken, there is no guarantee that the standard-error is ready to be read. This needs to be made more robust.


The code::

    self.running = False    
    err = error.readline(timeout=1)        
    if len(err):
        self.validate(err)
    

Example Use::

   iperf_client = IperfCommand(client_parameters, output, IperfCommandEnum.client)
   iperf_server = IperfCommand(server_parameters, output, IperfCommandEnum.server)
   iperf_server.start(server_device, 'test_file')
   iperf_client(client_device, 'test_file')
   
Testing The Iperf Command
-------------------------

.. autosummary::
   :toctree: api

   TestIperfCommand.test_daemon
   TestIperfCommand.test_is_daemon
   TestIperfCommand.test_set_parameters

<<name='test_imports', echo=False>>=
# python standard library
import unittest
from threading import Lock
from StringIO import StringIO

# third-party
from mock import MagicMock

#ape
from apetools.parameters.iperf_udp_server_parameters import IperfUdpServerParameters
@

<<name='TestIperfCommand', echo=False>>=
class TestIperfCommand(unittest.TestCase):
    def setUp(self):
        return
    
    def test_daemon(self):
        """
        If the parameters.daemon is set, will the run_daemon be called?
        """
        parameters = IperfUdpServerParameters()
        parameters.daemon = True
        output = MagicMock()
        command = IperfCommand(parameters=parameters,
                               output=output,
                               role=IperfCommandEnum.server)
        filename = command.filename('test', BaseDeviceEnum.node)
        output.storage.timestamp.return_value = filename

        device = MagicMock()
        device.connection.lock = Lock()
        device.role = BaseDeviceEnum.node
        error = MagicMock()
        error.readline.return_value = ''
        device.connection.iperf.return_value = [""], error
        command.run_daemon(device, 'test', server=True)
        #command.start(device, 'test', server=True)

        device.connection._client.close.assert_called_with()
        device.connection.iperf.assert_called_with(str(parameters) + ' > ' + filename)
        self.assertEqual(command.last_filename, filename)
        return

    def test_is_daemon(self):
        """
        If the daemon parameter is set, does the command know it's a daemon?
        """
        parameters = IperfUdpServerParameters()
        parameters.daemon = True
        output = MagicMock()
        command = IperfCommand(parameters=parameters,
                               output=output,
                               role=IperfCommandEnum.server)

        self.assertTrue(command.is_daemon)
        return

    def test_set_parameters(self):
        """
        Does setting the parameters reset the is_daemon property?
        """
        parameters = IperfUdpServerParameters()
        parameters.daemon = True
        output = MagicMock()
        command = IperfCommand(parameters=parameters,
                               output=output,
                               role=IperfCommandEnum.server)

        self.assertTrue(command.is_daemon)
        parameters._daemon = None
        command.parameters = parameters
        self.assertIsNone(command._is_daemon)
        self.assertFalse(command.is_daemon)
        return
@


<%
for case in (TestIperfCommand, ):
    suite = unittest.TestLoader().loadTestsFromTestCase(case)    
    unittest.TextTestRunner(verbosity=2).run(suite)
%>



