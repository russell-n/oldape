[TEST]
# these are the parts that make up an experiment
#
# setup component options:
#   - watchlogs
#   - oscillate
#   - rotate
#   - poweron
#   - timetorecovery
#   - dumpdevicestate
# Test Execution Component Options:
#   - iperf
# Teardown Options:
#   - oscillatestop
#   - poweroff
# Anywhere Component Options:
#   - sleep
operation_setup = watchlogs,oscillate
setup_test = poweron,timetorecovery,dumpdevicestate
execute_test = iperf
#teardown_test = 
operation_teardown = oscillatestop

# this will be used as the sub-folder base name
# If there is a {t} in it a timestamp will go there
output_folder = tester_{t}

# This is the number of times to repeat the experiment
repeat = 1

# This is a tag to insert into the logs to make finding the start and stop of tests easier
tag = APETest

# The `recovery_time` is how much time the system waits between changes to the system
# You should leave at least some time, since we are running things on different systems
# The actual amount you need depends on the systems
# If you leave this out it defaults to 1 second
# As with other 'times' you can give it units or it will default to seconds
recovery_time = 1 Second

# Users have asked that ctrl-c be allowed to kill the program right away without waiting for cleanup
# Those same users asked that all data be there even though they are forcing a close
# There is no free lunch. Set no_cleanup to True and the program will exit immediately
# but you will have to manually kill and cleanup any remote processes (like the `oscillate`)
#no_cleanup = True

[SLEEP]
# this sleeps so that you can insert time for commands that might create race-conditions
time = 1 Hour

[OSCILLATE]
# The information needed is for an ssh-connection to the Oscillation Master
hostname = phoridfly
username = root
#password

# if block is set to True, wait for the start of a new rotation
block = True
#arc = 360
#velocity = 6
#port = /dev/ttyACM0
#timeout = 45
#noise_start = 180
#noise_end = 270
#start = 270
#anti_adjustment = 0
#clockwise_adjustement = -0.25

[POWERON]
#e2000 = hostname:synaxxx,switch:5, sleep:5
wndr3700 = hostname:synaxxx,switch:1, sleep:5

[NODES]
# The format for a node:
# <identifier> = hostname:<ip or name>,login:<user login>,operating_system:<OS>,
#                connection:<type>,test_interface:<interface name>
# The connection type is one of: ssh, adbshellssh, local, telnet, adblocal, serial
# The operating system is one of: linux, android, windows
# If other options are neede by the connection, add with <name>:<value> format
# The only extra option at the moment is password:<login password>
tate = hostname:phoridfly,login:root,operating_system:android,connection:adbshellssh,test_interface:wlan0

[APCONNECT]
# This is for devices (nodes) that can connect based on ssid to an AP
# ssids = <comma-separated list of ssids>
ssids=wndr3700v3_5

[ROTATE]
# this is for a remote turn-table
# the angles format is angles=<comma-separated list of <angle in degrees>:<angular velocity>
# The <angular velocity> is optional (e.g. angles=0,45,90 or angles=0:100, 45:50, 90)
hostname = phoridfly
username = root
#password = 
angles = 180,0:50,45,90:100,    270:10

[TRAFFIC_PC]
# currently this only takes the first tpc node given
# the format is the same for the NODES
tpc = operating_system:linux,connection:ssh,test_interface:eth3,hostname:lancet,login:allion

[WATCHLOGS]
# The left-hand-side value is only to make them unique (so they can be anything)
# The type is what decides their type
# The remaining parameters depend on the type
logcat = type:adblogcat, buffers:all
kmsg = type:logcat,command:cat,arguments:/proc/kmsg
battery = type:battery,name:/sys/class/power_supply/bq27541/uevent
proc = type:procnetdev,interface:wlan0
device = type:device

[IPERF]
# `directions` determines what address is passed to the client flag.
# Only the first letter is checked (except for `t` as it's ambiguous) so you can
# use whatever mnemonics help (e.g. 'receive' will only be read as 'r')
# Traffic from the TPC -> DUT can start with one of:
#    to, d, r  (e.g to_dut, downlink, receive|rx)
# Traffic from the DUT -> TPC can start with one of:
#    f, u, tr, tx, s  (e.g. from_dut, uplink, transmit | tx, send)
# this is a plural property so you can have more than one if you use comma-separation (e.g. 'f, t')
directions = from_dut, to_dut

# The names of the options below should conform to the long-format options
# e.g. -P would be `parallel`

# Although not all of them are listed below you should be able to pass in any valid iperf option
# No defaults are assumed in the code itself so if you leave off all other options then
# Iperf's defaults will be used

# The screen output assumes that there is more than one thread being used
# If only one thread is used it will still run but there won't be any screen output as it proceeds

# this is the -t flag: (n) [seconds | minutes | hours | days] (defaults to seconds)
time = 10 Seconds

# **** the following are Allion's defaults ****
protocol = tcp

# tcp window size
# this is the -w flag: n[KM]
window = 256K

# buffer-length
#this is the -l flag: (n)
length = 1470

# Parallel Threads
# This is the -P flag: (n)
parallel = 4

# time between data reports
# this is the -i flag: (n) 
interval = 1

# Data Units
# this is the -f flag: b|k|m|K|M
format = b

#reportstyle = c