{'CLASSES': {'apetools.affectors.apconnect.APConnect': {'bases': ['apetools.baseclass.BaseClass'],
                                                        'constructor': ['nodes'],
                                                        'docstring': '\n    A class to connect a device to an AP\n    ',
                                                        'methods': [('__call__',
                                                                     ['parameters'],
                                                                     '\n        :param:\n\n         - `parameters`: a named tuple with `nodes.parameters` and `ssids.parameters` attributes\n         ')],
                                                        'properties': ['nodes']},
             'apetools.affectors.elexol.elexol.elexol24': {'bases': [],
                                                           'constructor': ['IP',
                                                                           'clear=True',
                                                                           'retry=5',
                                                                           "ports='ABC'",
                                                                           'pins=8'],
                                                           'docstring': '\n    A class for UDP socket communication with the Elexol24 Ethernet I/O board. \n    \n    The class must be instantiated using the IP address as an argument, for example::\n        a = elexol.elexol24("192.168.20.68")\n        \n    The UDP port is set at 2424 (the Elexol default).  After connecting with the device all pins are set to output mode and cleared (set to zero).\n    The most useful methods are probably ``setpin24()``, ``setxpin24()``, and ``getpin24()``, as they don\'t require any messing with the ports on the Elexol board.\n     \n    \n    ',
                                                           'methods': [('tryrecv',
                                                                        ['message'],
                                                                        ''),
                                                                       ('trysend',
                                                                        ['message'],
                                                                        ''),
                                                                       ('setportdirection',
                                                                        ['port', 'direction'],
                                                                        "\n        Set the desired I/O pin direction for a particular Elexol24 port\n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C' to indicate the desired port.\n            - 'direction' : A byte containing binary pin direction settings for that particular port, where binary 0 is input and binary 1 is output.  ex: setting direction to 255 will set all pins to '1' and thus set the entire port to input.\n            \n        "),
                                                                       ('setport',
                                                                        ['port', 'value'],
                                                                        " \n        Writes values to a single port\n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C' to indicate desired port.\n            - 'value' : A byte containing binary values to write to the port.  ex: 255 will write all 1's to the port.\n        "),
                                                                       ('getport',
                                                                        ['port'],
                                                                        "\n        Gets current values on a particular port.\n        \n        :param: \n            - 'port' : A string containing either 'A', 'B', or 'C'.\n        \n        :rtype: Byte\n        :return: A byte containing the current status of the desired port.\n        \n        "),
                                                                       ('clearport',
                                                                        ['port'],
                                                                        "\n        Clears all values on given port\n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C'.\n            \n        "),
                                                                       ('clearall',
                                                                        [],
                                                                        ' \n        Clears all pins on the device.\n        '),
                                                                       ('setpin',
                                                                        ['port', 'pin'],
                                                                        " \n        Sets an individual pin value, but leaves all other pins untouched.\n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C'.\n            - 'pin' : A zero-indexed value specifying the desired pin. Valid range is 0-7.\n\n        :raise: AssertionError if pin is out of range.\n        "),
                                                                       ('setxpin',
                                                                        ['port', 'pin'],
                                                                        "\n        Sets an individual pin on a specified port, and clears the rest.\n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C'.\n            - 'pin' : A zero-indexed value specifying the desired pin. Valid range is 0-7.\n            \n        "),
                                                                       ('getpin',
                                                                        ['port', 'pin'],
                                                                        "\n        Gets the status of an individual pin on a specified port. \n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C'.\n            - 'pin' : A zero-indexed value specifying the desired pin. Valid range is 0-7.\n        \n        :rtype: Boolean\n        :return: The value of the specified pin.\n        \n        "),
                                                                       ('clearpin',
                                                                        ['port', 'pin'],
                                                                        " \n        Clears an individual pin on a specified port.\n        \n        :param:\n            - 'port' : A string containing either 'A', 'B', or 'C'.\n            - 'pin' : A zero-indexed value specifying the desired pin. Valid range is 0-7.          \n        "),
                                                                       ('setpin24',
                                                                        ['pin'],
                                                                        "\n        Sets an individual pin across the entire device, and leaves all other untouched.\n        \n        :param:\n            - 'pin' : A zero-indexed value specifying the desired pin.  Valid range is 0-23\n        "),
                                                                       ('setxpin24',
                                                                        ['pin'],
                                                                        '\n        Sets an individual pin across the entire device. All other pins are cleared.\n        \n        :param:\n            - `pin` : A zero-indexed value specifying the desired pin. Valid range is 0-23.\n\n        :raise: AssertionError if pin out of range.\n        '),
                                                                       ('getpin24',
                                                                        ['pin'],
                                                                        "\n        Gets the value of an individual pin across the entire device.\n        \n        :param:\n            - 'pin' : A zero-indexed value specifying the desired pin. Valid range is 0-23.\n        \n        :rtype: Boolean\n        :return: The value of the specified pin.\n\n        :raise: AssertionError if ping out of range\n        "),
                                                                       ('clearpin24',
                                                                        ['pin'],
                                                                        '\n        Clears an individual pin across the entire device, leaving all other untouched.\n        \n        :param:\n            - `pin` : A zero-indexed value specifying the desired pin. Valid range is 0-23.\n\n        :raise: AssertionError if `pin` out of range.\n        '),
                                                                       ('close',
                                                                        [],
                                                                        '\n        Closes open sockets. Automatically called by destructor.\n        '),
                                                                       ('__del__', [], '')],
                                                           'properties': ['UDP_PORT',
                                                                          'HOST',
                                                                          'closed',
                                                                          'IP',
                                                                          'MAX_RETRY',
                                                                          'ports',
                                                                          'pins',
                                                                          'clear',
                                                                          '_socket',
                                                                          'socket']},
             'apetools.affectors.elexol.errors.FaucetteError': {'bases': ['apetools.affectors.elexol.errors.ConfigurationError'],
                                                                'constructor': ["message=''"],
                                                                'docstring': '\n    A FaucetteError is raised if a configuration error is detected\n    ',
                                                                'methods': [('__str__', [], '')],
                                                                'properties': ['message']},
             'apetools.affectors.elexol.naxxx.Naxxx': {'bases': ['apetools.baseclass.BaseClass'],
                                                       'constructor': ['hostname',
                                                                       'clear=False',
                                                                       'retries=5'],
                                                       'docstring': '\n    An adapter to the nps to reduce the interface.\n    \n    ',
                                                       'methods': [('_clean_outlets',
                                                                    ['outlets'],
                                                                    '\n        The option to pass in a single castable object allows the caller\n        to pass in a generic parameters object.\n        \n        :param:\n\n         - `outlets`: List, Tuple, or something castable to an int\n         \n        :return: list of integers\n        '),
                                                                   ('run',
                                                                    ['outlets'],
                                                                    "\n        For each id in outlets, turn on the given outlet\n        Turns off all outlets not in outlets.\n\n        :param:\n\n         - `outlets`: ID of power switch to turn on. Or list of ID's.\n\n        :raise:\n\n         - `NaxxxError`: If connection (socket) times-out.\n         - `FaucetteError`: If there is a problem with the outlet identifiers.\n\n        :postcondition: Only switches in `outlets` are on.\n        ")],
                                                       'properties': ['hostname',
                                                                      'clear',
                                                                      'retries',
                                                                      '_naxxx',
                                                                      'naxxx']},
             'apetools.affectors.elexol.naxxx.NaxxxError': {'bases': ['apetools.affectors.elexol.naxxx.AffectorError'],
                                                            'constructor': [],
                                                            'docstring': '\n    A NaxxxError is raised if there is a problem with the Naxxx\n    ',
                                                            'methods': [],
                                                            'properties': []},
             'apetools.affectors.elexol.networkedpowersupply.NetworkedPowerSupply': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                     'constructor': ['IP',
                                                                                                     'clear=True',
                                                                                                     'retry=5',
                                                                                                     "ports='ABC'"],
                                                                                     'docstring': "\n    This class provides access to the Network Power Supply (NPS). \n    It prevents electrically unsafe use.\n\n    The most important commands to use are:\n\n       * `TurnOn()`\n       * `TurnOff()`\n       * `TurnOffList()`\n       * `TurnOnList()`\n\n    * `TurnOn/Off()`: specify which AC port to turn on/off via integer identifier\n    * `TurnOff/OnList()`: accepts a list of devices to turn on or off. \n    * `TurnOnList()`: keyword 'clear' indicates whether to disable devices already on.\n\n    Error checking is done to ensure that devices turn on/off as expected.\n    ",
                                                                                     'methods': [('set_port_status',
                                                                                                  [],
                                                                                                  "\n        sets current ON/OFF status for all pins from elexol.\n        \n        Example retrieval of status::\n\n            status = np.port_status[port][pin]\n            \n            for example,\n            \n            np = nps.nps()\n            np.set_port_status()\n            if np.port_status['B'][4]:\n                print 'Port B4 is on!'\n \n        See `convert_to_port_pin()` to convert pin (i.e. 23) to  port,pin (i.e., 'C', 7)\n\n        :postcondition: `self.port_status` dict contains port,pin statuses\n        "),
                                                                                                 ('switch_is_on',
                                                                                                  ['switch'],
                                                                                                  '\n        :param:\n\n         - `switch`: The switch ID (e.g. 16 for port C, pin 0)\n        \n        :return: True if pin is on\n\n        :raise: FaucetteError if switch ID is invalid.\n        '),
                                                                                                 ('switch_is_off',
                                                                                                  ['switch'],
                                                                                                  '\n        :param:\n\n         - `switch`: The switch ID\n        :return: True if pin is off\n        '),
                                                                                                 ('switches_on',
                                                                                                  [],
                                                                                                  '\n        Queries Elexol to determine how many switches are currently on.\n\n        :rtype: int\n        :return: Number of switches currently ON.\n        '),
                                                                                                 ('turn_on_switches',
                                                                                                  ['switches',
                                                                                                   'turn_others_off=False'],
                                                                                                  '\n        Turn on all switches whose numbers are included in a provided list.\n\n        :param:\n\n         - `switches`: List containing integer switch numbers                \n         - `turn_others_off`  : *True* turn *Off* all others.*False* leave *On*.\n\n        :postcondition:\n\n        - If `clear`, all switches not in `switches` are off.\n        - All switches in `outlets` are on.\n        '),
                                                                                                 ('turn_off_switches',
                                                                                                  ['off_list'],
                                                                                                  '\n        Turn off all devices whose numbers are included in a provided list.\n\n        :param:\n\n        - `off_list` : List that contains the integer switch numbers\n\n        :postcondition: All switches in `off_list` are off.\n        '),
                                                                                                 ('toggle_switch',
                                                                                                  ['switch',
                                                                                                   'on_or_off'],
                                                                                                  '\n        Turns switch on or off based on `on_or_off` value.\n\n        :param:\n\n         - `switch`: Switch number to turn on.\n         - `on_or_off`: ON turns switch on, OFF turns switch off\n         \n        :raise: FaucetteError if invalid switch, failed change, too many switches on.\n        '),
                                                                                                 ('turn_on',
                                                                                                  ['switch'],
                                                                                                  '\n        Turn *on* switch \n\n        :param:\n         - `switch` : Switch number to turn on\n\n        :postcondition: switch is on.\n        :raise: FaucetteError if switch out of bounds, too many on, or unable to turn on.\n        '),
                                                                                                 ('turn_off',
                                                                                                  ['switch'],
                                                                                                  '\n        Turn *off* switch listed by number\n\n        :param:\n        \n         - `switch` : switch number to turn off\n\n        :postcondition: switch identified by `number` is off.\n\n        :raise: FaucetteError if switch out of bounds or unable to turn off.\n        '),
                                                                                                 ('all_off_except',
                                                                                                  ['exceptions=[]'],
                                                                                                  '\n        Turns off all devices on the Elexol NPS not listed in `exception` list\n\n        :param: \n        - `exceptions` : list of device numbers (int) to leave on. (Default=all off))\n\n        :postcondition: All devices not in `exception` are turned off.\n        '),
                                                                                                 ('__str__',
                                                                                                  [],
                                                                                                  '')],
                                                                                     'properties': ['IP',
                                                                                                    'clear',
                                                                                                    'retry',
                                                                                                    'ports',
                                                                                                    '_elexol',
                                                                                                    '_port_status',
                                                                                                    '_attempts',
                                                                                                    '_pins',
                                                                                                    '_pins_per_port',
                                                                                                    '_check_switch_is',
                                                                                                    '_turn_switch',
                                                                                                    'turn_switch',
                                                                                                    'check_switch_is',
                                                                                                    'attempts',
                                                                                                    'pins',
                                                                                                    'pins_per_port',
                                                                                                    'elexol',
                                                                                                    'port_status']},
             'apetools.affectors.ners.NeRS': {'bases': ['apetools.baseclass.BaseClass'],
                                              'constructor': ['nodes'],
                                              'docstring': '\n    A Networked Radio Switch to enable and disable radios over the network.\n    ',
                                              'methods': [('__call__',
                                                           ['parameters=None'],
                                                           '\n        :param:\n\n         - `parameters`: namedtuple with `.ners.parameters` List of addresses (node-keys) to turn on.\n\n        :postconditions:\n\n         - `enable_wifi` called on all nodes with address in addresses\n         - `disable_wifi` called on all nodes with an address not in addresses\n        ')],
                                              'properties': ['nodes']},
             'apetools.affectors.rotator.RateTable.RateTable': {'bases': ['object'],
                                                                'constructor': [],
                                                                'docstring': '\n    Represents the z-axis::\n\n    ',
                                                                'methods': [('setPosition',
                                                                             ['position',
                                                                              'direction=0',
                                                                              'velocity=0.0'],
                                                                             '\n        Sets the position of the axis in degrees.\n\n        Use::\n\n           r = RateTable.RateTable()\n           r.zAxis.setPosition(<angle>, 0, <velocity>)\n\n        :param:\n\n         - `position`: Degrees of rotation relative to the position at powering on (0)\n         - `direction`: Always `0`\n         - `velocity`: the rate of rotation\n        :C++ signature : void setPosition(AxisBridge {lvalue},float [,unsigned char [,float]])\n        ')],
                                                                'properties': []},
             'apetools.affectors.rotator.rotator.Rotator': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': [],
                                                            'docstring': '\n    A reduction of the RateTable class to a single call.\n    ',
                                                            'methods': [('__call__',
                                                                         ['angle',
                                                                          'velocity=0'],
                                                                         '\n        :param:\n\n         - `angle`: degrees from the home position to rotate to\n         - `velocity`: velocity of rotation\n        ')],
                                                            'properties': ['_table', 'table']},
             'apetools.affectors.synaxxx.synaxxx.Synaxxx': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': ['host',
                                                                            'port=23',
                                                                            'timeout=1',
                                                                            'sleep=0',
                                                                            'debug=False'],
                                                            'docstring': '\n    A class to control the Synaxxx\n    ',
                                                            'methods': [('exec_command',
                                                                         ['command',
                                                                          'attempts=2'],
                                                                         '\n        :param:\n\n         - `command`: a string to send to the device\n         - `attempts`: number of times to try (the server tends to die)\n\n        :postcondition: command string sent to the device\n        :yield: line of output\n        '),
                                                                        ('lines',
                                                                         [],
                                                                         '\n        :yield: each line of output\n        '),
                                                                        ('validate',
                                                                         ['line', 'command'],
                                                                         '\n        Checks the line for errors.\n        '),
                                                                        ('all_off',
                                                                         [],
                                                                         '\n        :postcondition: all outlets turned off\n        '),
                                                                        ('all_on',
                                                                         [],
                                                                         '\n        :postcondition: all outlets turned off\n        '),
                                                                        ('turn_on',
                                                                         ['switch'],
                                                                         '\n        :param:\n\n         - `switch`: a switch identifier\n        '),
                                                                        ('__call__',
                                                                         ['switches=None'],
                                                                         '\n        :param:\n\n         - `switches`: a list of switches (integers)\n\n        :postcondition: switches in list on, all others off, self.close called\n        '),
                                                                        ('increment_sleep',
                                                                         [],
                                                                         '\n        :postcondition: sleep increased by one second\n        '),
                                                                        ('show_status',
                                                                         [],
                                                                         '\n        print switch states to stdout\n        '),
                                                                        ('close',
                                                                         [],
                                                                         '\n        :postcondition: connection closed, client deleted\n        ')],
                                                            'properties': ['host',
                                                                           'port',
                                                                           'timeout',
                                                                           'sleep',
                                                                           'debug',
                                                                           '_client',
                                                                           '_status',
                                                                           '_sleeper',
                                                                           'sleeper',
                                                                           'client',
                                                                           'status']},
             'apetools.affectors.synaxxx.synaxxx.SynaxxxError': {'bases': ['apetools.commons.errors.CommandError'],
                                                                 'constructor': [],
                                                                 'docstring': "\n    An error to raise if a command doesn't execute properly.\n    ",
                                                                 'methods': [],
                                                                 'properties': []},
             'apetools.baseclass.BaseClass': {'bases': ['object'],
                                              'constructor': [],
                                              'docstring': '\n    This class holds the minimum common features.\n    ',
                                              'methods': [],
                                              'properties': ['_logger', 'logger']},
             'apetools.builders.builder.Builder': {'bases': ['apetools.baseclass.BaseClass'],
                                                   'constructor': ['maps', '*args', '**kwargs'],
                                                   'docstring': '\n    A builder builds objects\n    ',
                                                   'methods': [('parameters',
                                                                ['new_parameters'],
                                                                '\n        :param:\n\n         - `new_parameters`: a list of parameter named tuples\n\n        :postcondition: self.parameters = new_parameters\n        '),
                                                               ('operation_setup_builder',
                                                                ['config_map=None',
                                                                 'parameters=None'],
                                                                '\n        :return: builder for the operation\n        '),
                                                               ('operation_teardown_builder',
                                                                ['config_map=None',
                                                                 'parameters=None'],
                                                                '\n        :return: builder for the operation teardown\n        '),
                                                               ('setup_test_builder',
                                                                ['config_map=None',
                                                                 'parameters=None'],
                                                                '\n        :return: builder for the test setup\n        '),
                                                               ('execute_test_builder',
                                                                ['config_map=None',
                                                                 'parameters=None'],
                                                                '\n        :return: builder for the test executor\n        '),
                                                               ('teardown_test_builder',
                                                                ['config_map=None',
                                                                 'parameters=None'],
                                                                '\n        :return: builder for the test teardown\n        '),
                                                               ('reset',
                                                                [],
                                                                '\n        :postcondition: parameters reset to None\n        ')],
                                                   'properties': ['maps',
                                                                  '_repetitions',
                                                                  '_parameters',
                                                                  '_operators',
                                                                  '_hortator',
                                                                  '_tpc_device',
                                                                  '_storage',
                                                                  '_lock',
                                                                  '_nodes',
                                                                  '_thread_nodes',
                                                                  '_semaphore',
                                                                  '_saved_semaphore',
                                                                  '_events',
                                                                  '_operation_setup_builder',
                                                                  '_operation_teardown_builder',
                                                                  '_setup_test_builder',
                                                                  '_execute_test_builder',
                                                                  '_teardown_test_builder',
                                                                  'saved_semaphore',
                                                                  'semaphore',
                                                                  'events',
                                                                  'parameters',
                                                                  'repetitions',
                                                                  'nodes',
                                                                  'thread_nodes',
                                                                  'operators',
                                                                  'current_config',
                                                                  'hortator',
                                                                  'tpc_device',
                                                                  'storage']},
             'apetools.builders.builder.BuilderEnum': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '\n    A class to hold constants for the builder\n    ',
                                                       'methods': [],
                                                       'properties': ['__slots__', 'repetition']},
             'apetools.builders.builder.MagicMock': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__call__', [], ''),
                                                                 ('total_time', [], '')],
                                                     'properties': []},
             'apetools.builders.subbuilders.affectorbuilder.NaxxxAffectorBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                    'constructor': ['parameters'],
                                                                                    'docstring': '\n    An AffectorBuilder builds affectors\n    ',
                                                                                    'methods': [],
                                                                                    'properties': ['parameters',
                                                                                                   '_affector',
                                                                                                   'affector']},
             'apetools.builders.subbuilders.apconnectbuilder.APConnectBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                 'constructor': ['*args',
                                                                                                 '**kwargs'],
                                                                                 'docstring': '\n    A class to build AP Connectors\n    ',
                                                                                 'methods': [],
                                                                                 'properties': ['_ssids',
                                                                                                'ssids',
                                                                                                'product',
                                                                                                '_product',
                                                                                                'parameters',
                                                                                                '_parameters']},
             'apetools.builders.subbuilders.basedevicebuilder.BaseDeviceBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                   'constructor': ['connection',
                                                                                                   'role',
                                                                                                   'interface=None',
                                                                                                   'address=None',
                                                                                                   'csv=False'],
                                                                                   'docstring': '\n    A template-class for device-builders\n    ',
                                                                                   'methods': [('device',
                                                                                                [],
                                                                                                '\n        :return: the constructed device\n        ')],
                                                                                   'properties': ['__metaclass__',
                                                                                                  '_logger',
                                                                                                  'connection',
                                                                                                  'role',
                                                                                                  'interface',
                                                                                                  'address',
                                                                                                  'csv',
                                                                                                  '_device']},
             'apetools.builders.subbuilders.baseoperationbuilder.BaseOperationBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                         'constructor': ['master',
                                                                                                         'config_map',
                                                                                                         'previous_parameters'],
                                                                                         'docstring': '\n    A class to build Test Setups\n    ',
                                                                                         'methods': [('config_option',
                                                                                                      [],
                                                                                                      '\n        :return: Config file option corresponding to the operation\n        '),
                                                                                                     ('operation',
                                                                                                      [],
                                                                                                      '\n        :return: class definition for the product\n        ')],
                                                                                         'properties': ['__metaclass__',
                                                                                                        'master',
                                                                                                        'config_map',
                                                                                                        'previous_parameters',
                                                                                                        '_logger',
                                                                                                        '_plans',
                                                                                                        '_builders',
                                                                                                        '_products',
                                                                                                        '_tool_builder',
                                                                                                        '_operation',
                                                                                                        '_config_option',
                                                                                                        '_product',
                                                                                                        '_parameters',
                                                                                                        'tool_builder',
                                                                                                        'plans',
                                                                                                        'builders',
                                                                                                        'products',
                                                                                                        'product',
                                                                                                        'parameters']},
             'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                               'constructor': ['master',
                                                                                               'config_map',
                                                                                               'previous_parameters'],
                                                                               'docstring': '\n    A Base class to build tool-builders around.\n    ',
                                                                               'methods': [('product',
                                                                                            [],
                                                                                            '\n        :return: the built tool-object\n        '),
                                                                                           ('parameters',
                                                                                            [],
                                                                                            '\n        :return: list of namedtuples - each needs a `name` property to identify it\n        ')],
                                                                               'properties': ['__metaclass__',
                                                                                              '_logger',
                                                                                              'master',
                                                                                              'config_map',
                                                                                              'previous_parameters',
                                                                                              '_product',
                                                                                              '_parameters']},
             'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilderError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                    'constructor': [],
                                                                                    'docstring': "\n    An error to raise if there's something wrong with the user's configuration\n    ",
                                                                                    'methods': [],
                                                                                    'properties': []},
             'apetools.builders.subbuilders.builderenums.BuilderParameterEnums': {'bases': ['object'],
                                                                                  'constructor': [],
                                                                                  'docstring': '\n    A holder of constants for parameter names\n    ',
                                                                                  'methods': [],
                                                                                  'properties': ['__slots__',
                                                                                                 'nodes',
                                                                                                 'ssids',
                                                                                                 'iperf_directions']},
             'apetools.builders.subbuilders.commandwatchbuilder.CommandWatchBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                       'constructor': ['*args',
                                                                                                       '**kwargs'],
                                                                                       'docstring': '\n    The Command Watch Builder builds a command watcher\n    ',
                                                                                       'methods': [],
                                                                                       'properties': ['parameters',
                                                                                                      'product',
                                                                                                      '_product']},
             'apetools.builders.subbuilders.connectionbuilder.AdbShellConnectionBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                           'constructor': ['parameters=None'],
                                                                                           'docstring': '\n    Use this to get an adb shell connection\n    ',
                                                                                           'methods': [],
                                                                                           'properties': ['_connection',
                                                                                                          'connection']},
             'apetools.builders.subbuilders.connectionbuilder.AdbShellSshConnectionBuilder': {'bases': ['apetools.builders.subbuilders.connectionbuilder.SSHConnectionBuilder'],
                                                                                              'constructor': ['*args',
                                                                                                              '**kwargs'],
                                                                                              'docstring': '\n    A class to build an adb-shell connection over ssh\n    ',
                                                                                              'methods': [],
                                                                                              'properties': ['connection',
                                                                                                             '_connection']},
             'apetools.builders.subbuilders.connectionbuilder.ConnectionBuilderTypes': {'bases': ['object'],
                                                                                        'constructor': [],
                                                                                        'docstring': '',
                                                                                        'methods': [],
                                                                                        'properties': ['__slots__',
                                                                                                       'ssh',
                                                                                                       'adbshellssh',
                                                                                                       'adbshell']},
             'apetools.builders.subbuilders.connectionbuilder.SSHConnectionBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                      'constructor': ['parameters'],
                                                                                      'docstring': '\n    Use this to get an ssh connection\n    ',
                                                                                      'methods': [],
                                                                                      'properties': ['_logger',
                                                                                                     'parameters',
                                                                                                     '_hostname',
                                                                                                     '_username',
                                                                                                     '_password',
                                                                                                     '_connection',
                                                                                                     '_operating_system',
                                                                                                     'operating_system',
                                                                                                     'hostname',
                                                                                                     'username',
                                                                                                     'password',
                                                                                                     'connection']},
             'apetools.builders.subbuilders.devicebuilder.AndroidDeviceBuilder': {'bases': ['basedevicebuilder.BaseDeviceBuilder'],
                                                                                  'constructor': ['*args',
                                                                                                  '**kwargs'],
                                                                                  'docstring': '\n    A Device Builder builds Android devices\n    ',
                                                                                  'methods': [],
                                                                                  'properties': ['device',
                                                                                                 '_device']},
             'apetools.builders.subbuilders.devicebuilder.DeviceBuilderTypes': {'bases': ['object'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [],
                                                                                'properties': ['__slots__',
                                                                                               'windows',
                                                                                               'linux',
                                                                                               'android']},
             'apetools.builders.subbuilders.devicebuilder.LinuxDeviceBuilder': {'bases': ['basedevicebuilder.BaseDeviceBuilder'],
                                                                                'constructor': ['*args',
                                                                                                '**kwargs'],
                                                                                'docstring': '\n    A Device Builder for Linux Devices\n    ',
                                                                                'methods': [],
                                                                                'properties': ['device',
                                                                                               '_device']},
             'apetools.builders.subbuilders.devicebuilder.WindowsDeviceBuilder': {'bases': ['basedevicebuilder.BaseDeviceBuilder'],
                                                                                  'constructor': ['*args',
                                                                                                  '**kwargs'],
                                                                                  'docstring': '\n    A Device Builder for Windows Devices\n    ',
                                                                                  'methods': [],
                                                                                  'properties': ['device',
                                                                                                 '_device']},
             'apetools.builders.subbuilders.dumpdevicestatebuilder.DumpDeviceStateBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                             'constructor': ['target=None',
                                                                                                             '*args',
                                                                                                             '**kwargs'],
                                                                                             'docstring': '\n    A class to build device-state dumpers\n    ',
                                                                                             'methods': [],
                                                                                             'properties': ['target',
                                                                                                            'product',
                                                                                                            '_product',
                                                                                                            'parameters',
                                                                                                            '_parameters']},
             'apetools.builders.subbuilders.dumpdevicestatebuilder.DumpDeviceStateBuilderEnum': {'bases': ['object'],
                                                                                                 'constructor': [],
                                                                                                 'docstring': '',
                                                                                                 'methods': [],
                                                                                                 'properties': ['__slots__',
                                                                                                                'name']},
             'apetools.builders.subbuilders.enums.SubBuilderEnums': {'bases': ['object'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['__slots__',
                                                                                    'nodes',
                                                                                    'ssids']},
             'apetools.builders.subbuilders.executetestbuilder.ExecuteTestBuilder': {'bases': ['baseoperationbuilder.BaseOperationBuilder'],
                                                                                     'constructor': ['*args',
                                                                                                     '**kwargs'],
                                                                                     'docstring': '\n    A class to build execute test Operations\n    ',
                                                                                     'methods': [],
                                                                                     'properties': ['config_option',
                                                                                                    '_config_option',
                                                                                                    'operation',
                                                                                                    '_operation']},
             'apetools.builders.subbuilders.iperfcommandbuilder.IperfCommandBuilder': {'bases': ['object'],
                                                                                       'constructor': ['config_map'],
                                                                                       'docstring': '\n    A builder of IperfCommands\n    ',
                                                                                       'methods': [],
                                                                                       'properties': ['config_map',
                                                                                                      '_parameters',
                                                                                                      '_client_command',
                                                                                                      '_server_command',
                                                                                                      '_filename',
                                                                                                      '_output',
                                                                                                      'filename',
                                                                                                      'output',
                                                                                                      'parameters',
                                                                                                      'client_command',
                                                                                                      'server_command']},
             'apetools.builders.subbuilders.iperfparameterbuilders.IperfParametersBuilder': {'bases': ['object'],
                                                                                             'constructor': ['config_map'],
                                                                                             'docstring': '\n    A builder of IperfParameters\n    ',
                                                                                             'methods': [],
                                                                                             'properties': ['config_map',
                                                                                                            '_client_parameters',
                                                                                                            '_server_parameters',
                                                                                                            '_protocol',
                                                                                                            '_options',
                                                                                                            'options',
                                                                                                            'protocol',
                                                                                                            'client_parameters',
                                                                                                            'server_parameters']},
             'apetools.builders.subbuilders.iperfparameterbuilders.IperfParametersError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                           'constructor': [],
                                                                                           'docstring': '\n    An exception to raise for invalid parameters\n    ',
                                                                                           'methods': [],
                                                                                           'properties': []},
             'apetools.builders.subbuilders.iperfsessionbuilder.IperfSessionBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                       'constructor': ['*args',
                                                                                                       '**kwargs'],
                                                                                       'docstring': '\n    A class to build an iperf session\n    ',
                                                                                       'methods': [],
                                                                                       'properties': ['_test',
                                                                                                      '_directions',
                                                                                                      '_filename',
                                                                                                      'filename',
                                                                                                      'test',
                                                                                                      'directions',
                                                                                                      'product',
                                                                                                      '_product',
                                                                                                      'parameters',
                                                                                                      '_parameters']},
             'apetools.builders.subbuilders.iperfsessionbuilder.IperfSessionBuilderError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                            'constructor': [],
                                                                                            'docstring': '\n    An error to raise if the config file has an error\n    ',
                                                                                            'methods': [],
                                                                                            'properties': []},
             'apetools.builders.subbuilders.iperftestbuilder.IperfTestBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                 'constructor': ['config_map',
                                                                                                 'events=None'],
                                                                                 'docstring': '\n    A builder of iperf tests\n    ',
                                                                                 'methods': [],
                                                                                 'properties': ['config_map',
                                                                                                'events',
                                                                                                '_test',
                                                                                                '_commands',
                                                                                                'commands',
                                                                                                'test']},
             'apetools.builders.subbuilders.logwatcherbuilders.BaseWatcherBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                     'constructor': ['node',
                                                                                                     'parameters',
                                                                                                     'output',
                                                                                                     'name=None',
                                                                                                     'event=None'],
                                                                                     'docstring': '\n    A class to base other builders on\n    ',
                                                                                     'methods': [],
                                                                                     'properties': ['_logger',
                                                                                                    'node',
                                                                                                    'parameters',
                                                                                                    'event',
                                                                                                    'name',
                                                                                                    'output',
                                                                                                    '_product',
                                                                                                    '_output_file',
                                                                                                    '_arguments',
                                                                                                    'arguments',
                                                                                                    'output_file']},
             'apetools.builders.subbuilders.logwatcherbuilders.LogWatcherBuilder': {'bases': ['apetools.builders.subbuilders.logwatcherbuilders.BaseWatcherBuilder'],
                                                                                    'constructor': ['*args',
                                                                                                    '**kwargs'],
                                                                                    'docstring': '\n    A builder of log watchers\n    ',
                                                                                    'methods': [],
                                                                                    'properties': ['_arguments',
                                                                                                   'product',
                                                                                                   '_product']},
             'apetools.builders.subbuilders.logwatcherbuilders.LogcatWatcherBuilder': {'bases': ['apetools.builders.subbuilders.logwatcherbuilders.BaseWatcherBuilder'],
                                                                                       'constructor': ['*args',
                                                                                                       '**kwargs'],
                                                                                       'docstring': '\n    A builder of logcat watchers\n    ',
                                                                                       'methods': [],
                                                                                       'properties': ['_buffers',
                                                                                                      'arguments',
                                                                                                      '_arguments',
                                                                                                      'buffers',
                                                                                                      'product',
                                                                                                      '_product']},
             'apetools.builders.subbuilders.logwatcherbuilders.LogwatcherBuilderError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                         'constructor': [],
                                                                                         'docstring': '\n    ',
                                                                                         'methods': [],
                                                                                         'properties': []},
             'apetools.builders.subbuilders.nersbuilder.NersBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': "\n    A class to build NeRS's\n    ",
                                                                       'methods': [],
                                                                       'properties': ['product',
                                                                                      '_product',
                                                                                      'parameters',
                                                                                      '_parameters']},
             'apetools.builders.subbuilders.nodebuilder.NodeBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                       'constructor': ['parameters',
                                                                                       'role=None'],
                                                                       'docstring': '\n    A class to build a device (node)\n    ',
                                                                       'methods': [],
                                                                       'properties': ['parameters',
                                                                                      '_role',
                                                                                      '_connection',
                                                                                      '_interface',
                                                                                      '_node',
                                                                                      '_address',
                                                                                      'role',
                                                                                      'address',
                                                                                      'connection',
                                                                                      'interface',
                                                                                      'node']},
             'apetools.builders.subbuilders.nodebuilder.NodeBuilderTypes': {'bases': ['object'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': ['__slots__',
                                                                                           'windows',
                                                                                           'linux']},
             'apetools.builders.subbuilders.nodesbuilder.NodeTypes': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': ['__slots__',
                                                                                     'dummy']},
             'apetools.builders.subbuilders.nodesbuilder.NodesBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                         'constructor': ['builder',
                                                                                         'config_map'],
                                                                         'docstring': '\n    A generic builder of id:device dictionaries\n    ',
                                                                         'methods': [],
                                                                         'properties': ['builder',
                                                                                        'config_map',
                                                                                        '_nodes',
                                                                                        'nodes']},
             'apetools.builders.subbuilders.operationsetupbuilder.OperationSetupBuilder': {'bases': ['baseoperationbuilder.BaseOperationBuilder'],
                                                                                           'constructor': ['*args',
                                                                                                           '**kwargs'],
                                                                                           'docstring': '\n    A class to build Operation Setups\n    ',
                                                                                           'methods': [],
                                                                                           'properties': ['config_option',
                                                                                                          '_config_option',
                                                                                                          'operation',
                                                                                                          '_operation',
                                                                                                          'section']},
             'apetools.builders.subbuilders.operationteardownbuilder.OperationTeardownBuilder': {'bases': ['baseoperationbuilder.BaseOperationBuilder'],
                                                                                                 'constructor': ['*args',
                                                                                                                 '**kwargs'],
                                                                                                 'docstring': '\n    A class to build Teardown Operations\n    ',
                                                                                                 'methods': [],
                                                                                                 'properties': ['config_option',
                                                                                                                '_config_option',
                                                                                                                'operation',
                                                                                                                '_operation',
                                                                                                                'section']},
             'apetools.builders.subbuilders.oscillatebuilder.OscillateBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                 'constructor': ['*args',
                                                                                                 '**kwargs'],
                                                                                 'docstring': '\n    A networked oscillator builder\n    ',
                                                                                 'methods': [('get_option',
                                                                                              ['option',
                                                                                               'optional=False'],
                                                                                              '\n        :param:\n\n         - `option`: the option name in the config file\n         - `optional`: if True, return None for missing option\n\n        :return: the option value \n        ')],
                                                                                 'properties': ['_connection',
                                                                                                '_hostname',
                                                                                                '_username',
                                                                                                '_password',
                                                                                                '_output',
                                                                                                '_arguments',
                                                                                                '_block',
                                                                                                '_semaphore',
                                                                                                'section',
                                                                                                'semaphore',
                                                                                                'block',
                                                                                                'output',
                                                                                                'arguments',
                                                                                                'hostname',
                                                                                                'username',
                                                                                                'password',
                                                                                                'connection',
                                                                                                'product',
                                                                                                '_product',
                                                                                                'parameters',
                                                                                                '_parameters']},
             'apetools.builders.subbuilders.oscillatebuilder.OscillateStopBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                     'constructor': ['*args',
                                                                                                     '**kwargs'],
                                                                                     'docstring': '\n    A networked oscillator stopper builder\n    ',
                                                                                     'methods': [('get_option',
                                                                                                  ['option',
                                                                                                   'optional=False'],
                                                                                                  '\n        :param:\n\n         - `option`: the option name in the config file\n         - `optional`: if True, return None for missing option\n\n        :return: the option value \n        ')],
                                                                                     'properties': ['_connection',
                                                                                                    '_hostname',
                                                                                                    '_username',
                                                                                                    '_password',
                                                                                                    'section',
                                                                                                    'hostname',
                                                                                                    'username',
                                                                                                    'password',
                                                                                                    'connection',
                                                                                                    'product',
                                                                                                    '_product',
                                                                                                    'parameters',
                                                                                                    '_parameters']},
             'apetools.builders.subbuilders.oscillatebuilder.OscillatorConfigurationError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                             'constructor': [],
                                                                                             'docstring': "\n    An error to raise if the user's configuration is wrong\n    ",
                                                                                             'methods': [],
                                                                                             'properties': []},
             'apetools.builders.subbuilders.pollerbuilders.BasePollerBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                'constructor': ['node',
                                                                                                'parameters',
                                                                                                'output',
                                                                                                'name=None',
                                                                                                'event=None'],
                                                                                'docstring': '\n    A class to base other builders on\n    ',
                                                                                'methods': [],
                                                                                'properties': ['_logger',
                                                                                               'node',
                                                                                               'parameters',
                                                                                               'event',
                                                                                               'name',
                                                                                               'output',
                                                                                               '_product',
                                                                                               '_output_file',
                                                                                               '_filename',
                                                                                               '_subdir',
                                                                                               '_use_header',
                                                                                               'use_header',
                                                                                               'subdir',
                                                                                               'filename',
                                                                                               'output_file']},
             'apetools.builders.subbuilders.pollerbuilders.DevicePollerBuilder': {'bases': ['apetools.builders.subbuilders.pollerbuilders.BasePollerBuilder'],
                                                                                  'constructor': ['*args',
                                                                                                  '**kwargs'],
                                                                                  'docstring': '\n    A builder of rssi-pollers\n    ',
                                                                                  'methods': [],
                                                                                  'properties': ['_interval',
                                                                                                 'interval',
                                                                                                 'product',
                                                                                                 '_product']},
             'apetools.builders.subbuilders.pollerbuilders.PollerBuilderError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    ',
                                                                                 'methods': [],
                                                                                 'properties': []},
             'apetools.builders.subbuilders.pollerbuilders.ProcnetdevPollsterBuilder': {'bases': ['apetools.builders.subbuilders.pollerbuilders.BasePollerBuilder'],
                                                                                        'constructor': ['*args',
                                                                                                        '**kwargs'],
                                                                                        'docstring': '\n    A builder of network interface pollers\n    ',
                                                                                        'methods': [],
                                                                                        'properties': ['_interval',
                                                                                                       'interval',
                                                                                                       'product',
                                                                                                       '_product']},
             'apetools.builders.subbuilders.pollerbuilders.RssiPollerBuilder': {'bases': ['apetools.builders.subbuilders.pollerbuilders.BasePollerBuilder'],
                                                                                'constructor': ['*args',
                                                                                                '**kwargs'],
                                                                                'docstring': '\n    A builder of rssi-pollers\n    ',
                                                                                'methods': [],
                                                                                'properties': ['_interval',
                                                                                               'interval',
                                                                                               'product',
                                                                                               '_product']},
             'apetools.builders.subbuilders.poweroffbuilder.PowerOffBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                               'constructor': ['*args',
                                                                                               '**kwargs'],
                                                                               'docstring': '\n    A networked power-switch builder (off)\n    ',
                                                                               'methods': [],
                                                                               'properties': ['_synaxxxes',
                                                                                              '_config_options',
                                                                                              '_clients',
                                                                                              'synaxxxes',
                                                                                              'clients',
                                                                                              'config_options',
                                                                                              'product',
                                                                                              '_product',
                                                                                              'parameters',
                                                                                              '_parameters']},
             'apetools.builders.subbuilders.poweroffbuilder.PowerOnBuilderEnum': {'bases': ['object'],
                                                                                  'constructor': [],
                                                                                  'docstring': '\n    A holder of Synaxxx constants\n    ',
                                                                                  'methods': [],
                                                                                  'properties': ['__slots__',
                                                                                                 'id_switch']},
             'apetools.builders.subbuilders.poweroffbuilder.PowerOnConfigurationError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                         'constructor': [],
                                                                                         'docstring': "\n    An error to raise if the user's configuration is wrong\n    ",
                                                                                         'methods': [],
                                                                                         'properties': []},
             'apetools.builders.subbuilders.poweroffbuilder.PowerOnParameters': {'bases': ["collections.namedtuple('PowerOnParameters', 'identifier switch'.split())"],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('__str__',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['__slots__']},
             'apetools.builders.subbuilders.poweronbuilder.PowerOnBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                             'constructor': ['*args',
                                                                                             '**kwargs'],
                                                                             'docstring': '\n    A networked power-switch builder\n    ',
                                                                             'methods': [],
                                                                             'properties': ['_synaxxxes',
                                                                                            '_config_options',
                                                                                            '_clients',
                                                                                            'synaxxxes',
                                                                                            'clients',
                                                                                            'config_options',
                                                                                            'product',
                                                                                            '_product',
                                                                                            'parameters',
                                                                                            '_parameters']},
             'apetools.builders.subbuilders.poweronbuilder.PowerOnBuilderEnum': {'bases': ['object'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    A holder of Synaxxx constants\n    ',
                                                                                 'methods': [],
                                                                                 'properties': ['__slots__',
                                                                                                'id_switch',
                                                                                                'sleep']},
             'apetools.builders.subbuilders.poweronbuilder.PowerOnConfigurationError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                                        'constructor': [],
                                                                                        'docstring': "\n    An error to raise if the user's configuration is wrong\n    ",
                                                                                        'methods': [],
                                                                                        'properties': []},
             'apetools.builders.subbuilders.poweronbuilder.PowerOnParameters': {'bases': ["collections.namedtuple('PowerOnParameters', 'identifier switch'.split())"],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('__str__',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['__slots__']},
             'apetools.builders.subbuilders.reportbuilder.ReportBuilder': {'bases': ['object'],
                                                                           'constructor': ['parameters',
                                                                                           'storage'],
                                                                           'docstring': '\n    A Report builder builds an instance of a Reporter\n    ',
                                                                           'methods': [],
                                                                           'properties': ['parameters',
                                                                                          'storage',
                                                                                          '_instance',
                                                                                          'instance']},
             'apetools.builders.subbuilders.rotatebuilder.RotateBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                           'constructor': ['*args',
                                                                                           '**kwargs'],
                                                                           'docstring': '\n    A Rotator builder\n    ',
                                                                           'methods': [],
                                                                           'properties': ['_angles',
                                                                                          '_velocities',
                                                                                          '_connection_parameters',
                                                                                          '_connection',
                                                                                          'connection_parameters',
                                                                                          'connection',
                                                                                          'angles',
                                                                                          'velocities',
                                                                                          'parameters',
                                                                                          '_parameters',
                                                                                          'product',
                                                                                          '_product']},
             'apetools.builders.subbuilders.rotatebuilder.RotateBuilderEnums': {'bases': ['object'],
                                                                                'constructor': [],
                                                                                'docstring': '\n    A holder of Rotate constants\n    ',
                                                                                'methods': [],
                                                                                'properties': ['__slots__',
                                                                                               'angle_velocity']},
             'apetools.builders.subbuilders.rotatebuilder.RotateParameters': {'bases': ["collections.namedtuple('RotateParameters', 'angle velocity'.split())"],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('__str__',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['__slots__']},
             'apetools.builders.subbuilders.setupiterationbuilder.SetupIterationBuilder': {'bases': ['object'],
                                                                                           'constructor': ['device',
                                                                                                           'affector',
                                                                                                           'time_to_recovery'],
                                                                                           'docstring': '\n    A SetupIterationBuilder builds Setup Iteration runners\n    ',
                                                                                           'methods': [],
                                                                                           'properties': ['device',
                                                                                                          'affector',
                                                                                                          'time_to_recovery',
                                                                                                          '_setup',
                                                                                                          'setup']},
             'apetools.builders.subbuilders.setuptestbuilder.SetupTestBuilder': {'bases': ['baseoperationbuilder.BaseOperationBuilder'],
                                                                                 'constructor': ['*args',
                                                                                                 '**kwargs'],
                                                                                 'docstring': '\n    A class to build Test Setups\n    ',
                                                                                 'methods': [],
                                                                                 'properties': ['config_option',
                                                                                                '_config_option',
                                                                                                'operation',
                                                                                                '_operation',
                                                                                                'section']},
             'apetools.builders.subbuilders.storagepipebuilder.StoragePipeBuilder': {'bases': ['object'],
                                                                                     'constructor': ['config_map',
                                                                                                     'target=None',
                                                                                                     'role=StoragePipeEnum.pipe',
                                                                                                     'header_token=None'],
                                                                                     'docstring': '\n    A class to build storage pipes.\n    ',
                                                                                     'methods': [],
                                                                                     'properties': ['config_map',
                                                                                                    'target',
                                                                                                    'role',
                                                                                                    'header_token',
                                                                                                    '_pipe',
                                                                                                    '_path',
                                                                                                    'path',
                                                                                                    'pipe']},
             'apetools.builders.subbuilders.teardownbuilder.TearDownBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                               'constructor': ['configfilename',
                                                                                               'storage',
                                                                                               "subdir='logs'"],
                                                                               'docstring': '\n    A basic tear-down builder that just copies log and config files.\n    ',
                                                                               'methods': [],
                                                                               'properties': ['configfilename',
                                                                                              'storage',
                                                                                              'subdir',
                                                                                              '_configcopier',
                                                                                              '_logcopier',
                                                                                              '_teardown',
                                                                                              'configcopier',
                                                                                              'logcopier',
                                                                                              'teardown']},
             'apetools.builders.subbuilders.teardowniterationbuilder.TeardownIterationBuilder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                                 'constructor': [],
                                                                                                 'docstring': '\n    The TeardownIteration builder builds a single TeardownIteration\n    ',
                                                                                                 'methods': [],
                                                                                                 'properties': ['_teardowniteration',
                                                                                                                'teardowniteration']},
             'apetools.builders.subbuilders.teardowntestbuilder.TeardownTestBuilder': {'bases': ['baseoperationbuilder.BaseOperationBuilder'],
                                                                                       'constructor': ['*args',
                                                                                                       '**kwargs'],
                                                                                       'docstring': '\n    A class to build Setup Operations\n    ',
                                                                                       'methods': [],
                                                                                       'properties': ['config_option',
                                                                                                      '_config_option',
                                                                                                      'operation',
                                                                                                      '_operation',
                                                                                                      'section']},
             'apetools.builders.subbuilders.timetorecoverybuilder.TimeToRecoveryBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                                           'constructor': ['*args',
                                                                                                           '**kwargs'],
                                                                                           'docstring': '\n    A builder of TTR Objects\n    ',
                                                                                           'methods': [('add_parameter',
                                                                                                        ['name',
                                                                                                         'value'],
                                                                                                        '\n        :param:\n\n         - `name`: the name of the parameter to add\n         - `value`: the value of the parameter to add\n\n        :postcondition: Parameters(name, value) in self.previous_parameters\n        ')],
                                                                                           'properties': ['_target',
                                                                                                          '_ttr',
                                                                                                          '_timeout',
                                                                                                          '_threshold',
                                                                                                          'section',
                                                                                                          '_section',
                                                                                                          'timeout',
                                                                                                          'threshold',
                                                                                                          'target',
                                                                                                          'ttr',
                                                                                                          'product',
                                                                                                          '_product',
                                                                                                          'parameters',
                                                                                                          '_parameters']},
             'apetools.builders.subbuilders.timetorecoverybuilder.TimeToRecoveryBuilderEnum': {'bases': ['object'],
                                                                                               'constructor': [],
                                                                                               'docstring': '',
                                                                                               'methods': [],
                                                                                               'properties': ['__slots__',
                                                                                                              'nodes',
                                                                                                              'target',
                                                                                                              'timeout',
                                                                                                              'threshold']},
             'apetools.builders.subbuilders.toolbuilder.ToolBuilder': {'bases': ['object'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    An aggregator of tool builders\n    ',
                                                                       'methods': [],
                                                                       'properties': ['_ners',
                                                                                      '_apconnect',
                                                                                      '_timetorecovery',
                                                                                      '_dumpdevicestate',
                                                                                      '_iperf',
                                                                                      '_rotate',
                                                                                      '_oscillate',
                                                                                      '_oscillatestop',
                                                                                      '_commandwatch',
                                                                                      '_poweron',
                                                                                      '_poweroff',
                                                                                      '_watchlogs',
                                                                                      'watchlogs',
                                                                                      'oscillatestop',
                                                                                      'oscillate',
                                                                                      'commandwatch',
                                                                                      'rotate',
                                                                                      'poweron',
                                                                                      'poweroff',
                                                                                      'ners',
                                                                                      'apconnect',
                                                                                      'timetorecovery',
                                                                                      'dumpdevicestate',
                                                                                      'iperf']},
             'apetools.builders.subbuilders.toolbuilder.ToolBuilderEnum': {'bases': ['object'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['__slots__',
                                                                                          'ners',
                                                                                          'apconnect',
                                                                                          'timetorecovery',
                                                                                          'dumpdevicestatebuilder',
                                                                                          'iperf',
                                                                                          'rotate',
                                                                                          'poweron',
                                                                                          'oscillate',
                                                                                          'oscillatestop']},
             'apetools.builders.subbuilders.tpcdevicebuilder.TpcDeviceBuilder': {'bases': ['object'],
                                                                                 'constructor': ['config_map'],
                                                                                 'docstring': '\n    A class to build the TPC device\n    ',
                                                                                 'methods': [],
                                                                                 'properties': ['config_map',
                                                                                                '_device',
                                                                                                '_connection',
                                                                                                '_parameters',
                                                                                                'parameters',
                                                                                                'connection',
                                                                                                'device']},
             'apetools.builders.subbuilders.watcherbuilder.WatcherBuilder': {'bases': ['basetoolbuilder.BaseToolBuilder'],
                                                                             'constructor': ['*args',
                                                                                             '**kwargs'],
                                                                             'docstring': '\n    builds a master logwatcher\n    ',
                                                                             'methods': [],
                                                                             'properties': ['_watchers',
                                                                                            '_watcher_ids',
                                                                                            'watcher_ids',
                                                                                            'watchers',
                                                                                            'product',
                                                                                            '_product',
                                                                                            'parameters',
                                                                                            '_parameters']},
             'apetools.builders.subbuilders.watcherbuilder.WatcherTypes': {'bases': ['object'],
                                                                           'constructor': [],
                                                                           'docstring': '\n    The names of the valid watcher types\n    ',
                                                                           'methods': [],
                                                                           'properties': ['__slots__',
                                                                                          'logcat',
                                                                                          'adblogcat',
                                                                                          'rssi',
                                                                                          'device',
                                                                                          'procnetdev']},
             'apetools.commands.basecommand.BaseThreadedCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    An abstract base-class for simple commands to run in a thread\n    ',
                                                                   'methods': [('run',
                                                                                [],
                                                                                '\n        The method put into the thread.\n        '),
                                                                               ('stop',
                                                                                [],
                                                                                '\n        :postcondition: the thread is stopped \n        '),
                                                                               ('__call__',
                                                                                ['*args',
                                                                                 '**kwargs'],
                                                                                '\n        The main interface for the command.\n\n        Calls run and puts it in a daemonized thread.\n\n        :postcondition: self.thread is a running thread\n        '),
                                                                               ('__del__',
                                                                                [],
                                                                                '\n        :postcondition: `stop` is called.\n        :postcondition: connection is closed\n        ')],
                                                                   'properties': ['__metaclass__',
                                                                                  '_logger',
                                                                                  'stopped',
                                                                                  '_thread',
                                                                                  'thread']},
             'apetools.commands.basewificommand.BaseWifiCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                                   'constructor': ['connection',
                                                                                   'interface=None',
                                                                                   'operating_system=None'],
                                                                   'docstring': '\n    The Base Wifi query command\n    ',
                                                                   'methods': [('interface',
                                                                                [],
                                                                                '\n        :return: the name of the wireless interface\n        '),
                                                                               ('rssi',
                                                                                [],
                                                                                '\n        This is dynamically generated\n        \n        :return: The rssi for the interface\n        '),
                                                                               ('bitrate',
                                                                                [],
                                                                                '\n        :return: the reported physical bit-rate\n        '),
                                                                               ('mac_address',
                                                                                [],
                                                                                '\n        :return: MAC Address of the interface\n        '),
                                                                               ('__str__',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['__metaclass__',
                                                                                  '_logger',
                                                                                  'connection',
                                                                                  '_interface',
                                                                                  '_operating_system',
                                                                                  '_rssi',
                                                                                  '_noise',
                                                                                  '_channel',
                                                                                  '_bssid',
                                                                                  '_mac_address',
                                                                                  '_ip_address',
                                                                                  '_bitrate',
                                                                                  'operating_system']},
             'apetools.commands.changeprompt.ChangePrompt': {'bases': ['apetools.baseclass.BaseClass'],
                                                             'constructor': ['adapter',
                                                                             'length=10',
                                                                             "variable='PS1'",
                                                                             'prompt=None'],
                                                             'docstring': '\n    Changes a prompt.\n    ',
                                                             'methods': [('run',
                                                                          [],
                                                                          '\n        :postcondition: prompt variable is set to new prompt.\n        :return: The new prompt value.\n        ')],
                                                             'properties': ['adapter',
                                                                            'length',
                                                                            'variable',
                                                                            '_prompt',
                                                                            'prompt']},
             'apetools.commands.dumpsyswifi.DumpsysWifi': {'bases': ['apetools.baseclass.BaseClass'],
                                                           'constructor': ['connection=None',
                                                                           "service='wifi'",
                                                                           "na='N/A'"],
                                                           'docstring': '\n    A class to query and interpret the dumpsys wifi command\n    ',
                                                           'methods': [('get_match',
                                                                        ['expression', 'key'],
                                                                        '\n        :param:\n\n         - `key`: the groupdict key to retrieve\n         - `expression`: compiled expression to match field\n        :return: the matching field in the output\n        '),
                                                                       ('__str__', [], '')],
                                                           'properties': ['_connection',
                                                                          'service',
                                                                          'na',
                                                                          '_state',
                                                                          '_interface',
                                                                          '_ssid',
                                                                          '_bssid',
                                                                          '_mac_address',
                                                                          '_supplicant_state',
                                                                          '_rssi',
                                                                          '_link_speed',
                                                                          '_expressions',
                                                                          'enums',
                                                                          'expressions',
                                                                          'connection',
                                                                          'state',
                                                                          'interface',
                                                                          'ssid',
                                                                          'bssid',
                                                                          'mac_address',
                                                                          'supplicant_state',
                                                                          'rssi',
                                                                          'link_speed']},
             'apetools.commands.dumpsyswifi.DumpsysWifiEnumerations': {'bases': ['object'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    An enumerations object\n    ',
                                                                       'methods': [],
                                                                       'properties': ['__slots__',
                                                                                      'state',
                                                                                      'interface',
                                                                                      'ssid',
                                                                                      'bssid',
                                                                                      'mac_address',
                                                                                      'supplicant_state',
                                                                                      'rssi',
                                                                                      'link_speed']},
             'apetools.commands.dumpsyswifi.DumpsysWifiExpressions': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    A class to hold regular expressions to parse the `dumpsys wifi` output\n    ',
                                                                      'methods': [],
                                                                      'properties': ['_state',
                                                                                     '_interface',
                                                                                     '_ssid',
                                                                                     '_bssid',
                                                                                     '_mac_address',
                                                                                     '_supplicant_state',
                                                                                     '_rssi',
                                                                                     '_link_speed',
                                                                                     'state',
                                                                                     'interface',
                                                                                     'ssid',
                                                                                     'bssid',
                                                                                     'mac_address',
                                                                                     'supplicant_state',
                                                                                     'rssi',
                                                                                     'link_speed']},
             'apetools.commands.ifconfig.IfconfigCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': ['connection',
                                                                            'interface',
                                                                            'operating_system=None'],
                                                            'docstring': '\n    The IfconfigCommand interprets ifconfig\n    ',
                                                            'methods': [('_match',
                                                                         ['expression',
                                                                          'name'],
                                                                         '\n        :param:\n\n         - `expression`: The regular expression to match\n         - `name`: The group name to pull the match out of the line\n         \n        :return: The named-group that matched or None\n        ')],
                                                            'properties': ['connection',
                                                                           'interface',
                                                                           '_operating_system',
                                                                           '_ip_address',
                                                                           '_mac_address',
                                                                           '_output',
                                                                           '_ip_expression',
                                                                           'operating_system',
                                                                           'ip_address',
                                                                           'ip_expression',
                                                                           'mac_address',
                                                                           'output']},
             'apetools.commands.ifconfig.IfconfigError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                          'constructor': [],
                                                          'docstring': '\n    raise this if there is a user error\n    ',
                                                          'methods': [],
                                                          'properties': []},
             'apetools.commands.ipconfig.Ipconfig': {'bases': ['apetools.baseclass.BaseClass'],
                                                     'constructor': ['connection',
                                                                     "interface='Wireless LAN adapter'",
                                                                     "not_available='NA'",
                                                                     'timeout=30'],
                                                     'docstring': '\n    A class to interpret the `ipconfig` output\n    ',
                                                     'methods': [],
                                                     'properties': ['connection',
                                                                    'interface',
                                                                    'not_available',
                                                                    'timeout',
                                                                    '_ip_expression',
                                                                    '_address',
                                                                    'ip_expression',
                                                                    'address']},
             'apetools.commands.ipconfig.IpconfigEnum': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['__slots__', 'address']},
             'apetools.commands.ipconfig.IpconfigError': {'bases': ['apetools.commons.errors.CommandError'],
                                                          'constructor': [],
                                                          'docstring': '\n    An exception to raise if the command fails.\n    ',
                                                          'methods': [],
                                                          'properties': []},
             'apetools.commands.iperfcommand.IperfCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                             'constructor': ['parameters',
                                                                             'output',
                                                                             'role',
                                                                             "base_filename=''",
                                                                             "subdirectory='raw_iperf'"],
                                                             'docstring': '\n    An Iperf Command executes iperf commands\n    ',
                                                             'methods': [('output',
                                                                          ['out'],
                                                                          '\n        :param:\n\n         - `out`: an output pipeline object\n        '),
                                                                         ('filename',
                                                                          ['filename',
                                                                           'node_type'],
                                                                          '\n        :param:\n\n         - `filename`: base filename to add prefix to\n         - `node_type`: the device.role\n         \n        :return: a prefix to add to the filename given\n        :raise: ConfigurationError if self.role or node_type are unknown\n        '),
                                                                         ('validate',
                                                                          ['line'],
                                                                          '\n        :param:\n\n         - `line`: a line of output\n\n        :raise: IperfError if an error is detected\n        '),
                                                                         ('abort',
                                                                          [],
                                                                          '\n        :postcondition: self.stop is True      \n        '),
                                                                         ('run',
                                                                          ['device',
                                                                           'filename',
                                                                           'server=False'],
                                                                          '\n        Run the iperf command and send to the output\n\n        :param:\n\n         - `device`: A device to issue the command on\n         - `filename`: a base-name to use for the output file.\n\n        :raise: IperfError if runtime is greater than self.parameters.time\n        '),
                                                                         ('start',
                                                                          ['device',
                                                                           'filename'],
                                                                          '\n        :param:\n\n         - `device`: device to issue the iperf command\n         - `filename`: base filename to use for output file\n\n        :postcondition: iperf command started in thread\n        '),
                                                                         ('__str__', [], '')],
                                                             'properties': ['role',
                                                                            'parameters',
                                                                            '_parser',
                                                                            '_output',
                                                                            'output',
                                                                            'base_filename',
                                                                            '_max_time',
                                                                            '_now',
                                                                            'running',
                                                                            'stop',
                                                                            'parser',
                                                                            'now',
                                                                            'max_time',
                                                                            'abort',
                                                                            'thread']},
             'apetools.commands.iperfcommand.IperfCommandEnum': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['__slots__',
                                                                                'client',
                                                                                'server',
                                                                                'time']},
             'apetools.commands.iperfcommand.IperfCommandError': {'bases': ['apetools.commands.iperfcommand.ConfigurationError'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    an error to raise if the settings are unknown\n    ',
                                                                  'methods': [],
                                                                  'properties': []},
             'apetools.commands.iperfcommand.IperfError': {'bases': ['apetools.commands.iperfcommand.CommandError'],
                                                           'constructor': [],
                                                           'docstring': '\n    An IperfError indicates a connection problem.\n    ',
                                                           'methods': [],
                                                           'properties': []},
             'apetools.commands.iwcommand.IwCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                       'constructor': ['connection',
                                                                       'interface=None',
                                                                       'operating_system=None'],
                                                       'docstring': '\n    The IwCommand interprets iw\n    ',
                                                       'methods': [('_match',
                                                                    ['expression',
                                                                     'name',
                                                                     'command'],
                                                                    '\n        :param:\n\n         - `expression`: The regular expression to match\n         - `name`: The group name to pull the match out of the line\n         - `command`: The command to send to iw\n         \n        :return: The named-group that matched or None\n        '),
                                                                   ('__str__', [], '')],
                                                       'properties': ['connection',
                                                                      '_interface',
                                                                      '_operating_system',
                                                                      '_rssi',
                                                                      '_mac_address',
                                                                      'operating_system',
                                                                      'interface',
                                                                      'rssi',
                                                                      'mac_address']},
             'apetools.commands.iwconfig.Iwconfig': {'bases': ['object'],
                                                     'constructor': ['connection',
                                                                     "interface='wlan0'",
                                                                     "not_available='NA'"],
                                                     'docstring': '\n    A class to extract `iwconfig` information\n    ',
                                                     'methods': [('search',
                                                                  ['expression', 'name'],
                                                                  '\n        :param:\n\n         - `expression`: regular expression to match desired field\n         - `name`: the name of the group in the expression to return\n\n        :return: matched sub-string or not_available\n        '),
                                                                 ('validate',
                                                                  ['line'],
                                                                  "\n        :param:\n\n         - `line`: A string of output from the `iwconfig` command\n\n        :raise: CommandError if the interface wasn't found\n        ")],
                                                     'properties': ['connection',
                                                                    'interface',
                                                                    'not_available',
                                                                    '_ssid',
                                                                    '_ssid_expression',
                                                                    '_bssid',
                                                                    '_bssid_expression',
                                                                    '_rssi',
                                                                    '_rssi_expression',
                                                                    'rssi_expression',
                                                                    'rssi',
                                                                    'ssid_expression',
                                                                    'bssid_expression',
                                                                    'bssid',
                                                                    'ssid']},
             'apetools.commands.iwconfig.IwconfigEnums': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['__slots__',
                                                                         'ssid',
                                                                         'bssid',
                                                                         'rssi']},
             'apetools.commands.netcfg.NetcfgCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                        'constructor': ['connection',
                                                                        'interface=None',
                                                                        'operating_system=None'],
                                                        'docstring': '\n    The NetcfgCommand interprets netcfg\n    ',
                                                        'methods': [('_match',
                                                                     ['expression', 'name'],
                                                                     '\n        :param:\n\n         - `expression`: The regular expression to match\n         - `name`: The group name to pull the match out of the line\n         \n        :return: The named-group that matched or None\n        '),
                                                                    ('__str__', [], '')],
                                                        'properties': ['connection',
                                                                       '_interface',
                                                                       '_operating_system',
                                                                       '_ip_address',
                                                                       '_mac_address',
                                                                       '_output',
                                                                       'operating_system',
                                                                       'ip_address',
                                                                       'interface',
                                                                       'mac_address',
                                                                       'output',
                                                                       'error']},
             'apetools.commands.netsh.NetshWlan': {'bases': ['apetools.baseclass.BaseClass'],
                                                   'constructor': ['connection',
                                                                   "separator=':'",
                                                                   "not_available='NA'"],
                                                   'docstring': '\n    A querier for basic netsh information\n    ',
                                                   'methods': [('get_value',
                                                                ['expression', 'key'],
                                                                "\n        :return: the value from netsh's output that matches the key\n        "),
                                                               ('check_errors',
                                                                ['stderr'],
                                                                '\n        :param:\n\n         - `stderr`: file output of stderr\n        '),
                                                               ('reset',
                                                                [],
                                                                '\n        :postcondition: self._output is None\n        '),
                                                               ('__getattr__',
                                                                ['prop'],
                                                                '\n        :param:\n\n         - `property`: A valid property (use NetshWlanKeys properties)\n        ')],
                                                   'properties': ['connection',
                                                                  'separator',
                                                                  'not_available',
                                                                  '_output',
                                                                  '_expressions',
                                                                  '_signal',
                                                                  'signal',
                                                                  'output',
                                                                  'expressions']},
             'apetools.commands.netsh.NetshWlanExpressions': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '\n    A container of expressions  for the output of `netsh wlan show interfaces`\n    ',
                                                              'methods': [('get_expression',
                                                                           ['key', 'name'],
                                                                           '\n        :return: expression that matches anything in the value column\n        ')],
                                                              'properties': ['_authentication',
                                                                             '_bssid',
                                                                             '_channel',
                                                                             '_cipher',
                                                                             '_connection_state',
                                                                             '_description',
                                                                             '_mac_address',
                                                                             '_name',
                                                                             '_radio_type',
                                                                             '_receive_rate',
                                                                             '_signal',
                                                                             '_ssid',
                                                                             '_transmit_rate',
                                                                             'authentication',
                                                                             'bssid',
                                                                             'channel',
                                                                             'cipher',
                                                                             'connection_state',
                                                                             'description',
                                                                             'mac_address',
                                                                             'name',
                                                                             'radio_type',
                                                                             'receive_rate',
                                                                             'signal',
                                                                             'ssid',
                                                                             'transmit_rate']},
             'apetools.commands.netsh.NetshWlanKeys': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['__slots__',
                                                                      'authentication',
                                                                      'bssid',
                                                                      'channel',
                                                                      'cipher',
                                                                      'connection_state',
                                                                      'description',
                                                                      'mac_address',
                                                                      'name',
                                                                      'radio_type',
                                                                      'receive_rate',
                                                                      'signal',
                                                                      'ssid',
                                                                      'transmit_rate']},
             'apetools.commands.oscillate.Oscillate': {'bases': ['basecommand.BaseThreadedCommand'],
                                                       'constructor': ['connection',
                                                                       'output',
                                                                       'arguments',
                                                                       'block=False'],
                                                       'docstring': '\n    A Class to start and stop an oscillator\n    ',
                                                       'methods': [('run',
                                                                    [],
                                                                    '\n        :postcondition: oscillate command sent to the oscillator\n        '),
                                                                   ('check_error',
                                                                    ['error'],
                                                                    '\n        Not fully implented yet.\n\n        :param:\n\n         - `error`: stderr file\n       \n        :raise: CommandError if detected\n        '),
                                                                   ('generate_output',
                                                                    ['output', 'error'],
                                                                    '\n        :param:\n\n         - `output`: stdout file\n         - `error`: stderr file\n        :yield: lines of stdout\n        '),
                                                                   ('stop',
                                                                    [],
                                                                    '\n        :postcondition:\n\n         - `stopped` is True\n         - pkill(`oscillate`) called\n         - rotate() called\n        '),
                                                                   ('__call__',
                                                                    ['parameter=None'],
                                                                    '\n        :param:\n\n         - `parameter`: not used\n\n        :return: name\n        :postcondition: thread is running, rotation_start is set\n        '),
                                                                   ('__del__',
                                                                    [],
                                                                    '\n        :postcondition: `stop` is called.\n        :postcondition: connection is closed\n        ')],
                                                       'properties': ['connection',
                                                                      'output',
                                                                      'block',
                                                                      '_timestamp',
                                                                      'arguments',
                                                                      '_rotation_start',
                                                                      '_event',
                                                                      '_thread',
                                                                      '_error_queue',
                                                                      'name',
                                                                      'event',
                                                                      'timestamp',
                                                                      'error_queue',
                                                                      'rotation_start',
                                                                      'thread',
                                                                      'stopped']},
             'apetools.commands.oscillate.OscillateEvent': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': ['event'],
                                                            'docstring': '\n    An event to coordinate other commands with the start of a rotation\n    ',
                                                            'methods': [('is_set',
                                                                         [],
                                                                         '\n        :return: True if the event is set, False otherwise.\n        '),
                                                                        ('wait',
                                                                         ['timeout=None'],
                                                                         '\n        :param:\n\n         - `timeout`: if not None, stop blocking after timeout (seconds)\n        \n        :postcondition: event is cleared then waited for\n        '),
                                                                        ('__str__', [], '')],
                                                            'properties': ['event', 'timeout']},
             'apetools.commands.oscillate.OscillateStop': {'bases': ['apetools.baseclass.BaseClass'],
                                                           'constructor': ['connection'],
                                                           'docstring': '\n    A class to explicitly stop the Oscillator\n    ',
                                                           'methods': [('check_output',
                                                                        ['output', 'error'],
                                                                        ''),
                                                                       ('kill_and_rotate',
                                                                        ['sleep_time=1'],
                                                                        '\n        :param:\n\n         - `sleep`: time to sleep between oscillate and rotate commands\n        \n        :postcondition: pkill oscillate and rotate 0 -k sent to connection\n        :return: True if on stderr output, False otherwise\n        '),
                                                                       ('__call__',
                                                                        ['parameter=None'],
                                                                        '\n        :param:\n\n         - `parameter`: Not used\n        \n        :postcondition:\n        ')],
                                                           'properties': ['connection']},
             'apetools.commands.oscillate.OscillatorError': {'bases': ['apetools.commons.errors.CommandError'],
                                                             'constructor': [],
                                                             'docstring': '\n    ',
                                                             'methods': [],
                                                             'properties': []},
             'apetools.commands.ping.PingArguments': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '\n    PingArguments is a holder of ping arguments\n    ',
                                                      'methods': [],
                                                      'properties': ['android',
                                                                     'linux',
                                                                     'windows']},
             'apetools.commands.ping.PingCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                    'constructor': ['target=None',
                                                                    'connection=None',
                                                                    'operating_system=None'],
                                                    'docstring': '\n    A ping is a simple ping-command.\n    ',
                                                    'methods': [('run',
                                                                 ['target=None'],
                                                                 '\n        Executes a single ping, checks for a success, returns ping data if it succeeds.\n\n        :param:\n\n         - `target`: The host to ping.\n        \n        :return: PingData or None\n        :raise: ConfigurationError if the target is unknown\n        '),
                                                                ('__call__',
                                                                 ['target', 'connection'],
                                                                 '\n        Executes a single ping, checks for a success, returns ping data if it succeeds.\n\n        :param:\n\n         - `target`: Address to ping\n         - `connection`: the connection to the originator of the ping\n        \n        :return: PingData or None\n        :raise: ConfigurationError if the target is unknown\n        ')],
                                                    'properties': ['target',
                                                                   'connection',
                                                                   'operating_system',
                                                                   '_arguments',
                                                                   '_expression',
                                                                   'arguments',
                                                                   'expression']},
             'apetools.commands.ping.PingData': {'bases': ["collections.namedtuple('PingData', ['target', 'rtt'])"],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('__str__', [], '')],
                                                 'properties': ['__slots__']},
             'apetools.commands.poweroff.PowerOff': {'bases': ['apetools.baseclass.BaseClass'],
                                                     'constructor': ['switches'],
                                                     'docstring': '\n    A class to power-off a networked-switch\n    ',
                                                     'methods': [('__call__',
                                                                  ['parameters',
                                                                   'filename_prefix=None'],
                                                                  '\n        :param:\n\n         - `parameters`: namedtuple with parameters.id_switch.parameters\n         - `filename_prefix`: Temporary hack until the teardown test is setup\n        ')],
                                                     'properties': ['switches']},
             'apetools.commands.poweron.PowerOn': {'bases': ['apetools.baseclass.BaseClass'],
                                                   'constructor': ['switches'],
                                                   'docstring': '\n    A class to power-on a networked-switch\n    ',
                                                   'methods': [('__call__',
                                                                ['parameters'],
                                                                '\n        :param:\n\n         - `parameters`: namedtuple with parameters.id_switch.parameters\n        '),
                                                               ('turn_all_off',
                                                                [],
                                                                '\n        :postcondition: all switches turned off       \n        ')],
                                                   'properties': ['switches']},
             'apetools.commands.rotate.RotateCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                        'constructor': ['connection'],
                                                        'docstring': '\n    A class to issue a remote \n    ',
                                                        'methods': [('__call__',
                                                                     ['parameters'],
                                                                     '\n        :param:\n\n         - `parameters`: namedtuple with parameters.angle_velocity.parameters\n        '),
                                                                    ('check_errors',
                                                                     ['line'],
                                                                     '\n        :param:\n\n         - `line`: line of output from the rotate command\n\n        :raise: CommandError if a known fatal error is detected\n        ')],
                                                        'properties': ['connection']},
             'apetools.commands.svc.DisableWifi': {'bases': ['apetools.commands.svc.ToggleWifiBase'],
                                                   'constructor': [],
                                                   'docstring': '\n    A callable class to disable wifi\n    ',
                                                   'methods': [('__call__',
                                                                ['parameters=None'],
                                                                "\n        Calls the command's `disable_wifi` method\n\n        :param:\n\n         - `parameters`: not used\n        ")],
                                                   'properties': []},
             'apetools.commands.svc.EnableWifi': {'bases': ['apetools.commands.svc.ToggleWifiBase'],
                                                  'constructor': [],
                                                  'docstring': '\n    A callable class to enable wifi\n    ',
                                                  'methods': [('__call__',
                                                               ['parameters=None'],
                                                               "\n        Calls the command's `enable_wifi` method\n\n        :param:\n\n         - `parameters`: not used\n        ")],
                                                  'properties': []},
             'apetools.commands.svc.Svc': {'bases': ['apetools.baseclass.BaseClass'],
                                           'constructor': ['connection=None',
                                                           "enable_wifi_command='wifi enable'",
                                                           "disable_wifi_command='wifi disable'"],
                                           'docstring': "\n    The Android's SVC command (wifi only).\n    ",
                                           'methods': [('call_svc',
                                                        ['command'],
                                                        "\n        :param:\n\n         - `command`: the command to send to 'svc'\n        "),
                                                       ('enable_wifi',
                                                        [],
                                                        '\n        Enable the WiFi radio\n        '),
                                                       ('disable_wifi',
                                                        [],
                                                        '\n        Disable the wifi radio\n        '),
                                                       ('validate',
                                                        ['output', 'subcommand'],
                                                        '\n        :raise: CommandError if there is an error in the output\n        ')],
                                           'properties': ['_connection',
                                                          'enable_wifi_command',
                                                          'disable_wifi_command',
                                                          'connection']},
             'apetools.commands.svc.ToggleWifiBase': {'bases': ['apetools.baseclass.BaseClass'],
                                                      'constructor': ['connection=None',
                                                                      'command=None'],
                                                      'docstring': '\n    A callable class to enable or disable wifi\n    ',
                                                      'methods': [('__call__',
                                                                   ['parameters=None'],
                                                                   "\n        Calls the command's <enable|disable>_wifi method\n\n        :param:\n\n         - `parameters`: not used\n        ")],
                                                      'properties': ['__metaclass__',
                                                                     '_logger',
                                                                     'connection',
                                                                     '_command',
                                                                     'command']},
             'apetools.commands.wificommand.WifiCommand': {'bases': ['basewificommand.BaseWifiCommand'],
                                                           'constructor': ['*args', '**kwargs'],
                                                           'docstring': '\n    The Wifi Command interprets `wifi` information\n\n    :warning: this was copied from the wl command and needs updating\n    ',
                                                           'methods': [('get',
                                                                        ['subcommand'],
                                                                        '\n        :param:\n\n         - `subcommand`: `wifi` subcommand\n\n        :return: stdout for the command\n        '),
                                                                       ('_match',
                                                                        ['expression',
                                                                         'name',
                                                                         'command'],
                                                                        '\n        :param:\n\n         - `expression`: The regular expression to match\n         - `name`: The group name to pull the match out of the line\n         - `command`: The command to send to iw\n         \n        :return: The named-group that matched or None\n        '),
                                                                       ('__str__', [], '')],
                                                           'properties': ['bitrate',
                                                                          'interface',
                                                                          'rssi',
                                                                          'mac_address',
                                                                          '_mac_address',
                                                                          'ssid',
                                                                          'noise',
                                                                          'channel',
                                                                          'bssid']},
             'apetools.commands.wificommand.WifiCommandError': {'bases': ['apetools.commands.wificommand.CommandError'],
                                                                'constructor': [],
                                                                'docstring': '\n    An error to raise if the Wifi Command fails\n    ',
                                                                'methods': [],
                                                                'properties': []},
             'apetools.commands.windowsssidconnect.WindowsSSIDConnect': {'bases': ['apetools.baseclass.BaseClass'],
                                                                         'constructor': ['connection'],
                                                                         'docstring': '\n    A class to associate a windows device with a known wifi profile\n    ',
                                                                         'methods': [('validate',
                                                                                      ['output'],
                                                                                      '\n        :param:\n\n         - `output`: iterator over output from the netsh connect command\n        '),
                                                                                     ('__call__',
                                                                                      ['ssid'],
                                                                                      '\n        :param:\n\n         - `ssid`: name of the SSID/profile on the device to pass to netsh\n\n        :raise: CommandError if an output error is found.\n        ')],
                                                                         'properties': ['connection']},
             'apetools.commands.winrssi.WinRssi': {'bases': ['apetools.baseclass.BaseClass'],
                                                   'constructor': ['connection'],
                                                   'docstring': "\n    A class to get the rssi via an installed version of miller's rssi puller.\n    ",
                                                   'methods': [('validate',
                                                                ['line'],
                                                                '\n        :parameter:\n\n         - `line`: a line of output\n        '),
                                                               ('__call__',
                                                                [],
                                                                "\n        :return: the rssi value\n        :raises: CommandError if the rssi can't be retrieved.\n        ")],
                                                   'properties': ['connection',
                                                                  '_expression',
                                                                  'key',
                                                                  'expression']},
             'apetools.commands.winrssi.WinRssiError': {'bases': ['apetools.commons.errors.CommandError'],
                                                        'constructor': [],
                                                        'docstring': "\n    A Win Rssi Error is raised if the output of Miller's rssi indicates a known error\n    ",
                                                        'methods': [],
                                                        'properties': []},
             'apetools.commands.wlcommand.WlCommand': {'bases': ['basewificommand.BaseWifiCommand'],
                                                       'constructor': ['*args', '**kwargs'],
                                                       'docstring': '\n    The Wl Command interprets WL information\n    ',
                                                       'methods': [('get',
                                                                    ['subcommand'],
                                                                    '\n        :param:\n\n         - `subcommand`: `wl` subcommand\n\n        :return: stdout for the command\n        '),
                                                                   ('_match',
                                                                    ['expression',
                                                                     'name',
                                                                     'command'],
                                                                    '\n        :param:\n\n         - `expression`: The regular expression to match\n         - `name`: The group name to pull the match out of the line\n         - `command`: The command to send to iw\n         \n        :return: The named-group that matched or None\n        '),
                                                                   ('__str__', [], '')],
                                                       'properties': ['interface',
                                                                      'rssi',
                                                                      'mac_address',
                                                                      '_mac_address',
                                                                      'bitrate',
                                                                      'ssid',
                                                                      'noise',
                                                                      'channel',
                                                                      'bssid']},
             'apetools.commands.wmic.WmicEnumeration': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['__slots__', 'code']},
             'apetools.commands.wmic.WmicWin32NetworkAdapter': {'bases': ['apetools.baseclass.BaseClass'],
                                                                'constructor': ['connection=None',
                                                                                "enable_wifi_command='enable'",
                                                                                "disable_wifi_command='disable'",
                                                                                'command_base=\'path Win32_NetworkAdapter where NetConnectionID=\\\'"{i}"\\\' call {{c}}\'',
                                                                                "interface_name='Wireless Network Connection'",
                                                                                "passing_code='0'"],
                                                                'docstring': "\n    Window's wmic win32_networkadapter command (wifi only).\n    ",
                                                                'methods': [('enable_wifi',
                                                                             [],
                                                                             '\n        Enable the WiFi radio\n        '),
                                                                            ('disable_wifi',
                                                                             [],
                                                                             '\n        Disable the wifi radio\n        '),
                                                                            ('call_wmic',
                                                                             ['command'],
                                                                             '\n        :param:\n\n         - `command`: the command to add to the command_base\n        '),
                                                                            ('validate',
                                                                             ['output',
                                                                              'subcommand'],
                                                                             '\n        :raise: CommandError if there is an error in the output\n        ')],
                                                                'properties': ['connection',
                                                                               'enable_wifi_command',
                                                                               'disable_wifi_command',
                                                                               'command_base',
                                                                               'interface_name',
                                                                               'passing_code',
                                                                               '_return_expression',
                                                                               '_base_command',
                                                                               'base_command',
                                                                               'return_expression']},
             'apetools.commands.wpacli.WpaCliCommand': {'bases': ['apetools.baseclass.BaseClass'],
                                                        'constructor': ['connection',
                                                                        'interface=None'],
                                                        'docstring': '\n    The WpaCliCommand interprets ifconfig\n    ',
                                                        'methods': [('_match',
                                                                     ['expression',
                                                                      'name',
                                                                      'arguments'],
                                                                     '\n        :param:\n\n         - `expression`: The regular expression to match\n         - `name`: The group name to pull the match out of the line\n         - `command`: The arguments to give to the wpa_cli\n         \n        :return: The named-group that matched or None\n        '),
                                                                    ('__str__', [], '')],
                                                        'properties': ['connection',
                                                                       '_interface',
                                                                       '_ip_address',
                                                                       '_mac_address',
                                                                       '_status',
                                                                       '_ssid',
                                                                       '_supplicant_state',
                                                                       'status_command',
                                                                       'interface_list_command',
                                                                       'status',
                                                                       'ip_address',
                                                                       'ssid',
                                                                       'supplicant_state',
                                                                       'interface',
                                                                       'mac_address']},
             'apetools.commons.broadcaster.Broadcaster': {'bases': ['apetools.baseclass.BaseClass'],
                                                          'constructor': ['receivers'],
                                                          'docstring': '\n    A broadcaster sends a single datum to multiple targets\n    ',
                                                          'methods': [('receivers',
                                                                       ['new_receivers'],
                                                                       '\n        :param:\n\n         - `new_receivers`: iterable of callable receivers (or single receiver)\n        '),
                                                                      ('temp_receivers',
                                                                       ['new_receivers'],
                                                                       '\n        :param:\n\n         - `new_receivers`: iterable of callable receivers (or single receiver)\n        '),
                                                                      ('subscribe',
                                                                       ['receiver'],
                                                                       "\n        Adds a new receiver to the receivers (if it isn't already there)\n        "),
                                                                      ('unsubscribe',
                                                                       ['receiver'],
                                                                       '\n        :param:\n\n         - `receiver`: a receiver object to remove\n        '),
                                                                      ('set_up',
                                                                       ['targets=None'],
                                                                       '\n        The targets are removed the next time this is called.\n        \n        :param:\n\n         - `targets`: a set of temporary targets\n\n        :postcondition: reset method for each permanent receiver called\n        '),
                                                                      ('reset',
                                                                       [],
                                                                       '\n        :postcondition: self.receivers is None\n        '),
                                                                      ('__contains__',
                                                                       ['receiver'],
                                                                       '\n        :param:\n\n         - `receiver`: an object\n         \n        :rtype: Boolean\n        :return: True if item in receivers\n        '),
                                                                      ('__iter__', [], ''),
                                                                      ('__call__',
                                                                       ['datum'],
                                                                       '\n        Calls each receiver with the `datum`\n        \n        :param:\n\n         - `datum`: A single data item\n        ')],
                                                          'properties': ['_receivers',
                                                                         'receivers',
                                                                         '_temp_receivers',
                                                                         'temp_receivers']},
             'apetools.commons.centraltendency.CentralTendency': {'bases': ['object'],
                                                                  'constructor': ['bootstraps=200',
                                                                                  'z_score=1.96',
                                                                                  'precision=4'],
                                                                  'docstring': '\n    The central tendency stores data and reports the median and mean\n    ',
                                                                  'methods': [('percentile',
                                                                               ['data',
                                                                                'k=50'],
                                                                               ''),
                                                                              ('meanaverage',
                                                                               ['data'],
                                                                               '\n        :param:\n\n         - `data`: a list or array\n\n        :return: the mean of the data\n        '),
                                                                              ('_std',
                                                                               ['data'],
                                                                               '\n        :param:\n\n         - `data`: a list or array\n         \n        :return: standard deviation of the data\n        '),
                                                                              ('__call__',
                                                                               ['value'],
                                                                               '\n        :param:\n\n         - `value`: a datum to add to the data\n        '),
                                                                              ('add',
                                                                               ['value'],
                                                                               '\n        An alias for __call__ for backwards compatibility\n        '),
                                                                              ('reset',
                                                                               [],
                                                                               '\n        :postcondition:\n\n         - `data` is None\n         - `tail` = 0\n        '),
                                                                              ('__str__',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['bootstraps',
                                                                                 'z_score',
                                                                                 'precision',
                                                                                 '_data',
                                                                                 '_median',
                                                                                 '_median_error',
                                                                                 '_mean',
                                                                                 '_sample_deviation',
                                                                                 'sorted',
                                                                                 'data',
                                                                                 'median',
                                                                                 'median_error',
                                                                                 'mean',
                                                                                 'sample_deviation',
                                                                                 'tail']},
             'apetools.commons.datacounter.CounterDatum': {'bases': ["collections.namedtuple('CounterDatum', 'first count')"],
                                                           'constructor': [],
                                                           'docstring': '\n    CounterDatum is used to hold the final count:\n\n     - `first`: seconds from start() to first call\n     - `count`: total number of calls to DataCounter\n    ',
                                                           'methods': [],
                                                           'properties': []},
             'apetools.commons.datacounter.DataCounter': {'bases': ['object'],
                                                          'constructor': ["missing='na'"],
                                                          'docstring': "\n    The DataCounter counts the number of times it's called\n    ",
                                                          'methods': [('start',
                                                                       [],
                                                                       '\n        :postcondition:\n\n         - `start_time`: set to time()\n         - `count`: set to 0\n         - `first`: set to missing\n        '),
                                                                      ('stop',
                                                                       [],
                                                                       '\n        :postcondition:\n\n         - `datum`: set to CounterDatum\n         - `start_time`: set to None\n         - `first`: set to missing\n         - `count`: set to 0\n        ')],
                                                          'properties': ['missing',
                                                                         'start_time',
                                                                         'count',
                                                                         'first',
                                                                         'datum']},
             'apetools.commons.dummy.NoOpDummy': {'bases': ['apetools.baseclass.BaseClass'],
                                                  'constructor': ["name='NoOpDummy'"],
                                                  'docstring': '\n    The NoOpDummy does nothing when asked to do something.\n    ',
                                                  'methods': [('run',
                                                               ['parameters'],
                                                               "\n        This method logs the parameters and returns.\n\n        It is meant to hide from the caller the fact that it called a non-method.\n\n        This is intended for the Test Operator so it doesn't need to know what it calls\n        "),
                                                              ('__call__',
                                                               ['parameters=None'],
                                                               '')],
                                                  'properties': ['name']},
             'apetools.commons.enumerations.AffectorTypes': {'bases': ['object'],
                                                             'constructor': [],
                                                             'docstring': '\n    AffectorTypes hold the names of affectors.\n    ',
                                                             'methods': [],
                                                             'properties': ['__slots__',
                                                                            'naxxx',
                                                                            'attenuator',
                                                                            'buttonpusher']},
             'apetools.commons.enumerations.ConnectionTypes': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '\n    ConnectionTypes holds the connection names\n    ',
                                                               'methods': [],
                                                               'properties': ['__slots__',
                                                                              'ssh',
                                                                              'adblocal',
                                                                              'serial',
                                                                              'telnet']},
             'apetools.commons.enumerations.IperfDefaults': {'bases': ['object'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['__slots__',
                                                                            'window',
                                                                            'length',
                                                                            'parallel',
                                                                            'interval',
                                                                            'format',
                                                                            'path']},
             'apetools.commons.enumerations.IperfDirection': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '\n    The IperfDirection holds constant values for the direction of iperf traffic.\n\n    To accomodate the confusing number of terms people use at allion, the following are aliased:\n\n     * to_dut = downlink = receive = rx\n     * from_dut = uplink = transmit = tx = send\n    ',
                                                              'methods': [],
                                                              'properties': ['__slots__',
                                                                             'to_dut',
                                                                             'downlink',
                                                                             'receieve',
                                                                             'rx',
                                                                             'from_dut',
                                                                             'uplink',
                                                                             'transmit',
                                                                             'tx',
                                                                             'send']},
             'apetools.commons.enumerations.OperatingSystem': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '\n    The Operating System holds constant names for operating systems\n    ',
                                                               'methods': [],
                                                               'properties': ['__slots__',
                                                                              'linux',
                                                                              'android',
                                                                              'windows']},
             'apetools.commons.errors.AffectorError': {'bases': ['Exception'],
                                                       'constructor': [],
                                                       'docstring': '\n    An Affector Error is raised for non-recoverable affector errors\n    ',
                                                       'methods': [],
                                                       'properties': []},
             'apetools.commons.errors.ArgumentError': {'bases': ['Exception'],
                                                       'constructor': [],
                                                       'docstring': "\n    raised if command-line arguments don't produce valid output\n    ",
                                                       'methods': [],
                                                       'properties': []},
             'apetools.commons.errors.CommandError': {'bases': ['Exception'],
                                                      'constructor': [],
                                                      'docstring': '\n    A CommandError reflects a problem with the command on the Device-side\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'apetools.commons.errors.ConfigurationError': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '\n    A ConfigurationError is raised if there is an error in the configuration file\n    ',
                                                            'methods': [],
                                                            'properties': []},
             'apetools.commons.errors.ConnectionError': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': '\n    A ConnectionError is raised by connectinos to indicate a problem.\n    ',
                                                         'methods': [],
                                                         'properties': []},
             'apetools.commons.errors.ConnectionWarning': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': '\n    A connection warning is a non-fatal connection-related error.\n    ',
                                                           'methods': [],
                                                           'properties': []},
             'apetools.commons.errors.StorageError': {'bases': ['Exception'],
                                                      'constructor': [],
                                                      'docstring': '\n    An StoragError is raised by the StorageOutput\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'apetools.commons.errors.TimeoutError': {'bases': ['Exception'],
                                                      'constructor': [],
                                                      'docstring': '\n    A TimeoutError is a generic Timeout exception to wrap the various timeout\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'apetools.commons.events.EventHolder': {'bases': ['apetools.baseclass.BaseClass'],
                                                     'constructor': [],
                                                     'docstring': '\n    A holder of events that will timeout\n    ',
                                                     'methods': [('append',
                                                                  ['event'],
                                                                  '\n        :param:\n\n         - `event`: an event to add\n\n        :postcondition: event appended to self.events\n        '),
                                                                 ('wait',
                                                                  ['timeout=None'],
                                                                  '\n        :param:\n\n         - `timeout`: number of seconds to wait\n\n        :return: True if events set, False on timeout\n        ')],
                                                     'properties': ['_events', 'events']},
             'apetools.commons.filterer.DummyEvent': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('is_set',
                                                                   [],
                                                                   '\n        Always returns True to leave the filter running\n\n        :rtype: Boolean\n        :return: True\n        ')],
                                                      'properties': []},
             'apetools.commons.filterer.Filterer': {'bases': ['apetools.baseclass.BaseClass'],
                                                    'constructor': ['expression',
                                                                    'target',
                                                                    'event=None'],
                                                    'docstring': "\n    A Filterer filters out strings that don't match an expression.\n    ",
                                                    'methods': [('__call__',
                                                                 ['line'],
                                                                 '\n        This only runs if the event is set\n        \n        :param:\n\n         - `line`: A string to check before propagating\n        ')],
                                                    'properties': ['expression',
                                                                   'target',
                                                                   '_event',
                                                                   '_regex',
                                                                   'event',
                                                                   'regex']},
             'apetools.commons.generators.ShallowFind': {'bases': ['object'],
                                                         'constructor': ['glob', 'path=None'],
                                                         'docstring': "\n    A finder of files that doesn't traverse directories\n    ",
                                                         'methods': [('reset',
                                                                      [],
                                                                      '\n        Sets all properties to None\n        '),
                                                                     ('__iter__',
                                                                      [],
                                                                      '\n        :yield: the matching filenames\n        ')],
                                                         'properties': ['glob',
                                                                        '_path',
                                                                        '_filenames',
                                                                        'path',
                                                                        'filenames']},
             'apetools.commons.readoutput.StandardOutput': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': ['source',
                                                                            '*args',
                                                                            '**kwargs'],
                                                            'docstring': '\n    A class to act as a file (read-only)\n    ',
                                                            'methods': [('__iter__',
                                                                         [],
                                                                         "\n        Implemented to make this class recognize the 'in' operator\n        "),
                                                                        ('readline',
                                                                         ['timeout=10'],
                                                                         '\n        :param:\n\n         - `timeout`: The length of time to wait for output\n        '),
                                                                        ('readlines',
                                                                         [],
                                                                         '\n        :return: lisf of lines of output.\n        '),
                                                                        ('read',
                                                                         [],
                                                                         '\n        :return: output as a single string\n        ')],
                                                            'properties': ['_logger',
                                                                           'source',
                                                                           'end_of_file']},
             'apetools.commons.readoutput.ValidatingOutput': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': ['lines',
                                                                              'validate',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': '\n    A ValidatingOutput reads from an iterable and validates the lines.\n    ',
                                                              'methods': [('__iter__',
                                                                           [],
                                                                           '\n        :yield: validated line\n        '),
                                                                          ('readline',
                                                                           ['timeout=1'],
                                                                           '\n        :return: the next line in lines\n        '),
                                                                          ('readlines',
                                                                           [],
                                                                           '\n        :return: list of validated lines\n        '),
                                                                          ('read',
                                                                           [],
                                                                           '\n        :return: validated lines joined as a string\n        ')],
                                                              'properties': ['lines',
                                                                             'validate',
                                                                             'empty']},
             'apetools.commons.reporter.Reporter': {'bases': ['apetools.baseclass.BaseClass'],
                                                    'constructor': ['header',
                                                                    'filename',
                                                                    'storage',
                                                                    "delimiter=','",
                                                                    "missing='na'"],
                                                    'docstring': '\n    A reporter compiles facts and reports them\n    ',
                                                    'methods': [('flush',
                                                                 [],
                                                                 '\n        Writes whatever tokens there are to the output\n\n        :postcondition: self.tokens is None\n        '),
                                                                ('add_missing',
                                                                 [],
                                                                 '\n        :postcondition: missing token added to tokens\n        '),
                                                                ('__call__',
                                                                 ['token'],
                                                                 "\n        Appends the token and flushes line if it's complete\n\n        :param:\n\n         - `token`: a single column entry\n        ")],
                                                    'properties': ['header',
                                                                   'delimiter',
                                                                   'missing',
                                                                   'filename',
                                                                   'storage',
                                                                   '_output',
                                                                   '_line_length',
                                                                   '_tokens',
                                                                   'output',
                                                                   'line_length',
                                                                   'tokens']},
             'apetools.commons.storagebroadcaster.CallFile': {'bases': ['object'],
                                                              'constructor': ['filename'],
                                                              'docstring': '\n    A class to wrap a file to meet the interface of the other targets\n    ',
                                                              'methods': [('send',
                                                                           ['output'],
                                                                           '\n        an alias for write to use in coroutines\n        '),
                                                                          ('__call__',
                                                                           ['output'],
                                                                           '\n        :param:\n\n         - `output`: string to write to the file\n        '),
                                                                          ('write',
                                                                           ['output'],
                                                                           '\n        an alias for __call__\n        '),
                                                                          ('close',
                                                                           [],
                                                                           '\n        :postcondition: open_file is closed\n        '),
                                                                          ('__del__',
                                                                           [],
                                                                           '\n        :postcondition: open_file is closed\n        ')],
                                                              'properties': ['filename',
                                                                             '_open_file',
                                                                             'open_file']},
             'apetools.commons.storagebroadcaster.StorageBroadcaster': {'bases': ['apetools.baseclass.BaseClass'],
                                                                        'constructor': ['path',
                                                                                        'targets=None'],
                                                                        'docstring': '\n    The Storage Broadcaster maintains an open file and a set of targets.\n    ',
                                                                        'methods': [('check_folder',
                                                                                     ['folder'],
                                                                                     '\n        :param:\n\n         - `folder`: the name of a folder\n\n        :postcondition: folder is a folder in the local filesystem\n        '),
                                                                                    ('open',
                                                                                     ['filename',
                                                                                      "subdir=''"],
                                                                                     '\n        :param:\n\n         - `filename`: the name of a file to open and add to the targets\n         - `subdir`: a sub-directory within the main path.\n        ')],
                                                                        'properties': ['path',
                                                                                       '_targets',
                                                                                       '_folder',
                                                                                       'targets',
                                                                                       'folder']},
             'apetools.commons.storageoutput.StorageOutput': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': ['output_folder',
                                                                              'timestamp_format=IPERF_TIMESTAMP',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': '\n    A WriteOutput maintains an output file.\n    ',
                                                              'methods': [('extend_path',
                                                                           ['subdirectory'],
                                                                           '\n        :param:\n\n         - `subdirectory`: a path to add to the current path\n\n        :postcondition:\n\n         -`self.output_folder` extended with subdirectory\n         - `self._path` is None\n        '),
                                                                          ('is_file',
                                                                           ['filename',
                                                                            'subdir=None'],
                                                                           '\n        :param:\n\n         - `filename`: The name of the file to open \n         - `subdir`: A subdirectory whithin the output folder to put the file in.\n         \n        :return: True if file exists, False otherwise\n        '),
                                                                          ('get_full_path',
                                                                           ['filename'],
                                                                           '\n        :param:\n\n         - `filename`: name of file\n\n        :return: path to filename in output folder\n        :postcondition: output folder exists\n        '),
                                                                          ('open',
                                                                           ['filename',
                                                                            'subdir=None',
                                                                            'mode=WRITEABLE'],
                                                                           '\n        :param:\n\n         - `filename`: The name of the file to open \n         - `subdir`: A subdirectory whithin the output folder to put the file in.\n         \n        :return: A clone of this object with a new file opened.\n        '),
                                                                          ('_timestamp',
                                                                           ['name',
                                                                            'timestamp_format=None'],
                                                                           "\n        Checks for a '{t}' in the string for a placeholder\n        \n        :return: name with timestamp\n        "),
                                                                          ('_fix_duplicate_names',
                                                                           ['name',
                                                                            'extension',
                                                                            'subdir=None'],
                                                                           '\n        Checks if the name exists as a prefix and adds a number if it does.\n\n        :return: uniqued name\n        '),
                                                                          ('write',
                                                                           ['line'],
                                                                           '\n        :param:\n\n         - `line`: A string to send to the output_file\n        '),
                                                                          ('writeline',
                                                                           ['line'],
                                                                           "\n        Coerces the line to a string and adds a newline.\n        \n        :param:\n\n         - `line`: string to add to (if it doesn't have one) then send to output \n        "),
                                                                          ('writelines',
                                                                           ['lines'],
                                                                           '\n        :param:\n\n         - `lines`: iterable of strings to send to the file\n        '),
                                                                          ('copy',
                                                                           ['source',
                                                                            'subdir=None'],
                                                                           '\n        :param:\n\n         - `source`: The path to a file.\n         - `subdir`: subfolder in the output folder\n\n        :postcondition: file in path is copied to output folder.\n        '),
                                                                          ('move',
                                                                           ['source',
                                                                            'subdir=None'],
                                                                           '\n        :param:\n\n         - `source`: The path to a file or directory to move to the output folder.\n         - `subdir`: a subdirectory to make within the output folder.\n        '),
                                                                          ('close',
                                                                           [],
                                                                           '\n        :postcondition:\n\n         - self.output_file is flushed\n         - self.output_file is closed\n        '),
                                                                          ('__del__',
                                                                           [],
                                                                           '\n        :postcondition: self.close called\n        ')],
                                                              'properties': ['output_folder',
                                                                             'timestamp_format',
                                                                             '_path',
                                                                             'filename',
                                                                             'output_file',
                                                                             'path']},
             'apetools.commons.sublogger.SubLogger': {'bases': ['apetools.baseclass.BaseClass'],
                                                      'constructor': ['log_format=SCREEN_FORMAT',
                                                                      'timestamp=LOG_TIMESTAMP',
                                                                      'level=logging.INFO'],
                                                      'docstring': '\n    A creator and holder of sub-logs (meant for the Hortator)\n    ',
                                                      'methods': [('add',
                                                                   ['logname', 'logger=None'],
                                                                   '\n        :param:\n\n         - `logname`: path (name) for the log\n         - `logger`: logging instarce to add handler to\n\n        :postcondition: file-handler has been added to logger\n        '),
                                                                  ('remove',
                                                                   ['logger=None',
                                                                    'logname=None'],
                                                                   '\n        :param:\n\n         - `logname`: name of the log to remove\n         - `logger`: logging instance with one of self.handlers\n\n        :postcondition: log removed from logging\n        ')],
                                                      'properties': ['log_format',
                                                                     'timestamp',
                                                                     'level',
                                                                     '_handlers',
                                                                     'handlers']},
             'apetools.commons.timestamp.TimestampFormat': {'bases': ['object'],
                                                            'constructor': ['format_type=TimestampFormatEnums.iperf'],
                                                            'docstring': '\n    A class to hold timestampformats\n    ',
                                                            'methods': [('convert',
                                                                         ['time_in_seconds'],
                                                                         '\n        :param:\n\n         - `time_in_seconds`: seconds since the epoch (as float)\n\n        :return: the given time converted to a formatted string\n        '),
                                                                        ('__call__',
                                                                         [],
                                                                         '\n        A pass-through to self.now\n        ')],
                                                            'properties': ['format_type',
                                                                           '_format',
                                                                           '_now',
                                                                           'format',
                                                                           'now']},
             'apetools.commons.timestamp.TimestampFormatEnums': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    A class to hold the format names\n    ',
                                                                 'methods': [],
                                                                 'properties': ['__slots__',
                                                                                'iperf',
                                                                                'log']},
             'apetools.connections.adbconnection.ADBBlockingConnection': {'bases': ['apetools.connections.adbconnection.ADBConnection'],
                                                                          'constructor': ['*args',
                                                                                          '**kwargs'],
                                                                          'docstring': '\n    Like the ADBConnection but waits for a device to come online\n    ',
                                                                          'methods': [],
                                                                          'properties': []},
             'apetools.connections.adbconnection.ADBCommandError': {'bases': ['apetools.connections.adbconnection.CommandError'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    Raise if there is a problem with an ADB command\n    ',
                                                                    'methods': [],
                                                                    'properties': []},
             'apetools.connections.adbconnection.ADBConnection': {'bases': ['localconnection.LocalNixConnection'],
                                                                  'constructor': ['serial_number=None',
                                                                                  '*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '\n    An ADB Connection sends commands to the Android Debug Bridge\n    ',
                                                                  'methods': [('_rpc',
                                                                               ['command',
                                                                                "arguments=''",
                                                                                'timeout=None'],
                                                                               '\n        Overrides the LocalConnection._rpc to check for errors\n        '),
                                                                              ('check_errors',
                                                                               ['line'],
                                                                               '\n        This is here so that children can override it.\n        :param:\n\n         - `output`: OutputError tuple\n        '),
                                                                              ('check_base_errors',
                                                                               ['line'],
                                                                               '\n        :param:\n\n         - `line`: A string of output\n        '),
                                                                              ('__str__',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['_logger',
                                                                                 'command_prefix',
                                                                                 '_operating_system',
                                                                                 'operating_system']},
             'apetools.connections.adbconnection.ADBConnectionError': {'bases': ['apetools.connections.adbconnection.ConnectionError'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Raise if there is a problem with the ADB Connection\n    ',
                                                                       'methods': [],
                                                                       'properties': []},
             'apetools.connections.adbconnection.ADBConnectionWarning': {'bases': ['apetools.connections.adbconnection.ConnectionWarning'],
                                                                         'constructor': [],
                                                                         'docstring': '\n    A warning to raise if something non-fatal but bad happens\n    ',
                                                                         'methods': [],
                                                                         'properties': []},
             'apetools.connections.adbconnection.ADBSSHConnection': {'bases': ['sshconnection.SSHConnection'],
                                                                     'constructor': ['serial_number=None',
                                                                                     '*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    An ADB Connection sends commands to the Android Debug Bridge\n    ',
                                                                     'methods': [('_procedure_call',
                                                                                  ['command',
                                                                                   "arguments=''",
                                                                                   "path=''",
                                                                                   'timeout=10'],
                                                                                  '\n        Overrides the SSHConnection._procedure_call to check for errors\n        '),
                                                                                 ('check_errors',
                                                                                  ['line'],
                                                                                  '\n        This is here so that children can override it.\n        :param:\n\n         - `line`: a line of output\n        '),
                                                                                 ('_check_errors',
                                                                                  ['line'],
                                                                                  "\n        Checks connection-related errors\n\n        :raise: ConnectionError if the device isn't detected\n        :raise: ConnectionWarning if the device isn't rooted\n        ")],
                                                                     'properties': ['_logger',
                                                                                    'command_prefix',
                                                                                    'operating_system']},
             'apetools.connections.adbconnection.ADBShellBlockingConnection': {'bases': ['apetools.connections.adbconnection.ADBShellConnection'],
                                                                               'constructor': ['*args',
                                                                                               '**kwargs'],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': ['command_prefix',
                                                                                              '_unknown_command']},
             'apetools.connections.adbconnection.ADBShellConnection': {'bases': ['apetools.connections.adbconnection.ADBConnection'],
                                                                       'constructor': ['*args',
                                                                                       '**kwargs'],
                                                                       'docstring': '\n    An ADBShellConnection connects to the adb shell.\n\n    If you use a timeout parameter on method calls, the output acts line-buffered.\n    If you leave the timeout as None, it acts file-buffered\n    ',
                                                                       'methods': [('_procedure_call',
                                                                                    ['command',
                                                                                     "arguments=''",
                                                                                     "path=''",
                                                                                     'timeout=None'],
                                                                                    ''),
                                                                                   ('check_errors',
                                                                                    ['line'],
                                                                                    '')],
                                                                       'properties': ['_unknown_command',
                                                                                      '_logger',
                                                                                      'unknown_command']},
             'apetools.connections.adbconnection.ADBShellSSHConnection': {'bases': ['apetools.connections.adbconnection.ADBSSHConnection'],
                                                                          'constructor': ['*args',
                                                                                          '**kwargs'],
                                                                          'docstring': '\n    A class to talk to the shell, note the adb-server\n    ',
                                                                          'methods': [('check_errors',
                                                                                       ['line'],
                                                                                       "\n        :line: line of standard output\n\n        :raise: ADBCommandError if the command issued wasn't recognized\n        ")],
                                                                          'properties': []},
             'apetools.connections.android.Android': {'bases': ['object'],
                                                      'constructor': ['addr=None'],
                                                      'docstring': '',
                                                      'methods': [('_rpc',
                                                                   ['method', '*args'],
                                                                   ''),
                                                                  ('__getattr__', ['name'], '')],
                                                      'properties': ['conn', 'client', 'id']},
             'apetools.connections.localconnection.LocalConnection': {'bases': ['apetools.baseclass.BaseClass'],
                                                                      'constructor': ["command_prefix=''",
                                                                                      '*args',
                                                                                      '**kwargs'],
                                                                      'docstring': '\n    A local connection talks to a local command-line shell.\n\n    ',
                                                                      'methods': [('_procedure_call',
                                                                                   ['command',
                                                                                    "arguments=''",
                                                                                    "path=''",
                                                                                    'timeout=None'],
                                                                                   '\n        This is provided so it can be overriden by subclasses.\n\n        Otherwise it just returns _main()\n        '),
                                                                                  ('_main',
                                                                                   ['command',
                                                                                    "arguments=''",
                                                                                    "path=''",
                                                                                    'timeout=None'],
                                                                                   '\n        :param:\n\n         - `command`: the command string to execute\n         - `arguments`: The arguments for the command\n         - `timeout`: if `block`, wait until timeout for output\n\n        :return: OutputError named tuple\n        '),
                                                                                  ('__getattr__',
                                                                                   ['command'],
                                                                                   '\n        :param:\n\n         - `command`: The command to call.\n\n        :return: The _procedure_call method\n        ')],
                                                                      'properties': ['_logger',
                                                                                     'command_prefix',
                                                                                     '_queue',
                                                                                     'queue']},
             'apetools.connections.localconnection.LocalNixConnection': {'bases': ['apetools.connections.localconnection.LocalConnection'],
                                                                         'constructor': ['*args',
                                                                                         '**kwargs'],
                                                                         'docstring': '\n    A Class that uses Pexpect to get around the problem of file-buffering\n\n    So far as I know, Pexpect only works on *nix-based systems.\n    ',
                                                                         'methods': [('run',
                                                                                      ['command',
                                                                                       'arguments'],
                                                                                      '\n        runs the Pexpect command and puts lines of output on the Queue\n\n        :param:\n\n         - `command`: The shell command.\n         - `arguments`: A string of command arguments.\n\n        :postcondition: OutputError with output and error file-like objects\n        ')],
                                                                         'properties': ['_logger']},
             'apetools.connections.nonlocalconnection.NonLocalConnection': {'bases': ['apetools.baseclass.BaseClass'],
                                                                            'constructor': ["command_prefix=''",
                                                                                            'lock=None',
                                                                                            '*args',
                                                                                            '**kwargs'],
                                                                            'docstring': '\n    A non-local connection is the base for non-local connections\n\n    ',
                                                                            'methods': [('_procedure_call',
                                                                                         ['command',
                                                                                          "arguments=''",
                                                                                          'timeout=None'],
                                                                                         "\n        This is provided so it can be overriden by subclasses.\n        It is what's called directly by __getattr__ to support LocalConnection.command() calls\n\n        Otherwise it just returns _main()\n        "),
                                                                                        ('_main',
                                                                                         ['command',
                                                                                          "arguments=''",
                                                                                          'timeout=None'],
                                                                                         '\n        :param:\n\n         - `command`: the command string to execute\n         - `arguments`: The arguments for the command\n         - `timeout`: A timeout for the queue when doing a get\n\n        :return: OutputError named tuple\n        '),
                                                                                        ('run',
                                                                                         ['command',
                                                                                          'arguments'],
                                                                                         '\n        Runs the command in a subprocess and puts the output and error on the queue\n\n        :param:\n\n         - `command`: The shell command.\n         - `arguments`: A string of command arguments.\n\n        :postcondition: OutputError with output and error file-like objects\n        '),
                                                                                        ('start',
                                                                                         ['command',
                                                                                          'arguments'],
                                                                                         '\n        starts run in a thread\n\n        :return: the thread object\n        '),
                                                                                        ('__getattr__',
                                                                                         ['command'],
                                                                                         '\n        The parameters are the same as _procedure_call()\n        \n        :param:\n\n         - `command`: The command to call.\n         - `arguments`: arguments to pass to the command\n         - `timeout`: amount of time to wait for the command to return the stdout and stderr files.\n\n        :return: _procedure_call method called with passed-in args and kwargs\n        '),
                                                                                        ('__str__',
                                                                                         [],
                                                                                         '')],
                                                                            'properties': ['_logger',
                                                                                           'command_prefix',
                                                                                           '_lock',
                                                                                           '_queue',
                                                                                           'exc_info',
                                                                                           'lock',
                                                                                           'queue']},
             'apetools.connections.producer.PopenFile': {'bases': ['apetools.baseclass.BaseClass'],
                                                         'constructor': ['file_object',
                                                                         'process',
                                                                         'lock',
                                                                         'counter=None',
                                                                         'timeout=10',
                                                                         'queue=None'],
                                                         'docstring': "\n    A container for a process' readable file-outputs\n    ",
                                                         'methods': [('run',
                                                                      [],
                                                                      '\n        :postcondition: lines read from the file and put on the Queue\n        '),
                                                                     ('start',
                                                                      [],
                                                                      '\n        :postcondition: self.run executing as self.thread\n        '),
                                                                     ('readline',
                                                                      ['timeout=None'],
                                                                      '\n        :return: Next item in queue or EOF if it times out\n        '),
                                                                     ('read',
                                                                      ['timeout=None'],
                                                                      '\n        :param:\n\n         - `timeout`: number of seconds to try and read.\n        :return: lines from the queue joined as a string\n        '),
                                                                     ('close',
                                                                      [],
                                                                      '\n        :postcondition: file_object has been closed and self.closed is True\n        '),
                                                                     ('__iter__',
                                                                      [],
                                                                      "\n        SPACE is yielded on timeout so it isn't mistaken for an EOF\n        \n        :yield: next readline() or SPACE if it times out\n        "),
                                                                     ('__del__',
                                                                      [],
                                                                      '\n        :postcondition: if process was given, self.close called\n        ')],
                                                         'properties': ['file_object',
                                                                        'timeout',
                                                                        'counter',
                                                                        '_queue',
                                                                        'started',
                                                                        'closed',
                                                                        'stop',
                                                                        'process',
                                                                        'lock',
                                                                        'queue',
                                                                        'thread']},
             'apetools.connections.producer.PopenProducer': {'bases': ['apetools.baseclass.BaseClass'],
                                                             'constructor': ['command',
                                                                             'timeout=10'],
                                                             'docstring': '\n    The subprocess.Popen Producer executes a command when its process or one of its files is requested\n    ',
                                                             'methods': [('__del__',
                                                                          [],
                                                                          "\n        It appears that the way python's garbage collection works, the counter is unnecessary.\n        \n        :postconditions:\n\n           - counter decremented\n           - if counter = 0, process killed\n        ")],
                                                             'properties': ['command',
                                                                            'timeout',
                                                                            '_process',
                                                                            '_stdout',
                                                                            '_stderr',
                                                                            '_counter',
                                                                            '_lock',
                                                                            'lock',
                                                                            'counter',
                                                                            'process',
                                                                            'stdout',
                                                                            'stderr']},
             'apetools.connections.puppetconnection.PuppetConnection': {'bases': ['localconnection.LocalConnection'],
                                                                        'constructor': ['*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    A puppet connection holds methods to affect the attached device.\n    ',
                                                                        'methods': [('add_paths',
                                                                                     ['paths'],
                                                                                     '\n        \n        ')],
                                                                        'properties': []},
             'apetools.connections.serialadapter.SerialAdapter': {'bases': ['serial.Serial'],
                                                                  'constructor': ['*args',
                                                                                  '**kwargs'],
                                                                  'docstring': "\n    A SerialAdapter adapts pyserial to this librarys' style.\n    ",
                                                                  'methods': [('exec_command',
                                                                               ['command',
                                                                                'timeout=None'],
                                                                               '\n        Sends the command to the device.\n        \n        :return: self.client (a file-like object)\n        '),
                                                                              ('writeline',
                                                                               ['message=EMPTY_STRING'],
                                                                               '\n        Adds a newline and sends the message to the device.\n        \n        :param:\n\n         - `message`: The message to send to the device.\n        ')],
                                                                  'properties': ['timeout']},
             'apetools.connections.serialconnection.SerialConnection': {'bases': ['localconnection.LocalConnection'],
                                                                        'constructor': ['port',
                                                                                        'baudrate',
                                                                                        'timeout=10',
                                                                                        'prompt=None',
                                                                                        'prompt_length=10',
                                                                                        '*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    A SerialConnection executes commands over a serial connections\n\n    ',
                                                                        'methods': [('set_timeout',
                                                                                     ['new_timeout'],
                                                                                     "\n        Some of the configuration commands for devices take a long time.\n\n        This sets the client's timeout to whatever you want.\n\n        :param:\n\n         - `new_timeout`: A timeout value in seconds for the Device\n        "),
                                                                                    ('_procedure_call',
                                                                                     ['command',
                                                                                      "arguments=''",
                                                                                      "path=''",
                                                                                      'timeout=10'],
                                                                                     "\n        Despite its name, this isn't intended to be run.\n        The . notation is the expected interface.\n        \n        runs the SimpleClient exec_command and puts lines of output on the Queue\n\n        :param:\n\n         - `command`: The shell command.\n         - `arguments`: A string of command arguments.\n         - `path`: path to prepend to the command\n\n        :postcondition: OutputError with output and error file-like objects\n        ")],
                                                                        'properties': ['port',
                                                                                       'baudrate',
                                                                                       'timeout',
                                                                                       '_prompt',
                                                                                       'prompt',
                                                                                       'prompt_length',
                                                                                       '_client',
                                                                                       'client']},
             'apetools.connections.sharedcounter.SharedCounter': {'bases': ['object'],
                                                                  'constructor': ['count=0',
                                                                                  'step=1'],
                                                                  'docstring': '\n    A counter for classes to share\n    ',
                                                                  'methods': [('increment',
                                                                               [],
                                                                               '\n        :postcondition: self.count incremented by 1 step\n        :return: the current value of self.count\n        '),
                                                                              ('decrement',
                                                                               [],
                                                                               '\n        :postcondition: self.count decremented by 1 step\n        :return: the current value of self.count\n        '),
                                                                              ('__eq__',
                                                                               ['other'],
                                                                               "\n        :rtype: Boolean\n        :return: if self.count equals 'other'\n        "),
                                                                              ('__str__',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['count',
                                                                                 'step']},
             'apetools.connections.sl4aconnection.SL4AConnection': {'bases': ['android.Android'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': '',
                                                                    'methods': [('__getattr__',
                                                                                 ['method'],
                                                                                 '\n        :param:\n\n         - `method`: The name of an SL4a method\n\n        :return: Whatever result.result is\n        :raise: CommandError if result.error is not None\n        :raise: ConnectionError if the SL4a server returns an error.\n        '),
                                                                                ('check_error',
                                                                                 ['error',
                                                                                  'method'],
                                                                                 '\n        Checks the result for errors\n        ')],
                                                                    'properties': ['logger']},
             'apetools.connections.sshadapter.SSHClient': {'bases': ['paramiko.SSHClient'],
                                                           'constructor': [],
                                                           'docstring': "\n    Subclasses paramiko's SSHClient to add a timeout.\n    ",
                                                           'methods': [('exec_command',
                                                                        ['command',
                                                                         'timeout=None',
                                                                         'bufsize=-1',
                                                                         'combine_stderr=False'],
                                                                        "\n        :param:\n\n         - `command`: A string to send to the client.\n         - `timeout`: Set non-blocking timeout.\n         - `bufsize`: Interpreted same way as python `file`.\n         - `combine_stderr`: Sets the paramiko flag so there's only one stream\n\n        :rtype: tuple\n        :return: stdin, stdout, stderr\n        "),
                                                                       ('invoke_shell',
                                                                        ["term='vt100'",
                                                                         'width=80',
                                                                         'height=24',
                                                                         'timeout=None',
                                                                         'bufsize=-1'],
                                                                        '\n        :param:\n\n         - `term`: Terminal to emulate.\n         - `width`: Screen width\n         - `height`: Screen Height.\n         - `timeout`: Set non-blocking timeout.\n         - `bufsize`: Interpreted same way as python `file`.\n\n        :rtype: tuple\n        :return: stdin, stdout, stderr\n        '),
                                                                       ('invoke_shell_rw',
                                                                        ["term='vt100'",
                                                                         'width=80',
                                                                         'height=24',
                                                                         'timeout=None',
                                                                         'bufsize=-1'],
                                                                        '\n        :param:\n\n         - `term`: Terminal to emulate.\n         - `width`: Screen width\n         - `height`: Screen Height.\n         - `timeout`: Set non-blocking timeout.\n         - `bufsize`: Interpreted same way as python `file`.\n\n        :rtype: tuple\n        :return: i/o\n        ')],
                                                           'properties': []},
             'apetools.connections.sshadapter.SimpleClient': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': ['hostname',
                                                                              'username',
                                                                              'password=None',
                                                                              'port=22',
                                                                              'timeout=5'],
                                                              'docstring': "\n    A simple wrapper around paramiko's SSHClient.\n\n    The only intended public interface is exec_command.\n    ",
                                                              'methods': [('exec_command',
                                                                           ['command',
                                                                            'timeout=10'],
                                                                           "\n        A pass-through to the SSHClient's exec_command.\n\n        :param:\n\n         - `command`: A string to send to the client.\n         - `timeout`: Set non-blocking timeout.\n\n        :rtype: tuple\n        :return: stdin, stdout, stderr\n\n        :raise: ConnectionError for paramiko or socket exceptions\n        "),
                                                                          ('__str__',
                                                                           [],
                                                                           '\n        :return: username, hostname, port, password in string\n        '),
                                                                          ('close',
                                                                           [],
                                                                           "\n        :postcondition: client's connection is closed\n        ")],
                                                              'properties': ['_logger',
                                                                             'hostname',
                                                                             'username',
                                                                             'password',
                                                                             'port',
                                                                             'timeout',
                                                                             '_client',
                                                                             'client']},
             'apetools.connections.sshconnection.OutputFile': {'bases': ['apetools.commons.readoutput.ValidatingOutput'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '\n    A class to handle the ssh output files\n\n    This traps socket timeouts.\n    ',
                                                               'methods': [('readline',
                                                                            ['timeout=10'],
                                                                            '\n        :param:\n\n         - `timeout`: The length of time to wait for output\n\n        :return: line from readline, EOF or None (in event of timeout)\n        ')],
                                                               'properties': ['end_of_file']},
             'apetools.connections.sshconnection.SSHConnection': {'bases': ['nonlocalconnection.NonLocalConnection'],
                                                                  'constructor': ['hostname',
                                                                                  'username',
                                                                                  'password=None',
                                                                                  'port=22',
                                                                                  'timeout=5',
                                                                                  'operating_system=enumerations.OperatingSystem.linux',
                                                                                  '*args',
                                                                                  '**kwargs'],
                                                                  'docstring': '\n    An SSHConnection executes commands over an SSHConnection\n\n    ',
                                                                  'methods': [('_procedure_call',
                                                                               ['command',
                                                                                "arguments=''",
                                                                                "path=''",
                                                                                'timeout=10'],
                                                                               "\n        The reason for this is so that sub-classes can override this method\n        this isn't intended to be run.\n        The . notation is the expected interface.\n        \n        runs self._main\n\n        :param:\n\n         - `command`: The shell command.\n         - `arguments`: A string of command arguments.\n         - `path`: An optional path to prepend to the command\n         - `timeout`: readline timeout for the SSHConnection\n        :return: OutputError with output and error file-like objects\n        "),
                                                                              ('_main',
                                                                               ['command',
                                                                                'arguments',
                                                                                'path',
                                                                                'timeout'],
                                                                               "\n        this isn't intended to be run.\n        The . notation is the expected interface.\n        \n        runs the SimpleClient exec_command\n\n        :param:\n\n         - `command`: The shell command.\n         - `arguments`: A string of command arguments.\n         - `path`: An optional path to prepend to the command\n         - `timeout`: readline timeout for the SSHConnection\n        :return: OutputError with output and error file-like objects\n        "),
                                                                              ('check_errors',
                                                                               ['line'],
                                                                               "\n        Doesn't do anything - SSHClient handles ssh errors. Overwrite in sub-classes if needed\n        "),
                                                                              ('__str__',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['hostname',
                                                                                 'username',
                                                                                 'password',
                                                                                 'port',
                                                                                 'operating_system',
                                                                                 'timeout',
                                                                                 '_logger',
                                                                                 '_client',
                                                                                 'client']},
             'apetools.connections.telnetadapter.TelnetAdapter': {'bases': ['apetools.baseclass.BaseClass'],
                                                                  'constructor': ['host',
                                                                                  "prompt='#'",
                                                                                  "login='root'",
                                                                                  'password=None',
                                                                                  'port=23',
                                                                                  'timeout=2',
                                                                                  "end_of_line='\\r\\n'",
                                                                                  "login_prompt='login:'"],
                                                                  'docstring': '\n    A TelnetAdapter Adapts the telnetlib.Telnet to this libraries interfaces.\n    ',
                                                                  'methods': [('exec_command',
                                                                               ['command',
                                                                                'timeout=10'],
                                                                               "\n        The main interface.\n\n        Since I'm hiding the client from users, this will do a read_very_eager before continuing.\n        The read is intended to try and flush the output\n\n        :param:\n\n         - `command`: The command to execute on the device\n         - `timeout`: The readline timeout\n\n        :return: TelnetOutput with the this object's as client\n        "),
                                                                              ('writeline',
                                                                               ["message=''"],
                                                                               '\n        :param:\n\n         - `message`: A message to send to the device.\n        '),
                                                                              ('__del__',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['host',
                                                                                 'prompt',
                                                                                 'login',
                                                                                 'port',
                                                                                 'timeout',
                                                                                 'end_of_line',
                                                                                 '_client',
                                                                                 'login_prompt',
                                                                                 'client']},
             'apetools.connections.telnetadapter.TelnetOutput': {'bases': ['apetools.baseclass.BaseClass'],
                                                                 'constructor': ['client',
                                                                                 "prompt='#'",
                                                                                 "end_of_line='\\r\\n'",
                                                                                 'timeout=10'],
                                                                 'docstring': '\n    The TelnetOutput converts the telnet output to a file-like object\n    ',
                                                                 'methods': [('readline',
                                                                              ['timeout=None'],
                                                                              '\n        :param:\n\n         - `timeout`: The readline timeout\n         \n        :return: The next line of text\n        '),
                                                                             ('next',
                                                                              [],
                                                                              '\n        :yield: the next line\n        '),
                                                                             ('readlines',
                                                                              [],
                                                                              '\n        :return: A list of lines\n        '),
                                                                             ('read',
                                                                              [],
                                                                              '\n        :return: String of output\n        \n        '),
                                                                             ('__iter__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['client',
                                                                                'prompt',
                                                                                'end_of_line',
                                                                                'timeout',
                                                                                'endings',
                                                                                'line_ending_index',
                                                                                'finished']},
             'apetools.connections.telnetconnection.TelnetConnection': {'bases': ['nonlocalconnection.NonLocalConnection'],
                                                                        'constructor': ['hostname',
                                                                                        'port=23',
                                                                                        "username='root'",
                                                                                        "prompt='#'",
                                                                                        'timeout=2',
                                                                                        "end_of_line='\\r\\n'",
                                                                                        'mangle_prompt=True',
                                                                                        '*args',
                                                                                        '**kwargs'],
                                                                        'docstring': '\n    A TelnetConnection executes commands over a Telnet Connection\n\n    ',
                                                                        'methods': [('_procedure_call',
                                                                                     ['command',
                                                                                      "arguments=''",
                                                                                      "path=''",
                                                                                      'timeout=10'],
                                                                                     "\n        Despite its name, this isn't intended to be run.\n        The . notation is the expected interface.\n        \n        runs the SimpleClient exec_command and puts lines of output on the Queue\n\n        :param:\n\n         - `command`: The shell command.\n         - `arguments`: A string of command arguments.\n         - `path`: an optional path to add to the command\n         - `timeout`: readline timeout\n\n        :postcondition: OutputError with output and error file-like objects\n        "),
                                                                                    ('validate',
                                                                                     ['line'],
                                                                                     '')],
                                                                        'properties': ['hostname',
                                                                                       'port',
                                                                                       'username',
                                                                                       'prompt',
                                                                                       'timeout',
                                                                                       'end_of_line',
                                                                                       'mangle_prompt',
                                                                                       '_logger',
                                                                                       '_client',
                                                                                       'client']},
             'apetools.devices.adbdevice.AdbDevice': {'bases': ['basedevice.BaseDevice'],
                                                      'constructor': ['*args', '**kwargs'],
                                                      'docstring': '\n    A class to bundle commands to control an adb device\n    ',
                                                      'methods': [('wake_screen',
                                                                   [],
                                                                   '\n        Wake the screen\n        '),
                                                                  ('display',
                                                                   ['message'],
                                                                   '\n        Display a message on the screen\n        '),
                                                                  ('disable_wifi',
                                                                   [],
                                                                   '\n        :postcondition: WiFi radio disabled\n        '),
                                                                  ('enable_wifi',
                                                                   [],
                                                                   '\n        :postcondition: WiFi radio enabled\n        '),
                                                                  ('get_wifi_info',
                                                                   [],
                                                                   '\n        :rtype: StringType\n        :return: The Wifi Info\n        '),
                                                                  ('log',
                                                                   ['message'],
                                                                   '\n        :postcondition: message sent to the connection\n        '),
                                                                  ('root',
                                                                   [],
                                                                   '\n        :postcondition: `su` sent to the device\n        ')],
                                                      'properties': ['_wifi_control',
                                                                     '_wifi_querier',
                                                                     '_netcfg',
                                                                     '_wifi_commands',
                                                                     'channel',
                                                                     'rssi',
                                                                     'bitrate',
                                                                     'noise',
                                                                     'ssid',
                                                                     'bssid',
                                                                     'mac_address',
                                                                     '_mac_address',
                                                                     'wifi_commands',
                                                                     'wifi_querier',
                                                                     'netcfg',
                                                                     'wifi_control',
                                                                     'connection',
                                                                     '_connection',
                                                                     'address']},
             'apetools.devices.adbdevice.AdbWifiCommandFinder': {'bases': ['apetools.baseclass.BaseClass'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    A finder of the main wifi command.\n    ',
                                                                 'methods': [('__call__',
                                                                              ['connection'],
                                                                              '\n        :param:\n\n         - `connection`: An ADB Connection to the device\n\n        :return: string identifier of primary wifi query command\n        ')],
                                                                 'properties': []},
             'apetools.devices.basedevice.BaseDevice': {'bases': ['apetools.baseclass.BaseClass'],
                                                        'constructor': ['connection=None',
                                                                        'interface=None',
                                                                        'address=None',
                                                                        'role=None',
                                                                        'csv=False',
                                                                        '*args',
                                                                        '**kwargs'],
                                                        'docstring': '',
                                                        'methods': [('bitrate',
                                                                     [],
                                                                     '\n        :return: the current bitrate\n        '),
                                                                    ('disable_wifi',
                                                                     [],
                                                                     '\n        Disable the WiFi Radio\n        '),
                                                                    ('enable_wifi',
                                                                     [],
                                                                     '\n        Enable the WiFi radio.\n        '),
                                                                    ('address',
                                                                     [],
                                                                     '\n        :rtype: String\n        :return: the address (presumably) IP for the test-interface for the device\n        '),
                                                                    ('ssid',
                                                                     [],
                                                                     '\n        :return: the SSID of the attached AP\n        '),
                                                                    ('bssid',
                                                                     [],
                                                                     '\n        :return: the MAC address of the attached AP\n        '),
                                                                    ('channel',
                                                                     [],
                                                                     '\n        :return: the channel for the wifi connection\n        '),
                                                                    ('noise',
                                                                     [],
                                                                     '\n        :return: the current reported noise for the wifi channel\n        '),
                                                                    ('mac_address',
                                                                     [],
                                                                     '\n        :return: the mac address of the device\n        '),
                                                                    ('rssi',
                                                                     [],
                                                                     '\n        :return: the RSSI for the wifi signal\n        '),
                                                                    ('log',
                                                                     ['message'],
                                                                     "\n        Send a message to the device's log.\n\n        :param:\n\n         - `message`: A string to send to the device log.\n        "),
                                                                    ('poll',
                                                                     [],
                                                                     '\n        :return: rssi,noise,bitrate\n        '),
                                                                    ('__str__', [], '')],
                                                        'properties': ['__metaclass__',
                                                                       '_connection',
                                                                       'interface',
                                                                       'role',
                                                                       'csv',
                                                                       '_address',
                                                                       '_rssi',
                                                                       '_ssid',
                                                                       '_bssid',
                                                                       '_noise',
                                                                       '_wifi_info',
                                                                       '_logger',
                                                                       '_mac_address',
                                                                       '_bitrate',
                                                                       'connection',
                                                                       'wifi_info']},
             'apetools.devices.basedevice.BaseDeviceEnum': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['__slots__',
                                                                           'tpc',
                                                                           'node']},
             'apetools.devices.dummydevice.DummyConnection': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': [],
                                                              'docstring': '\n    A class to act as a fake connection.\n    ',
                                                              'methods': [('_procedure_call',
                                                                           ['command',
                                                                            'arguments',
                                                                            'timeout'],
                                                                           ''),
                                                                          ('__getattr__',
                                                                           ['command'],
                                                                           '')],
                                                              'properties': []},
             'apetools.devices.dummydevice.DummyDevice': {'bases': ['apetools.baseclass.BaseClass'],
                                                          'constructor': ['*args', '**kwargs'],
                                                          'docstring': '\n    A class to configure and query linux devices\n    ',
                                                          'methods': [('disable_wifi', [], ''),
                                                                      ('enable_wifi', [], ''),
                                                                      ('log',
                                                                       ['message'],
                                                                       '\n        :param:\n\n         - `message`: a string to send to the syslog\n\n        :postcondition: message sent to the syslog\n        ')],
                                                          'properties': ['_connection',
                                                                         'connection',
                                                                         'address',
                                                                         'mac_address',
                                                                         'bssid',
                                                                         'wifi_info',
                                                                         'ssid',
                                                                         'rssi']},
             'apetools.devices.linuxdevice.LinuxDevice': {'bases': ['apetools.devices.basedevice.BaseDevice'],
                                                          'constructor': ['*args', '**kwargs'],
                                                          'docstring': '\n    A class to configure and query linux devices\n    ',
                                                          'methods': [('disable_wifi', [], ''),
                                                                      ('enable_wifi', [], ''),
                                                                      ('log',
                                                                       ['message'],
                                                                       '\n        :param:\n\n         - `message`: a string to send to the syslog\n\n        :postcondition: message sent to the syslog\n        ')],
                                                          'properties': ['_ifconfig',
                                                                         '_wifi_query',
                                                                         'ifconfig',
                                                                         'wifi_query',
                                                                         'address',
                                                                         'mac_address',
                                                                         'bssid',
                                                                         'ssid',
                                                                         'noise',
                                                                         'channel',
                                                                         'rssi',
                                                                         'bitrate']},
             'apetools.devices.sl4adevice.SL4ADevice': {'bases': ['basedevice.BaseDevice'],
                                                        'constructor': ['connection=None',
                                                                        '*args',
                                                                        '**kwargs'],
                                                        'docstring': '',
                                                        'methods': [('wake_screen', [], ''),
                                                                    ('display',
                                                                     ['message'],
                                                                     ''),
                                                                    ('disable_wifi', [], ''),
                                                                    ('enable_wifi', [], ''),
                                                                    ('log',
                                                                     ['message'],
                                                                     '\n        Send the message to the logcat log.\n        '),
                                                                    ('get_wifi_info',
                                                                     [],
                                                                     '\n        On SL4a, this returns:\n\n            * ssid\n            * bssid\n            * network_id\n            * supplicant_state\n            * link_speed\n            * mac_address\n            * rssi\n            * ip_address\n            * hidden_ssid\n           \n        :return: The wifi information as a single csv line\n        ')],
                                                        'properties': ['_connection',
                                                                       'connection']},
             'apetools.devices.windowsdevice.WindowsDevice': {'bases': ['basedevice.BaseDevice'],
                                                              'constructor': ['*args',
                                                                              '**kwargs'],
                                                              'docstring': '\n    A class to control and query windows devices\n    ',
                                                              'methods': [('enable_wifi',
                                                                           [],
                                                                           '\n        :postcondition: `wmic` called to enable the radio\n        '),
                                                                          ('disable_wifi',
                                                                           [],
                                                                           '\n        :postcondition: `wmic` called to disable radio\n        '),
                                                                          ('display',
                                                                           ['message'],
                                                                           ''),
                                                                          ('log',
                                                                           ['message'],
                                                                           ''),
                                                                          ('wake_screen',
                                                                           [],
                                                                           ''),
                                                                          ('connect',
                                                                           ['ssid'],
                                                                           '\n        :param:\n\n         - `ssid`: The SSID and Profile name to connect to\n        '),
                                                                          ('disconnect',
                                                                           [],
                                                                           '\n        :postcondition: the device is disconnected from the AP but no disabled\n        ')],
                                                              'properties': ['_wifi_control',
                                                                             '_wifi_query',
                                                                             '_rssi_query',
                                                                             '_ipconfig',
                                                                             '_ssid_connect',
                                                                             '_address',
                                                                             'ssid_connect',
                                                                             'ipconfig',
                                                                             'wifi_control',
                                                                             'rssi_query',
                                                                             'rssi',
                                                                             'wifi_info',
                                                                             'wifi_query',
                                                                             'address']},
             'apetools.informants.helper.Helper': {'bases': ['apetools.baseclass.BaseClass'],
                                                   'constructor': ['*args', '**kwargs'],
                                                   'docstring': '\n    A Helper provides online help\n    ',
                                                   'methods': [('display',
                                                                ['topic=None'],
                                                                '\n        :param:\n\n         - `topic`: The name of a topic to display\n        ')],
                                                   'properties': []},
             'apetools.lexicographers.config_options.ConfigOptions': {'bases': ['object'],
                                                                      'constructor': [],
                                                                      'docstring': '\n    An enumeration of sorts to hold the section and option names for the config file.\n    ',
                                                                      'methods': [],
                                                                      'properties': ['test_section',
                                                                                     'poweron_section',
                                                                                     'oscillate_section',
                                                                                     'watchlogs_section',
                                                                                     'operation_setup_option',
                                                                                     'operation_teardown_option',
                                                                                     'test_setup_option',
                                                                                     'execute_test_option',
                                                                                     'teardown_test_option',
                                                                                     'output_folder_option',
                                                                                     'data_file_option',
                                                                                     'repeat_option',
                                                                                     'recovery_time_option',
                                                                                     'test_interface_option',
                                                                                     'operating_system_option',
                                                                                     'control_ip_option',
                                                                                     'test_ip_option',
                                                                                     'connection_option',
                                                                                     'traffic_pc_section',
                                                                                     'login_option',
                                                                                     'password_option',
                                                                                     'apconnect_section',
                                                                                     'ssids_option',
                                                                                     'paths_option',
                                                                                     'port_option',
                                                                                     'nodes_section',
                                                                                     'iperf_section',
                                                                                     'directions_option',
                                                                                     'window_option',
                                                                                     'length_option',
                                                                                     'parallel_option',
                                                                                     'interval_option',
                                                                                     'format_option',
                                                                                     'time_option',
                                                                                     'protocol_option',
                                                                                     'time_to_recovery_section',
                                                                                     'threshold_option',
                                                                                     'timeout_option',
                                                                                     'affector_section',
                                                                                     'affector_type_option',
                                                                                     'switches_option',
                                                                                     'hostname_option',
                                                                                     'username_option',
                                                                                     'rotate_section',
                                                                                     'angles_option',
                                                                                     'start_option',
                                                                                     'arc_option',
                                                                                     'noise_start_option',
                                                                                     'noise_end_option',
                                                                                     'block_option',
                                                                                     'no_cleanup_option',
                                                                                     'anti_adjustment_option',
                                                                                     'clockwise_adjustment_option']},
             'apetools.lexicographers.configfetcher.ConfigFetcher': {'bases': ['apetools.baseclass.BaseClass'],
                                                                     'constructor': ['name=None',
                                                                                     'config_folder=None',
                                                                                     '*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    A class to fetch config files.\n    ',
                                                                     'methods': [('config_folder_path',
                                                                                  ['path'],
                                                                                  '\n        :param:\n\n         - `path`: The path to a config_folder\n        '),
                                                                                 ('config_names',
                                                                                  [],
                                                                                  '\n        generates config file names\n\n        :yield: .ini file name\n        '),
                                                                                 ('fetch_config',
                                                                                  [],
                                                                                  '\n        Copies the .ini file to the current working directory.\n\n        ')],
                                                                     'properties': ['name',
                                                                                    '_folder_path',
                                                                                    '_config_folder_path',
                                                                                    'config_folder_path',
                                                                                    'folder_path']},
             'apetools.lexicographers.configurationmap.BooleanValues': {'bases': ['object'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    A class to hold the valid booleans.\n    ',
                                                                        'methods': [],
                                                                        'properties': ['__slots__',
                                                                                       'true',
                                                                                       'false',
                                                                                       'map',
                                                                                       't',
                                                                                       'f']},
             'apetools.lexicographers.configurationmap.ConfigurationMap': {'bases': ['apetools.baseclass.BaseClass'],
                                                                           'constructor': ['filename',
                                                                                           '*args',
                                                                                           '**kwargs'],
                                                                           'docstring': '\n    The ConfigurationMap is a variant of SafeConfigParser that adds some extra methods\n    ',
                                                                           'methods': [('options',
                                                                                        ['section',
                                                                                         'default=None',
                                                                                         'optional=True'],
                                                                                        "\n        :param:\n\n         - `section`: the section in the config file to check\n         - `optional`: if True, returns default instead of raising an error\n         - `default`: value to return if section doesn't exist and is optional\n        "),
                                                                                       ('raise_error',
                                                                                        ['error'],
                                                                                        ''),
                                                                                       ('get',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False'],
                                                                                        '\n        Eventually this will be a type-discovering method, but for now is a pass-through to _get\n        '),
                                                                                       ('_get',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False'],
                                                                                        "\n        Convenience function:strip off extra quotes and whitespace after 'get'.\n\n        :param:\n\n         - `section`: The [section] name\n         - `option`: the option in the section\n         - `default`: returns default on error\n         - `optional`: If True, return default if option not found\n\n        :raise: ConfigurationError if the section or option doesn't exist and not optional\n        "),
                                                                                       ('get_boolean',
                                                                                        ['section',
                                                                                         'option',
                                                                                         "default=''",
                                                                                         'optional=False'],
                                                                                        "\n        True = t, true, 1, y, yes, or on\n        False = f, false, 0, n, no, or off\n\n        Case-insensitive\n        \n        :raise: ConfigurationError if ConfigParser raises error or can't be coerced to boolean and not optional\n        :return: section:option value cast to an boolean or default\n\n        "),
                                                                                       ('get_booleans',
                                                                                        ['section',
                                                                                         'option',
                                                                                         "default=''",
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA'],
                                                                                        "\n        True = t, true, 1, y, yes, or on\n        False = f, false, 0, n, no, or off\n\n        Case-insensitive\n        \n        :raise: ConfigurationError if ConfigParser raises error or can't be coerced to boolean and not optional\n        :return: section:option value cast to an boolean or default\n        "),
                                                                                       ('get_int',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False'],
                                                                                        "\n        :raise: ConfigurationError if ConfigParser raises error or can't be coerced to int and not optional\n        :return: section:option value cast to an int or default\n        "),
                                                                                       ('get_ints',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA'],
                                                                                        "\n        :param:\n\n         - `section`: the config file section name\n         - `option` : the section-option name\n         - `default`: value to return if not found and optional\n         - `optional`: if True and not found, return default\n         - `delimiter`: the separator for the integer values\n         \n        :raise: ConfigurationError if ConfigParser raises error or can't be coerced to int and not optional\n        :return: List of section:option values cast to integers or default\n        "),
                                                                                       ('get_float',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False'],
                                                                                        "\n        :raise: ConfigurationError if ConfigParser raises error or can't be coerced to float and not optional        \n        :return: section:option value cast to a float or default\n        "),
                                                                                       ('get_floats',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA'],
                                                                                        "\n        :param:\n\n         - `section`: the config file section name\n         - `option` : the section-option name\n         - `default`: value to return if not found and optional\n         - `optional`: if True and not found, return default\n         - `delimiter`: the separator for the integer values\n         \n        :raise: ConfigurationError if ConfigParser raises error or can't be coerced to float and not optional\n        :return: List of section:option values cast to floats or default\n        "),
                                                                                       ('get_string',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=EMPTY_STRING',
                                                                                         'optional=False'],
                                                                                        '\n        This returns what a ConfigParser.get returns\n        \n        :return: value string or default\n        '),
                                                                                       ('get_strings',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA'],
                                                                                        '\n        This is the same thing as get_list\n        \n        :return: list of strings\n        '),
                                                                                       ('get_list',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA',
                                                                                         'converter=str'],
                                                                                        '\n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `delimiter`: the value separator\n         - `optional`: if True, returns default instead of raising an error\n        :return: list of strings stripped of whitespace\n\n        :raises: ConfigurationError if not optional and not found.\n        '),
                                                                                       ('get_lists',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA',
                                                                                         'converter=str',
                                                                                         'list_separator=SEMICOLON'],
                                                                                        "\n        Don't make the delimiter and separator the same or you'll end up with each item in its own list\n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `default`: value to return if optional and no value found\n         - `optional`: if True, returns default instead of raising an error\n         - `delimiter`: the value separator\n         - `converter`: function to apply to the values\n         - `separator`: delimiter between lists\n\n        :return: list of list of strings stripped of whitespace (converted if `converter` supplied)\n\n        :raises: ConfigurationError if not optional and not found.\n        "),
                                                                                       ('get_dictionary',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA',
                                                                                         'converter=str',
                                                                                         "key_value_separator=':'"],
                                                                                        '\n        This expects a format of `{key:value, key:value}`\n\n        The "{}" brackets are optional.\n        \n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `default`: what to return if fails and optional\n         - `optional`: if True, returns defauln instead of raising an error\n         - `delimiter`: what separates the different key:value pairs\n         - `converter`: a function to apply to the value\n         - `key_value_separator`: Token to separate key-value pairs\n         \n        :return: dictionary of key:value pairings\n\n        :raises: ConfigurationError if not optional and not found.\n        '),
                                                                                       ('get_dictionaries',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=COMMA',
                                                                                         'converter=str',
                                                                                         "key_value_separator=':'",
                                                                                         'dictionary_separator=SEMICOLON'],
                                                                                        '\n        This expects a format of `{key:value, key:value}`\n\n        For clarity dictionaries can be enclosed in braces ({}) but only the dictionary_separator is used\n        \n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `default`: what to return if fails and optional\n         - `optional`: if True, returns defauln instead of raising an error\n         - `delimiter`: what separates the different key:value pairs\n         - `converter`: a function to apply to the value\n         - `key_value_separator`: Token to separate key-value pairs\n         - `dictionary_separator`: what separates the different dictionaries\n         \n        :return: list of dictionaries of key:value pairings\n\n        :raises: ConfigurationError if not optional and not found.\n        '),
                                                                                       ('get_namedtuple',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'delimiter=COMMA',
                                                                                         'converter=str',
                                                                                         "key_value_separator=':'"],
                                                                                        '\n        This expects a format of `{key:value, key:value}`\n\n        For clarity named-tuples can be enclosed in braces ({}) but only the dictionary_separator is used\n        \n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `default`: what to return if fails and optional\n         - `optional`: if True, returns default instead of raising an error\n         - `delimiter`: what separates the different key:value pairs\n         - `converter`: a function to apply to the value\n         - `key_value_separator`: Token to separate key-value pairs\n         - `dictionary_separator`: what separates the different dictionaries\n         \n        :return: namedtuple with keys as properties and values as matching values\n\n        :raises: ConfigurationError if not optional and not found.\n    \n        '),
                                                                                       ('get_range',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=None',
                                                                                         'optional=False',
                                                                                         'delimiter=DASH'],
                                                                                        '\n        Converts values from `start - end` to [start...end] (expects integers)\n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `delimiter`: the value separator\n         - `optional`: if True, returns default instead of raising an error\n\n        :return: list of values\n\n        :raises: ConfigurationError if not optional and not found.\n        '),
                                                                                       ('get_ranges',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'delimiter=COMMA',
                                                                                         'optional=False',
                                                                                         'start_end_delimiter=DASH'],
                                                                                        '\n        Converts a comma-delimited set of ranges (start-finish) to a list of integers.\n\n        :param:\n\n         - `section`: The [section] in the config file.\n         - `option`: the option in the section\n         - `delimiter`: the value separator\n         - `optional`: if True, returns default instead of raising an error\n         - `start_end_delimiter`: the token to separate the start and end of each range\n        :return: list of values\n\n        :raises: ConfigurationError if not optional and not found.\n\n        :return: List of integers or None if optional is True and section not found.\n        '),
                                                                                       ('has_option',
                                                                                        ['section',
                                                                                         'option'],
                                                                                        ''),
                                                                                       ('get_times',
                                                                                        ['section',
                                                                                         'option'],
                                                                                        '\n        Gets a list then converts the values to times.\n        '),
                                                                                       ('get_time',
                                                                                        ['section',
                                                                                         'option',
                                                                                         'default=0',
                                                                                         'optional=False'],
                                                                                        "\n        :param:\n\n         - `section`: A section in the config file (e.g. TEST)\n         - `option`: An option in the section in the config file.\n         - `default`: A default value to return if the option isn't in the file\n         - `optional`: if True and time not found, return default\n\n        :rtype: int or float\n        :return: Value in the option (in seconds) or 0 if not present.\n        "),
                                                                                       ('time_in_seconds',
                                                                                        ['time_with_units'],
                                                                                        '\n        :return: time_with_units converted to seconds\n        ')],
                                                                           'properties': ['filename',
                                                                                          '_parser',
                                                                                          '_sections',
                                                                                          '_time_converter',
                                                                                          'time_converter',
                                                                                          'sections',
                                                                                          'parser']},
             'apetools.lexicographers.lexicographer.Lexicographer': {'bases': ['apetools.baseclass.BaseClass'],
                                                                     'constructor': ['glob',
                                                                                     '*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    A Lexicographer yields configuration Maps.\n    ',
                                                                     'methods': [('__iter__',
                                                                                  [],
                                                                                  '\n        :yield: TestParameters namedtuple\n        ')],
                                                                     'properties': ['glob',
                                                                                    '_maps',
                                                                                    '_filenames',
                                                                                    '_finder',
                                                                                    'filenames',
                                                                                    'finder']},
             'apetools.lexicographers.parametergenerator.ParameterGenerator': {'bases': ['apetools.baseclass.BaseClass'],
                                                                               'constructor': ['parameters',
                                                                                               '*args',
                                                                                               '**kwargs'],
                                                                               'docstring': '\n    A ParameterGenerator is an iterator that generates test-parameters.\n    ',
                                                                               'methods': [('__iter__',
                                                                                            [],
                                                                                            '\n        :yield: the next namedtuple of parameters\n        ')],
                                                                               'properties': ['parameters',
                                                                                              '_tree',
                                                                                              'tree']},
             'apetools.lexicographers.parametergenerator.TestParameter': {'bases': ["collections.namedtuple('TestParameter', parameters)"],
                                                                          'constructor': [],
                                                                          'docstring': '\n    A TestParameter holds the settings for a single test-iteration\n    ',
                                                                          'methods': [('__str__',
                                                                                       [],
                                                                                       '')],
                                                                          'properties': ['__slots__']},
             'apetools.lexicographers.parametertree.ParameterTree': {'bases': ['object'],
                                                                     'constructor': ['parameters'],
                                                                     'docstring': '\n    A class to build a tree from iterative parameters\n\n    The main product is the `paths` attribute which can be iterated over to get the parameters for a test.\n    ',
                                                                     'methods': [('_traverse',
                                                                                  ['tree',
                                                                                   'path',
                                                                                   'paths'],
                                                                                  "\n        A depth-first traversal\n        \n        :param:\n        \n         - `tree`: A Tree object to traverse\n         - `path`: a name:parameter dict to contain a particular path\n         - `paths`: The list to store all the paths\n         \n        :postcondition:\n\n         - path holds tree's cargo\n         - if tree is a leaf, return path\n         - if tree not leaf traverse children and traverse each child\n         - append path returned by leaf to self._paths\n        ")],
                                                                     'properties': ['parameters',
                                                                                    '_tree',
                                                                                    '_paths',
                                                                                    'tree',
                                                                                    'paths']},
             'apetools.lexicographers.parametertree.TreeNode': {'bases': ['object'],
                                                                'constructor': ['cargo',
                                                                                'children=None'],
                                                                'docstring': '\n    A Class to represent a node in a tree with arbitrary number of children\n    ',
                                                                'methods': [('__str__', [], '')],
                                                                'properties': ['cargo',
                                                                               'children']},
             'apetools.lexicographers.sublexicographers.devicelexicographer.DeviceLexicographer': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                                   'constructor': ['parser',
                                                                                                                   'section'],
                                                                                                   'docstring': '\n    DeviceLexicographer builds Device Parameters\n    ',
                                                                                                   'methods': [],
                                                                                                   'properties': ['parser',
                                                                                                                  'section',
                                                                                                                  '_operating_system',
                                                                                                                  '_connection_type',
                                                                                                                  '_test_interface',
                                                                                                                  '_test_ip',
                                                                                                                  '_control_ip',
                                                                                                                  '_login',
                                                                                                                  '_password',
                                                                                                                  '_paths',
                                                                                                                  '_device_parameters',
                                                                                                                  'operating_system',
                                                                                                                  'connection_type',
                                                                                                                  'test_interface',
                                                                                                                  'test_ip',
                                                                                                                  'control_ip',
                                                                                                                  'login',
                                                                                                                  'password',
                                                                                                                  'paths',
                                                                                                                  'device_parameters']},
             'apetools.lexicographers.sublexicographers.devicelexicographer.DeviceParameters': {'bases': ["collections.namedtuple('DeviceParameters', device_parameters)"],
                                                                                                'constructor': [],
                                                                                                'docstring': '\n    Parameters needed to configure device connections\n    ',
                                                                                                'methods': [('__str__',
                                                                                                             [],
                                                                                                             '')],
                                                                                                'properties': ['__slots__']},
             'apetools.lexicographers.sublexicographers.iperflexicographer.IperfClientParameters': {'bases': ["collections.namedtuple('IperfClientParameters', iperf_client_parameters)"],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '\n    lexicographer.IperfClientParameters is a named tuple of raw parameters \n    ',
                                                                                                    'methods': [('__str__',
                                                                                                                 [],
                                                                                                                 '')],
                                                                                                    'properties': ['__slots__']},
             'apetools.lexicographers.sublexicographers.iperflexicographer.IperfLexicographer': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                                 'constructor': ['parser'],
                                                                                                 'docstring': '\n    An Iperf Lexicographer translates a configration map to named tuples\n    ',
                                                                                                 'methods': [],
                                                                                                 'properties': ['parser',
                                                                                                                'section',
                                                                                                                '_window',
                                                                                                                '_length',
                                                                                                                '_parallel',
                                                                                                                '_interval',
                                                                                                                '_format',
                                                                                                                '_time',
                                                                                                                '_client_parameters',
                                                                                                                '_server_parameters',
                                                                                                                'window',
                                                                                                                'length',
                                                                                                                'parallel',
                                                                                                                'interval',
                                                                                                                'format',
                                                                                                                'time',
                                                                                                                'client_parameters',
                                                                                                                'server_parameters']},
             'apetools.lexicographers.sublexicographers.iperflexicographer.IperfServerParameters': {'bases': ["collections.namedtuple('IperfServerParameters', iperf_server_parameters)"],
                                                                                                    'constructor': [],
                                                                                                    'docstring': '',
                                                                                                    'methods': [('__str__',
                                                                                                                 [],
                                                                                                                 '')],
                                                                                                    'properties': ['__slots__']},
             'apetools.lexicographers.sublexicographers.naxxxlexicographer.NaxxxLexicographer': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                                 'constructor': ['parser'],
                                                                                                 'docstring': '\n    The NaxxxLexicographer converts a configuration map to naxxx parameters\n    ',
                                                                                                 'methods': [],
                                                                                                 'properties': ['parser',
                                                                                                                '_switches',
                                                                                                                '_hostname',
                                                                                                                '_section',
                                                                                                                '_switches_names',
                                                                                                                '_type',
                                                                                                                'section',
                                                                                                                'switches_names',
                                                                                                                'switches',
                                                                                                                'hostname']},
             'apetools.lexicographers.sublexicographers.naxxxlexicographer.NaxxxParameters': {'bases': ["collections.namedtuple('NaxxxParameters', 'type switch name')"],
                                                                                              'constructor': [],
                                                                                              'docstring': '\n    NaxxxParameters hold the parameters for the Naxxx\n    ',
                                                                                              'methods': [('__str__',
                                                                                                           [],
                                                                                                           ''),
                                                                                                          ('__int__',
                                                                                                           [],
                                                                                                           '')],
                                                                                              'properties': ['__slots__']},
             'apetools.lexicographers.timeconverter.TimeConversions': {'bases': ['object'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    A class in hold the multiplers for conversion\n    ',
                                                                       'methods': [],
                                                                       'properties': ['__slots__',
                                                                                      'same',
                                                                                      'seconds_per_minute',
                                                                                      'seconds_per_hour',
                                                                                      'seconds_per_day']},
             'apetools.lexicographers.timeconverter.TimeConverter': {'bases': ['apetools.baseclass.BaseClass'],
                                                                     'constructor': ['units=TimeUnits.seconds'],
                                                                     'docstring': '\n    The Time Converter converts times\n    ',
                                                                     'methods': [('__call__',
                                                                                  ['source'],
                                                                                  '\n        :param:\n\n         - `source`: string that has time-units tokens to convert\n        ')],
                                                                     'properties': ['units',
                                                                                    '_expressions',
                                                                                    '_converter',
                                                                                    'expressions',
                                                                                    'converter']},
             'apetools.lexicographers.timeconverter.TimeConverterEnums': {'bases': ['object'],
                                                                          'constructor': [],
                                                                          'docstring': '\n    A class to hold some constants\n    ',
                                                                          'methods': [],
                                                                          'properties': ['__slots__',
                                                                                         'integer',
                                                                                         'float',
                                                                                         'time',
                                                                                         'units']},
             'apetools.lexicographers.timeconverter.TimeConverterExpressions': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                'constructor': ['source=None'],
                                                                                'docstring': '\n    A class to hold the regular expressions for the TimeConverter\n    ',
                                                                                'methods': [('units',
                                                                                             ['prefix'],
                                                                                             '\n        :param:\n\n         - `prefix`: the character-class prefix for the units\n\n        :rtype: String\n        :return: regular expression to match the units\n        '),
                                                                                            ('tokens',
                                                                                             ['source'],
                                                                                             '\n        Tokenizes a source stream based on `times` property.\n\n        :yield: the next time-token group-dict in `source`\n        '),
                                                                                            ('__iter__',
                                                                                             [],
                                                                                             '\n        :yield: groupdict for time and units\n        ')],
                                                                                'properties': ['_time',
                                                                                               '_enums',
                                                                                               '_seconds',
                                                                                               '_minutes',
                                                                                               '_hours',
                                                                                               '_days',
                                                                                               '_unitless',
                                                                                               '_times',
                                                                                               '_integer',
                                                                                               '_float',
                                                                                               'base_time',
                                                                                               'source',
                                                                                               'float',
                                                                                               'integer',
                                                                                               'unitless',
                                                                                               'seconds',
                                                                                               'minutes',
                                                                                               'hours',
                                                                                               'days',
                                                                                               'times',
                                                                                               'enums']},
             'apetools.lexicographers.timeconverter.TimeUnits': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    An enumerator of sorts for time-units\n    ',
                                                                 'methods': [],
                                                                 'properties': ['days',
                                                                                'hours',
                                                                                'minutes',
                                                                                'seconds']},
             'apetools.operations.baseoperation.BaseOperation': {'bases': ['apetools.baseclass.BaseClass'],
                                                                 'constructor': ['products'],
                                                                 'docstring': '\n    A Base operations holds the common elements operations\n    ',
                                                                 'methods': [('__call__',
                                                                              ['parameters',
                                                                               'filename_prefix=None'],
                                                                              '\n        :param:\n\n         - `parameters` :namedtuple with settings to run the operation\n         - `filename_prefix`: optional prefix to pass to the products\n        :return: string of returned output from products\n        ')],
                                                                 'properties': ['_logger',
                                                                                'products']},
             'apetools.operations.baseoperation.DummyOperation': {'bases': ['apetools.baseclass.BaseClass'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    A dummy for an Test \n    ',
                                                                  'methods': [('__call__',
                                                                               ['parameters=None'],
                                                                               ''),
                                                                              ('__getattr__',
                                                                               ['name'],
                                                                               '')],
                                                                  'properties': []},
             'apetools.operations.executetest.DummyExecuteTest': {'bases': ['apetools.baseclass.BaseClass'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    A dummy for an Test \n    ',
                                                                  'methods': [('__call__',
                                                                               ['parameters',
                                                                                'filename_prefix'],
                                                                               '')],
                                                                  'properties': []},
             'apetools.operations.executetest.ExecuteTest': {'bases': ['baseoperation.BaseOperation'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '\n    A caller of tests\n    ',
                                                             'methods': [],
                                                             'properties': []},
             'apetools.operations.operationsetup.DummySetupOperation': {'bases': ['apetools.baseclass.BaseClass'],
                                                                        'constructor': [],
                                                                        'docstring': '\n    A dummy for an Operation \n    ',
                                                                        'methods': [('__call__',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': []},
             'apetools.operations.operationsetup.OperationSetup': {'bases': ['baseoperation.BaseOperation'],
                                                                   'constructor': ['*args',
                                                                                   '**kwargs'],
                                                                   'docstring': '\n    A class to run every operation (one per operator)\n    ',
                                                                   'methods': [('__call__',
                                                                                [],
                                                                                '\n        The main interface, override if you need parameters\n\n        :postcondition: all products called\n        :return: string of joined return values from the products\n        ')],
                                                                   'properties': []},
             'apetools.operations.operationteardown.DummyTeardownOperation': {'bases': ['apetools.baseclass.BaseClass'],
                                                                              'constructor': [],
                                                                              'docstring': '\n    A dummy for an Operation \n    ',
                                                                              'methods': [('__call__',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': []},
             'apetools.operations.operationteardown.OperationTeardown': {'bases': ['baseoperation.BaseOperation'],
                                                                         'constructor': ['*args',
                                                                                         '**kwargs'],
                                                                         'docstring': '\n    A class to run every operation (one per operator)\n    ',
                                                                         'methods': [('__call__',
                                                                                      [],
                                                                                      '\n        The main interface, override if you need parameters\n\n        :postcondition: all products called\n        :return: string of joined return values from the products\n        ')],
                                                                         'properties': []},
             'apetools.operations.setuptest.DummySetupTest': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': [],
                                                              'docstring': '\n    A dummy for an Test \n    ',
                                                              'methods': [('__call__',
                                                                           ['parameters'],
                                                                           '')],
                                                              'properties': []},
             'apetools.operations.setuptest.SetupTest': {'bases': ['baseoperation.BaseOperation'],
                                                         'constructor': ['*args', '**kwargs'],
                                                         'docstring': '\n    A class to run every iteration\n    ',
                                                         'methods': [],
                                                         'properties': []},
             'apetools.operations.teardowntest.DummyTeardownTest': {'bases': ['apetools.baseclass.BaseClass'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    A dummy for a Test teardown\n    ',
                                                                    'methods': [('__call__',
                                                                                 ['parameter'],
                                                                                 '')],
                                                                    'properties': []},
             'apetools.operations.teardowntest.TeardownTest': {'bases': ['baseoperation.BaseOperation'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': '\n    A class to run every iteration\n    ',
                                                               'methods': [],
                                                               'properties': []},
             'apetools.parameters.iperf_client_parameters.IperfTcpClientParameters': {'bases': ['iperf_common_tcp_parameters.IperfCommonTcpParameters'],
                                                                                      'constructor': [],
                                                                                      'docstring': '\n    IperfTcpClientParameters holds parameters used by Iperf TCP clients\n    ',
                                                                                      'methods': [('client',
                                                                                                   ['hostname'],
                                                                                                   '\n        :param:\n\n         - `hostname`: The hostname of the server\n        '),
                                                                                                  ('dualtest',
                                                                                                   ['set_dualtest'],
                                                                                                   '\n        :param:\n\n         - `set_dualtest`: A boolean which if True sets the dualtest flag\n        '),
                                                                                                  ('fileinput',
                                                                                                   ['filename'],
                                                                                                   '\n        :param:\n\n         - `filename`: The name of the file to use as input\n        '),
                                                                                                  ('listenport',
                                                                                                   ['port'],
                                                                                                   '\n        :param:\n\n         - `port`: A network port to listen on for bidirectional test.\n        '),
                                                                                                  ('num',
                                                                                                   ['num_bytes'],
                                                                                                   '\n        :param:\n\n         - `num_bytes`: Number of bytes to send\n        '),
                                                                                                  ('parallel',
                                                                                                   ['thread_count'],
                                                                                                   '\n        :param:\n\n         - `thread_count`: The number of parallel threads to run\n        '),
                                                                                                  ('time',
                                                                                                   ['new_time'],
                                                                                                   '\n        :param:\n\n         - `new_time`: time in seconds (floats are rounded to 1 decimal place)\n        '),
                                                                                                  ('tradeoff',
                                                                                                   ['set_tradeoff'],
                                                                                                   '\n        :param:\n\n         - `set_tradeoff`: A Boolean which if True sets the tradeoff flag.\n        '),
                                                                                                  ('ttl',
                                                                                                   ['hops'],
                                                                                                   '\n        :param:\n\n         - `hops`: The time-to-live\n        ')],
                                                                                      'properties': ['_block_attributes',
                                                                                                     '_client',
                                                                                                     '_dualtest',
                                                                                                     '_fileinput',
                                                                                                     '_listenport',
                                                                                                     '_num',
                                                                                                     '_parallel',
                                                                                                     '_time',
                                                                                                     '_tradeoff',
                                                                                                     '_ttl',
                                                                                                     'client',
                                                                                                     'dualtest',
                                                                                                     'fileinput',
                                                                                                     'listenport',
                                                                                                     'num',
                                                                                                     'parallel',
                                                                                                     'time',
                                                                                                     'tradeoff',
                                                                                                     'ttl']},
             'apetools.parameters.iperf_client_parameters.IperfUdpClientParameters': {'bases': ['apetools.parameters.iperf_client_parameters.IperfTcpClientParameters'],
                                                                                      'constructor': [],
                                                                                      'docstring': '\n    IperfUdpClientParameters is a superset of the IperfTcpClientParameters.\n    Adds udp and bandwidth.\n    ',
                                                                                      'methods': [('bandwidth',
                                                                                                   ['new_bandwidth'],
                                                                                                   '\n        :param:\n\n         - `new_bandwidth`: the bandwidth to set\n        ')],
                                                                                      'properties': ['_block_attributes',
                                                                                                     '_bandwidth',
                                                                                                     'udp',
                                                                                                     'bandwidth']},
             'apetools.parameters.iperf_common_parameters.IperfCommonParameters': {'bases': ['apetools.baseclass.BaseClass'],
                                                                                   'constructor': [],
                                                                                   'docstring': '\n    Iperf Common Parameters are common to all Iperf commands.\n    ',
                                                                                   'methods': [('format',
                                                                                                ['new_format'],
                                                                                                '\n        :param:\n\n         - `format`: one of {b, k, m, K, M}\n        '),
                                                                                               ('interval',
                                                                                                ['new_interval'],
                                                                                                '\n        :param:\n\n         - `new_interval`: something that can be cast to a float.\n        '),
                                                                                               ('len',
                                                                                                ['new_len'],
                                                                                                "\n        :param:\n\n         - `new_len`: Buffer Length (format 'n[KM]')\n        "),
                                                                                               ('output',
                                                                                                ['name'],
                                                                                                '\n        :param:\n\n         - `name`: A valid file name (so just about anything (but no spaces)).\n        '),
                                                                                               ('port',
                                                                                                ['new_port'],
                                                                                                '\n        :param:\n\n         - `new_port`: a valid network port 1 - 65535\n\n        :warns: if port is less than 1024 (reserved in Unix)\n        :raises: configuration error if 65535 < port < 1\n        '),
                                                                                               ('bind',
                                                                                                ['hostname'],
                                                                                                '\n        :param:\n\n         - `hostname`: A valid hostname \n        '),
                                                                                               ('compatibility',
                                                                                                ['set_compatible'],
                                                                                                '\n        :param:\n\n         - `set_compatible`: A boolean which if True sets the flag\n        '),
                                                                                               ('ipv6version',
                                                                                                ['set_to_ipv6'],
                                                                                                '\n        :param:\n\n         - `set_to_ipv6`: A boolean which if True, sets the IPv6Version flag.\n        '),
                                                                                               ('reportexclude',
                                                                                                ['exclude_flags'],
                                                                                                '\n        :param:\n\n         - `exclude_flags`: a subset of CDMSV\n        '),
                                                                                               ('reportstyle',
                                                                                                ['csv_flag'],
                                                                                                '\n        :param:\n\n         - `csv_flag`: in {c, C}\n        '),
                                                                                               ('__str__',
                                                                                                [],
                                                                                                '\n        :return: string of set flags in alphabetical order (of the flags, not the values)\n        '),
                                                                                               ('__setattr__',
                                                                                                ['key',
                                                                                                 'value'],
                                                                                                '\n        Overrides the setattr to add a freeze to prevent accidentally adding attributes.\n        ')],
                                                                                   'properties': ['_block_attributes',
                                                                                                  '_logger',
                                                                                                  '_format',
                                                                                                  '_interval',
                                                                                                  '_len',
                                                                                                  '_output',
                                                                                                  '_port',
                                                                                                  '_bind',
                                                                                                  '_compatibility',
                                                                                                  '_ipv6version',
                                                                                                  '_reportexclude',
                                                                                                  '_reportstyle',
                                                                                                  '_parameter_names',
                                                                                                  'format',
                                                                                                  'interval',
                                                                                                  'len',
                                                                                                  'output',
                                                                                                  'port',
                                                                                                  'bind',
                                                                                                  'compatibility',
                                                                                                  'ipv6version',
                                                                                                  'reportexclude',
                                                                                                  'reportstyle',
                                                                                                  'parameter_names']},
             'apetools.parameters.iperf_common_parameters.IperfParametersEnum': {'bases': ['object'],
                                                                                 'constructor': [],
                                                                                 'docstring': '\n    A holder for Iperf Parameter Constants\n    ',
                                                                                 'methods': [],
                                                                                 'properties': ['__slots__',
                                                                                                'udp',
                                                                                                'tcp']},
             'apetools.parameters.iperf_common_tcp_parameters.IperfCommonTcpParameters': {'bases': ['iperf_common_parameters.IperfCommonParameters'],
                                                                                          'constructor': [],
                                                                                          'docstring': '\n    IperfCommonTcpParameters is a super-set of the IperfCommonParameters for TCP.\n    ',
                                                                                          'methods': [('nodelay',
                                                                                                       ['set_nodelay'],
                                                                                                       '\n        :param:\n\n         - `set_nodelay`: Boolean which if True sets the nodelay flag\n        '),
                                                                                                      ('print_mss',
                                                                                                       ['set_print_mss'],
                                                                                                       '\n        :param:\n\n         - `set_print_mss`: If True, sets the print_mss flag\n        '),
                                                                                                      ('window',
                                                                                                       ['new_window'],
                                                                                                       '\n        :param:\n\n         - `new_window`: The window size `n[KM]`\n        '),
                                                                                                      ('mss',
                                                                                                       ['new_mss'],
                                                                                                       '\n        :param:\n\n         - `new_mss`: An integer value (bytes)\n        ')],
                                                                                          'properties': ['_block_attributes',
                                                                                                         '_print_mss',
                                                                                                         '_window',
                                                                                                         '_mss',
                                                                                                         '_nodelay',
                                                                                                         'nodelay',
                                                                                                         'print_mss',
                                                                                                         'window',
                                                                                                         'mss']},
             'apetools.parameters.iperf_server_parameters.IperfServerParameters': {'bases': ['iperf_common_tcp_parameters.IperfCommonTcpParameters'],
                                                                                   'constructor': [],
                                                                                   'docstring': '\n    An IperfServerParameters holds parameters for a Tcp Server\n    ',
                                                                                   'methods': [('daemon',
                                                                                                ['set_daemon'],
                                                                                                '\n        :param:\n\n         - `set_daemon`: Boolean which if True sets daemon flag\n        ')],
                                                                                   'properties': ['_block_attributes',
                                                                                                  'server',
                                                                                                  '_daemon',
                                                                                                  'daemon']},
             'apetools.parameters.iperf_server_parameters.IperfUdpServerParameters': {'bases': ['apetools.parameters.iperf_server_parameters.IperfServerParameters'],
                                                                                      'constructor': [],
                                                                                      'docstring': '\n    IperfUdpServerParameters holds parameters for a UDP Server\n    ',
                                                                                      'methods': [('single_udp',
                                                                                                   ['set_single_udp'],
                                                                                                   '\n        :param:\n\n         - `set_single_udp`: Boolen which if True sets the single_udp flag.\n        ')],
                                                                                      'properties': ['_block_attributes',
                                                                                                     'udp',
                                                                                                     '_single_udp',
                                                                                                     'single_udp']},
             'apetools.parameters.iperf_test_parameters.IperfTestParameters': {'bases': ["collections.namedtuple('IperfTestParameters', 'filename iperf_parameters'.split())"],
                                                                               'constructor': [],
                                                                               'docstring': '\n    IperfTestParameters add a filename while maintaining the __str__ of the iperf parameters.\n    ',
                                                                               'methods': [('__str__',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': []},
             'apetools.parameters.iperf_udp_server_parameters.IperfUdpServerParameters': {'bases': ['iperf_server_parameters.IperfServerParameters'],
                                                                                          'constructor': [],
                                                                                          'docstring': '\n    IperfUdpServerParameters holds parameters for a UDP Server\n    ',
                                                                                          'methods': [('single_udp',
                                                                                                       ['set_single_udp'],
                                                                                                       '\n        :param:\n\n         - `set_single_udp`: Boolen which if True sets the single_udp flag.\n        ')],
                                                                                          'properties': ['_block_attributes',
                                                                                                         'udp',
                                                                                                         '_single_udp',
                                                                                                         'single_udp']},
             'apetools.parsers.iperfexpressions.CombinedExpression': {'bases': ['apetools.parsers.iperfexpressions.ExpressionBase'],
                                                                      'constructor': [],
                                                                      'docstring': "\n    A Combined expression matches either case (but doesn't break up the line).\n\n    This is intended for implemetations that set the expression type on first match.\n    ",
                                                                      'methods': [],
                                                                      'properties': ['expression',
                                                                                     '_expression',
                                                                                     'regex',
                                                                                     '_regex']},
             'apetools.parsers.iperfexpressions.CsvExpression': {'bases': ['apetools.parsers.iperfexpressions.ExpressionBase'],
                                                                 'constructor': [],
                                                                 'docstring': "\n    The Csv Expression holds the expression to match iperf's csv format\n    ",
                                                                 'methods': [],
                                                                 'properties': ['_thread_column',
                                                                                'thread_column',
                                                                                'expression',
                                                                                '_expression',
                                                                                'regex',
                                                                                '_regex']},
             'apetools.parsers.iperfexpressions.ExpressionBase': {'bases': ['apetools.baseclass.BaseClass'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    An Abstract Base class for regular expression containers\n    ',
                                                                  'methods': [('expression',
                                                                               [],
                                                                               '\n        :rtype: String\n        :return: regular expression to match given input\n        '),
                                                                              ('regex',
                                                                               [],
                                                                               '\n        :rtype: re.RegexObject\n        :return: compiled regex object\n        ')],
                                                                  'properties': ['__metaclass__',
                                                                                 '_logger',
                                                                                 '_expression',
                                                                                 '_regex']},
             'apetools.parsers.iperfexpressions.HumanExpression': {'bases': ['apetools.parsers.iperfexpressions.ExpressionBase'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    The Human Expression matches the human-readable iperf output\n    ',
                                                                   'methods': [],
                                                                   'properties': ['_thread_column',
                                                                                  'thread_column',
                                                                                  'expression',
                                                                                  '_expression',
                                                                                  'regex',
                                                                                  '_regex']},
             'apetools.parsers.iperfexpressions.ParserKeys': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '\n    A holder of the keys to the groupdict\n    ',
                                                              'methods': [],
                                                              'properties': ['__slots__',
                                                                             'units',
                                                                             'thread',
                                                                             'start',
                                                                             'end',
                                                                             'transfer',
                                                                             'bandwidth',
                                                                             'timestamp',
                                                                             'sender_ip',
                                                                             'sender_port',
                                                                             'receiver_ip',
                                                                             'receiver_port',
                                                                             'human',
                                                                             'csv']},
             'apetools.parsers.iperfparser.BandwidthData': {'bases': ["collections.namedtuple('BandwidthData', 'interval bandwidth units'.split())"],
                                                            'constructor': [],
                                                            'docstring': '\n    A tuple to hold the bandwidth data\n    ',
                                                            'methods': [('__str__', [], '')],
                                                            'properties': ['__slots__']},
             'apetools.parsers.iperfparser.IperfParser': {'bases': ['apetools.baseclass.BaseClass'],
                                                          'constructor': ['expected_interval=1',
                                                                          'interval_tolerance=0.1',
                                                                          "units='Mbits'",
                                                                          'threads=4'],
                                                          'docstring': '\n    The Iperf Parser extracts bandwidth and other information from the output\n    ',
                                                          'methods': [('valid',
                                                                       ['match'],
                                                                       '\n        :param:\n\n         - `match`: a groupdict containing parsed iperf fields\n\n        :return: True if the end-start interval is valid (within tolerance)\n        '),
                                                                      ('bandwidth',
                                                                       ['match'],
                                                                       '\n        :param:\n\n         - `match`: A parsed match group dictionary\n\n        :rtype: float\n        :return: the bandwidth in the self.units\n        '),
                                                                      ('__call__',
                                                                       ['line'],
                                                                       '\n        :param:\n\n         - `line`: a line of iperf output\n\n        :return: bandwidth or None\n        '),
                                                                      ('search',
                                                                       ['line'],
                                                                       '\n        :param:\n\n         - `line`: a string of iperf output\n        :return: match dict or None\n        '),
                                                                      ('pipe',
                                                                       ['target'],
                                                                       '\n        \n        :warnings:\n\n         - For bad connections with threads this might break (as the threads die)\n         - Use for good connections or live data only (use `bandwidths` and completed data for greater fidelity)\n         \n        :parameters:\n\n         - `target`: a target to send matched output to\n\n        :send:\n\n         - bandwidth converted to self.units as a float\n        '),
                                                                      ('reset',
                                                                       [],
                                                                       '\n        Resets the attributes set during parsing\n        '),
                                                                      ('filename',
                                                                       ['basename'],
                                                                       '\n        :param:\n\n         - `basename`: a the raw-iperf filename (without path)\n\n        :return: the filename with the extension changed to .csv\n        ')],
                                                          'properties': ['_logger',
                                                                         'expected_interval',
                                                                         'interval_tolerance',
                                                                         'units',
                                                                         'threads',
                                                                         '_regex',
                                                                         '_human_regex',
                                                                         '_csv_regex',
                                                                         '_combined_regex',
                                                                         '_conversion',
                                                                         '_intervals',
                                                                         '_threads',
                                                                         'format',
                                                                         '_bandwidths',
                                                                         'thread_count',
                                                                         'current_thread',
                                                                         'bandwidths',
                                                                         'regex',
                                                                         'intervals',
                                                                         'conversion',
                                                                         '_interval_threads',
                                                                         '_thread_count']},
             'apetools.parsers.sumparser.CsvExpressionSum': {'bases': ['iperfexpressions.CsvExpression'],
                                                             'constructor': ['threads=4'],
                                                             'docstring': '\n    Changes the thread column to look for -1 if needed\n    ',
                                                             'methods': [],
                                                             'properties': ['threads',
                                                                            'thread_column',
                                                                            '_thread_column']},
             'apetools.parsers.sumparser.HumanExpressionSum': {'bases': ['iperfexpressions.HumanExpression'],
                                                               'constructor': ['threads=4'],
                                                               'docstring': '\n    Changes the thread-column regular expression to match SUMS if needed\n    ',
                                                               'methods': [],
                                                               'properties': ['threads',
                                                                              'thread_column',
                                                                              '_thread_column']},
             'apetools.parsers.sumparser.SumParser': {'bases': ['iperfparser.IperfParser'],
                                                      'constructor': ['*args', '**kwargs'],
                                                      'docstring': '\n    The SumParser emits bandwidth sum lines\n    ',
                                                      'methods': [('__call__',
                                                                   ['line'],
                                                                   '\n        :param:\n\n         - `line`: a line of iperf output\n\n        :return: BandwidthData or None\n        '),
                                                                  ('pipe',
                                                                   ['target'],
                                                                   '\n        \n        :warnings:\n\n         - For bad connections with threads this might break (as the threads die)\n         - Use for good connections or live data only (use `bandwidths` and completed data for greater fidelity)\n         \n        :parameters:\n\n         - `target`: a target to send matched output to\n\n        :send:\n\n         - bandwidth converted to self.units as a float\n        ')],
                                                      'properties': ['log_format',
                                                                     'regex',
                                                                     '_regex']},
             'apetools.parsers.unitconverter.UnitConverter': {'bases': ['dict'],
                                                              'constructor': [],
                                                              'docstring': '\n    The UnitConverter is a conversion lookup table.\n\n    Usage::\n\n       converted = old * UnitConverter[old units][new units]\n\n    Use class UnitNames to get valid unit names\n    ',
                                                              'methods': [],
                                                              'properties': []},
             'apetools.parsers.unitconverter.UnitNames': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': '\n    Unit Names is a namepace to hold units\n    ',
                                                          'methods': [],
                                                          'properties': ['__slots__',
                                                                         'bits',
                                                                         'kbits',
                                                                         'mbits',
                                                                         'gbits',
                                                                         'bytes',
                                                                         'kbytes',
                                                                         'mbytes',
                                                                         'gbytes']},
             'apetools.pipes.commandpipe.CommandPipe': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '\n    ',
                                                        'methods': [],
                                                        'properties': []},
             'apetools.pipes.pipeenums.PipeEnum': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '\n    A holder of constants for the StoragePipe\n    ',
                                                   'methods': [],
                                                   'properties': ['__slots__',
                                                                  'start',
                                                                  'pipe',
                                                                  'sink']},
             'apetools.pipes.storagepipe.StoragePipe': {'bases': ['apetools.baseclass.BaseClass'],
                                                        'constructor': ["path=''",
                                                                        'role=StoragePipeEnum.pipe',
                                                                        'target=None',
                                                                        'header_token=None',
                                                                        'transform=None',
                                                                        'emit=False'],
                                                        'docstring': '\n    A class to add a pipe interface to the Storage Output\n    ',
                                                        'methods': [('pipe_start',
                                                                     ['target', 'filename'],
                                                                     '\n        If a header_token was set, starts the header line\n        .\n        :param:\n\n         - `target`: a started coroutine\n         - `filename`: the name of te file to open\n\n        :postcondition: pipe_start is an opened coroutine\n        '),
                                                                    ('pipe_sink',
                                                                     ['filename'],
                                                                     '\n        Assumes there are no further targets in the pipe.\n        \n        :param:\n\n         - `filename`: the name of the file to open\n\n        :postcondition: pipe is an opened coroutine\n        '),
                                                                    ('pipe',
                                                                     ['target', 'filename'],
                                                                     '\n        Acts as a tee between a previous agent and the next target.\n        \n        :param:\n\n         - `target`: a started coroutine\n         - `filename`: the name of te file to open\n\n        :postcondition: pipe is an opened coroutine\n        '),
                                                                    ('open_start',
                                                                     ['filename'],
                                                                     '\n        :param:\n\n         - `filename`: The name of the file to open\n\n        :return: coroutine to send lines to\n        '),
                                                                    ('open_sink',
                                                                     ['filename'],
                                                                     '\n        :param:\n\n         - `filename`: the name of the file to open\n\n        :return: coroutine to send lines to\n        '),
                                                                    ('open',
                                                                     ['filename'],
                                                                     '\n        This uses self.role to chose the type of pipe to return.\n        :param:\n\n         - `filename`: the name of the file to open\n\n        :return: coroutine to send lines to\n        '),
                                                                    ('extend_path',
                                                                     ['subdirectory'],
                                                                     "\n        A pass-through to the storage's command\n        \n        :param:\n\n         - `subdirectory`: A sub-directory within the output folder\n        "),
                                                                    ('set_emit',
                                                                     [],
                                                                     '\n        :postcondition: if has target, target.set_emit called, emit set\n        '),
                                                                    ('unset_emit',
                                                                     [],
                                                                     '\n        :postcondition: if has target, target.unset_emit called, emit unset\n        ')],
                                                        'properties': ['path',
                                                                       'role',
                                                                       'target',
                                                                       'header_token',
                                                                       'transform',
                                                                       'emit',
                                                                       '_storage',
                                                                       'storage']},
             'apetools.pipes.storagepipe.StoragePipeEnum': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': '\n    A holder of constants for the StoragePipe\n    ',
                                                            'methods': [],
                                                            'properties': ['__slots__',
                                                                           'start',
                                                                           'pipe',
                                                                           'sink']},
             'apetools.proletarians.argumentparser.ArgumentParser': {'bases': ['apetools.baseclass.BaseClass'],
                                                                     'constructor': ['*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    A class to parse command line arguments.\n    ',
                                                                     'methods': [('_add_arguments',
                                                                                  [],
                                                                                  '\n        Adds the base arguments used for the top-level command (runtest)\n        '),
                                                                                 ('_add_subparsers',
                                                                                  [],
                                                                                  "\n        Add the subparsers this is an external method so that the parser isn't too cluttered up.\n        "),
                                                                                 ('print_help',
                                                                                  [],
                                                                                  '\n        Calls on  ArgumentParser.print_help()\n        ')],
                                                                     'properties': ['_parser',
                                                                                    '_subparsers',
                                                                                    '_args',
                                                                                    '_strategerizer',
                                                                                    'parser',
                                                                                    'subparsers',
                                                                                    'args',
                                                                                    'strategerizer']},
             'apetools.proletarians.countdowntimer.CountdownTimer': {'bases': ['apetools.baseclass.BaseClass'],
                                                                     'constructor': ['repetitions',
                                                                                     '*args',
                                                                                     '**kwargs'],
                                                                     'docstring': '\n    A countdown timer keeps track of time Remaining.\n    ',
                                                                     'methods': [('next_laptime',
                                                                                  [],
                                                                                  '\n        #. appends a timedelta for now-lap_start to lap_times\n        #. sets lap_start to now\n        #. increments current_repetition\n        '),
                                                                                 ('start_timer',
                                                                                  [],
                                                                                  '\n        Sets the lap_start and start to now() and current_repetition to 1\n        ')],
                                                                     'properties': ['total_repetitions',
                                                                                    'current_repetition',
                                                                                    'start',
                                                                                    'lap_start',
                                                                                    '_lap_times',
                                                                                    '_remaining_time',
                                                                                    '_median_laptime',
                                                                                    '_remaining_repetitions',
                                                                                    '_total_time',
                                                                                    'lap_times',
                                                                                    'remaining_time',
                                                                                    'total_time',
                                                                                    'median_laptime',
                                                                                    'remaining_repetitions']},
             'apetools.proletarians.crashhandler.CrashHandler': {'bases': ['apetools.baseclass.BaseClass'],
                                                                 'constructor': ['arguments',
                                                                                 '*args',
                                                                                 '**kwargs'],
                                                                 'docstring': '\n    The CrashHandler is called if the entire program crashes and collects crash information.\n    ',
                                                                 'methods': [('run',
                                                                              ['error'],
                                                                              '\n        This is called when the program crashes.\n\n        :param:\n\n         - `error`: The error returned by the exception\n        ')],
                                                                 'properties': ['arguments']},
             'apetools.proletarians.data.Data': {'bases': ['object'],
                                                 'constructor': ['data=None'],
                                                 'docstring': '\n    A Data holds data.\n    ',
                                                 'methods': [('insert',
                                                              ['datum'],
                                                              '\n        :param:\n\n         - `datum`: A single numeric value to add to the data.\n        ')],
                                                 'properties': ['_data',
                                                                '_median',
                                                                'data',
                                                                'median']},
             'apetools.proletarians.errors.OperatorError': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '\n    An OperatorError is raised by an Operator if the operation has failed.\n    ',
                                                            'methods': [],
                                                            'properties': []},
             'apetools.proletarians.hortator.CrashRecord': {'bases': ["collections.namedtuple('CrashRecord', 'id start_time crash_time error')"],
                                                            'constructor': [],
                                                            'docstring': '\n    A CrashRecord holds the crash information for later.\n    ',
                                                            'methods': [('__str__', [], '')],
                                                            'properties': ['__slots__']},
             'apetools.proletarians.hortator.Hortator': {'bases': ['apetools.baseclass.BaseClass'],
                                                         'constructor': ['operators',
                                                                         '*args',
                                                                         '**kwargs'],
                                                         'docstring': '\n    A builder builds objects.\n    ',
                                                         'methods': [('__call__',
                                                                      [],
                                                                      '\n        Runs the operators\n        ')],
                                                         'properties': ['operations',
                                                                        'last_operator']},
             'apetools.proletarians.liststrategy.ListStrategy': {'bases': ['list'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    A List Strategy extends the list to use for executing commands.\n    ',
                                                                 'methods': [('remove',
                                                                              ['command'],
                                                                              "\n        This doesn't raise an error so it can be called at any time\n        \n        :param:\n\n         - `command`: an object to remove from the commands\n\n        :postcondition: first added instance of command is removed\n        "),
                                                                             ('purge',
                                                                              ['command'],
                                                                              '\n        :param:\n\n         - `command`: an object to remove from the commands\n\n        :postcondition: *all* instances of command are removed\n        '),
                                                                             ('reset',
                                                                              [],
                                                                              '\n        :postcondition: list is emptied\n        ')],
                                                                 'properties': []},
             'apetools.proletarians.liststrategy.NonparametricStrategy': {'bases': ['apetools.proletarians.liststrategy.ListStrategy'],
                                                                          'constructor': [],
                                                                          'docstring': '\n    A nonparametric Strategy is a container and runner of commands\n    ',
                                                                          'methods': [('__call__',
                                                                                       [],
                                                                                       '\n        :postcondition: commands called in the order they were added\n        ')],
                                                                          'properties': []},
             'apetools.proletarians.liststrategy.ParametricStrategy': {'bases': ['apetools.proletarians.liststrategy.ListStrategy'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    A parametric strategy is a container and runner of commands.\n    ',
                                                                       'methods': [('__call__',
                                                                                    ['parameters'],
                                                                                    '\n        :param:\n\n         - `parameters`: an object that all contained items can use or ignore\n        ')],
                                                                       'properties': []},
             'apetools.proletarians.setuprun.SetUp': {'bases': ['apetools.baseclass.BaseClass'],
                                                      'constructor': ['arguments',
                                                                      '*args',
                                                                      '**kwargs'],
                                                      'docstring': '\n    The SetUp sets up the infrastructure\n    ',
                                                      'methods': [('__call__',
                                                                   [],
                                                                   "\n        Runs the builder.hortator's `run` method    \n        ")],
                                                      'properties': ['arguments',
                                                                     '_lexicographer',
                                                                     '_builder',
                                                                     'lexicographer',
                                                                     'builder']},
             'apetools.proletarians.strategerizer.Strategerizer': {'bases': ['apetools.baseclass.BaseClass'],
                                                                   'constructor': ['*args',
                                                                                   '**kwargs'],
                                                                   'docstring': '\n    A Strategerizer holds strategies.\n    ',
                                                                   'methods': [('run',
                                                                                ['args'],
                                                                                '\n        The strategy to run tests\n        '),
                                                                               ('fetch',
                                                                                ['args'],
                                                                                '\n        Fetches or lists Available config files.\n        '),
                                                                               ('handle_help',
                                                                                ['args'],
                                                                                '\n        Runs the helper\n        '),
                                                                               ('test',
                                                                                ['args'],
                                                                                '\n        Tests the setup\n        ')],
                                                                   'properties': []},
             'apetools.proletarians.teardown.TeardownSession': {'bases': ['apetools.baseclass.BaseClass'],
                                                                'constructor': ['tools',
                                                                                '*args',
                                                                                '**kwargs'],
                                                                'docstring': "\n    The TearDown does whatever needs to be done after the test is completed.\n\n    It iterates over the `tools` passed in to the constructor.\n    Each tool's `run` method is called.\n    Choosing tools and ordering them defines the TeardownSession algorithm.\n    ",
                                                                'methods': [('run',
                                                                             [],
                                                                             '\n        Calls the run() method for each tool in `tools`\n\n        ')],
                                                                'properties': ['tools']},
             'apetools.proletarians.testoperator.TestOperator': {'bases': ['apetools.baseclass.BaseClass'],
                                                                 'constructor': ['test_parameters',
                                                                                 'operation_setup',
                                                                                 'operation_teardown',
                                                                                 'test_setup',
                                                                                 'tests',
                                                                                 'test_teardown',
                                                                                 'nodes',
                                                                                 'no_cleanup',
                                                                                 'countdown_timer',
                                                                                 'storage',
                                                                                 'sleep=None'],
                                                                 'docstring': '\n    An operator runs the sequence of operations.\n    ',
                                                                 'methods': [('one_repetition',
                                                                              ['parameter',
                                                                               'count',
                                                                               'prefix'],
                                                                              '\n        Holds the test algorithm for one repetition.\n\n        This was moved out to make the exception handling cleaner.\n\n        #. Runs Setup\n        #. Runs test\n        #. Runs Teardown\n\n        :param:\n\n         - `parameter`: namedtuple with tool-parameters\n         - `count`: the current test-count (for logging)\n         - `prefix`: any file-prefix given by the operation-setup\n        '),
                                                                             ('log_info',
                                                                              ['message',
                                                                               'node'],
                                                                              '\n        :param:\n\n         - `message`: a string to log\n         - `node`: the name of the current node\n\n        :postcondition: message sent to node and info log.\n        '),
                                                                             ('__call__',
                                                                              [],
                                                                              '\n        This is the main operation method.\n        '),
                                                                             ('keyboard_interrupt_intercept',
                                                                              [],
                                                                              '\n        The watcher watches for signal interrupts and kills children.\n\n        This was implemented to prevent user-confusion when a ctrl-c is\n        sent and the interpreter tries to clean up the threads\n        ')],
                                                                 'properties': ['test_parameters',
                                                                                'operation_setup',
                                                                                'operation_teardown',
                                                                                'test_setup',
                                                                                'tests',
                                                                                'test_teardown',
                                                                                'nodes',
                                                                                'no_cleanup',
                                                                                'storage',
                                                                                'countdown_timer',
                                                                                '_sleep',
                                                                                '_sub_logger',
                                                                                'parameter_queue',
                                                                                'sub_logger',
                                                                                'sleep']},
             'apetools.threads.barrier.Barrier': {'bases': ['apetools.baseclass.BaseClass'],
                                                  'constructor': ['n'],
                                                  'docstring': "\n    A Barrier prevents threads from getting to the critical point at the same time.\n\n    This implements the pre-loaded turnstile from 'Little Book of Semaphores'\n    ",
                                                  'methods': [('critical_point',
                                                               [],
                                                               '\n        This will stop at the block to the critical point.\n        '),
                                                              ('rendezvous_point',
                                                               [],
                                                               '\n        This stops at the rendezvous point.\n        '),
                                                              ('wait', [], '')],
                                                  'properties': ['n',
                                                                 'count',
                                                                 'mutex',
                                                                 'turnstile_1',
                                                                 'turnstile_2']},
             'apetools.threads.lock.Lock': {'bases': ['object'],
                                            'constructor': ['semaphore'],
                                            'docstring': '\n    A Lock defines __enter__ and __exit__ methods.\n    ',
                                            'methods': [('__enter__',
                                                         [],
                                                         "\n        calls the Semaphore's wait() method\n        "),
                                                        ('__exit__',
                                                         [],
                                                         "\n        Calls the Semaphore's signal() method.\n        ")],
                                            'properties': ['semaphore']},
             'apetools.threads.semaphore.Semaphore': {'bases': ['apetools.baseclass.BaseClass'],
                                                      'constructor': ['size=1'],
                                                      'docstring': "\n    Implements a Semaphore using Alan Downey's notation.\n\n    This is an unbounded semaphore so it can release more than it has acquired\n    ",
                                                      'methods': [('wait',
                                                                   [],
                                                                   '\n        Decrements the semaphore if > 0, waits if it is 0\n        '),
                                                                  ('signal',
                                                                   ['value=1'],
                                                                   '\n        Increments the Semaphore\n\n        :param:\n\n         - `value`: The number of times to increment the Semaphore\n        '),
                                                                  ('increment_size',
                                                                   [],
                                                                   '\n        :postcondition: self.semaphore is a new semaphore that is 1 bigger than last\n        ')],
                                                      'properties': ['size', 'semaphore']},
             'apetools.threads.threads.Thread': {'bases': ['threading.Thread'],
                                                 'constructor': ['*args', '**kwargs'],
                                                 'docstring': '\n    Calls start in the constructor and sets daemonic.\n    ',
                                                 'methods': [],
                                                 'properties': ['daemon']},
             'apetools.tools.copyfiles.CopyFiles': {'bases': ['apetools.baseclass.BaseClass'],
                                                    'constructor': ['filenames',
                                                                    'storage',
                                                                    'subdir=None'],
                                                    'docstring': '\n    A tool to copy files to storage.\n    ',
                                                    'methods': [('run',
                                                                 [],
                                                                 '\n        Copies the files in filenames to storage.\n        ')],
                                                    'properties': ['filenames',
                                                                   'storage',
                                                                   'subdir']},
             'apetools.tools.dumpdevicestate.DumpDeviceState': {'bases': ['apetools.baseclass.BaseClass'],
                                                                'constructor': ['devices',
                                                                                'target=None'],
                                                                'docstring': '\n    A class to record the state of a device.\n    ',
                                                                'methods': [('__call__',
                                                                             ['parameters'],
                                                                             '\n        :param:\n\n         - `parameters`: a named tuple (expects parameters.nodes.parameters)\n        ')],
                                                                'properties': ['devices',
                                                                               'target']},
             'apetools.tools.getipaddress.GetIp': {'bases': ['apetools.baseclass.BaseClass'],
                                                   'constructor': ['interface',
                                                                   'connection',
                                                                   'expression'],
                                                   'docstring': '\n    A GetIp gets Ip addresses\n    ',
                                                   'methods': [('expression',
                                                                ['expr'],
                                                                '\n        :param:\n\n         - `expr`: A regular expression to match the ip address.\n        '),
                                                               ('run',
                                                                [],
                                                                '\n        :return: The ip-address of the interface\n        :raise: CommandError if no interface is found\n        ')],
                                                   'properties': ['interface',
                                                                  'connection',
                                                                  '_expression',
                                                                  'expression']},
             'apetools.tools.iperfsession.IperfConfigurationError': {'bases': ['apetools.commons.errors.ConfigurationError'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    An exception to raise if the direction is unknown.\n    ',
                                                                     'methods': [],
                                                                     'properties': []},
             'apetools.tools.iperfsession.IperfSession': {'bases': ['apetools.baseclass.BaseClass'],
                                                          'constructor': ['iperf_test',
                                                                          'nodes',
                                                                          'tpc',
                                                                          'filename_base=None'],
                                                          'docstring': '\n    A bundler of nodes and the iperftest\n    ',
                                                          'methods': [('particpants',
                                                                       ['parameters'],
                                                                       '\n        :param:\n\n         - `parameters`: namedtuple passed in to call\n\n        :return: \n        '),
                                                                      ('filename',
                                                                       ['parameters',
                                                                        'filename_prefix'],
                                                                       '\n        :param:\n\n         - `parameters`: Namedtuple passed in to __call__      \n         - `filename_prefix`: a prefix (not really) to add to the name\n        :return: filename derived from the parameters\n        '),
                                                                      ('__call__',
                                                                       ['parameters',
                                                                        'filename_prefix=None'],
                                                                       '\n        :param:\n\n         - `parameters`: namedtuple with nodes and direction parameters\n         - `filename_prefix`: prefix to prepend to the filename\n        ')],
                                                          'properties': ['iperf_test',
                                                                         'nodes',
                                                                         'filename_base',
                                                                         'tpc',
                                                                         '_to_node_expression',
                                                                         '_from_node_expression',
                                                                         'poll',
                                                                         'from_node_expression',
                                                                         'to_node_expression']},
             'apetools.tools.iperftest.IperfTest': {'bases': ['apetools.baseclass.BaseClass'],
                                                    'constructor': ['sender_command=None',
                                                                    'receiver_command=None',
                                                                    'sleep=None',
                                                                    'wait_events=None'],
                                                    'docstring': '\n    The Iperf Test runs a single iperf test.\n    ',
                                                    'methods': [('__call__',
                                                                 ['sender',
                                                                  'receiver',
                                                                  'filename'],
                                                                 '\n        Runs the test.\n\n        :param:\n\n         - `sender`: a device to originate traffic\n         - `receiver`: A device to receive traffic\n         - `filename`: a filename to use for output\n\n        :raise: IperfTestError if wait_events time out\n        ')],
                                                    'properties': ['sender_command',
                                                                   'receiver_command',
                                                                   'wait_events',
                                                                   '_sleep',
                                                                   '_kill',
                                                                   'kill',
                                                                   'sleep']},
             'apetools.tools.iperftest.IperfTestError': {'bases': ['apetools.commons.errors.CommandError'],
                                                         'constructor': [],
                                                         'docstring': '\n    ',
                                                         'methods': [],
                                                         'properties': []},
             'apetools.tools.killall.KillAll': {'bases': ['apetools.baseclass.BaseClass'],
                                                'constructor': ['name=None', 'sleep=5'],
                                                'docstring': '\n    A killall kills processes. The default operating system is linux\n    ',
                                                'methods': [('run',
                                                             ['connection',
                                                              'name=None',
                                                              'time_to_sleep=None'],
                                                             '\n        :param:\n\n         - `connection`: the connection to the device\n         - `name`: The process to kill\n\n        :raise: KillAllError if the process is still alive at the end\n        '),
                                                            ('__call__',
                                                             ['connection',
                                                              'name=None',
                                                              'time_to_sleep=None'],
                                                             '\n        This is an alias to run to match the newer-style\n        :param:\n\n         - `connection`: connection to the device\n        '),
                                                            ('__str__', [], '')],
                                                'properties': ['_logger',
                                                               'name',
                                                               '_expression',
                                                               '_arguments',
                                                               'time_to_sleep',
                                                               '_sleep',
                                                               'expression',
                                                               'arguments',
                                                               'sleep',
                                                               'connection']},
             'apetools.tools.killall.KillAllError': {'bases': ['apetools.commons.errors.CommandError'],
                                                     'constructor': [],
                                                     'docstring': "\n    A KillAllError is raised if the kill didn't succeed.\n    ",
                                                     'methods': [],
                                                     'properties': []},
             'apetools.tools.movefiles.MoveFiles': {'bases': ['apetools.baseclass.BaseClass'],
                                                    'constructor': ['filenames', 'storage'],
                                                    'docstring': '\n    A tool to move files to storage.\n    ',
                                                    'methods': [('run',
                                                                 [],
                                                                 '\n        Moves the files in filenames to storage.\n        ')],
                                                    'properties': ['filenames', 'storage']},
             'apetools.tools.networktester.NetworkTester': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': ['testers',
                                                                            'output=None'],
                                                            'docstring': '\n    A network tester runs a series of network tests.\n    ',
                                                            'methods': [('run',
                                                                         [],
                                                                         '\n        Runs the testers\n\n        :raise: ConnectionError if any tester fails.\n        ')],
                                                            'properties': ['testers',
                                                                           '_output',
                                                                           'output']},
             'apetools.tools.setupiteration.SetupIteration': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': ['device',
                                                                              'affector',
                                                                              'time_to_recovery',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': '\n    A setupIteration sets-up a test iteration.\n    ',
                                                              'methods': [('run',
                                                                           ['parameters'],
                                                                           '\n        Gets wifi info and displays it on the screen, disables the radio.\n\n        :param:\n\n         - `parameters`: An object with the parameters for ttf and sleep.\n        '),
                                                                          ('log',
                                                                           ['message'],
                                                                           '\n        :param:\n\n         - `message`: A String to send to the loggers\n\n        :postcondition: message sent to device log and self.logger\n        ')],
                                                              'properties': ['device',
                                                                             'affector',
                                                                             'time_to_recovery',
                                                                             '_sleep',
                                                                             '_enable_wifi',
                                                                             '_disable_wifi',
                                                                             '_dumpsys',
                                                                             'dumpsys',
                                                                             'enable_wifi',
                                                                             'disable_wifi',
                                                                             'sleep']},
             'apetools.tools.sleep.Sleep': {'bases': ['apetools.baseclass.BaseClass'],
                                            'constructor': ['sleep_time=5', '*args', '**kwargs'],
                                            'docstring': '\n    The sleep provides a verbose sleep.\n    ',
                                            'methods': [('run',
                                                         ['sleep_time=None'],
                                                         '\n        :param:\n\n         - `sleep_time`: The total amount of time to sleep.\n        '),
                                                        ('__call__',
                                                         ['sleep_time=None'],
                                                         '\n        An alias for run to make it compatible with the newer interface\n\n        :param:\n\n         - `sleep_time`: The total amount of time to sleep.\n\n        ')],
                                            'properties': ['sleep_time']},
             'apetools.tools.teardowniteration.TeardownIteration': {'bases': ['apetools.baseclass.BaseClass'],
                                                                    'constructor': ['*args',
                                                                                    '**kwargs'],
                                                                    'docstring': "\n    A TeardownIteration does what's needed after a single iteration.\n    ",
                                                                    'methods': [('run',
                                                                                 ['parameters'],
                                                                                 '\n        :param:\n\n         - `parameters`: object with `recovery_time` property\n        ')],
                                                                    'properties': ['_sleep',
                                                                                   'sleep']},
             'apetools.tools.testdumpsyswifi.Param': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['wifi_interface']},
             'apetools.tools.testdumpsyswifi.TestDumpsysWifi': {'bases': ['object'],
                                                                'constructor': ['parameters'],
                                                                'docstring': '\n    Gathers wifi information for a sanity check.\n    ',
                                                                'methods': [('__call__',
                                                                             [],
                                                                             '\n        :postcondition: DumpsysWifi info and IP Address Displayed on screen\n        ')],
                                                                'properties': ['parameters',
                                                                               '_dumpsys',
                                                                               '_connection',
                                                                               '_netcfg',
                                                                               'connection',
                                                                               'dumpsys',
                                                                               'netcfg']},
             'apetools.tools.timetofailure.TimeToFailure': {'bases': ['apetools.baseclass.BaseClass'],
                                                            'constructor': ['pinger=None',
                                                                            'target=None',
                                                                            'timeout=300',
                                                                            'threshold=5',
                                                                            '*args',
                                                                            '**kwargs'],
                                                            'docstring': '\n    A TimeToFailure pings a target until the pings fail.\n    ',
                                                            'methods': [('run',
                                                                         ['parameters'],
                                                                         '\n        Pings until failure or timeout.\n\n        :param:\n\n         - `parameters.target`: The address to ping.\n         - `parameters.timeout`: The length of time to try (in seconds)\n         - `parameters.threshold`: The number of consecutive failures needed to be a failure.\n\n        :rtype: FloatType or NoneType\n        :return: time from start of run to first of failed pings (or None)\n        ')],
                                                            'properties': ['_pinger',
                                                                           'target',
                                                                           'timeout',
                                                                           'threshold',
                                                                           'pinger']},
             'apetools.tools.timetorecovery.TTRData': {'bases': ["collections.namedtuple('TTRData', 'ttr rtt')"],
                                                       'constructor': [],
                                                       'docstring': '\n    A TTRData holds the TimeToRecovery data\n    ',
                                                       'methods': [('__str__', [], '')],
                                                       'properties': ['__slots__']},
             'apetools.tools.timetorecovery.TimeToRecovery': {'bases': ['apetools.baseclass.BaseClass'],
                                                              'constructor': ['nodes',
                                                                              'pinger=None',
                                                                              'target=None',
                                                                              'timeout=300',
                                                                              'threshold=5'],
                                                              'docstring': '\n    A TimeToRecovery pings a target until the pings succeeed.\n    ',
                                                              'methods': [('_unpack_parameters',
                                                                           ['parameters'],
                                                                           ''),
                                                                          ('run',
                                                                           ['parameters=None',
                                                                            'connection=None'],
                                                                           '\n        Pings until failure or timeout.\n\n        :param:\n\n         - `parameters.target`: The address to ping.\n         - `parameters.timeout`: The length of time to try (in seconds)\n         - `parameters.threshold`: The number of consecutive pings needed to be a success.\n         - `connection`: The connection to the source of the ping\n\n        :rtype: FloatType or NoneType\n        :return: time from start of run to first of successful pings (or None)\n        '),
                                                                          ('__call__',
                                                                           ['parameters'],
                                                                           '\n        :param:\n\n         - `parameters`: namedtuple with nodes and targets attribute\n\n        :raises: CommandError if unable to recover\n        ')],
                                                              'properties': ['nodes',
                                                                             '_pinger',
                                                                             'target',
                                                                             'timeout',
                                                                             'threshold',
                                                                             'pinger']},
             'apetools.tools.timetorecoverytest.TimeToRecoveryTest': {'bases': ['apetools.baseclass.BaseClass'],
                                                                      'constructor': ['parameters',
                                                                                      '*args',
                                                                                      '**kwargs'],
                                                                      'docstring': '\n    A time to recovery Test times how long it takes to recover.\n    ',
                                                                      'methods': [('run',
                                                                                   ['parameters'],
                                                                                   '\n        Runs a single time to recovery test.\n        '),
                                                                                  ('save_data',
                                                                                   ['elapsed',
                                                                                    'criteria',
                                                                                    'repetition'],
                                                                                   '\n        :param:\n\n         - `elapsed`: Value returned from time-to-recovery\n         - `criteria`: upper-bound to passing the test.\n         - `repetition`: The current repetition\n        '),
                                                                                  ('log_message',
                                                                                   ['message'],
                                                                                   '\n        :param:\n\n         - `message`: Message to send to logger log and device log\n        ')],
                                                                      'properties': ['parameters',
                                                                                     '_device',
                                                                                     '_output',
                                                                                     '_time_to_recovery',
                                                                                     'device',
                                                                                     'output',
                                                                                     'time_to_recovery']},
             'apetools.tools.wifitool.WifiToolAdb': {'bases': ['apetools.baseclass.BaseClass'],
                                                     'constructor': ['status_command=None',
                                                                     'ip_command=None',
                                                                     'interface_command=None',
                                                                     'mac_command=None',
                                                                     'rssi_command=None',
                                                                     'ssid_command=None'],
                                                     'docstring': '\n    The WifiTool aggregates wifi commands\n    ',
                                                     'methods': [('__str__', [], '')],
                                                     'properties': ['_status_command',
                                                                    '_ip_command',
                                                                    '_interface_command',
                                                                    '_mac_command',
                                                                    '_rssi_command',
                                                                    '_ssid_command',
                                                                    '_wpacli_command',
                                                                    '_iw_command',
                                                                    '_netcfg',
                                                                    '_connection',
                                                                    'netcfg',
                                                                    'iw_command',
                                                                    'wpacli_command',
                                                                    'connection',
                                                                    'status_command',
                                                                    'ip_command',
                                                                    'interface_command',
                                                                    'mac_command',
                                                                    'rssi_command',
                                                                    'ssid_command']},
             'apetools.watchers.basedevicepoller.BaseDevicePoller': {'bases': ['apetools.baseclass.BaseClass'],
                                                                     'constructor': ['device',
                                                                                     'output',
                                                                                     'expression=None',
                                                                                     'interval=1',
                                                                                     'timestamp=None',
                                                                                     'name=None',
                                                                                     'event=None',
                                                                                     'use_header=True'],
                                                                     'docstring': '\n    An abstract class to base Device-Pollsters on.\n    ',
                                                                     'methods': [('name',
                                                                                  [],
                                                                                  '\n        :return: the name for logging\n        '),
                                                                                 ('expression',
                                                                                  [],
                                                                                  '\n        :return: uncompiled expression to match the output\n        '),
                                                                                 ('run',
                                                                                  [],
                                                                                  '\n        The method to poll the device\n        '),
                                                                                 ('start',
                                                                                  [],
                                                                                  '\n        :postcondition: self.thread contains the run() thread\n        '),
                                                                                 ('__call__',
                                                                                  [],
                                                                                  '\n        A pass-through to start\n        ')],
                                                                     'properties': ['__metaclass__',
                                                                                    '_logger',
                                                                                    'device',
                                                                                    'output',
                                                                                    '_expression',
                                                                                    'interval',
                                                                                    'event',
                                                                                    'use_header',
                                                                                    '_name',
                                                                                    '_timestamp',
                                                                                    '_regex',
                                                                                    'timestamp',
                                                                                    'regex',
                                                                                    'thread']},
             'apetools.watchers.commandwatcher.CommandWatcher': {'bases': ['apetools.baseclass.BaseClass'],
                                                                 'constructor': ['output',
                                                                                 'command',
                                                                                 'expression',
                                                                                 'connection=None',
                                                                                 'interval=1'],
                                                                 'docstring': '\n    A class to call a command and save a csv using the output\n    ',
                                                                 'methods': [('expression',
                                                                              ['expr'],
                                                                              '\n        :param:\n\n         - `expr`: A string regular expression to match the file output\n\n        :postcondition: self._expr is a compiled regular expression        \n        '),
                                                                             ('stop',
                                                                              [],
                                                                              '\n        :postcondition: `self.stopped` is True\n        '),
                                                                             ('__call__',
                                                                              ['connection=None'],
                                                                              '\n        This is an adapter to the start interface\n\n        :param:\n\n         - `connection`: a connection to the device\n        '),
                                                                             ('start',
                                                                              [],
                                                                              '\n        :postcondition: `run` method running in a thread\n        '),
                                                                             ('run', [], '')],
                                                                 'properties': ['output',
                                                                                'interval',
                                                                                'connection',
                                                                                'expression',
                                                                                '_timestamp',
                                                                                'command',
                                                                                'stopped',
                                                                                '_expression',
                                                                                'timestamp']},
             'apetools.watchers.devicepoller.DevicePoller': {'bases': ['basedevicepoller.BaseDevicePoller'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '\n    A DevicePoller \n    ',
                                                             'methods': [('run',
                                                                          [],
                                                                          '\n        :postcondition: the poller is sending rssi values to the output\n        ')],
                                                             'properties': ['name',
                                                                            '_name',
                                                                            'expression']},
             'apetools.watchers.devicepoller.DevicePollerEnum': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    A Holder of rssi-poller constants\n    ',
                                                                 'methods': [],
                                                                 'properties': ['__slots__',
                                                                                'rssi',
                                                                                'devicepoller']},
             'apetools.watchers.fileexpressionwatcher.FileExpressionWatcher': {'bases': ['apetools.baseclass.BaseClass'],
                                                                               'constructor': ['output',
                                                                                               'connection',
                                                                                               'name',
                                                                                               'expression',
                                                                                               'interval=1'],
                                                                               'docstring': '\n    A class to repeatedly cat a file and output a csv-line\n    ',
                                                                               'methods': [('expression',
                                                                                            ['expr'],
                                                                                            '\n        :param:\n\n         - `expr`: A string regular expression to match the file output\n\n        :postcondition: self._expr is a compiled regular expression        \n        '),
                                                                                           ('stop',
                                                                                            [],
                                                                                            '\n        :postcondition: `self.stopped` is True\n        '),
                                                                                           ('__call__',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': ['output',
                                                                                              'interval',
                                                                                              'connection',
                                                                                              'expression',
                                                                                              '_timestamp',
                                                                                              'name',
                                                                                              'stopped',
                                                                                              '_expression',
                                                                                              'timestamp']},
             'apetools.watchers.logcatwatcher.LogcatWatcher': {'bases': ['logwatcher.LogWatcher'],
                                                               'constructor': ['logs=None',
                                                                               '*args',
                                                                               '**kwargs'],
                                                               'docstring': '\n    A LogcatWatcher watches the logcat logs.\n    ',
                                                               'methods': [('arguments',
                                                                            ['buffers'],
                                                                            '\n        :param:\n\n        - `buffers`: not used\n        '),
                                                                           ('run',
                                                                            ['connection'],
                                                                            '\n        Runs an infinite loop that executes self.command on self.arguments\n        Writes the lines to self.output.write()\n        '),
                                                                           ('__str__', [], '')],
                                                               'properties': ['command',
                                                                              '_arguments',
                                                                              '_logs',
                                                                              '_logger',
                                                                              '_stop',
                                                                              '_stopped',
                                                                              'path',
                                                                              'logs',
                                                                              'arguments']},
             'apetools.watchers.logwatcher.LogWatcher': {'bases': ['apetools.baseclass.BaseClass'],
                                                         'constructor': ['output',
                                                                         'event=None',
                                                                         'connection=None',
                                                                         "arguments='/proc/kmsg'",
                                                                         '*args',
                                                                         '**kwargs'],
                                                         'docstring': "\n    A LogWatcher watches a log.\n\n    In this case it assumes the log is a file that can be 'catted'\n    ",
                                                         'methods': [('run',
                                                                      ['connection'],
                                                                      '\n        Runs an infinite loop that executes cat on self.arguments\n        Writes the lines to self.output.write()\n        '),
                                                                     ('start',
                                                                      ['connection=None'],
                                                                      '\n        Runs self in a thread.\n\n        :rtype: threading.Thread\n        '),
                                                                     ('__str__', [], '')],
                                                         'properties': ['output',
                                                                        'event',
                                                                        'connection',
                                                                        'arguments',
                                                                        '_logger',
                                                                        '_stop',
                                                                        '_stopped',
                                                                        'stop',
                                                                        'stopped',
                                                                        'thread']},
             'apetools.watchers.logwatcher.LogWatcherError': {'bases': ['apetools.commons.errors.CommandError'],
                                                              'constructor': [],
                                                              'docstring': '\n    An error to raise if something is wrong with the LogWatcher\n    ',
                                                              'methods': [],
                                                              'properties': []},
             'apetools.watchers.logwatcher.SafeLogWatcher': {'bases': ['apetools.watchers.logwatcher.LogWatcher'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': "\n    A SafeLogWatcher uses the connection's lock to protect calls to the connection.\n    ",
                                                             'methods': [('run',
                                                                          [],
                                                                          '\n        Runs an infinite loop that reads the tail of the log.\n        Writes the lines to self.output.write()\n        ')],
                                                             'properties': ['lock']},
             'apetools.watchers.procpollster.BaseProcPolster': {'bases': ['apetools.baseclass.BaseClass'],
                                                                'constructor': ['output',
                                                                                'connection',
                                                                                'interval=1',
                                                                                "name='/proc/net/dev'",
                                                                                'timestamp_format=TimestampFormatEnums.log',
                                                                                'use_header=True'],
                                                                'docstring': '\n    A base-class for polling proc-files\n    ',
                                                                'methods': [('expression',
                                                                             [],
                                                                             '\n        :return: compiled regular expression to match the outputline\n        '),
                                                                            ('expression_keys',
                                                                             [],
                                                                             '\n        :return: the keys to the expression groupdict\n        '),
                                                                            ('header',
                                                                             [],
                                                                             '\n        :return: first line of output file\n        '),
                                                                            ('stop',
                                                                             [],
                                                                             '\n        :postcondition: `self.stopped` is True\n        '),
                                                                            ('run',
                                                                             [],
                                                                             '\n        The main loop\n        '),
                                                                            ('start',
                                                                             [],
                                                                             '\n        :postcondition: run is running in a thread (self.thread)\n        ')],
                                                                'properties': ['__metaclass__',
                                                                               '_logger',
                                                                               'output',
                                                                               'interval',
                                                                               'connection',
                                                                               'timestamp_format',
                                                                               'use_header',
                                                                               '_header',
                                                                               '_expression_keys',
                                                                               '_expression',
                                                                               '_timestamp',
                                                                               'name',
                                                                               'stopped',
                                                                               'timestamp',
                                                                               'thread']},
             'apetools.watchers.procpollster.ProcnetdevPollster': {'bases': ['apetools.watchers.procpollster.BaseProcPolster'],
                                                                   'constructor': ['interface',
                                                                                   '*args',
                                                                                   '**kwargs'],
                                                                   'docstring': '\n    A class to grab the bytes and packets received at timed intervals.\n    ',
                                                                   'methods': [],
                                                                   'properties': ['interface',
                                                                                  '_rexpression_keys',
                                                                                  '_texpression_keys',
                                                                                  'expression_keys',
                                                                                  '_expression_keys',
                                                                                  'rexpression_keys',
                                                                                  'texpression_keys',
                                                                                  'header',
                                                                                  '_header',
                                                                                  'expression',
                                                                                  '_expression']},
             'apetools.watchers.procpollster.ProcnetdevPollsterEnum': {'bases': ['object'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    A class to hold constants\n    ',
                                                                       'methods': [],
                                                                       'properties': ['__slots__',
                                                                                      'interface',
                                                                                      'receive_bytes',
                                                                                      'receive_packets',
                                                                                      'receive_errs',
                                                                                      'receive_drop',
                                                                                      'receive_fifo',
                                                                                      'receive_frame',
                                                                                      'transmit_bytes',
                                                                                      'transmit_packets',
                                                                                      'transmit_errs',
                                                                                      'transmit_drop',
                                                                                      'transmit_fifo',
                                                                                      'transmit_colls',
                                                                                      'transmit_carrier']},
             'apetools.watchers.procpollster.ProcnetdevPollsterIndices': {'bases': ['object'],
                                                                          'constructor': [],
                                                                          'docstring': '\n    A class to hold indices to place the values in order\n    ',
                                                                          'methods': [],
                                                                          'properties': ['__slots__',
                                                                                         'rbytes',
                                                                                         'rpackets',
                                                                                         'rerrs',
                                                                                         'rdrop',
                                                                                         'rfifo',
                                                                                         'rframe',
                                                                                         'tbytes',
                                                                                         'tpackets',
                                                                                         'terrs',
                                                                                         'tdrop',
                                                                                         'tfifo',
                                                                                         'tcolls',
                                                                                         'tcarrier']},
             'apetools.watchers.rssipoller.RssiPoller': {'bases': ['basedevicepoller.BaseDevicePoller'],
                                                         'constructor': ['*args', '**kwargs'],
                                                         'docstring': '\n    A DevicePoller for RSSI\n    ',
                                                         'methods': [('run',
                                                                      [],
                                                                      '\n        :postcondition: the poller is sending rssi values to the output\n        ')],
                                                         'properties': ['name',
                                                                        '_name',
                                                                        'expression',
                                                                        '_expression']},
             'apetools.watchers.rssipoller.RssiPollerEnum': {'bases': ['object'],
                                                             'constructor': [],
                                                             'docstring': '\n    A Holder of rssi-poller constants\n    ',
                                                             'methods': [],
                                                             'properties': ['__slots__',
                                                                            'rssi',
                                                                            'rssipoller']},
             'apetools.watchers.thewatcher.TheWatcher': {'bases': ['apetools.baseclass.BaseClass'],
                                                         'constructor': ['watchers',
                                                                         'event=None',
                                                                         '*args',
                                                                         '**kwargs'],
                                                         'docstring': "\n    The Watcher is a class to hold other watchers so you don't have to call start on all of them\n    ",
                                                         'methods': [('start',
                                                                      [],
                                                                      '\n        Starts all the watchers.\n\n        :postcondition: self.threads is a list of started threads\n        '),
                                                                     ('stop',
                                                                      [],
                                                                      '\n        If an event was provided in the constructor, sets it\n\n        This assumes that the threads are using the event to check whether to commit suicide.\n        '),
                                                                     ('__call__',
                                                                      ['parameters=None',
                                                                       'filename_prefix=None'],
                                                                      '\n        The main interface\n\n        :param:\n\n         - `parameters`: not used\n\n        :postcondition: self.start called\n        '),
                                                                     ('__del__',
                                                                      [],
                                                                      '\n        :postcondition: stop() called\n        ')],
                                                         'properties': ['watchers',
                                                                        'event',
                                                                        'threads']},
             'apetools.watchers.thewatcher.TheWatcherError': {'bases': ['apetools.commons.errors.CommandError'],
                                                              'constructor': [],
                                                              'docstring': '\n    ',
                                                              'methods': [],
                                                              'properties': []},
             'apetools.watchers.tsharkwatcher.TsharkWatcher': {'bases': ['apetools.baseclass.BaseClass'],
                                                               'constructor': ['connection',
                                                                               'output=None',
                                                                               "interface='wlan0'"],
                                                               'docstring': '\n    A class to watch bytes and frames using tshark\n    ',
                                                               'methods': [('call_once',
                                                                            [],
                                                                            '\n\n        '),
                                                                           ('stop',
                                                                            [],
                                                                            '\n        :postcondition: self.stopped is True\n        '),
                                                                           ('__call__',
                                                                            ['duration=10'],
                                                                            '\n        :postcondition: tshark data sent to self.output\n        ')],
                                                               'properties': ['_output',
                                                                              'connection',
                                                                              '_expression',
                                                                              'frames',
                                                                              '_timestamp',
                                                                              'stopped',
                                                                              'interface',
                                                                              'timestamp',
                                                                              'output',
                                                                              'expression']},
             'apetools.watchers.tsharkwatcher.TsharkWatcherEnum': {'bases': ['object'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    A class to hold variable names \n    ',
                                                                   'methods': [],
                                                                   'properties': ['__slots__',
                                                                                  'frames',
                                                                                  'bytes']}},
 'CONSTANTS': ['distribute_setup.USER_SITE',
               'distribute_setup.DEFAULT_VERSION',
               'distribute_setup.DEFAULT_URL',
               'distribute_setup.SETUPTOOLS_FAKED_VERSION',
               'distribute_setup.SETUPTOOLS_PKG_INFO',
               'distribute_setup._patch_file',
               'distribute_setup._remove_flat_installation',
               'distribute_setup._create_fake_setuptools_pkg_info',
               'distribute_setup._patch_egg_dir',
               'apetools.baseclass.DOT_JOIN',
               'apetools.log_setter.logger',
               'apetools.log_setter.SCREEN_FORMAT',
               'apetools.log_setter.SCREEN_FORMAT_QUIET',
               'apetools.log_setter.LOG_FORMAT',
               'apetools.log_setter.LOG_TIMESTAMP',
               'apetools.log_setter.GIGABYTE',
               'apetools.log_setter.BACKUP_LOGS',
               'apetools.log_setter.LOGNAME',
               'apetools.connections.serialadapter.EMPTY_STRING',
               'apetools.connections.serialadapter.NEWLINE',
               'apetools.connections.testnp5.t',
               'apetools.connections.testnp5.out',
               'apetools.connections.testnp5.err',
               'apetools.connections.testnp5.line',
               'apetools.connections.testnp5.line',
               'apetools.connections.testnp5.out',
               'apetools.connections.testnp5.err',
               'apetools.connections.testnp5.line',
               'apetools.connections.testnp5.line',
               'apetools.connections.testnp5.out',
               'apetools.connections.testnp5.err',
               'apetools.connections.testnp5.line',
               'apetools.connections.testnp5.line',
               'apetools.connections.sshconnection.SPACER',
               'apetools.connections.sshconnection.UNKNOWN',
               'apetools.connections.sshconnection.EOF',
               'apetools.connections.sshconnection.SPACE',
               'apetools.connections.sshconnection.c',
               'apetools.connections.sshconnection.o',
               'apetools.connections.sshconnection.index',
               'apetools.connections.sshconnection.line',
               'apetools.connections.localconnection.error',
               'apetools.connections.localconnection.SPACER',
               'apetools.connections.localconnection.UNKNOWN',
               'apetools.connections.localconnection.EOF',
               'apetools.connections.localconnection.SPACE',
               'apetools.connections.localconnection.OutputError',
               'apetools.connections.localconnection.arguments',
               'apetools.connections.localconnection.lc',
               'apetools.connections.localconnection.output',
               'apetools.connections.localconnection.output',
               'apetools.connections.localconnection.x',
               'apetools.connections.localconnection.output',
               'apetools.connections.localconnection.output',
               'apetools.connections.telnetconnection.SPACER',
               'apetools.connections.telnetconnection.UNKNOWN',
               'apetools.connections.telnetconnection.EOF',
               'apetools.connections.telnetconnection.arguments',
               'apetools.connections.telnetconnection.sc',
               'apetools.connections.telnetconnection.output',
               'apetools.connections.telnetconnection.x',
               'apetools.connections.telnetconnection.output',
               'apetools.connections.telnetconnection.x',
               'apetools.connections.telnetconnection.output',
               'apetools.connections.telnetconnection.line',
               'apetools.connections.telnetconnection.output',
               'apetools.connections.nonlocalconnection.SPACER',
               'apetools.connections.nonlocalconnection.UNKNOWN',
               'apetools.connections.nonlocalconnection.EOF',
               'apetools.connections.producer.EOF',
               'apetools.connections.producer.SPACE',
               'apetools.connections.producer.f',
               'apetools.connections.producer.count',
               'apetools.connections.producer.line',
               'apetools.connections.producer.f',
               'apetools.connections.producer.p',
               'apetools.connections.producer.f',
               'apetools.connections.producer.line',
               'apetools.connections.producer.p',
               'apetools.connections.producer.p',
               'apetools.connections.producer.o',
               'apetools.connections.producer.line',
               'apetools.connections.producer.e',
               'apetools.connections.producer.line',
               'apetools.connections.producer.p',
               'apetools.connections.serialconnection.SPACER',
               'apetools.connections.serialconnection.UNKNOWN',
               'apetools.connections.serialconnection.EOF',
               'apetools.connections.serialconnection.arguments',
               'apetools.connections.serialconnection.sc',
               'apetools.connections.serialconnection.output',
               'apetools.connections.serialconnection.output',
               'apetools.connections.serialconnection.output',
               'apetools.connections.serialconnection.output',
               'apetools.connections.serialconnection.output',
               'apetools.connections.serialconnection.x',
               'apetools.connections.serialconnection.output',
               'apetools.connections.serialconnection.line',
               'apetools.connections.serialconnection.output',
               'apetools.connections.sshadapter.ConnectionError',
               'apetools.connections.sshadapter.DOT_JOIN',
               'apetools.connections.sshadapter.NEWLINE',
               'apetools.connections.android.__author__',
               'apetools.connections.android.PORT',
               'apetools.connections.android.HOST',
               'apetools.connections.android.HANDSHAKE',
               'apetools.connections.android.Result',
               'apetools.connections.telnetadapter.NEWLINE',
               'apetools.connections.telnetadapter.EOF',
               'apetools.connections.telnetadapter.EMPTY_STRING',
               'apetools.connections.telnetadapter.MATCH_INDEX',
               'apetools.connections.telnetadapter.MATCHING_STRING',
               'apetools.connections.telnetadapter.ta',
               'apetools.connections.telnetadapter.line',
               'apetools.connections.adbconnection.ConnectionError',
               'apetools.connections.adbconnection.CommandError',
               'apetools.connections.adbconnection.ConnectionWarning',
               'apetools.connections.adbconnection.ValidatingOutput',
               'apetools.connections.adbconnection.OperatingSystem',
               'apetools.connections.adbconnection.DEVICE_NOT_FOUND',
               'apetools.connections.adbconnection.NOT_CONNECTED',
               'apetools.connections.adbconnection.DEVICE_NOT_ROOTED',
               'apetools.connections.adbconnection.NOT_ROOTED',
               'apetools.connections.adbconnection.NOT_FOUND',
               'apetools.connections.adbconnection.ALPHA',
               'apetools.connections.adbconnection.ONE_OR_MORE',
               'apetools.connections.adbconnection.ZERO_OR_MORE',
               'apetools.connections.adbconnection.SPACE',
               'apetools.connections.adbconnection.SPACES',
               'apetools.connections.adbconnection.NAMED',
               'apetools.connections.adbconnection.COMMAND_GROUP',
               'apetools.connections.adbconnection.ANYTHING',
               'apetools.connections.adbconnection.EVERYTHING',
               'apetools.connections.adbconnection.adb',
               'apetools.connections.adbconnection.output',
               'apetools.connections.adbconnection.error',
               'apetools.connections.adbconnection.line',
               'apetools.builders.builder.operating_systems',
               'apetools.builders.builder.iperf_direction',
               'apetools.builders.builder.ConnectionTypes',
               'apetools.builders.builder.NoOpDummy',
               'apetools.builders.subbuilders.watcherbuilder.watcher_builder',
               'apetools.builders.subbuilders.iperftestbuilder.IperfDirection',
               'apetools.builders.subbuilders.iperftestbuilder.ConfigurationError',
               'apetools.builders.subbuilders.iperftestbuilder.DIRECTION_ERROR',
               'apetools.builders.subbuilders.iperftestbuilder.DUT_NAME',
               'apetools.builders.subbuilders.iperftestbuilder.TPC_NAME',
               'apetools.builders.subbuilders.iperftestbuilder.BUILD_SENDER_RECEIVER',
               'apetools.builders.subbuilders.basetoolbuilder.Parameters',
               'apetools.builders.subbuilders.devicebuilder.device_builders',
               'apetools.builders.subbuilders.rotatebuilder.COLON',
               'apetools.builders.subbuilders.connectionbuilder.SSHParameters',
               'apetools.builders.subbuilders.connectionbuilder.connection_builders',
               'apetools.parsers.unitconverter.IDENTITY',
               'apetools.parsers.unitconverter.ONE',
               'apetools.parsers.unitconverter.KILO',
               'apetools.parsers.unitconverter.TO_KILO',
               'apetools.parsers.unitconverter.MEGA',
               'apetools.parsers.unitconverter.TO_MEGA',
               'apetools.parsers.unitconverter.GIGA',
               'apetools.parsers.unitconverter.TO_GIGA',
               'apetools.parsers.unitconverter.BYTE',
               'apetools.parsers.unitconverter.TO_BYTE',
               'apetools.parsers.unitconverter.to_units',
               'apetools.parsers.unitconverter.bit_row_1',
               'apetools.parsers.unitconverter.bit_row_2',
               'apetools.parsers.unitconverter.bit_row_3',
               'apetools.parsers.unitconverter.bit_row_4',
               'apetools.parsers.unitconverter.to_byte_row_1',
               'apetools.parsers.unitconverter.converter',
               'apetools.parsers.unitconverter.to_byte_row_2',
               'apetools.parsers.unitconverter.to_byte_row_3',
               'apetools.parsers.unitconverter.to_byte_row_4',
               'apetools.parsers.unitconverter.byte_row_1',
               'apetools.parsers.unitconverter.conversion',
               'apetools.parsers.unitconverter.byte_row_2',
               'apetools.parsers.unitconverter.byte_row_3',
               'apetools.parsers.unitconverter.byte_row_4',
               'apetools.parsers.unitconverter.from_bits',
               'apetools.parsers.unitconverter.from_kbits',
               'apetools.parsers.unitconverter.from_mbits',
               'apetools.parsers.unitconverter.from_gbits',
               'apetools.parsers.unitconverter.from_bytes',
               'apetools.parsers.unitconverter.from_kbytes',
               'apetools.parsers.unitconverter.from_mbytes',
               'apetools.parsers.unitconverter.from_gbytes',
               'apetools.parsers.oatbran.ONE_OR_MORE',
               'apetools.parsers.oatbran.ZERO_OR_MORE',
               'apetools.parsers.oatbran.ZERO_OR_ONE',
               'apetools.parsers.oatbran.DECIMAL_POINT',
               'apetools.parsers.oatbran.L_BRACKET',
               'apetools.parsers.oatbran.R_BRACKET',
               'apetools.parsers.oatbran.OR',
               'apetools.parsers.oatbran.STRING_START',
               'apetools.parsers.oatbran.STRING_END',
               'apetools.parsers.oatbran.ALPHA_NUMS',
               'apetools.parsers.oatbran.ANYTHING',
               'apetools.parsers.oatbran.EVERYTHING',
               'apetools.parsers.oatbran.DIGIT',
               'apetools.parsers.oatbran.NOT_DIGIT',
               'apetools.parsers.oatbran.NON_ZERO',
               'apetools.parsers.oatbran.SINGLE_DIGIT',
               'apetools.parsers.oatbran.TWO_DIGITS',
               'apetools.parsers.oatbran.ONE_HUNDREDS',
               'apetools.parsers.oatbran.NATURAL',
               'apetools.parsers.oatbran.INTEGER',
               'apetools.parsers.oatbran.FLOAT',
               'apetools.parsers.oatbran.REAL',
               'apetools.parsers.oatbran.SPACE',
               'apetools.parsers.oatbran.SPACES',
               'apetools.parsers.oatbran.OPTIONAL_SPACES',
               'apetools.parsers.oatbran.ANYTHING_BOUNDED_BY_SPACES',
               'apetools.parsers.oatbran.DASH',
               'apetools.parsers.oatbran.COLON',
               'apetools.parsers.oatbran.LETTER',
               'apetools.parsers.oatbran.LETTERS',
               'apetools.parsers.oatbran.OPTIONAL_LETTERS',
               'apetools.parsers.oatbran.DOT',
               'apetools.parsers.oatbran.OCTET',
               'apetools.parsers.oatbran.IP_ADDRESS',
               'apetools.parsers.oatbran.HEX_PAIR',
               'apetools.parsers.oatbran.MAC_ADDRESS',
               'apetools.parsers.sumparser.BITS',
               'apetools.parsers.coroutine.COMMA',
               'apetools.parsers.coroutine.NEWLINE',
               'apetools.parsers.coroutine.COMMA_JOIN',
               'apetools.parsers.coroutine.WRITEABLE',
               'apetools.pipes.storagepipe.EOF',
               'apetools.pipes.storagepipe.NEWLINE',
               'apetools.watchers.procpollster.c',
               'apetools.watchers.procpollster.p',
               'apetools.watchers.logwatcher.kw',
               'apetools.watchers.logcatwatcher.lw',
               'apetools.watchers.basedevicepoller.CSV_JOIN',
               'apetools.watchers.basedevicepoller.ZERO',
               'apetools.watchers.fileexpressionwatcher.c',
               'apetools.watchers.fileexpressionwatcher.p',
               'apetools.watchers.commandwatcher.c',
               'apetools.watchers.commandwatcher.p',
               'apetools.watchers.tsharkwatcher.COMMAND_STRING',
               'apetools.watchers.tsharkwatcher.c',
               'apetools.watchers.tsharkwatcher.watch',
               'apetools.informants.helper.IMPORT_PATH',
               'apetools.informants.constants.BLUE',
               'apetools.informants.constants.BOLD',
               'apetools.informants.constants.RESET',
               'apetools.informants.constants.TEMPLATE',
               'apetools.informants.constants.NAME_TEMPLATE',
               'apetools.informants.constants.HELP_FOLDER',
               'apetools.informants.constants.OUTPUT_VARIABLE',
               'apetools.informants.constants.HELP_BASE',
               'apetools.informants.helpfiles.run.name',
               'apetools.informants.helpfiles.run.synopsis',
               'apetools.informants.helpfiles.run.description',
               'apetools.informants.helpfiles.run.examples',
               'apetools.informants.helpfiles.run.see_also',
               'apetools.informants.helpfiles.run.output',
               'apetools.informants.helpfiles.config.name',
               'apetools.informants.helpfiles.config.synopsis',
               'apetools.informants.helpfiles.config.description',
               'apetools.informants.helpfiles.config.examples',
               'apetools.informants.helpfiles.config.see_also',
               'apetools.informants.helpfiles.config.output',
               'apetools.informants.helpfiles.fetch.name',
               'apetools.informants.helpfiles.fetch.synopsis',
               'apetools.informants.helpfiles.fetch.description',
               'apetools.informants.helpfiles.fetch.examples',
               'apetools.informants.helpfiles.fetch.see_also',
               'apetools.informants.helpfiles.fetch.output',
               'apetools.informants.helpfiles.helpmain.name',
               'apetools.informants.helpfiles.helpmain.synopsis',
               'apetools.informants.helpfiles.helpmain.description',
               'apetools.informants.helpfiles.helpmain.examples',
               'apetools.informants.helpfiles.helpmain.see_also',
               'apetools.informants.helpfiles.helpmain.output',
               'apetools.informants.helpfiles.test.name',
               'apetools.informants.helpfiles.test.synopsis',
               'apetools.informants.helpfiles.test.description',
               'apetools.informants.helpfiles.test.examples',
               'apetools.informants.helpfiles.test.see_also',
               'apetools.informants.helpfiles.test.output',
               'apetools.lexicographers.constants.STRIP_LIST',
               'apetools.lexicographers.constants.TIME_STAMP_FOLDER',
               'apetools.lexicographers.constants.TIME_FORMAT',
               'apetools.lexicographers.constants.CONFIG_FOLDER',
               'apetools.lexicographers.constants.DEFAULTS',
               'apetools.lexicographers.configurationmap.STRIP_LIST',
               'apetools.lexicographers.configurationmap.EMPTY_STRING',
               'apetools.lexicographers.configurationmap.DAY_STRING',
               'apetools.lexicographers.configurationmap.MINUTE_STRING',
               'apetools.lexicographers.configurationmap.HOUR_STRING',
               'apetools.lexicographers.configurationmap.SECOND_STRING',
               'apetools.lexicographers.configurationmap.COMMA',
               'apetools.lexicographers.configurationmap.FORWARD_SLASH',
               'apetools.lexicographers.configurationmap.SEMICOLON',
               'apetools.lexicographers.configurationmap.MINUTES',
               'apetools.lexicographers.configurationmap.HOURS',
               'apetools.lexicographers.configurationmap.DAYS',
               'apetools.lexicographers.configurationmap.INTEGER',
               'apetools.lexicographers.configurationmap.NAMED',
               'apetools.lexicographers.configurationmap.SPACES_OPTIONAL',
               'apetools.lexicographers.configurationmap.DASH',
               'apetools.lexicographers.configurationmap.START_GROUP',
               'apetools.lexicographers.configurationmap.END_GROUP',
               'apetools.lexicographers.configurationmap.RANGE',
               'apetools.lexicographers.parametergenerator.AffectorTypes',
               'apetools.lexicographers.parametergenerator.IperfDirection',
               'apetools.lexicographers.parametergenerator.ConfigurationError',
               'apetools.lexicographers.parametergenerator.parameters',
               'apetools.lexicographers.lexicographer.l',
               'apetools.lexicographers.lexicographer.parameter',
               'apetools.lexicographers.timeconverter.ZERO',
               'apetools.lexicographers.timeconverter.EMPTY_STRING',
               'apetools.lexicographers.parametertree.Parameters',
               'apetools.lexicographers.configfetcher.INI_EXTENSION',
               'apetools.lexicographers.sublexicographers.devicelexicographer.ConfigOptions',
               'apetools.lexicographers.sublexicographers.devicelexicographer.device_parameters',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.MAX_PINS',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.ConfigOptions',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.DELIMITER',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.SWITCHES',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.index',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.ConfigurationError',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer.AffectorTypes',
               'apetools.lexicographers.sublexicographers.iperflexicographer.iperf_client_parameters',
               'apetools.lexicographers.sublexicographers.iperflexicographer.iperf_server_parameters',
               'apetools.operations.baseoperation.TOKEN_JOINER',
               'apetools.tools.timetorecovery.now',
               'apetools.tools.timetorecovery.ttr',
               'apetools.tools.setupiteration.ConfigurationError',
               'apetools.tools.setupiteration.AffectorError',
               'apetools.tools.iperfsession.SenderReceiver',
               'apetools.tools.timetofailure.now',
               'apetools.tools.timetofailure.ttf',
               'apetools.tools.timetorecoverytest.TimeToRecoveryTestParameters',
               'apetools.tools.timetorecoverytest.NEWLINE_STRING',
               'apetools.tools.getipaddress.ERROR_MESSAGE',
               'apetools.tools.getipaddress.sc',
               'apetools.tools.getipaddress.gs',
               'apetools.tools.getipaddress.ac',
               'apetools.tools.getipaddress.ag',
               'apetools.tools.testdumpsyswifi.t',
               'apetools.tools.wifitool.tool',
               'apetools.tools.sleep.ONE_SECOND',
               'apetools.tools.sleep.MESSAGE',
               'apetools.tools.killall.CYGWIN',
               'apetools.tools.killall.operating_systems',
               'apetools.tools.networktester.NEWLINE',
               'apetools.tools.networktester.ADD_NEWLINE',
               'apetools.tools.networktester.COMMA',
               'apetools.tools.networktester.ADD_COMMA',
               'apetools.proletarians.argumentparser.ARGUMENTS',
               'apetools.proletarians.hortator.ELAPSED_TIME',
               'apetools.proletarians.testoperator.TIME_REMAINING',
               'apetools.proletarians.testoperator.OperatorStaticTestParameters',
               'apetools.proletarians.testoperator.TEST_TAG',
               'apetools.proletarians.testoperator.TEST_POSTAMBLE',
               'apetools.proletarians.testoperator.TEST_RESULT',
               'apetools.proletarians.data.ZERO',
               'apetools.proletarians.data.ONE',
               'apetools.proletarians.data.TWO',
               'apetools.proletarians.data.HALF',
               'apetools.proletarians.data.TWO_FLOAT',
               'apetools.commons.storageoutput.WRITEABLE',
               'apetools.commons.storageoutput.APPEND',
               'apetools.commons.storageoutput.NEWLINE_ADD',
               'apetools.commons.storageoutput.TIMESTAMP_FLAG',
               'apetools.commons.storageoutput.NEWLINE',
               'apetools.commons.storageoutput.IPERF_TIMESTAMP',
               'apetools.commons.storageoutput.FOLDER_TIMESTAMP',
               'apetools.commons.expressions.NAMED',
               'apetools.commons.expressions.GROUP',
               'apetools.commons.expressions.CLASS',
               'apetools.commons.expressions.OR',
               'apetools.commons.expressions.NOT',
               'apetools.commons.expressions.SPACE',
               'apetools.commons.expressions.NOT_SPACE',
               'apetools.commons.expressions.DIGIT',
               'apetools.commons.expressions.ANYTHING',
               'apetools.commons.expressions.WORD_ENDING',
               'apetools.commons.expressions.LINE_ENDING',
               'apetools.commons.expressions.LINE_START',
               'apetools.commons.expressions.M_TO_N_TIMES',
               'apetools.commons.expressions.ONE_TO_3',
               'apetools.commons.expressions.EXACTLY',
               'apetools.commons.expressions.ONE_OR_MORE',
               'apetools.commons.expressions.ZERO_OR_MORE',
               'apetools.commons.expressions.ZERO_OR_ONE',
               'apetools.commons.expressions.EVERYTHING',
               'apetools.commons.expressions.LETTER',
               'apetools.commons.expressions.LETTERS',
               'apetools.commons.expressions.ALPHA_NUM',
               'apetools.commons.expressions.ALPHA_NUMS',
               'apetools.commons.expressions.ALPHA_NUM_UNDERSCORE',
               'apetools.commons.expressions.ALPHA_NUM_UNDERSCORES',
               'apetools.commons.expressions.SPACE_OPTIONAL',
               'apetools.commons.expressions.SPACES_OPTIONAL',
               'apetools.commons.expressions.SPACES',
               'apetools.commons.expressions.DOT',
               'apetools.commons.expressions.HEX',
               'apetools.commons.expressions.HEXADECIMALS',
               'apetools.commons.expressions.INTEGER',
               'apetools.commons.expressions.FLOAT',
               'apetools.commons.expressions.REAL',
               'apetools.commons.expressions.OCTET',
               'apetools.commons.expressions.OCTET_DOT',
               'apetools.commons.expressions.IP_ADDRESS_NAME',
               'apetools.commons.expressions.IP_ADDRESS',
               'apetools.commons.expressions.MAC_ADDRESS_NAME',
               'apetools.commons.expressions.HEX_PAIR',
               'apetools.commons.expressions.MAC_ADDRESS',
               'apetools.commons.expressions.LINUX_IP',
               'apetools.commons.expressions.LINUX_MAC',
               'apetools.commons.expressions.ANDROID_IP',
               'apetools.commons.expressions.INTERFACE_STATE_NAME',
               'apetools.commons.expressions.INTERFACE_STATE',
               'apetools.commons.expressions.NETCFG_IP',
               'apetools.commons.expressions.INTERFACE_NAME',
               'apetools.commons.expressions.INTERFACE',
               'apetools.commons.expressions.NETCFG_INTERFACE',
               'apetools.commons.expressions.RTT',
               'apetools.commons.expressions.PING',
               'apetools.commons.expressions.PSE_NAME',
               'apetools.commons.expressions.PID_NAME',
               'apetools.commons.expressions.PID',
               'apetools.commons.expressions.TTY',
               'apetools.commons.expressions.TIME',
               'apetools.commons.expressions.PROCESS_NAME',
               'apetools.commons.expressions.PROCESS',
               'apetools.commons.expressions.PSE_LINUX',
               'apetools.commons.expressions.USER',
               'apetools.commons.expressions.PPID',
               'apetools.commons.expressions.VSIZE',
               'apetools.commons.expressions.RSS',
               'apetools.commons.expressions.WCHAN',
               'apetools.commons.expressions.PC',
               'apetools.commons.expressions.S_OR_R',
               'apetools.commons.expressions.PS_ANDROID',
               'apetools.commons.expressions.IW_INTERFACE',
               'apetools.commons.expressions.RSSI_NAME',
               'apetools.commons.expressions.IW_RSSI',
               'apetools.commons.expressions.WPA_MAC',
               'apetools.commons.expressions.WPA_IP',
               'apetools.commons.expressions.WPA_INTERFACE',
               'apetools.commons.expressions.SSID_NAME',
               'apetools.commons.expressions.SSID',
               'apetools.commons.expressions.WPA_SSID',
               'apetools.commons.expressions.SUPPLICANT_STATE_NAME',
               'apetools.commons.expressions.SUPPLICANT_STATE',
               'apetools.commons.expressions.WPA_SUPPLICANT_STATE',
               'apetools.commons.dummy.LOG_STRING',
               'apetools.commons.generators.WRITEABLE',
               'apetools.commons.generators.EOSection',
               'apetools.commons.timestamp.formats',
               'apetools.commons.readoutput.EMPTY_STRING',
               'apetools.commons.readoutput.EOF',
               'apetools.commons.readoutput.SPACE',
               'apetools.commons.readoutput.QUEUE_TIMEOUT',
               'apetools.commons.enumerations.TO_DUT',
               'apetools.commons.enumerations.FROM_DUT',
               'apetools.commons.coroutine.COMMA',
               'apetools.commons.coroutine.NEWLINE',
               'apetools.commons.coroutine.COMMA_JOIN',
               'apetools.commons.coroutine.WRITEABLE',
               'apetools.commons.centraltendency.TWO',
               'apetools.commons.centraltendency.SQUARED',
               'apetools.commons.centraltendency.TWO_F',
               'apetools.commons.centraltendency.SQUARE_ROOT',
               'apetools.commons.centraltendency.PERCENT',
               'apetools.commons.storagebroadcaster.WRITEABLE',
               'apetools.devices.sl4adevice.COMMA',
               'apetools.devices.sl4adevice.KEY_VALUE',
               'apetools.devices.adbdevice.commands',
               'apetools.devices.adbdevice.wifi_commands',
               'apetools.devices.adbdevice.c',
               'apetools.devices.adbdevice.a',
               'apetools.devices.basedevice.CSV_OUTPUT',
               'apetools.devices.basedevice.HUMAN_OUTPUT',
               'apetools.parameters.iperf_client_parameters.ConfigurationError',
               'apetools.parameters.iperf_client_parameters.VALID_TIME_INTEGER',
               'apetools.parameters.iperf_client_parameters.VALID_TIME_FLOAT',
               'apetools.parameters.iperf_client_parameters.VALID_BANDWIDTHS',
               'apetools.parameters.iperf_client_parameters.SPACE',
               'apetools.parameters.iperf_client_parameters.client_parameters',
               'apetools.parameters.iperf_common_parameters.ConfigurationError',
               'apetools.parameters.iperf_common_parameters.SPACE',
               'apetools.parameters.iperf_common_parameters.UNDERSCORE',
               'apetools.parameters.iperf_common_parameters.VALID_BUFFER_LENGTHS',
               'apetools.parameters.iperf_common_parameters.VALID_FORMATS',
               'apetools.parameters.iperf_common_parameters.MAXIMUM_PORT',
               'apetools.parameters.iperf_common_parameters.MINIMUM_PORT',
               'apetools.parameters.iperf_common_parameters.LOWEST_PORT',
               'apetools.parameters.iperf_common_parameters.VALID_OUTPUT',
               'apetools.parameters.iperf_common_parameters.VALID_EXCLUDES',
               'apetools.parameters.iperf_common_parameters.VALID_REPORT_STYLES',
               'apetools.parameters.iperf_server_parameters.ConfigurationError',
               'apetools.parameters.iperf_server_parameters.server_parameters',
               'apetools.parameters.iperf_common_tcp_parameters.ConfigurationError',
               'apetools.commands.iperfcommand.ConfigurationError',
               'apetools.commands.iperfcommand.CommandError',
               'apetools.commands.iperfcommand.EOF',
               'apetools.commands.iperfcommand.NEWLINE',
               'apetools.commands.ipconfig.NEWLINE',
               'apetools.commands.wificommand.MAC_UNAVAILABLE',
               'apetools.commands.wificommand.CommandError',
               'apetools.commands.wificommand.connection',
               'apetools.commands.wificommand.iw',
               'apetools.commands.ping.ConfigurationError',
               'apetools.commands.ping.UNKNOWN_HOST',
               'apetools.commands.ping.NEWLINE',
               'apetools.commands.ping.ping',
               'apetools.commands.ping.ping',
               'apetools.commands.dumpsyswifi.d',
               'apetools.commands.winrssi.NA',
               'apetools.commands.netcfg.connection',
               'apetools.commands.netcfg.netcfg',
               'apetools.commands.basewificommand.MAC_UNAVAILABLE',
               'apetools.commands.basewificommand.CommandError',
               'apetools.commands.basewificommand.connection',
               'apetools.commands.basewificommand.iw',
               'apetools.commands.iwcommand.MAC_UNAVAILABLE',
               'apetools.commands.iwcommand.CommandError',
               'apetools.commands.iwcommand.connection',
               'apetools.commands.iwcommand.iw',
               'apetools.commands.netsh.COLON',
               'apetools.commands.ifconfig.MAC_UNAVAILABLE',
               'apetools.commands.rotate.c',
               'apetools.commands.rotate.r',
               'apetools.commands.wmic.NEWLINE',
               'apetools.commands.changeprompt.EMPTY_STRING',
               'apetools.commands.windowsssidconnect.NEWLINE',
               'apetools.commands.wlcommand.MAC_UNAVAILABLE',
               'apetools.commands.wlcommand.CommandError',
               'apetools.commands.wlcommand.connection',
               'apetools.commands.wlcommand.iw',
               'apetools.commands.wpacli.CommandError',
               'apetools.commands.wpacli.connection',
               'apetools.commands.wpacli.command',
               'apetools.affectors.apconnect.APParameters',
               'apetools.affectors.elexol.networkedpowersupply.MAX_PINS',
               'apetools.affectors.elexol.networkedpowersupply.PINS_PER_PORT',
               'apetools.affectors.elexol.networkedpowersupply.TOGGLE_DELAY',
               'apetools.affectors.elexol.networkedpowersupply.MAX_ON',
               'apetools.affectors.elexol.networkedpowersupply.FIRST_PIN',
               'apetools.affectors.elexol.networkedpowersupply.ON',
               'apetools.affectors.elexol.networkedpowersupply.OFF',
               'apetools.affectors.elexol.errors.ConfigurationError',
               'apetools.affectors.elexol.errors.MAX_PINS',
               'apetools.affectors.elexol.elexoltest.el',
               'apetools.affectors.elexol.elexoltest.i',
               'apetools.affectors.elexol.naxxx.AffectorError',
               'apetools.affectors.elexol.naxxx.ConfigurationError',
               'apetools.affectors.elexol.main.IPERF_TIMESTAMP',
               'apetools.affectors.elexol.main.logger',
               'apetools.affectors.elexol.main.SCREEN_FORMAT',
               'apetools.affectors.elexol.main.SCREEN_FORMAT_QUIET',
               'apetools.affectors.elexol.main.LOG_FORMAT',
               'apetools.affectors.elexol.main.GIGABYTE',
               'apetools.affectors.elexol.main.BACKUP_LOGS',
               'apetools.affectors.synaxxx.synaxxx.NEWLINE',
               'apetools.affectors.synaxxx.synaxxx.INVALID',
               'apetools.affectors.synaxxx.synaxxx.EOF',
               'apetools.affectors.synaxxx.synaxxx.SWITCH_ON',
               'apetools.affectors.synaxxx.synaxxx.ALL_OFF',
               'apetools.affectors.synaxxx.synaxxx.ALL_ON',
               'apetools.affectors.synaxxx.synaxxx.SHOW_STATUSES',
               'apetools.affectors.synaxxx.synaxxx.ON',
               'apetools.affectors.synaxxx.synaxxx.OFF',
               'apetools.affectors.synaxxx.synaxxx.ONE_OR_MORE',
               'apetools.affectors.synaxxx.synaxxx.DIGIT',
               'apetools.affectors.synaxxx.synaxxx.INTEGER',
               'apetools.affectors.synaxxx.synaxxx.STATE',
               'apetools.affectors.synaxxx.synaxxx.SWITCH',
               'apetools.affectors.synaxxx.synaxxx.ANYTHING',
               'apetools.affectors.synaxxx.synaxxx.EVERYTHING',
               'apetools.affectors.synaxxx.synaxxx.state_expression'],
 'FUNCTIONS': [('distribute_setup._python_cmd', ['*args'], ''),
               ('distribute_setup._python_cmd', ['*args'], ''),
               ('distribute_setup._install', ['tarball', 'install_args=()'], ''),
               ('distribute_setup._build_egg', ['egg', 'tarball', 'to_dir'], ''),
               ('distribute_setup._do_download',
                ['version', 'download_base', 'to_dir', 'download_delay'],
                ''),
               ('distribute_setup.use_setuptools',
                ['version=DEFAULT_VERSION',
                 'download_base=DEFAULT_URL',
                 'to_dir=os.curdir',
                 'download_delay=15',
                 'no_fake=True'],
                ''),
               ('distribute_setup.download_setuptools',
                ['version=DEFAULT_VERSION',
                 'download_base=DEFAULT_URL',
                 'to_dir=os.curdir',
                 'delay=15'],
                "Download distribute from a specified location and return its filename\n\n    `version` should be a valid distribute version number that is available\n    as an egg for download under the `download_base` URL (which should end\n    with a '/'). `to_dir` is the directory where the egg will be downloaded.\n    `delay` is the number of seconds to pause before an actual download\n    attempt.\n    "),
               ('distribute_setup._no_sandbox', ['function'], ''),
               ('distribute_setup._patch_file',
                ['path', 'content'],
                'Will backup the file then patch it'),
               ('distribute_setup._same_content', ['path', 'content'], ''),
               ('distribute_setup._rename_path', ['path'], ''),
               ('distribute_setup._remove_flat_installation', ['placeholder'], ''),
               ('distribute_setup._after_install', ['dist'], ''),
               ('distribute_setup._create_fake_setuptools_pkg_info', ['placeholder'], ''),
               ('distribute_setup._patch_egg_dir', ['path'], ''),
               ('distribute_setup._before_install', [], ''),
               ('distribute_setup._under_prefix', ['location'], ''),
               ('distribute_setup._fake_setuptools', [], ''),
               ('distribute_setup._relaunch', [], ''),
               ('distribute_setup._extractall',
                ['self', "path='.'", 'members=None'],
                "Extract all members from the archive to the current working\n       directory and set owner, modification time and permissions on\n       directories afterwards. `path' specifies a different directory\n       to extract to. `members' is optional and must be a subset of the\n       list returned by getmembers().\n    "),
               ('distribute_setup._build_install_args', ['argv'], ''),
               ('distribute_setup.main',
                ['argv', 'version=DEFAULT_VERSION'],
                'Install or upgrade setuptools and EasyInstall'),
               ('apetools.log_setter.set_logger',
                ['args'],
                '\n    Creates a logger and sets the level based on args.\n\n    :param:\n\n     - `args`: args with debug and silent attributes\n    '),
               ('apetools.main.main',
                [],
                '\n    The main entrance point. Relies on functions being defined in argparser.\n\n    1. parse the args\n    2. set the logger\n    3. enable debugging\n    4. start the watcher\n    5. execute the strategy\n    '),
               ('apetools.connections.producer.start_ping', [], ''),
               ('apetools.parsers.oatbran.GROUP', ['e'], ''),
               ('apetools.parsers.oatbran.NAMED', ['n', 'e'], ''),
               ('apetools.parsers.oatbran.CLASS', ['e'], ''),
               ('apetools.parsers.oatbran.NOT', ['e'], ''),
               ('apetools.parsers.oatbran.NOT_FOLLOWED_BY', ['e'], ''),
               ('apetools.parsers.oatbran.NOT_PRECEDED_BY', ['e'], ''),
               ('apetools.parsers.oatbran.M_TO_N',
                ['m', 'n', 'e'],
                '\n    :param:\n\n     - `m`: the minimum required number of matches\n     - `n`: the maximum number of  matches\n     - `e`: the expression t match\n    '),
               ('apetools.parsers.oatbran.M_TO_N_ONLY',
                ['m', 'n', 'e'],
                '\n    :param:\n\n     - `m`: the minimum required number of matches\n     - `n`: the maximum number of  matches\n     - `e`: the expression t match\n    '),
               ('apetools.parsers.oatbran.WORD_BOUNDARY', ['e'], ''),
               ('apetools.parsers.oatbran.STRING_BOUNDARY',
                ['e'],
                '\n    :return: expr that matches an entire line\n    '),
               ('apetools.parsers.coroutine.coroutine',
                ['func'],
                '\n    A decorator to start coroutines\n\n    :param:\n    \n     - `func`: A coroutine function.\n    '),
               ('apetools.parsers.coroutine.broadcast',
                ['targets'],
                '\n    :param:\n\n     - `targets`: A list of coroutines to send output to.\n    '),
               ('apetools.parsers.coroutine.comma_join',
                ['target', 'input_count'],
                "\n    This outputs the data in the opposite order that it's received.\n    This way the source of the data pipeline is output first.\n    \n    :param:\n\n     - `target`: A coroutine to send output to.\n     - `input_count`: number of inputs before creating line to send.\n    "),
               ('apetools.parsers.coroutine.output',
                ['target_file'],
                '\n    :param:\n\n     - `target_file`: A file-like object to write output to.\n    '),
               ('apetools.parsers.coroutine.comma_append', ['source', 'target'], ''),
               ('apetools.parsers.coroutine.file_output', ['file_object'], ''),
               ('apetools.threads.lock.lock',
                ['semaphore'],
                '\n    Provides an alternative locking mechanism for the `with`\n    '),
               ('apetools.proletarians.enabledebugging.enable_debugging',
                ['args'],
                "\n    if debug is True, enables interactive debugging.\n\n    Tries pudb, if it isn't installed, runs pdb instead.\n\n    :param:\n\n     - `debug`: Boolean to enable debugging.\n    "),
               ('apetools.commons.generators.find',
                ['glob', 'start=None'],
                '\n    Matches all below cwd or start-directory\n    \n    :param:\n\n     - `glob`: A file-glob to match interesting files \n     - `start`: The top path (finds files below the top)\n\n    :yield: Matching file name\n    '),
               ('apetools.commons.generators.shallow_find',
                ['glob', 'start=None'],
                '\n    Matches only in one directory\n    \n    :param:\n\n     - `glob`: A file-glob to match interesting files in this directory\n    '),
               ('apetools.commons.generators.concatenate',
                ['glob', 'start=None'],
                '\n    :param:\n\n     - `glob`: A file-glob to match interesting files.\n     - `start`: The top path (finds files below the top)\n\n    :yield: lines in matching files.\n    '),
               ('apetools.commons.coroutine.coroutine',
                ['func'],
                '\n    A decorator to start coroutines\n\n    :param:\n    \n     - `func`: A coroutine function.\n    '),
               ('apetools.commons.coroutine.broadcast',
                ['targets'],
                '\n    :param:\n\n     - `targets`: A list of coroutines to send output to.\n    '),
               ('apetools.commons.coroutine.comma_join',
                ['target', 'input_count'],
                "\n    This outputs the data in the opposite order that it's received.\n    This way the source of the data pipeline is output first.\n    \n    :param:\n\n     - `target`: A coroutine to send output to.\n     - `input_count`: number of inputs before creating line to send.\n    "),
               ('apetools.commons.coroutine.output',
                ['target_file'],
                '\n    :param:\n\n     - `target_file`: A file-like object to write output to.\n    '),
               ('apetools.commons.coroutine.comma_append', ['source', 'target'], ''),
               ('apetools.commons.coroutine.file_output', ['file_object'], ''),
               ('apetools.commons.assertions.assert_equal',
                ['expected', 'actual'],
                '\n    :param:\n\n     - `expected`: The expected Value\n     - `actual`: The actual value\n    '),
               ('apetools.commons.assertions.assert_is',
                ['expected', 'actual'],
                '\n    :param:\n\n     - `expected`: The expected Value\n     - `actual`: The actual value\n    '),
               ('apetools.affectors.elexol.main.set_logger',
                ['args'],
                '\n    Creates a logger and sets the level based on args.\n\n    :param:\n\n     - `args`: args with debug and silent attributes\n    '),
               ('apetools.affectors.elexol.main.enable_debugging', ['args'], ''),
               ('apetools.affectors.elexol.main.parse_args', [], ''),
               ('apetools.affectors.elexol.main.handle_crash',
                ['error'],
                '\n    Generates a crash report.\n    '),
               ('apetools.affectors.elexol.main.run',
                ['args'],
                '\n    Runs the naxxx\n\n    :param:\n\n     - `args`: namespace with id_list attribute\n    '),
               ('apetools.affectors.elexol.main.main', [], ''),
               ('apetools.affectors.rotator.main.enable_debugger',
                ['args'],
                '\n    :param:\n\n     - `args`: an argument namespace\n    '),
               ('apetools.affectors.rotator.main.parse_args',
                [],
                '\n    An argument parser for the rate-table command\n    '),
               ('apetools.affectors.rotator.main.main', [], ''),
               ('apetools.affectors.synaxxx.handlers.run', ['args'], ''),
               ('apetools.affectors.synaxxx.main.parse_args', [], ''),
               ('apetools.affectors.synaxxx.main.enable_debugging', ['args'], ''),
               ('apetools.affectors.synaxxx.main.main', [], '')],
 'HIERARCHY': ['distribute_setup',
               'setup',
               'apetools',
               'apetools.baseclass',
               'apetools.log_setter',
               'apetools.main',
               'apetools.connections.serialadapter',
               'apetools.connections.testnp5',
               'apetools.connections.sshconnection',
               'apetools.connections',
               'apetools.connections.localconnection',
               'apetools.connections.telnetconnection',
               'apetools.connections.nonlocalconnection',
               'apetools.connections.puppetconnection',
               'apetools.connections.producer',
               'apetools.connections.lineproducer',
               'apetools.connections.serialconnection',
               'apetools.connections.sshadapter',
               'apetools.connections.sl4aconnection',
               'apetools.connections.android',
               'apetools.connections.telnetadapter',
               'apetools.connections.adbconnection',
               'apetools.connections.sharedcounter',
               'apetools.builders',
               'apetools.builders.builder',
               'apetools.builders.subbuilders.nodebuilder',
               'apetools.builders.subbuilders.teardownbuilder',
               'apetools.builders.subbuilders',
               'apetools.builders.subbuilders.operationteardownbuilder',
               'apetools.builders.subbuilders.iperfcommandbuilder',
               'apetools.builders.subbuilders.poweronbuilder',
               'apetools.builders.subbuilders.iperfparameterbuilders',
               'apetools.builders.subbuilders.watcherbuilder',
               'apetools.builders.subbuilders.affectorbuilder',
               'apetools.builders.subbuilders.iperftestbuilder',
               'apetools.builders.subbuilders.storagepipebuilder',
               'apetools.builders.subbuilders.enums',
               'apetools.builders.subbuilders.builderenums',
               'apetools.builders.subbuilders.teardowntestbuilder',
               'apetools.builders.subbuilders.poweroffbuilder',
               'apetools.builders.subbuilders.basetoolbuilder',
               'apetools.builders.subbuilders.toolbuilder',
               'apetools.builders.subbuilders.reportbuilder',
               'apetools.builders.subbuilders.devicebuilder',
               'apetools.builders.subbuilders.dumpdevicestatebuilder',
               'apetools.builders.subbuilders.operationsetupbuilder',
               'apetools.builders.subbuilders.oscillatebuilder',
               'apetools.builders.subbuilders.nodesbuilder',
               'apetools.builders.subbuilders.teardowniterationbuilder',
               'apetools.builders.subbuilders.iperfsessionbuilder',
               'apetools.builders.subbuilders.rotatebuilder',
               'apetools.builders.subbuilders.executetestbuilder',
               'apetools.builders.subbuilders.timetorecoverybuilder',
               'apetools.builders.subbuilders.logwatcherbuilders',
               'apetools.builders.subbuilders.nersbuilder',
               'apetools.builders.subbuilders.connectionbuilder',
               'apetools.builders.subbuilders.apconnectbuilder',
               'apetools.builders.subbuilders.commandwatchbuilder',
               'apetools.builders.subbuilders.pollerbuilders',
               'apetools.builders.subbuilders.setuptestbuilder',
               'apetools.builders.subbuilders.tpcdevicebuilder',
               'apetools.builders.subbuilders.basedevicebuilder',
               'apetools.builders.subbuilders.setupiterationbuilder',
               'apetools.builders.subbuilders.baseoperationbuilder',
               'apetools.parsers.unitconverter',
               'apetools.parsers',
               'apetools.parsers.oatbran',
               'apetools.parsers.iperfexpressions',
               'apetools.parsers.sumparser',
               'apetools.parsers.iperfparser',
               'apetools.parsers.coroutine',
               'apetools.pipes',
               'apetools.pipes.commandpipe',
               'apetools.pipes.storagepipe',
               'apetools.pipes.pipeenums',
               'apetools.watchers.procpollster',
               'apetools.watchers.logwatcher',
               'apetools.watchers.devicepoller',
               'apetools.watchers.logcatwatcher',
               'apetools.watchers',
               'apetools.watchers.basedevicepoller',
               'apetools.watchers.fileexpressionwatcher',
               'apetools.watchers.rssipoller',
               'apetools.watchers.commandwatcher',
               'apetools.watchers.thewatcher',
               'apetools.watchers.tsharkwatcher',
               'apetools.watchers.ttest',
               'apetools.informants',
               'apetools.informants.helper',
               'apetools.informants.constants',
               'apetools.informants.helpfiles',
               'apetools.informants.helpfiles.run',
               'apetools.informants.helpfiles.config',
               'apetools.informants.helpfiles.fetch',
               'apetools.informants.helpfiles.helpmain',
               'apetools.informants.helpfiles.test',
               'apetools.lexicographers',
               'apetools.lexicographers.config_options',
               'apetools.lexicographers.constants',
               'apetools.lexicographers.configurationmap',
               'apetools.lexicographers.parametergenerator',
               'apetools.lexicographers.lexicographer',
               'apetools.lexicographers.timeconverter',
               'apetools.lexicographers.parametertree',
               'apetools.lexicographers.configfetcher',
               'apetools.lexicographers.sublexicographers',
               'apetools.lexicographers.sublexicographers.devicelexicographer',
               'apetools.lexicographers.sublexicographers.naxxxlexicographer',
               'apetools.lexicographers.sublexicographers.iperflexicographer',
               'apetools.lexicographers.configfiles',
               'apetools.threads.semaphore',
               'apetools.threads.barrier',
               'apetools.threads',
               'apetools.threads.threads',
               'apetools.threads.lock',
               'apetools.operations.executetest',
               'apetools.operations',
               'apetools.operations.baseoperation',
               'apetools.operations.setuptest',
               'apetools.operations.teardowntest',
               'apetools.operations.operationsetup',
               'apetools.operations.operationteardown',
               'apetools.tools.timetorecovery',
               'apetools.tools.setupiteration',
               'apetools.tools',
               'apetools.tools.movefiles',
               'apetools.tools.iperfsession',
               'apetools.tools.iperftest',
               'apetools.tools.dumpdevicestate',
               'apetools.tools.timetofailure',
               'apetools.tools.timetorecoverytest',
               'apetools.tools.getipaddress',
               'apetools.tools.copyfiles',
               'apetools.tools.testdumpsyswifi',
               'apetools.tools.wifitool',
               'apetools.tools.sleep',
               'apetools.tools.killall',
               'apetools.tools.teardowniteration',
               'apetools.tools.networktester',
               'apetools.proletarians.argumentparser',
               'apetools.proletarians.errors',
               'apetools.proletarians.countdowntimer',
               'apetools.proletarians',
               'apetools.proletarians.hortator',
               'apetools.proletarians.constants',
               'apetools.proletarians.liststrategy',
               'apetools.proletarians.testoperator',
               'apetools.proletarians.strategerizer',
               'apetools.proletarians.setuprun',
               'apetools.proletarians.data',
               'apetools.proletarians.crashhandler',
               'apetools.proletarians.enabledebugging',
               'apetools.proletarians.teardown',
               'apetools.commons.storageoutput',
               'apetools.commons.filterer',
               'apetools.commons.errors',
               'apetools.commons',
               'apetools.commons.expressions',
               'apetools.commons.dummy',
               'apetools.commons.broadcaster',
               'apetools.commons.generators',
               'apetools.commons.sublogger',
               'apetools.commons.timestamp',
               'apetools.commons.reporter',
               'apetools.commons.readoutput',
               'apetools.commons.enumerations',
               'apetools.commons.events',
               'apetools.commons.coroutine',
               'apetools.commons.centraltendency',
               'apetools.commons.storagebroadcaster',
               'apetools.commons.assertions',
               'apetools.commons.datacounter',
               'apetools.devices.sl4adevice',
               'apetools.devices',
               'apetools.devices.dummydevice',
               'apetools.devices.linuxdevice',
               'apetools.devices.adbdevice',
               'apetools.devices.basedevice',
               'apetools.devices.windowsdevice',
               'apetools.parameters',
               'apetools.parameters.iperf_client_parameters',
               'apetools.parameters.iperf_test_parameters',
               'apetools.parameters.iperf_udp_server_parameters',
               'apetools.parameters.iperf_common_parameters',
               'apetools.parameters.iperf_server_parameters',
               'apetools.parameters.iperf_common_tcp_parameters',
               'apetools.commands.iperfcommand',
               'apetools.commands.ipconfig',
               'apetools.commands.poweroff',
               'apetools.commands.wificommand',
               'apetools.commands',
               'apetools.commands.iwconfig',
               'apetools.commands.ping',
               'apetools.commands.dumpsyswifi',
               'apetools.commands.winrssi',
               'apetools.commands.netcfg',
               'apetools.commands.basewificommand',
               'apetools.commands.svc',
               'apetools.commands.basecommand',
               'apetools.commands.poweron',
               'apetools.commands.iwcommand',
               'apetools.commands.netsh',
               'apetools.commands.ifconfig',
               'apetools.commands.rotate',
               'apetools.commands.wmic',
               'apetools.commands.oscillate',
               'apetools.commands.changeprompt',
               'apetools.commands.iperfbroadcast',
               'apetools.commands.windowsssidconnect',
               'apetools.commands.wlcommand',
               'apetools.commands.wpacli',
               'apetools.affectors',
               'apetools.affectors.ners',
               'apetools.affectors.apconnect',
               'apetools.affectors.elexol.networkedpowersupply',
               'apetools.affectors.elexol.errors',
               'apetools.affectors.elexol',
               'apetools.affectors.elexol.elexoltest',
               'apetools.affectors.elexol.naxxx',
               'apetools.affectors.elexol.elexol',
               'apetools.affectors.elexol.main',
               'apetools.affectors.rotator',
               'apetools.affectors.rotator.rotator',
               'apetools.affectors.rotator.RateTable',
               'apetools.affectors.rotator.main',
               'apetools.affectors.synaxxx',
               'apetools.affectors.synaxxx.handlers',
               'apetools.affectors.synaxxx.synaxxx',
               'apetools.affectors.synaxxx.main'],
 'POINTERS': {'apetools.affectors.apconnect.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.affectors.apconnect.namedtuple': 'collections.namedtuple',
              'apetools.affectors.elexol.elexol.socket': 'socket',
              'apetools.affectors.elexol.elexoltest.elexol': 'apetools.affectors.elexol.elexol',
              'apetools.affectors.elexol.elexoltest.nps': 'nps',
              'apetools.affectors.elexol.elexoltest.time': 'time',
              'apetools.affectors.elexol.errors.errors': 'apetools.commons.errors',
              'apetools.affectors.elexol.main.NAXXXOn': 'apetools.affectors.elexol.naxxx.NAXXXOn',
              'apetools.affectors.elexol.main.argparse': 'argparse',
              'apetools.affectors.elexol.main.logging': 'logging',
              'apetools.affectors.elexol.main.logging.handlers': 'logging.handlers',
              'apetools.affectors.elexol.main.pdb': 'pudb',
              'apetools.affectors.elexol.main.traceback': 'traceback',
              'apetools.affectors.elexol.naxxx.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.affectors.elexol.naxxx.FaucetteError': 'apetools.affectors.elexol.errors.FaucetteError',
              'apetools.affectors.elexol.naxxx.IntType': 'types.IntType',
              'apetools.affectors.elexol.naxxx.ListType': 'types.ListType',
              'apetools.affectors.elexol.naxxx.NetworkedPowerSupply': 'apetools.affectors.elexol.networkedpowersupply.NetworkedPowerSupply',
              'apetools.affectors.elexol.naxxx.TupleType': 'types.TupleType',
              'apetools.affectors.elexol.naxxx.errors': 'apetools.commons.errors',
              'apetools.affectors.elexol.naxxx.timeout': 'socket.timeout',
              'apetools.affectors.elexol.networkedpowersupply.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.affectors.elexol.networkedpowersupply.FaucetteError': 'apetools.affectors.elexol.errors.FaucetteError',
              'apetools.affectors.elexol.networkedpowersupply.IntType': 'types.IntType',
              'apetools.affectors.elexol.networkedpowersupply.elexol24': 'apetools.affectors.elexol.elexol.elexol24',
              'apetools.affectors.elexol.networkedpowersupply.time': 'time',
              'apetools.affectors.ners.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.affectors.ners.StringType': 'types.StringType',
              'apetools.affectors.rotator.main.Rotator': 'apetools.affectors.rotator.rotator.Rotator',
              'apetools.affectors.rotator.main.argparse': 'argparse',
              'apetools.affectors.rotator.main.pdb': 'pdb',
              'apetools.affectors.rotator.main.pudb': 'pudb',
              'apetools.affectors.rotator.main.set_logger': 'log_setter.set_logger',
              'apetools.affectors.rotator.rotator.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.affectors.rotator.rotator.RateTable': 'apetools.affectors.rotator.RateTable.RateTable',
              'apetools.affectors.rotator.rotator.call': 'subprocess.call',
              'apetools.affectors.rotator.rotator.sys': 'sys',
              'apetools.affectors.synaxxx.handlers.Synaxxx': 'apetools.affectors.synaxxx.synaxxx.Synaxxx',
              'apetools.affectors.synaxxx.main.argparse': 'argparse',
              'apetools.affectors.synaxxx.main.pdb': 'pdb',
              'apetools.affectors.synaxxx.main.pudb': 'pudb',
              'apetools.affectors.synaxxx.main.run': 'apetools.affectors.synaxxx.handlers.run',
              'apetools.affectors.synaxxx.synaxxx.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.affectors.synaxxx.synaxxx.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.affectors.synaxxx.synaxxx.Sleep': 'apetools.tools.sleep.Sleep',
              'apetools.affectors.synaxxx.synaxxx.re': 're',
              'apetools.affectors.synaxxx.synaxxx.socket': 'socket',
              'apetools.affectors.synaxxx.synaxxx.telnetlib': 'telnetlib',
              'apetools.baseclass.logging': 'logging',
              'apetools.builders.builder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.builder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.builder.ExecuteTestBuilder': 'apetools.builders.subbuilders.executetestbuilder.ExecuteTestBuilder',
              'apetools.builders.builder.NodesBuilder': 'apetools.builders.subbuilders.nodesbuilder.NodesBuilder',
              'apetools.builders.builder.OperationSetupBuilder': 'apetools.builders.subbuilders.operationsetupbuilder.OperationSetupBuilder',
              'apetools.builders.builder.OperationTeardownBuilder': 'apetools.builders.subbuilders.operationteardownbuilder.OperationTeardownBuilder',
              'apetools.builders.builder.ParameterGenerator': 'apetools.lexicographers.parametergenerator.ParameterGenerator',
              'apetools.builders.builder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.builder.Semaphore': 'apetools.threads.semaphore.Semaphore',
              'apetools.builders.builder.SetupTestBuilder': 'apetools.builders.subbuilders.setuptestbuilder.SetupTestBuilder',
              'apetools.builders.builder.TeardownTestBuilder': 'apetools.builders.subbuilders.teardowntestbuilder.TeardownTestBuilder',
              'apetools.builders.builder.TestOperator': 'apetools.proletarians.testoperator.TestOperator',
              'apetools.builders.builder.TpcDeviceBuilder': 'apetools.builders.subbuilders.tpcdevicebuilder.TpcDeviceBuilder',
              'apetools.builders.builder.dummy': 'apetools.commons.dummy',
              'apetools.builders.builder.enumerations': 'apetools.commons.enumerations',
              'apetools.builders.builder.events': 'apetools.commons.events',
              'apetools.builders.builder.hortator': 'apetools.proletarians.hortator',
              'apetools.builders.builder.storageoutput': 'apetools.commons.storageoutput',
              'apetools.builders.subbuilders.affectorbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.affectorbuilder.naxxx': 'apetools.affectors.elexol.naxxx',
              'apetools.builders.subbuilders.apconnectbuilder.APConnect': 'apetools.affectors.apconnect.APConnect',
              'apetools.builders.subbuilders.apconnectbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.apconnectbuilder.BuilderParameterEnums': 'apetools.builders.subbuilders.builderenums.BuilderParameterEnums',
              'apetools.builders.subbuilders.apconnectbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.apconnectbuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.basedevicebuilder.ABCMeta': 'abc.ABCMeta',
              'apetools.builders.subbuilders.basedevicebuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.basedevicebuilder.abstractproperty': 'abc.abstractproperty',
              'apetools.builders.subbuilders.baseoperationbuilder.ABCMeta': 'abc.ABCMeta',
              'apetools.builders.subbuilders.baseoperationbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.baseoperationbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.baseoperationbuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.baseoperationbuilder.DummyOperation': 'apetools.operations.baseoperation.DummyOperation',
              'apetools.builders.subbuilders.baseoperationbuilder.ToolBuilder': 'apetools.builders.subbuilders.toolbuilder.ToolBuilder',
              'apetools.builders.subbuilders.baseoperationbuilder.abstractproperty': 'abc.abstractproperty',
              'apetools.builders.subbuilders.basetoolbuilder.ABCMeta': 'abc.ABCMeta',
              'apetools.builders.subbuilders.basetoolbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.basetoolbuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.basetoolbuilder.abstractproperty': 'abc.abstractproperty',
              'apetools.builders.subbuilders.basetoolbuilder.namedtuple': 'collections.namedtuple',
              'apetools.builders.subbuilders.commandwatchbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.commandwatchbuilder.BuilderParameterEnums': 'apetools.builders.subbuilders.builderenums.BuilderParameterEnums',
              'apetools.builders.subbuilders.commandwatchbuilder.CommandWatcher': 'apetools.watchers.commandwatcher.CommandWatcher',
              'apetools.builders.subbuilders.commandwatchbuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.connectionbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.connectionbuilder.adbconnection': 'apetools.connections.adbconnection',
              'apetools.builders.subbuilders.connectionbuilder.errors': 'apetools.commons.errors',
              'apetools.builders.subbuilders.connectionbuilder.namedtuple': 'collections.namedtuple',
              'apetools.builders.subbuilders.connectionbuilder.sshconnection': 'apetools.connections.sshconnection',
              'apetools.builders.subbuilders.devicebuilder.BaseDeviceBuilder': 'apetools.builders.subbuilders.basedevicebuilder.BaseDeviceBuilder',
              'apetools.builders.subbuilders.devicebuilder.adbdevice': 'apetools.devices.adbdevice',
              'apetools.builders.subbuilders.devicebuilder.linuxdevice': 'apetools.devices.linuxdevice',
              'apetools.builders.subbuilders.devicebuilder.windowsdevice': 'apetools.devices.windowsdevice',
              'apetools.builders.subbuilders.dumpdevicestatebuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.dumpdevicestatebuilder.DumpDeviceState': 'apetools.tools.dumpdevicestate.DumpDeviceState',
              'apetools.builders.subbuilders.dumpdevicestatebuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.dumpdevicestatebuilder.namedtuple': 'collections.namedtuple',
              'apetools.builders.subbuilders.executetestbuilder.BaseOperationBuilder': 'apetools.builders.subbuilders.baseoperationbuilder.BaseOperationBuilder',
              'apetools.builders.subbuilders.executetestbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.executetestbuilder.ExecuteTest': 'apetools.operations.executetest.ExecuteTest',
              'apetools.builders.subbuilders.iperfcommandbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.iperfcommandbuilder.IperfCommand': 'apetools.commands.iperfcommand.IperfCommand',
              'apetools.builders.subbuilders.iperfcommandbuilder.IperfCommandEnum': 'apetools.commands.iperfcommand.IperfCommandEnum',
              'apetools.builders.subbuilders.iperfcommandbuilder.IperfParametersBuilder': 'apetools.builders.subbuilders.iperfparameterbuilders.IperfParametersBuilder',
              'apetools.builders.subbuilders.iperfcommandbuilder.StoragePipeBuilder': 'apetools.builders.subbuilders.storagepipebuilder.StoragePipeBuilder',
              'apetools.builders.subbuilders.iperfcommandbuilder.StoragePipeEnum': 'apetools.pipes.storagepipe.StoragePipeEnum',
              'apetools.builders.subbuilders.iperfparameterbuilders.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.iperfparameterbuilders.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.iperfparameterbuilders.IperfParametersEnum': 'apetools.parameters.iperf_common_parameters.IperfParametersEnum',
              'apetools.builders.subbuilders.iperfparameterbuilders.client_parameters': 'apetools.parameters.iperf_client_parameters.client_parameters',
              'apetools.builders.subbuilders.iperfparameterbuilders.server_parameters': 'apetools.parameters.iperf_server_parameters.server_parameters',
              'apetools.builders.subbuilders.iperfsessionbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.iperfsessionbuilder.BuilderParameterEnums': 'apetools.builders.subbuilders.builderenums.BuilderParameterEnums',
              'apetools.builders.subbuilders.iperfsessionbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.iperfsessionbuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.iperfsessionbuilder.IperfSession': 'apetools.tools.iperfsession.IperfSession',
              'apetools.builders.subbuilders.iperfsessionbuilder.IperfTestBuilder': 'apetools.builders.subbuilders.iperftestbuilder.IperfTestBuilder',
              'apetools.builders.subbuilders.iperfsessionbuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.iperftestbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.iperftestbuilder.IperfCommandBuilder': 'apetools.builders.subbuilders.iperfcommandbuilder.IperfCommandBuilder',
              'apetools.builders.subbuilders.iperftestbuilder.enumerations': 'apetools.commons.enumerations',
              'apetools.builders.subbuilders.iperftestbuilder.errors': 'apetools.commons.errors',
              'apetools.builders.subbuilders.iperftestbuilder.iperftest': 'apetools.tools.iperftest',
              'apetools.builders.subbuilders.logwatcherbuilders.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.logwatcherbuilders.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.logwatcherbuilders.LogWatcher': 'apetools.watchers.logwatcher.LogWatcher',
              'apetools.builders.subbuilders.logwatcherbuilders.LogcatWatcher': 'apetools.watchers.logcatwatcher.LogcatWatcher',
              'apetools.builders.subbuilders.nersbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.nersbuilder.BuilderParameterEnums': 'apetools.builders.subbuilders.builderenums.BuilderParameterEnums',
              'apetools.builders.subbuilders.nersbuilder.NeRS': 'apetools.affectors.ners.NeRS',
              'apetools.builders.subbuilders.nersbuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.nodebuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.nodebuilder.BaseDeviceEnum': 'apetools.devices.basedevice.BaseDeviceEnum',
              'apetools.builders.subbuilders.nodebuilder.connection_builders': 'apetools.builders.subbuilders.connectionbuilder.connection_builders',
              'apetools.builders.subbuilders.nodebuilder.device_builders': 'apetools.builders.subbuilders.devicebuilder.device_builders',
              'apetools.builders.subbuilders.nodesbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.nodesbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.nodesbuilder.DummyDevice': 'apetools.devices.dummydevice.DummyDevice',
              'apetools.builders.subbuilders.nodesbuilder.NodeBuilder': 'apetools.builders.subbuilders.nodebuilder.NodeBuilder',
              'apetools.builders.subbuilders.nodesbuilder.lower': 'string.lower',
              'apetools.builders.subbuilders.operationsetupbuilder.BaseOperationBuilder': 'apetools.builders.subbuilders.baseoperationbuilder.BaseOperationBuilder',
              'apetools.builders.subbuilders.operationsetupbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.operationsetupbuilder.OperationSetup': 'apetools.operations.operationsetup.OperationSetup',
              'apetools.builders.subbuilders.operationteardownbuilder.BaseOperationBuilder': 'apetools.builders.subbuilders.baseoperationbuilder.BaseOperationBuilder',
              'apetools.builders.subbuilders.operationteardownbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.operationteardownbuilder.OperationTeardown': 'apetools.operations.operationteardown.OperationTeardown',
              'apetools.builders.subbuilders.oscillatebuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.oscillatebuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.oscillatebuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.oscillatebuilder.Oscillate': 'apetools.commands.oscillate.Oscillate',
              'apetools.builders.subbuilders.oscillatebuilder.OscillateStop': 'apetools.commands.oscillate.OscillateStop',
              'apetools.builders.subbuilders.oscillatebuilder.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.builders.subbuilders.pollerbuilders.APPEND': 'apetools.commons.storageoutput.APPEND',
              'apetools.builders.subbuilders.pollerbuilders.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.pollerbuilders.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.pollerbuilders.DevicePoller': 'apetools.watchers.devicepoller.DevicePoller',
              'apetools.builders.subbuilders.pollerbuilders.ProcnetdevPollster': 'apetools.watchers.procpollster.ProcnetdevPollster',
              'apetools.builders.subbuilders.pollerbuilders.RssiPoller': 'apetools.watchers.rssipoller.RssiPoller',
              'apetools.builders.subbuilders.poweroffbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.poweroffbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.poweroffbuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.poweroffbuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.poweroffbuilder.PowerOff': 'apetools.commands.poweroff.PowerOff',
              'apetools.builders.subbuilders.poweroffbuilder.Synaxxx': 'apetools.affectors.synaxxx.synaxxx.Synaxxx',
              'apetools.builders.subbuilders.poweroffbuilder.lower': 'string.lower',
              'apetools.builders.subbuilders.poweroffbuilder.namedtuple': 'collections.namedtuple',
              'apetools.builders.subbuilders.poweronbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.poweronbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.poweronbuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.poweronbuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.poweronbuilder.PowerOn': 'apetools.commands.poweron.PowerOn',
              'apetools.builders.subbuilders.poweronbuilder.Synaxxx': 'apetools.affectors.synaxxx.synaxxx.Synaxxx',
              'apetools.builders.subbuilders.poweronbuilder.lower': 'string.lower',
              'apetools.builders.subbuilders.poweronbuilder.namedtuple': 'collections.namedtuple',
              'apetools.builders.subbuilders.reportbuilder.Reporter': 'apetools.commons.reporter.Reporter',
              'apetools.builders.subbuilders.rotatebuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.rotatebuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.rotatebuilder.ConnectionBuilderTypes': 'apetools.builders.subbuilders.connectionbuilder.ConnectionBuilderTypes',
              'apetools.builders.subbuilders.rotatebuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.rotatebuilder.RotateCommand': 'apetools.commands.rotate.RotateCommand',
              'apetools.builders.subbuilders.rotatebuilder.SSHParameters': 'apetools.builders.subbuilders.connectionbuilder.SSHParameters',
              'apetools.builders.subbuilders.rotatebuilder.connection_builders': 'apetools.builders.subbuilders.connectionbuilder.connection_builders',
              'apetools.builders.subbuilders.rotatebuilder.namedtuple': 'collections.namedtuple',
              'apetools.builders.subbuilders.setupiterationbuilder.setupiteration': 'apetools.tools.setupiteration',
              'apetools.builders.subbuilders.setuptestbuilder.BaseOperationBuilder': 'apetools.builders.subbuilders.baseoperationbuilder.BaseOperationBuilder',
              'apetools.builders.subbuilders.setuptestbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.setuptestbuilder.SetupTest': 'apetools.operations.setuptest.SetupTest',
              'apetools.builders.subbuilders.storagepipebuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.storagepipebuilder.StoragePipe': 'apetools.pipes.storagepipe.StoragePipe',
              'apetools.builders.subbuilders.storagepipebuilder.StoragePipeEnum': 'apetools.pipes.storagepipe.StoragePipeEnum',
              'apetools.builders.subbuilders.teardownbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.teardownbuilder.LOGNAME': 'apetools.log_setter.LOGNAME',
              'apetools.builders.subbuilders.teardownbuilder.copyfiles': 'apetools.tools.copyfiles',
              'apetools.builders.subbuilders.teardownbuilder.teardown': 'apetools.proletarians.teardown',
              'apetools.builders.subbuilders.teardowniterationbuilder.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.builders.subbuilders.teardowniterationbuilder.teardowniteration': 'apetools.tools.teardowniteration',
              'apetools.builders.subbuilders.teardowntestbuilder.BaseOperationBuilder': 'apetools.builders.subbuilders.baseoperationbuilder.BaseOperationBuilder',
              'apetools.builders.subbuilders.teardowntestbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.teardowntestbuilder.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.builders.subbuilders.teardowntestbuilder.TeardownTest': 'apetools.operations.teardowntest.TeardownTest',
              'apetools.builders.subbuilders.timetorecoverybuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.timetorecoverybuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.timetorecoverybuilder.Parameters': 'apetools.builders.subbuilders.basetoolbuilder.Parameters',
              'apetools.builders.subbuilders.timetorecoverybuilder.TimeToRecovery': 'apetools.tools.timetorecovery.TimeToRecovery',
              'apetools.builders.subbuilders.toolbuilder.APConnectBuilder': 'apetools.builders.subbuilders.apconnectbuilder.APConnectBuilder',
              'apetools.builders.subbuilders.toolbuilder.CommandWatchBuilder': 'apetools.builders.subbuilders.commandwatchbuilder.CommandWatchBuilder',
              'apetools.builders.subbuilders.toolbuilder.DumpDeviceStateBuilder': 'apetools.builders.subbuilders.dumpdevicestatebuilder.DumpDeviceStateBuilder',
              'apetools.builders.subbuilders.toolbuilder.IperfSessionBuilder': 'apetools.builders.subbuilders.iperfsessionbuilder.IperfSessionBuilder',
              'apetools.builders.subbuilders.toolbuilder.NersBuilder': 'apetools.builders.subbuilders.nersbuilder.NersBuilder',
              'apetools.builders.subbuilders.toolbuilder.OscillateBuilder': 'apetools.builders.subbuilders.oscillatebuilder.OscillateBuilder',
              'apetools.builders.subbuilders.toolbuilder.OscillateStopBuilder': 'apetools.builders.subbuilders.oscillatebuilder.OscillateStopBuilder',
              'apetools.builders.subbuilders.toolbuilder.PowerOffBuilder': 'apetools.builders.subbuilders.poweroffbuilder.PowerOffBuilder',
              'apetools.builders.subbuilders.toolbuilder.PowerOnBuilder': 'apetools.builders.subbuilders.poweronbuilder.PowerOnBuilder',
              'apetools.builders.subbuilders.toolbuilder.RotateBuilder': 'apetools.builders.subbuilders.rotatebuilder.RotateBuilder',
              'apetools.builders.subbuilders.toolbuilder.TimeToRecoveryBuilder': 'apetools.builders.subbuilders.timetorecoverybuilder.TimeToRecoveryBuilder',
              'apetools.builders.subbuilders.toolbuilder.WatcherBuilder': 'apetools.builders.subbuilders.watcherbuilder.WatcherBuilder',
              'apetools.builders.subbuilders.tpcdevicebuilder.BaseDeviceEnum': 'apetools.devices.basedevice.BaseDeviceEnum',
              'apetools.builders.subbuilders.tpcdevicebuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.tpcdevicebuilder.NodeBuilder': 'apetools.builders.subbuilders.nodebuilder.NodeBuilder',
              'apetools.builders.subbuilders.tpcdevicebuilder.connection_builders': 'apetools.builders.subbuilders.connectionbuilder.connection_builders',
              'apetools.builders.subbuilders.watcherbuilder.BaseToolBuilder': 'apetools.builders.subbuilders.basetoolbuilder.BaseToolBuilder',
              'apetools.builders.subbuilders.watcherbuilder.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.builders.subbuilders.watcherbuilder.DevicePollerBuilder': 'apetools.builders.subbuilders.pollerbuilders.DevicePollerBuilder',
              'apetools.builders.subbuilders.watcherbuilder.LogWatcherBuilder': 'apetools.builders.subbuilders.logwatcherbuilders.LogWatcherBuilder',
              'apetools.builders.subbuilders.watcherbuilder.LogcatWatcherBuilder': 'apetools.builders.subbuilders.logwatcherbuilders.LogcatWatcherBuilder',
              'apetools.builders.subbuilders.watcherbuilder.ProcnetdevPollsterBuilder': 'apetools.builders.subbuilders.pollerbuilders.ProcnetdevPollsterBuilder',
              'apetools.builders.subbuilders.watcherbuilder.RssiPollerBuilder': 'apetools.builders.subbuilders.pollerbuilders.RssiPollerBuilder',
              'apetools.builders.subbuilders.watcherbuilder.thewatcher': 'apetools.watchers.thewatcher',
              'apetools.commands.basecommand.ABCMeta': 'abc.ABCMeta',
              'apetools.commands.basecommand.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.basecommand.Thread': 'threading.Thread',
              'apetools.commands.basecommand.abstractmethod': 'abc.abstractmethod',
              'apetools.commands.basewificommand.ABCMeta': 'abc.ABCMeta',
              'apetools.commands.basewificommand.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.basewificommand.abstractproperty': 'abc.abstractproperty',
              'apetools.commands.basewificommand.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.basewificommand.errors': 'apetools.commons.errors',
              'apetools.commands.changeprompt.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.changeprompt.ascii_letters': 'string.ascii_letters',
              'apetools.commands.changeprompt.digits': 'string.digits',
              'apetools.commands.changeprompt.random': 'random',
              'apetools.commands.changeprompt.repeat': 'itertools.repeat',
              'apetools.commands.dumpsyswifi.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.dumpsyswifi.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.dumpsyswifi.oatbran': 'apetools.parsers.oatbran',
              'apetools.commands.dumpsyswifi.re': 're',
              'apetools.commands.ifconfig.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.ifconfig.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.commands.ifconfig.enumerations': 'apetools.commons.enumerations',
              'apetools.commands.ifconfig.expressions': 'apetools.commons.expressions',
              'apetools.commands.ifconfig.re': 're',
              'apetools.commands.ifconfig.tee': 'itertools.tee',
              'apetools.commands.ipconfig.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.ipconfig.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.ipconfig.now': 'time.time',
              'apetools.commands.ipconfig.oatbran': 'apetools.parsers.oatbran',
              'apetools.commands.ipconfig.re': 're',
              'apetools.commands.iperfcommand.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.iperfcommand.BaseDeviceEnum': 'apetools.devices.basedevice.BaseDeviceEnum',
              'apetools.commands.iperfcommand.IperfParametersEnum': 'apetools.parameters.iperf_common_parameters.IperfParametersEnum',
              'apetools.commands.iperfcommand.StoragePipe': 'apetools.pipes.storagepipe.StoragePipe',
              'apetools.commands.iperfcommand.StoragePipeEnum': 'apetools.pipes.storagepipe.StoragePipeEnum',
              'apetools.commands.iperfcommand.SumParser': 'apetools.parsers.sumparser.SumParser',
              'apetools.commands.iperfcommand.errors': 'apetools.commons.errors',
              'apetools.commands.iperfcommand.readoutput': 'apetools.commons.readoutput',
              'apetools.commands.iperfcommand.threading': 'threading',
              'apetools.commands.iperfcommand.time': 'time',
              'apetools.commands.iwcommand.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.iwcommand.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.iwcommand.enumerations': 'apetools.commons.enumerations',
              'apetools.commands.iwcommand.errors': 'apetools.commons.errors',
              'apetools.commands.iwcommand.expressions': 'apetools.commons.expressions',
              'apetools.commands.iwcommand.re': 're',
              'apetools.commands.iwconfig.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.iwconfig.oatbran': 'apetools.parsers.oatbran',
              'apetools.commands.iwconfig.re': 're',
              'apetools.commands.netcfg.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.netcfg.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.netcfg.enumerations': 'apetools.commons.enumerations',
              'apetools.commands.netcfg.expressions': 'apetools.commons.expressions',
              'apetools.commands.netcfg.re': 're',
              'apetools.commands.netcfg.tee': 'itertools.tee',
              'apetools.commands.netsh.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.netsh.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.netsh.bran': 'apetools.parsers.oatbran',
              'apetools.commands.netsh.re': 're',
              'apetools.commands.oscillate.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.oscillate.BaseThreadedCommand': 'apetools.commands.basecommand.BaseThreadedCommand',
              'apetools.commands.oscillate.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.oscillate.ConnectionError': 'apetools.commons.errors.ConnectionError',
              'apetools.commands.oscillate.Event': 'threading.Event',
              'apetools.commands.oscillate.Queue': 'Queue.Queue',
              'apetools.commands.oscillate.Thread': 'threading.Thread',
              'apetools.commands.oscillate.TimestampFormat': 'apetools.commons.timestamp.TimestampFormat',
              'apetools.commands.oscillate.re': 're',
              'apetools.commands.oscillate.sleep': 'time.sleep',
              'apetools.commands.ping.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.ping.enumerations': 'apetools.commons.enumerations',
              'apetools.commands.ping.errors': 'apetools.commons.errors',
              'apetools.commands.ping.expressions': 'apetools.commons.expressions',
              'apetools.commands.ping.namedtuple': 'collections.namedtuple',
              'apetools.commands.ping.re': 're',
              'apetools.commands.poweroff.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.poweron.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.rotate.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.rotate.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.rotate.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.commands.rotate.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.commands.rotate.time': 'time',
              'apetools.commands.svc.ABCMeta': 'abc.ABCMeta',
              'apetools.commands.svc.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.svc.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.svc.abstractmethod': 'abc.abstractmethod',
              'apetools.commands.svc.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.wificommand.BaseWifiCommand': 'apetools.commands.basewificommand.BaseWifiCommand',
              'apetools.commands.wificommand.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.wificommand.errors': 'apetools.commons.errors',
              'apetools.commands.wificommand.re': 're',
              'apetools.commands.windowsssidconnect.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.windowsssidconnect.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.winrssi.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.winrssi.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.winrssi.oatbran': 'apetools.parsers.oatbran',
              'apetools.commands.winrssi.re': 're',
              'apetools.commands.wlcommand.BaseWifiCommand': 'apetools.commands.basewificommand.BaseWifiCommand',
              'apetools.commands.wlcommand.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.wlcommand.errors': 'apetools.commons.errors',
              'apetools.commands.wlcommand.re': 're',
              'apetools.commands.wmic.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.wmic.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.commands.wmic.oatbran': 'apetools.parsers.oatbran',
              'apetools.commands.wmic.re': 're',
              'apetools.commands.wpacli.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commands.wpacli.adbconnection': 'apetools.connections.adbconnection',
              'apetools.commands.wpacli.errors': 'apetools.commons.errors',
              'apetools.commands.wpacli.expressions': 'apetools.commons.expressions',
              'apetools.commands.wpacli.re': 're',
              'apetools.commons.broadcaster.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.centraltendency.modf': 'math.modf',
              'apetools.commons.centraltendency.random': 'random',
              'apetools.commons.centraltendency.repeat': 'itertools.repeat',
              'apetools.commons.coroutine.FileType': 'types.FileType',
              'apetools.commons.datacounter.namedtuple': 'collections.namedtuple',
              'apetools.commons.datacounter.time': 'time',
              'apetools.commons.dummy.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.events.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.events.time': 'time',
              'apetools.commons.expressions.string': 'string',
              'apetools.commons.filterer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.filterer.re': 're',
              'apetools.commons.generators.fnmatch': 'fnmatch',
              'apetools.commons.generators.os': 'os',
              'apetools.commons.readoutput.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.readoutput.Queue': 'Queue',
              'apetools.commons.readoutput.TimeoutError': 'apetools.commons.errors.TimeoutError',
              'apetools.commons.readoutput.socket': 'socket',
              'apetools.commons.reporter.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.storagebroadcaster.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.storagebroadcaster.os': 'os',
              'apetools.commons.storageoutput.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.storageoutput.StorageError': 'apetools.commons.errors.StorageError',
              'apetools.commons.storageoutput.copy': 'copy',
              'apetools.commons.storageoutput.os': 'os',
              'apetools.commons.storageoutput.shutil': 'shutil',
              'apetools.commons.storageoutput.time': 'time',
              'apetools.commons.sublogger.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.commons.sublogger.LOG_TIMESTAMP': 'apetools.log_setter.LOG_TIMESTAMP',
              'apetools.commons.sublogger.SCREEN_FORMAT': 'apetools.log_setter.SCREEN_FORMAT',
              'apetools.commons.sublogger.log_setter': 'apetools.log_setter',
              'apetools.commons.sublogger.logging': 'logging',
              'apetools.commons.timestamp.LOG_TIMESTAMP': 'apetools.log_setter.LOG_TIMESTAMP',
              'apetools.commons.timestamp.time': 'time',
              'apetools.connections.adbconnection.EOF': 'apetools.connections.localconnection.EOF',
              'apetools.connections.adbconnection.LocalNixConnection': 'apetools.connections.localconnection.LocalNixConnection',
              'apetools.connections.adbconnection.OutputError': 'apetools.connections.localconnection.OutputError',
              'apetools.connections.adbconnection.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.connections.adbconnection.StringIO': 'StringIO.StringIO',
              'apetools.connections.adbconnection.enumerations': 'apetools.commons.enumerations',
              'apetools.connections.adbconnection.errors': 'apetools.commons.errors',
              'apetools.connections.adbconnection.re': 're',
              'apetools.connections.adbconnection.readoutput': 'apetools.commons.readoutput',
              'apetools.connections.adbconnection.sys': 'sys',
              'apetools.connections.adbconnection.watcher': 'apetools.main.watcher',
              'apetools.connections.android.collections': 'collections',
              'apetools.connections.android.json': 'json',
              'apetools.connections.android.os': 'os',
              'apetools.connections.android.socket': 'socket',
              'apetools.connections.localconnection.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.connections.localconnection.ConnectionError': 'apetools.commons.errors.ConnectionError',
              'apetools.connections.localconnection.PopenProducer': 'apetools.connections.producer.PopenProducer',
              'apetools.connections.localconnection.Queue': 'Queue',
              'apetools.connections.localconnection.StandardOutput': 'apetools.commons.readoutput.StandardOutput',
              'apetools.connections.localconnection.StringIO': 'StringIO.StringIO',
              'apetools.connections.localconnection.namedtuple': 'collections.namedtuple',
              'apetools.connections.localconnection.os': 'os',
              'apetools.connections.localconnection.pexpect': 'pexpect',
              'apetools.connections.nonlocalconnection.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.connections.nonlocalconnection.OutputError': 'apetools.connections.localconnection.OutputError',
              'apetools.connections.nonlocalconnection.Queue': 'Queue',
              'apetools.connections.nonlocalconnection.StringIO': 'StringIO.StringIO',
              'apetools.connections.nonlocalconnection.threading': 'threading',
              'apetools.connections.producer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.connections.producer.Queue': 'Queue',
              'apetools.connections.producer.SharedCounter': 'apetools.connections.sharedcounter.SharedCounter',
              'apetools.connections.producer.maxint': 'sys.maxint',
              'apetools.connections.producer.now': 'time.time',
              'apetools.connections.producer.shlex': 'shlex',
              'apetools.connections.producer.subprocess': 'subprocess',
              'apetools.connections.producer.threading': 'threading',
              'apetools.connections.puppetconnection.LocalConnection': 'apetools.connections.localconnection.LocalConnection',
              'apetools.connections.serialadapter.serial': 'serial',
              'apetools.connections.serialconnection.LocalConnection': 'apetools.connections.localconnection.LocalConnection',
              'apetools.connections.serialconnection.OutputError': 'apetools.connections.localconnection.OutputError',
              'apetools.connections.serialconnection.OutputFile': 'apetools.connections.sshconnection.OutputFile',
              'apetools.connections.serialconnection.SerialAdapter': 'apetools.connections.serialadapter.SerialAdapter',
              'apetools.connections.serialconnection.StringIO': 'StringIO.StringIO',
              'apetools.connections.serialconnection.namedtuple': 'collections.namedtuple',
              'apetools.connections.serialconnection.os': 'os',
              'apetools.connections.sl4aconnection.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.connections.sl4aconnection.ConnectionError': 'apetools.commons.errors.ConnectionError',
              'apetools.connections.sl4aconnection.android': 'apetools.connections.android',
              'apetools.connections.sl4aconnection.logging': 'logging',
              'apetools.connections.sl4aconnection.socket': 'socket',
              'apetools.connections.sshadapter.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.connections.sshadapter.errors': 'apetools.commons.errors',
              'apetools.connections.sshadapter.paramiko': 'paramiko',
              'apetools.connections.sshadapter.socket': 'socket',
              'apetools.connections.sshconnection.NonLocalConnection': 'apetools.connections.nonlocalconnection.NonLocalConnection',
              'apetools.connections.sshconnection.OutputError': 'apetools.connections.localconnection.OutputError',
              'apetools.connections.sshconnection.SimpleClient': 'apetools.connections.sshadapter.SimpleClient',
              'apetools.connections.sshconnection.ValidatingOutput': 'apetools.commons.readoutput.ValidatingOutput',
              'apetools.connections.sshconnection.enumerations': 'apetools.commons.enumerations',
              'apetools.connections.sshconnection.os': 'os',
              'apetools.connections.sshconnection.socket': 'socket',
              'apetools.connections.telnetadapter.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.connections.telnetadapter.telnetlib': 'telnetlib',
              'apetools.connections.telnetconnection.NonLocalConnection': 'apetools.connections.nonlocalconnection.NonLocalConnection',
              'apetools.connections.telnetconnection.OutputError': 'apetools.connections.localconnection.OutputError',
              'apetools.connections.telnetconnection.OutputFile': 'apetools.connections.sshconnection.OutputFile',
              'apetools.connections.telnetconnection.StringIO': 'StringIO.StringIO',
              'apetools.connections.telnetconnection.TelnetAdapter': 'apetools.connections.telnetadapter.TelnetAdapter',
              'apetools.connections.telnetconnection.changeprompt': 'apetools.commands.changeprompt',
              'apetools.connections.telnetconnection.curses.ascii': 'curses.ascii',
              'apetools.connections.telnetconnection.os.path': 'os.path',
              'apetools.connections.telnetconnection.sleep': 'time.sleep',
              'apetools.connections.testnp5.TelnetConnection': 'apetools.connections.telnetconnection.TelnetConnection',
              'apetools.devices.adbdevice.ADBShellConnection': 'apetools.connections.adbconnection.ADBShellConnection',
              'apetools.devices.adbdevice.ADBShellSSHConnection': 'apetools.connections.adbconnection.ADBShellSSHConnection',
              'apetools.devices.adbdevice.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.devices.adbdevice.BaseDevice': 'apetools.devices.basedevice.BaseDevice',
              'apetools.devices.adbdevice.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.devices.adbdevice.IwCommand': 'apetools.commands.iwcommand.IwCommand',
              'apetools.devices.adbdevice.NetcfgCommand': 'apetools.commands.netcfg.NetcfgCommand',
              'apetools.devices.adbdevice.Svc': 'apetools.commands.svc.Svc',
              'apetools.devices.adbdevice.WifiCommand': 'apetools.commands.wificommand.WifiCommand',
              'apetools.devices.adbdevice.WlCommand': 'apetools.commands.wlcommand.WlCommand',
              'apetools.devices.adbdevice.WpaCliCommand': 'apetools.commands.wpacli.WpaCliCommand',
              'apetools.devices.adbdevice.sys': 'sys',
              'apetools.devices.basedevice.ABCMeta': 'abc.ABCMeta',
              'apetools.devices.basedevice.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.devices.basedevice.abstractmethod': 'abc.abstractmethod',
              'apetools.devices.basedevice.abstractproperty': 'abc.abstractproperty',
              'apetools.devices.dummydevice.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.devices.dummydevice.OutputError': 'apetools.connections.localconnection.OutputError',
              'apetools.devices.linuxdevice.BaseDevice': 'apetools.devices.basedevice.BaseDevice',
              'apetools.devices.linuxdevice.IfconfigCommand': 'apetools.commands.ifconfig.IfconfigCommand',
              'apetools.devices.linuxdevice.Iwconfig': 'apetools.commands.iwconfig.Iwconfig',
              'apetools.devices.linuxdevice.OperatingSystem': 'apetools.commons.enumerations.OperatingSystem',
              'apetools.devices.sl4adevice.BaseDevice': 'apetools.devices.basedevice.BaseDevice',
              'apetools.devices.sl4adevice.SL4AConnection': 'apetools.connections.sl4aconnection.SL4AConnection',
              'apetools.devices.windowsdevice.BaseDevice': 'apetools.devices.basedevice.BaseDevice',
              'apetools.devices.windowsdevice.Ipconfig': 'apetools.commands.ipconfig.Ipconfig',
              'apetools.devices.windowsdevice.NetshWlan': 'apetools.commands.netsh.NetshWlan',
              'apetools.devices.windowsdevice.WinRssi': 'apetools.commands.winrssi.WinRssi',
              'apetools.devices.windowsdevice.WindowsSSIDConnect': 'apetools.commands.windowsssidconnect.WindowsSSIDConnect',
              'apetools.devices.windowsdevice.WmicWin32NetworkAdapter': 'apetools.commands.wmic.WmicWin32NetworkAdapter',
              'apetools.informants.helper.BOLD': 'apetools.informants.constants.BOLD',
              'apetools.informants.helper.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.informants.helper.HELP_BASE': 'apetools.informants.constants.HELP_BASE',
              'apetools.informants.helper.HELP_FOLDER': 'apetools.informants.constants.HELP_FOLDER',
              'apetools.informants.helper.OUTPUT_VARIABLE': 'apetools.informants.constants.OUTPUT_VARIABLE',
              'apetools.informants.helper.PIPE': 'subprocess.PIPE',
              'apetools.informants.helper.Popen': 'subprocess.Popen',
              'apetools.informants.helper.RESET': 'apetools.informants.constants.RESET',
              'apetools.informants.helper.STDOUT': 'subprocess.STDOUT',
              'apetools.informants.helper.importlib': 'importlib',
              'apetools.informants.helpfiles.config.BLUE': 'apetools.informants.constants.BLUE',
              'apetools.informants.helpfiles.config.BOLD': 'apetools.informants.constants.BOLD',
              'apetools.informants.helpfiles.config.NAME_TEMPLATE': 'apetools.informants.constants.NAME_TEMPLATE',
              'apetools.informants.helpfiles.config.RESET': 'apetools.informants.constants.RESET',
              'apetools.informants.helpfiles.config.TEMPLATE': 'apetools.informants.constants.TEMPLATE',
              'apetools.informants.helpfiles.fetch.BLUE': 'apetools.info.constants.BLUE',
              'apetools.informants.helpfiles.fetch.BOLD': 'apetools.info.constants.BOLD',
              'apetools.informants.helpfiles.fetch.NAME_TEMPLATE': 'apetools.info.constants.NAME_TEMPLATE',
              'apetools.informants.helpfiles.fetch.RESET': 'apetools.info.constants.RESET',
              'apetools.informants.helpfiles.fetch.TEMPLATE': 'apetools.info.constants.TEMPLATE',
              'apetools.informants.helpfiles.helpmain.BLUE': 'apetools.info.constants.BLUE',
              'apetools.informants.helpfiles.helpmain.BOLD': 'apetools.info.constants.BOLD',
              'apetools.informants.helpfiles.helpmain.NAME_TEMPLATE': 'apetools.info.constants.NAME_TEMPLATE',
              'apetools.informants.helpfiles.helpmain.RESET': 'apetools.info.constants.RESET',
              'apetools.informants.helpfiles.helpmain.TEMPLATE': 'apetools.info.constants.TEMPLATE',
              'apetools.informants.helpfiles.run.BLUE': 'apetools.info.constants.BLUE',
              'apetools.informants.helpfiles.run.BOLD': 'apetools.info.constants.BOLD',
              'apetools.informants.helpfiles.run.NAME_TEMPLATE': 'apetools.info.constants.NAME_TEMPLATE',
              'apetools.informants.helpfiles.run.RESET': 'apetools.info.constants.RESET',
              'apetools.informants.helpfiles.run.TEMPLATE': 'apetools.info.constants.TEMPLATE',
              'apetools.informants.helpfiles.test.BLUE': 'apetools.info.constants.BLUE',
              'apetools.informants.helpfiles.test.BOLD': 'apetools.info.constants.BOLD',
              'apetools.informants.helpfiles.test.NAME_TEMPLATE': 'apetools.info.constants.NAME_TEMPLATE',
              'apetools.informants.helpfiles.test.RESET': 'apetools.info.constants.RESET',
              'apetools.informants.helpfiles.test.TEMPLATE': 'apetools.info.constants.TEMPLATE',
              'apetools.lexicographers.configfetcher.CONFIG_FOLDER': 'apetools.lexicographers.constants.CONFIG_FOLDER',
              'apetools.lexicographers.configfetcher.DEFAULTS': 'apetools.lexicographers.constants.DEFAULTS',
              'apetools.lexicographers.configfetcher.baseclass': 'apetools.baseclass',
              'apetools.lexicographers.configfetcher.os': 'os',
              'apetools.lexicographers.configfetcher.shutil': 'shutil',
              'apetools.lexicographers.configurationmap.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.configurationmap.BooleanType': 'types.BooleanType',
              'apetools.lexicographers.configurationmap.ConfigParser': 'ConfigParser',
              'apetools.lexicographers.configurationmap.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.lexicographers.configurationmap.TimeConverter': 'apetools.lexicographers.timeconverter.TimeConverter',
              'apetools.lexicographers.configurationmap.expressions': 'apetools.commons.expressions',
              'apetools.lexicographers.configurationmap.namedtuple': 'collections.namedtuple',
              'apetools.lexicographers.configurationmap.re': 're',
              'apetools.lexicographers.configurationmap.whitespace': 'string.whitespace',
              'apetools.lexicographers.constants.whitespace': 'string.whitespace',
              'apetools.lexicographers.lexicographer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.lexicographer.ShallowFind': 'apetools.commons.generators.ShallowFind',
              'apetools.lexicographers.lexicographer.configurationmap': 'apetools.lexicographers.configurationmap',
              'apetools.lexicographers.lexicographer.errors': 'apetools.commons.errors',
              'apetools.lexicographers.lexicographer.pudb': 'pudb',
              'apetools.lexicographers.parametergenerator.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.parametergenerator.ParameterTree': 'apetools.lexicographers.parametertree.ParameterTree',
              'apetools.lexicographers.parametergenerator.enumerations': 'apetools.commons.enumerations',
              'apetools.lexicographers.parametergenerator.errors': 'apetools.commons.errors',
              'apetools.lexicographers.parametergenerator.namedtuple': 'collections.namedtuple',
              'apetools.lexicographers.parametertree.namedtuple': 'collections.namedtuple',
              'apetools.lexicographers.sublexicographers.devicelexicographer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.sublexicographers.devicelexicographer.config_options': 'apetools.lexicographers.config_options',
              'apetools.lexicographers.sublexicographers.devicelexicographer.namedtuple': 'collections.namedtuple',
              'apetools.lexicographers.sublexicographers.iperflexicographer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.sublexicographers.iperflexicographer.ConfigOptions': 'apetools.lexicographers.config_options.ConfigOptions',
              'apetools.lexicographers.sublexicographers.iperflexicographer.IperfDefaults': 'apetools.commons.enumerations.IperfDefaults',
              'apetools.lexicographers.sublexicographers.iperflexicographer.namedtuple': 'collections.namedtuple',
              'apetools.lexicographers.sublexicographers.naxxxlexicographer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.sublexicographers.naxxxlexicographer.config_options': 'apetools.lexicographers.config_options',
              'apetools.lexicographers.sublexicographers.naxxxlexicographer.enumerations': 'apetools.commons.enumerations',
              'apetools.lexicographers.sublexicographers.naxxxlexicographer.errors': 'apetools.commons.errors',
              'apetools.lexicographers.sublexicographers.naxxxlexicographer.namedtuple': 'collections.namedtuple',
              'apetools.lexicographers.sublexicographers.naxxxlexicographer.networkedpowersupply': 'apetools.affectors.elexol.networkedpowersupply',
              'apetools.lexicographers.timeconverter.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.lexicographers.timeconverter.oatbran': 'apetools.parsers.oatbran',
              'apetools.lexicographers.timeconverter.re': 're',
              'apetools.log_setter.logging': 'logging',
              'apetools.log_setter.logging.handlers': 'logging.handlers',
              'apetools.main.ArgumentParser': 'apetools.proletarians.argumentparser.ArgumentParser',
              'apetools.main.enable_debugging': 'apetools.proletarians.enabledebugging.enable_debugging',
              'apetools.main.os': 'os',
              'apetools.main.pudb': 'pudb',
              'apetools.main.set_logger': 'apetools.log_setter.set_logger',
              'apetools.main.signal': 'signal',
              'apetools.main.sys': 'sys',
              'apetools.operations.baseoperation.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.operations.executetest.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.operations.executetest.BaseOperation': 'apetools.operations.baseoperation.BaseOperation',
              'apetools.operations.operationsetup.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.operations.operationsetup.BaseOperation': 'apetools.operations.baseoperation.BaseOperation',
              'apetools.operations.operationsetup.TOKEN_JOINER': 'apetools.operations.baseoperation.TOKEN_JOINER',
              'apetools.operations.operationteardown.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.operations.operationteardown.BaseOperation': 'apetools.operations.baseoperation.BaseOperation',
              'apetools.operations.operationteardown.TOKEN_JOINER': 'apetools.operations.baseoperation.TOKEN_JOINER',
              'apetools.operations.setuptest.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.operations.setuptest.BaseOperation': 'apetools.operations.baseoperation.BaseOperation',
              'apetools.operations.teardowntest.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.operations.teardowntest.BaseOperation': 'apetools.operations.baseoperation.BaseOperation',
              'apetools.parameters.iperf_client_parameters.BooleanType': 'types.BooleanType',
              'apetools.parameters.iperf_client_parameters.IperfCommonTcpParameters': 'apetools.parameters.iperf_common_tcp_parameters.IperfCommonTcpParameters',
              'apetools.parameters.iperf_client_parameters.IperfParametersEnum': 'apetools.parameters.iperf_common_parameters.IperfParametersEnum',
              'apetools.parameters.iperf_client_parameters.LOWEST_PORT': 'apetools.parameters.iperf_common_parameters.LOWEST_PORT',
              'apetools.parameters.iperf_client_parameters.MAXIMUM_PORT': 'apetools.parameters.iperf_common_parameters.MAXIMUM_PORT',
              'apetools.parameters.iperf_client_parameters.MINIMUM_PORT': 'apetools.parameters.iperf_common_parameters.MINIMUM_PORT',
              'apetools.parameters.iperf_client_parameters.VALID_BYTES': 'apetools.parameters.iperf_common_parameters.VALID_BUFFER_LENGTHS',
              'apetools.parameters.iperf_client_parameters.errors': 'apetools.commons.errors',
              'apetools.parameters.iperf_client_parameters.expressions': 'apetools.commons.expressions',
              'apetools.parameters.iperf_client_parameters.re': 're',
              'apetools.parameters.iperf_common_parameters.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.parameters.iperf_common_parameters.BooleanType': 'types.BooleanType',
              'apetools.parameters.iperf_common_parameters.errors': 'apetools.commons.errors',
              'apetools.parameters.iperf_common_parameters.expressions': 'apetools.commons.expressions',
              'apetools.parameters.iperf_common_parameters.re': 're',
              'apetools.parameters.iperf_common_tcp_parameters.BooleanType': 'types.BooleanType',
              'apetools.parameters.iperf_common_tcp_parameters.IperfCommonParameters': 'apetools.parameters.iperf_common_parameters.IperfCommonParameters',
              'apetools.parameters.iperf_common_tcp_parameters.VALID_WINDOW_LENGTHS': 'apetools.parameters.iperf_common_parameters.VALID_BUFFER_LENGTHS',
              'apetools.parameters.iperf_common_tcp_parameters.errors': 'apetools.commons.errors',
              'apetools.parameters.iperf_common_tcp_parameters.re': 're',
              'apetools.parameters.iperf_server_parameters.BooleanType': 'types.BooleanType',
              'apetools.parameters.iperf_server_parameters.IperfCommonTcpParameters': 'apetools.parameters.iperf_common_tcp_parameters.IperfCommonTcpParameters',
              'apetools.parameters.iperf_server_parameters.IperfParametersEnum': 'apetools.parameters.iperf_common_parameters.IperfParametersEnum',
              'apetools.parameters.iperf_server_parameters.errors': 'apetools.commons.errors',
              'apetools.parameters.iperf_test_parameters.namedtuple': 'collections.namedtuple',
              'apetools.parameters.iperf_udp_server_parameters.BooleanType': 'types.BooleanType',
              'apetools.parameters.iperf_udp_server_parameters.IperfServerParameters': 'apetools.parameters.iperf_server_parameters.IperfServerParameters',
              'apetools.parameters.iperf_udp_server_parameters.errors': 'apetools.commons.errors',
              'apetools.parsers.coroutine.FileType': 'types.FileType',
              'apetools.parsers.iperfexpressions.ABCMeta': 'abc.ABCMeta',
              'apetools.parsers.iperfexpressions.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.parsers.iperfexpressions.abstractproperty': 'abc.abstractproperty',
              'apetools.parsers.iperfexpressions.bran': 'apetools.parsers.oatbran',
              'apetools.parsers.iperfexpressions.re': 're',
              'apetools.parsers.iperfparser.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.parsers.iperfparser.CsvExpression': 'apetools.parsers.iperfexpressions.CsvExpression',
              'apetools.parsers.iperfparser.HumanExpression': 'apetools.parsers.iperfexpressions.HumanExpression',
              'apetools.parsers.iperfparser.ParserKeys': 'apetools.parsers.iperfexpressions.ParserKeys',
              'apetools.parsers.iperfparser.UnitConverter': 'apetools.parsers.unitconverter.UnitConverter',
              'apetools.parsers.iperfparser.coroutine': 'apetools.parsers.coroutine.coroutine',
              'apetools.parsers.iperfparser.defaultdict': 'collections.defaultdict',
              'apetools.parsers.iperfparser.namedtuple': 'collections.namedtuple',
              'apetools.parsers.iperfparser.os': 'os',
              'apetools.parsers.oatbran.string': 'string',
              'apetools.parsers.sumparser.BandwidthData': 'apetools.parsers.iperfparser.BandwidthData',
              'apetools.parsers.sumparser.CsvExpression': 'apetools.parsers.iperfexpressions.CsvExpression',
              'apetools.parsers.sumparser.HumanExpression': 'apetools.parsers.iperfexpressions.HumanExpression',
              'apetools.parsers.sumparser.IperfParser': 'apetools.parsers.iperfparser.IperfParser',
              'apetools.parsers.sumparser.ParserKeys': 'apetools.parsers.iperfexpressions.ParserKeys',
              'apetools.parsers.sumparser.bran': 'apetools.parsers.oatbran',
              'apetools.parsers.sumparser.coroutine': 'apetools.parsers.coroutine.coroutine',
              'apetools.pipes.storagepipe.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.pipes.storagepipe.StorageOutput': 'apetools.commons.storageoutput.StorageOutput',
              'apetools.pipes.storagepipe.coroutine': 'apetools.commons.coroutine.coroutine',
              'apetools.proletarians.argumentparser.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.argumentparser.DEFAULTS': 'apetools.lexicographers.constants.DEFAULTS',
              'apetools.proletarians.argumentparser.Strategerizer': 'apetools.proletarians.strategerizer.Strategerizer',
              'apetools.proletarians.argumentparser.argparse': 'argparse',
              'apetools.proletarians.countdowntimer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.countdowntimer.Data': 'apetools.proletarians.data.Data',
              'apetools.proletarians.countdowntimer.clock': 'datetime.datetime',
              'apetools.proletarians.countdowntimer.timedelta': 'datetime.timedelta',
              'apetools.proletarians.crashhandler.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.crashhandler.StringIO': 'StringIO.StringIO',
              'apetools.proletarians.crashhandler.storageoutput': 'apetools.commons.storageoutput',
              'apetools.proletarians.crashhandler.traceback': 'traceback',
              'apetools.proletarians.data.insort': 'bisect.insort',
              'apetools.proletarians.enabledebugging.pdb': 'pdb',
              'apetools.proletarians.enabledebugging.pudb': 'pudb',
              'apetools.proletarians.hortator.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.hortator.OperatorError': 'apetools.proletarians.errors.OperatorError',
              'apetools.proletarians.hortator.clock': 'datetime.datetime',
              'apetools.proletarians.hortator.namedtuple': 'collections.namedtuple',
              'apetools.proletarians.liststrategy.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.setuprun.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.setuprun.Lexicographer': 'apetools.lexicographers.lexicographer.Lexicographer',
              'apetools.proletarians.setuprun.builder': 'apetools.builders.builder',
              'apetools.proletarians.strategerizer.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.strategerizer.ConfigFetcher': 'apetools.lexicographers.configfetcher.ConfigFetcher',
              'apetools.proletarians.strategerizer.CrashHandler': 'apetools.proletarians.crashhandler.CrashHandler',
              'apetools.proletarians.strategerizer.Helper': 'apetools.informants.helper.Helper',
              'apetools.proletarians.strategerizer.SetUp': 'apetools.proletarians.setuprun.SetUp',
              'apetools.proletarians.strategerizer.errors': 'apetools.commons.errors',
              'apetools.proletarians.strategerizer.testdumpsyswifi': 'apetools.tools.testdumpsyswifi',
              'apetools.proletarians.teardown.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.testoperator.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.proletarians.testoperator.Queue': 'Queue.Queue',
              'apetools.proletarians.testoperator.errors': 'apetools.commons.errors',
              'apetools.proletarians.testoperator.namedtuple': 'collections.namedtuple',
              'apetools.proletarians.testoperator.os': 'os',
              'apetools.proletarians.testoperator.signal': 'signal',
              'apetools.proletarians.testoperator.sleep': 'apetools.tools.sleep',
              'apetools.proletarians.testoperator.sublogger': 'apetools.commons.sublogger',
              'apetools.proletarians.testoperator.sys': 'sys',
              'apetools.threads.barrier.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.threads.barrier.Semaphore': 'apetools.threads.semaphore.Semaphore',
              'apetools.threads.lock.contextmanager': 'contextlib.contextmanager',
              'apetools.threads.semaphore.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.threads.semaphore.repeat': 'itertools.repeat',
              'apetools.threads.semaphore.threading': 'threading',
              'apetools.threads.threads.threading': 'threading',
              'apetools.tools.copyfiles.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.dumpdevicestate.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.getipaddress.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.getipaddress.adbconnection': 'apetools.connections.adbconnection',
              'apetools.tools.getipaddress.errors': 'apetools.commons.errors',
              'apetools.tools.getipaddress.expressions': 'apetools.commons.expressions',
              'apetools.tools.getipaddress.getipaddress': 'apetools.tools.getipaddress',
              'apetools.tools.getipaddress.re': 're',
              'apetools.tools.getipaddress.sshconnection': 'apetools.connections.sshconnection',
              'apetools.tools.iperfsession.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.iperfsession.ConfigurationError': 'apetools.commons.errors.ConfigurationError',
              'apetools.tools.iperfsession.namedtuple': 'collections.namedtuple',
              'apetools.tools.iperfsession.re': 're',
              'apetools.tools.iperftest.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.iperftest.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.tools.iperftest.KillAll': 'apetools.tools.killall.KillAll',
              'apetools.tools.iperftest.Sleep': 'apetools.tools.sleep.Sleep',
              'apetools.tools.iperftest.time': 'time',
              'apetools.tools.killall.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.killall.INTEGER': 'apetools.parsers.oatbran.INTEGER',
              'apetools.tools.killall.NAMED': 'apetools.parsers.oatbran.NAMED',
              'apetools.tools.killall.SPACES': 'apetools.parsers.oatbran.SPACES',
              'apetools.tools.killall.STRING_START': 'apetools.parsers.oatbran.STRING_START',
              'apetools.tools.killall.enumerations': 'apetools.commons.enumerations',
              'apetools.tools.killall.errors': 'apetools.commons.errors',
              'apetools.tools.killall.expressions': 'apetools.commons.expressions',
              'apetools.tools.killall.re': 're',
              'apetools.tools.killall.sleep': 'apetools.tools.sleep',
              'apetools.tools.movefiles.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.networktester.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.networktester.errors': 'apetools.commons.errors',
              'apetools.tools.networktester.sys': 'sys',
              'apetools.tools.setupiteration.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.setupiteration.Sleep': 'apetools.tools.sleep.Sleep',
              'apetools.tools.setupiteration.dumpsyswifi': 'apetools.commands.dumpsyswifi',
              'apetools.tools.setupiteration.errors': 'apetools.commons.errors',
              'apetools.tools.setupiteration.svc': 'apetools.commands.svc',
              'apetools.tools.sleep.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.sleep.time': 'time',
              'apetools.tools.teardowniteration.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.teardowniteration.Sleep': 'apetools.tools.sleep.Sleep',
              'apetools.tools.testdumpsyswifi.adbconnection': 'apetools.connections.adbconnection',
              'apetools.tools.testdumpsyswifi.dumpsyswifi': 'apetools.commands.dumpsyswifi',
              'apetools.tools.testdumpsyswifi.netcfg': 'apetools.commands.netcfg',
              'apetools.tools.timetofailure.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.timetofailure.ping': 'apetools.commands.ping',
              'apetools.tools.timetofailure.time': 'time',
              'apetools.tools.timetorecovery.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.timetorecovery.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.tools.timetorecovery.namedtuple': 'collections.namedtuple',
              'apetools.tools.timetorecovery.ping': 'apetools.commands.ping',
              'apetools.tools.timetorecovery.time': 'time',
              'apetools.tools.timetorecoverytest.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.timetorecoverytest.namedtuple': 'collections.namedtuple',
              'apetools.tools.wifitool.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.tools.wifitool.adbconnection': 'apetools.connections.adbconnection',
              'apetools.tools.wifitool.iwcommand': 'apetools.commands.iwcommand',
              'apetools.tools.wifitool.netcfg': 'apetools.commands.netcfg',
              'apetools.tools.wifitool.wpacli': 'apetools.commands.wpacli',
              'apetools.watchers.basedevicepoller.ABCMeta': 'abc.ABCMeta',
              'apetools.watchers.basedevicepoller.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.basedevicepoller.Thread': 'apetools.threads.threads.Thread',
              'apetools.watchers.basedevicepoller.TimestampFormat': 'apetools.commons.timestamp.TimestampFormat',
              'apetools.watchers.basedevicepoller.TimestampFormatEnums': 'apetools.commons.timestamp.TimestampFormatEnums',
              'apetools.watchers.basedevicepoller.abstractmethod': 'abc.abstractmethod',
              'apetools.watchers.basedevicepoller.abstractproperty': 'abc.abstractproperty',
              'apetools.watchers.basedevicepoller.re': 're',
              'apetools.watchers.commandwatcher.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.commandwatcher.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.watchers.commandwatcher.TimestampFormat': 'apetools.commons.timestamp.TimestampFormat',
              'apetools.watchers.commandwatcher.re': 're',
              'apetools.watchers.commandwatcher.sleep': 'time.sleep',
              'apetools.watchers.commandwatcher.sys': 'sys',
              'apetools.watchers.commandwatcher.threading': 'threading',
              'apetools.watchers.commandwatcher.time': 'time.time',
              'apetools.watchers.devicepoller.BaseDevicePoller': 'apetools.watchers.basedevicepoller.BaseDevicePoller',
              'apetools.watchers.devicepoller.CSV_JOIN': 'apetools.watchers.basedevicepoller.CSV_JOIN',
              'apetools.watchers.devicepoller.ZERO': 'apetools.watchers.basedevicepoller.ZERO',
              'apetools.watchers.devicepoller.now': 'time.time',
              'apetools.watchers.devicepoller.sleep': 'time.sleep',
              'apetools.watchers.fileexpressionwatcher.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.fileexpressionwatcher.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.watchers.fileexpressionwatcher.TimestampFormat': 'apetools.commons.timestamp.TimestampFormat',
              'apetools.watchers.fileexpressionwatcher.oatbran': 'apetools.parsers.oatbran',
              'apetools.watchers.fileexpressionwatcher.re': 're',
              'apetools.watchers.fileexpressionwatcher.sleep': 'time.sleep',
              'apetools.watchers.fileexpressionwatcher.sys': 'sys',
              'apetools.watchers.fileexpressionwatcher.time': 'time.time',
              'apetools.watchers.logcatwatcher.LogWatcher': 'apetools.watchers.logwatcher.LogWatcher',
              'apetools.watchers.logcatwatcher.sys': 'sys',
              'apetools.watchers.logwatcher.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.logwatcher.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.watchers.logwatcher.sys': 'sys',
              'apetools.watchers.logwatcher.threads': 'apetools.threads.threads',
              'apetools.watchers.procpollster.ABCMeta': 'abc.ABCMeta',
              'apetools.watchers.procpollster.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.procpollster.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.watchers.procpollster.TimestampFormat': 'apetools.commons.timestamp.TimestampFormat',
              'apetools.watchers.procpollster.TimestampFormatEnums': 'apetools.commons.timestamp.TimestampFormatEnums',
              'apetools.watchers.procpollster.abstractproperty': 'abc.abstractproperty',
              'apetools.watchers.procpollster.numpy': 'numpy',
              'apetools.watchers.procpollster.oatbran': 'apetools.parsers.oatbran',
              'apetools.watchers.procpollster.re': 're',
              'apetools.watchers.procpollster.sleep': 'time.sleep',
              'apetools.watchers.procpollster.sys': 'sys',
              'apetools.watchers.procpollster.threading': 'threading',
              'apetools.watchers.procpollster.time': 'time.time',
              'apetools.watchers.rssipoller.BaseDevicePoller': 'apetools.watchers.basedevicepoller.BaseDevicePoller',
              'apetools.watchers.rssipoller.CSV_JOIN': 'apetools.watchers.basedevicepoller.CSV_JOIN',
              'apetools.watchers.rssipoller.ZERO': 'apetools.watchers.basedevicepoller.ZERO',
              'apetools.watchers.rssipoller.now': 'time.time',
              'apetools.watchers.rssipoller.oatbran': 'apetools.parsers.oatbran',
              'apetools.watchers.rssipoller.sleep': 'time.sleep',
              'apetools.watchers.thewatcher.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.thewatcher.CommandError': 'apetools.commons.errors.CommandError',
              'apetools.watchers.tsharkwatcher.BaseClass': 'apetools.baseclass.BaseClass',
              'apetools.watchers.tsharkwatcher.SSHConnection': 'apetools.connections.sshconnection.SSHConnection',
              'apetools.watchers.tsharkwatcher.TimestampFormat': 'apetools.commons.timestamp.TimestampFormat',
              'apetools.watchers.tsharkwatcher.oatbran': 'apetools.parsers.oatbran',
              'apetools.watchers.tsharkwatcher.re': 're',
              'apetools.watchers.tsharkwatcher.sys': 'sys',
              'apetools.watchers.tsharkwatcher.time': 'time',
              'distribute_setup.DirectorySandbox': 'setuptools.sandbox.DirectorySandbox',
              'distribute_setup.ExtractError': 'tarfile.ExtractError',
              'distribute_setup.USER_SITE': 'site.USER_SITE',
              'distribute_setup.copy': 'copy',
              'distribute_setup.fnmatch': 'fnmatch',
              'distribute_setup.log': 'distutils.log',
              'distribute_setup.operator': 'operator',
              'distribute_setup.os': 'os',
              'distribute_setup.pkg_resources': 'pkg_resources',
              'distribute_setup.setuptools': 'setuptools',
              'distribute_setup.subprocess': 'subprocess',
              'distribute_setup.sys': 'sys',
              'distribute_setup.tarfile': 'tarfile',
              'distribute_setup.tempfile': 'tempfile',
              'distribute_setup.time': 'time',
              'distribute_setup.urlopen': 'urllib2.urlopen',
              'setup.datetime': 'datetime.datetime',
              'setup.distribute_setup': 'distribute_setup',
              'setup.find_packages': 'setuptools.find_packages',
              'setup.setup': 'setuptools.setup'}}
