{'CLASSES': {'benchmark.Benchmark': {'bases': ['dict'],
                                     'constructor': ['modules',
                                                     "title=''",
                                                     'runs=3',
                                                     'reps=1000'],
                                     'docstring': 'Benchmark a feature in different modules.',
                                     'methods': [('__setitem__',
                                                  ['module', '(test_str, setup_str)'],
                                                  'Set the test code for modules.'),
                                                 ('run',
                                                  [],
                                                  'Run the benchmark on the different modules.')],
                                     'properties': ['module_test', 'runs', 'reps', 'title']},
             'mock.Base': {'bases': ['object'],
                           'constructor': ['*args', '**kwargs'],
                           'docstring': '',
                           'methods': [],
                           'properties': ['_mock_return_value', '_mock_side_effect']},
             'mock.CallableMixin': {'bases': ['mock.Base'],
                                    'constructor': ['spec=None',
                                                    'side_effect=None',
                                                    'return_value=DEFAULT',
                                                    'wraps=None',
                                                    'name=None',
                                                    'spec_set=None',
                                                    'parent=None',
                                                    '_spec_state=None',
                                                    "_new_name=''",
                                                    '_new_parent=None',
                                                    '**kwargs'],
                                    'docstring': '',
                                    'methods': [('_mock_check_sig', ['*args', '**kwargs'], ''),
                                                ('__call__', ['*args', '**kwargs'], ''),
                                                ('_mock_call', ['*args', '**kwargs'], '')],
                                    'properties': ['side_effect', 'called', 'call_args']},
             'mock.MagicMixin': {'bases': ['object'],
                                 'constructor': ['*args', '**kw'],
                                 'docstring': '',
                                 'methods': [('_mock_set_magics', [], '')],
                                 'properties': []},
             'mock.MagicMock': {'bases': ['mock.MagicMixin', 'mock.Mock'],
                                'constructor': [],
                                'docstring': '\n    MagicMock is a subclass of Mock with default implementations\n    of most of the magic methods. You can use MagicMock without having to\n    configure the magic methods yourself.\n\n    If you use the `spec` or `spec_set` arguments then *only* magic\n    methods that exist in the spec will be created.\n\n    Attributes and the return value of a `MagicMock` will also be `MagicMocks`.\n    ',
                                'methods': [('mock_add_spec',
                                             ['spec', 'spec_set=False'],
                                             'Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.')],
                                'properties': []},
             'mock.MagicProxy': {'bases': ['object'],
                                 'constructor': ['name', 'parent'],
                                 'docstring': '',
                                 'methods': [('__call__', ['*args', '**kwargs'], ''),
                                             ('create_mock', [], ''),
                                             ('__get__', ['obj', '_type=None'], '')],
                                 'properties': ['name', 'parent']},
             'mock.Mock': {'bases': ['mock.CallableMixin', 'mock.NonCallableMock'],
                           'constructor': [],
                           'docstring': "\n    Create a new `Mock` object. `Mock` takes several optional arguments\n    that specify the behaviour of the Mock object:\n\n    * `spec`: This can be either a list of strings or an existing object (a\n      class or instance) that acts as the specification for the mock object. If\n      you pass in an object then a list of strings is formed by calling dir on\n      the object (excluding unsupported magic attributes and methods). Accessing\n      any attribute not in this list will raise an `AttributeError`.\n\n      If `spec` is an object (rather than a list of strings) then\n      `mock.__class__` returns the class of the spec object. This allows mocks\n      to pass `isinstance` tests.\n\n    * `spec_set`: A stricter variant of `spec`. If used, attempting to *set*\n      or get an attribute on the mock that isn't on the object passed as\n      `spec_set` will raise an `AttributeError`.\n\n    * `side_effect`: A function to be called whenever the Mock is called. See\n      the `side_effect` attribute. Useful for raising exceptions or\n      dynamically changing return values. The function is called with the same\n      arguments as the mock, and unless it returns `DEFAULT`, the return\n      value of this function is used as the return value.\n\n      Alternatively `side_effect` can be an exception class or instance. In\n      this case the exception will be raised when the mock is called.\n\n      If `side_effect` is an iterable then each call to the mock will return\n      the next value from the iterable. If any of the members of the iterable\n      are exceptions they will be raised instead of returned.\n\n    * `return_value`: The value returned when the mock is called. By default\n      this is a new Mock (created on first access). See the\n      `return_value` attribute.\n\n    * `wraps`: Item for the mock object to wrap. If `wraps` is not None then\n      calling the Mock will pass the call through to the wrapped object\n      (returning the real result). Attribute access on the mock will return a\n      Mock object that wraps the corresponding attribute of the wrapped object\n      (so attempting to access an attribute that doesn't exist will raise an\n      `AttributeError`).\n\n      If the mock has an explicit `return_value` set then calls are not passed\n      to the wrapped object and the `return_value` is returned instead.\n\n    * `name`: If the mock has a name then it will be used in the repr of the\n      mock. This can be useful for debugging. The name is propagated to child\n      mocks.\n\n    Mocks can also be called with arbitrary keyword arguments. These will be\n    used to set attributes on the mock after it is created.\n    ",
                           'methods': [],
                           'properties': []},
             'mock.NonCallableMagicMock': {'bases': ['mock.MagicMixin', 'mock.NonCallableMock'],
                                           'constructor': [],
                                           'docstring': "A version of `MagicMock` that isn't callable.",
                                           'methods': [('mock_add_spec',
                                                        ['spec', 'spec_set=False'],
                                                        'Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.')],
                                           'properties': []},
             'mock.NonCallableMock': {'bases': ['mock.Base'],
                                      'constructor': ['spec=None',
                                                      'wraps=None',
                                                      'name=None',
                                                      'spec_set=None',
                                                      'parent=None',
                                                      '_spec_state=None',
                                                      "_new_name=''",
                                                      '_new_parent=None',
                                                      '**kwargs'],
                                      'docstring': 'A non-callable version of `Mock`',
                                      'methods': [('__new__', ['*args', '**kw'], ''),
                                                  ('attach_mock',
                                                   ['mock', 'attribute'],
                                                   '\n        Attach a mock as an attribute of this one, replacing its name and\n        parent. Calls to the attached mock will be recorded in the\n        `method_calls` and `mock_calls` attributes of this one.'),
                                                  ('mock_add_spec',
                                                   ['spec', 'spec_set=False'],
                                                   'Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.'),
                                                  ('_mock_add_spec', ['spec', 'spec_set'], ''),
                                                  ('__get_return_value', [], ''),
                                                  ('__set_return_value', ['value'], ''),
                                                  ('__get_side_effect', [], ''),
                                                  ('__set_side_effect', ['value'], ''),
                                                  ('reset_mock',
                                                   [],
                                                   'Restore the mock object to its initial state.'),
                                                  ('configure_mock',
                                                   ['**kwargs'],
                                                   "Set attributes on the mock through keyword arguments.\n\n        Attributes plus return values and side effects can be set on child\n        mocks using standard dot notation and unpacking a dictionary in the\n        method call:\n\n        >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\n        >>> mock.configure_mock(**attrs)"),
                                                  ('__getattr__', ['name'], ''),
                                                  ('__repr__', [], ''),
                                                  ('__dir__',
                                                   [],
                                                   'Filter the output of `dir(mock)` to only useful members.\n        XXXX\n        '),
                                                  ('__setattr__', ['name', 'value'], ''),
                                                  ('__delattr__', ['name'], ''),
                                                  ('_format_mock_call_signature',
                                                   ['args', 'kwargs'],
                                                   ''),
                                                  ('_format_mock_failure_message',
                                                   ['args', 'kwargs'],
                                                   ''),
                                                  ('assert_called_with',
                                                   ['*args', '**kwargs'],
                                                   'assert that the mock was called with the specified arguments.\n\n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.'),
                                                  ('assert_called_once_with',
                                                   ['*args', '**kwargs'],
                                                   'assert that the mock was called exactly once and with the specified\n        arguments.'),
                                                  ('assert_has_calls',
                                                   ['calls', 'any_order=False'],
                                                   'assert the mock has been called with the specified calls.\n        The `mock_calls` list is checked for the calls.\n\n        If `any_order` is False (the default) then the calls must be\n        sequential. There can be extra calls before or after the\n        specified calls.\n\n        If `any_order` is True then the calls can be in any order, but\n        they must all appear in `mock_calls`.'),
                                                  ('assert_any_call',
                                                   ['*args', '**kwargs'],
                                                   'assert the mock has been called with the specified arguments.\n\n        The assert passes if the mock has *ever* been called, unlike\n        `assert_called_with` and `assert_called_once_with` that only pass if\n        the call is the most recent one.'),
                                                  ('_get_child_mock',
                                                   ['**kw'],
                                                   'Create the child mocks for attributes and return value.\n        By default child mocks will be the same type as the parent.\n        Subclasses of Mock may want to override this to customize the way\n        child mocks are made.\n\n        For non-callable mocks the callable variant will be used (rather than\n        any custom subclass).')],
                                      'properties': ['return_value',
                                                     '_mock_return_value',
                                                     '__return_value_doc',
                                                     '__class__',
                                                     'called',
                                                     'call_count',
                                                     'call_args',
                                                     'call_args_list',
                                                     'mock_calls',
                                                     '_mock_side_effect',
                                                     'side_effect',
                                                     'method_calls',
                                                     '_spec_class']},
             'mock.OldStyleClass': {'bases': [],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'mock.PropertyMock': {'bases': ['mock.Mock'],
                                   'constructor': [],
                                   'docstring': '\n    A mock intended to be used as a property, or other descriptor, on a class.\n    `PropertyMock` provides `__get__` and `__set__` methods so you can specify\n    a return value when it is fetched.\n\n    Fetching a `PropertyMock` instance from an object calls the mock, with\n    no args. Setting it calls the mock with the value being set.\n    ',
                                   'methods': [('_get_child_mock', ['**kwargs'], ''),
                                               ('__get__', ['obj', 'obj_type'], ''),
                                               ('__set__', ['obj', 'val'], '')],
                                   'properties': []},
             'mock._ANY': {'bases': ['object'],
                           'constructor': [],
                           'docstring': 'A helper object that compares equal to everything.',
                           'methods': [('__eq__', ['other'], ''),
                                       ('__ne__', ['other'], ''),
                                       ('__repr__', [], '')],
                           'properties': []},
             'mock._Call': {'bases': ['tuple'],
                            'constructor': ['value=()',
                                            'name=None',
                                            'parent=None',
                                            'two=False',
                                            'from_kall=True'],
                            'docstring': "\n    A tuple for holding the results of a call to a mock, either in the form\n    `(args, kwargs)` or `(name, args, kwargs)`.\n\n    If args or kwargs are empty then a call tuple will compare equal to\n    a tuple without those values. This makes comparisons less verbose::\n\n        _Call(('name', (), {})) == ('name',)\n        _Call(('name', (1,), {})) == ('name', (1,))\n        _Call(((), {'a': 'b'})) == ({'a': 'b'},)\n\n    The `_Call` object provides a useful shortcut for comparing with call::\n\n        _Call(((1, 2), {'a': 3})) == call(1, 2, a=3)\n        _Call(('foo', (1, 2), {'a': 3})) == call.foo(1, 2, a=3)\n\n    If the _Call has no name then it will match any name.\n    ",
                            'methods': [('__new__',
                                         ['value=()',
                                          'name=None',
                                          'parent=None',
                                          'two=False',
                                          'from_kall=True'],
                                         ''),
                                        ('__eq__', ['other'], ''),
                                        ('__ne__', ['other'], ''),
                                        ('__call__', ['*args', '**kwargs'], ''),
                                        ('__getattr__', ['attr'], ''),
                                        ('__repr__', [], ''),
                                        ('call_list',
                                         [],
                                         'For a call object that represents multiple calls, `call_list`\n        returns a list of all the intermediate calls as well as the\n        final call.')],
                            'properties': ['name', 'parent', 'from_kall']},
             'mock._CallList': {'bases': ['list'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [('__contains__', ['value'], ''),
                                            ('__repr__', [], '')],
                                'properties': []},
             'mock._Sentinel': {'bases': ['object'],
                                'constructor': [],
                                'docstring': 'Access attributes to return a named object, usable as a sentinel.',
                                'methods': [('__getattr__', ['name'], '')],
                                'properties': ['_sentinels']},
             'mock._SentinelObject': {'bases': ['object'],
                                      'constructor': ['name'],
                                      'docstring': 'A unique, named, sentinel object.',
                                      'methods': [('__repr__', [], '')],
                                      'properties': ['name']},
             'mock._SpecState': {'bases': ['object'],
                                 'constructor': ['spec',
                                                 'spec_set=False',
                                                 'parent=None',
                                                 'name=None',
                                                 'ids=None',
                                                 'instance=False'],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': ['spec',
                                                'ids',
                                                'spec_set',
                                                'parent',
                                                'instance',
                                                'name']},
             'mock._patch': {'bases': ['object'],
                             'constructor': ['getter',
                                             'attribute',
                                             'new',
                                             'spec',
                                             'create',
                                             'spec_set',
                                             'autospec',
                                             'new_callable',
                                             'kwargs'],
                             'docstring': '',
                             'methods': [('copy', [], ''),
                                         ('__call__', ['func'], ''),
                                         ('decorate_class', ['klass'], ''),
                                         ('decorate_callable', ['func'], ''),
                                         ('get_original', [], ''),
                                         ('__enter__', [], 'Perform the patch.'),
                                         ('__exit__', ['*exc_info'], 'Undo the patch.'),
                                         ('start',
                                          [],
                                          'Activate a patch, returning any created mock.'),
                                         ('stop', [], 'Stop an active patch.')],
                             'properties': ['attribute_name',
                                            '_active_patches',
                                            'getter',
                                            'attribute',
                                            'new',
                                            'new_callable',
                                            'spec',
                                            'create',
                                            'has_local',
                                            'spec_set',
                                            'autospec',
                                            'kwargs',
                                            'additional_patchers',
                                            'target',
                                            'temp_original',
                                            'is_local']},
             'mock._patch_dict': {'bases': ['object'],
                                  'constructor': ['in_dict',
                                                  'values=()',
                                                  'clear=False',
                                                  '**kwargs'],
                                  'docstring': "\n    Patch a dictionary, or dictionary like object, and restore the dictionary\n    to its original state after the test.\n\n    `in_dict` can be a dictionary or a mapping like container. If it is a\n    mapping then it must at least support getting, setting and deleting items\n    plus iterating over keys.\n\n    `in_dict` can also be a string specifying the name of the dictionary, which\n    will then be fetched by importing it.\n\n    `values` can be a dictionary of values to set in the dictionary. `values`\n    can also be an iterable of `(key, value)` pairs.\n\n    If `clear` is True then the dictionary will be cleared before the new\n    values are set.\n\n    `patch.dict` can also be called with arbitrary keyword arguments to set\n    values in the dictionary::\n\n        with patch.dict('sys.modules', mymodule=Mock(), other_module=Mock()):\n            ...\n\n    `patch.dict` can be used as a context manager, decorator or class\n    decorator. When used as a class decorator `patch.dict` honours\n    `patch.TEST_PREFIX` for choosing which methods to wrap.\n    ",
                                  'methods': [('__call__', ['f'], ''),
                                              ('decorate_class', ['klass'], ''),
                                              ('__enter__', [], 'Patch the dict.'),
                                              ('_patch_dict', [], ''),
                                              ('_unpatch_dict', [], ''),
                                              ('__exit__', ['*args'], 'Unpatch the dict.')],
                                  'properties': ['in_dict',
                                                 'values',
                                                 'clear',
                                                 '_original',
                                                 'start',
                                                 'stop']},
             'mock._slotted': {'bases': ['object'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['__slots__']},
             'nose.case.FunctionTestCase': {'bases': ['nose.case.TestBase'],
                                            'constructor': ['test',
                                                            'setUp=None',
                                                            'tearDown=None',
                                                            'arg=tuple()',
                                                            'descriptor=None'],
                                            'docstring': "TestCase wrapper for test functions.\n\n    Don't use this class directly; it is used internally in nose to\n    create test cases for test functions.\n    ",
                                            'methods': [('address',
                                                         [],
                                                         'Return a round-trip name for this test, a name that can be\n        fed back as input to loadTestByName and (assuming the same\n        plugin configuration) result in the loading of this test.\n        '),
                                                        ('_context', [], ''),
                                                        ('setUp',
                                                         [],
                                                         'Run any setup function attached to the test function\n        '),
                                                        ('tearDown',
                                                         [],
                                                         'Run any teardown function attached to the test function\n        '),
                                                        ('__str__', [], ''),
                                                        ('_descriptors',
                                                         [],
                                                         'Get the descriptors of the test function: the function and\n        arguments that will be used to construct the test name. In\n        most cases, this is the function itself and no arguments. For\n        tests generated by generator functions, the original\n        (generator) function and args passed to the generated function\n        are returned.\n        ')],
                                            'properties': ['__test__',
                                                           'test',
                                                           'setUpFunc',
                                                           'tearDownFunc',
                                                           'arg',
                                                           'descriptor',
                                                           'context',
                                                           '__repr__']},
             'nose.case.MethodTestCase': {'bases': ['nose.case.TestBase'],
                                          'constructor': ['method',
                                                          'test=None',
                                                          'arg=tuple()',
                                                          'descriptor=None'],
                                          'docstring': "Test case wrapper for test methods.\n\n    Don't use this class directly; it is used internally in nose to\n    create test cases for test methods.\n    ",
                                          'methods': [('__str__', [], ''),
                                                      ('address',
                                                       [],
                                                       'Return a round-trip name for this test, a name that can be\n        fed back as input to loadTestByName and (assuming the same\n        plugin configuration) result in the loading of this test.\n        '),
                                                      ('_context', [], ''),
                                                      ('setUp', [], ''),
                                                      ('tearDown', [], ''),
                                                      ('_descriptors',
                                                       [],
                                                       'Get the descriptors of the test method: the method and\n        arguments that will be used to construct the test name. In\n        most cases, this is the method itself and no arguments. For\n        tests generated by generator methods, the original\n        (generator) method and args passed to the generated method \n        or function are returned.\n        ')],
                                          'properties': ['__test__',
                                                         'method',
                                                         'test',
                                                         'arg',
                                                         'descriptor',
                                                         'cls',
                                                         'inst',
                                                         '__repr__',
                                                         'context']},
             'nose.case.Test': {'bases': ['unittest.TestCase'],
                                'constructor': ['test', 'config=None', 'resultProxy=None'],
                                'docstring': 'The universal test case wrapper.\n\n    When a plugin sees a test, it will always see an instance of this\n    class. To access the actual test case that will be run, access the\n    test property of the nose.case.Test instance.\n    ',
                                'methods': [('__call__', ['*arg', '**kwarg'], ''),
                                            ('__str__', [], ''),
                                            ('__repr__', [], ''),
                                            ('afterTest',
                                             ['result'],
                                             'Called after test is complete (after result.stopTest)\n        '),
                                            ('beforeTest',
                                             ['result'],
                                             'Called before test is run (before result.startTest)\n        '),
                                            ('exc_info',
                                             [],
                                             'Extract exception info.\n        '),
                                            ('id',
                                             [],
                                             'Get a short(er) description of the test\n        '),
                                            ('address',
                                             [],
                                             'Return a round-trip name for this test, a name that can be\n        fed back as input to loadTestByName and (assuming the same\n        plugin configuration) result in the loading of this test.\n        '),
                                            ('_context', [], ''),
                                            ('run',
                                             ['result'],
                                             'Modified run for the test wrapper.\n\n        From here we don\'t call result.startTest or stopTest or\n        addSuccess.  The wrapper calls addError/addFailure only if its\n        own setup or teardown fails, or running the wrapped test fails\n        (eg, if the wrapped "test" is not callable).\n\n        Two additional methods are called, beforeTest and\n        afterTest. These give plugins a chance to modify the wrapped\n        test before it is called and do cleanup after it is\n        called. They are called unconditionally.\n        '),
                                            ('runTest',
                                             ['result'],
                                             'Run the test. Plugins may alter the test by returning a\n        value from prepareTestCase. The value must be callable and\n        must accept one argument, the result instance.\n        '),
                                            ('shortDescription', [], '')],
                                'properties': ['__test__',
                                               'test',
                                               'config',
                                               'tbinfo',
                                               'capturedOutput',
                                               'resultProxy',
                                               'plugins',
                                               'passed',
                                               'context']},
             'nose.case.TestBase': {'bases': ['unittest.TestCase'],
                                    'constructor': [],
                                    'docstring': 'Common functionality for FunctionTestCase and MethodTestCase.\n    ',
                                    'methods': [('id', [], ''),
                                                ('runTest', [], ''),
                                                ('shortDescription', [], '')],
                                    'properties': ['__test__']},
             'nose.commands.nosetests': {'bases': ['setuptools.Command'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('initialize_options',
                                                      [],
                                                      'create the member variables, but change hyphens to\n            underscores\n            '),
                                                     ('finalize_options',
                                                      [],
                                                      'nothing to do here'),
                                                     ('run',
                                                      [],
                                                      'ensure tests are capable of being run, then\n            run nose.main with a reconstructed argument list'),
                                                     ('cfgToArg', ['optname', 'value'], '')],
                                         'properties': ['description',
                                                        '__config',
                                                        '__parser',
                                                        'user_options',
                                                        'option_to_cmds',
                                                        'attr']},
             'nose.config.Config': {'bases': ['object'],
                                    'constructor': ['**kw'],
                                    'docstring': "nose configuration.\n\n    Instances of Config are used throughout nose to configure\n    behavior, including plugin lists. Here are the default values for\n    all config keys::\n\n      self.env = env = kw.pop('env', {})\n      self.args = ()\n      self.testMatch = re.compile(r'(?:^|[\\b_\\.%s-])[Tt]est' % os.sep)\n      self.addPaths = not env.get('NOSE_NOPATH', False)\n      self.configSection = 'nosetests'\n      self.debug = env.get('NOSE_DEBUG')\n      self.debugLog = env.get('NOSE_DEBUG_LOG')\n      self.exclude = None\n      self.getTestCaseNamesCompat = False\n      self.includeExe = env.get('NOSE_INCLUDE_EXE',\n                                sys.platform in exe_allowed_platforms)\n      self.ignoreFiles = (re.compile(r'^\\.'),\n                          re.compile(r'^_'),\n                          re.compile(r'^setup\\.py$')\n                          )\n      self.include = None\n      self.loggingConfig = None\n      self.logStream = sys.stderr\n      self.options = NoOptions()\n      self.parser = None\n      self.plugins = NoPlugins()\n      self.srcDirs = ('lib', 'src')\n      self.runOnInit = True\n      self.stopOnError = env.get('NOSE_STOP', False)\n      self.stream = sys.stderr\n      self.testNames = ()\n      self.verbosity = int(env.get('NOSE_VERBOSE', 1))\n      self.where = ()\n      self.py3where = ()\n      self.workingDir = None\n    ",
                                    'methods': [('__getstate__', [], ''),
                                                ('__setstate__', ['state'], ''),
                                                ('__repr__', [], ''),
                                                ('_parseArgs', ['argv', 'cfg_files'], ''),
                                                ('configure',
                                                 ['argv=None', 'doc=None'],
                                                 'Configure the nose running environment. Execute configure before\n        collecting tests with nose.TestCollector to enable output capture and\n        other features.\n        '),
                                                ('configureLogging',
                                                 [],
                                                 'Configure logging for nose, or optionally other packages. Any logger\n        name may be set with the debug option, and that logger will be set to\n        debug level and be assigned the same handler as the nose loggers, unless\n        it already has a handler.\n        '),
                                                ('configureWhere',
                                                 ['where'],
                                                 'Configure the working directory or directories for the test run.\n        '),
                                                ('default',
                                                 [],
                                                 'Reset all config values to defaults.\n        '),
                                                ('getParser',
                                                 ['doc=None'],
                                                 'Get the command line option parser.\n        '),
                                                ('help',
                                                 ['doc=None'],
                                                 'Return the generated help message\n        '),
                                                ('pluginOpts', ['parser'], ''),
                                                ('reset', [], ''),
                                                ('todict', [], ''),
                                                ('update', ['d'], '')],
                                    'properties': ['env',
                                                   'args',
                                                   'testMatchPat',
                                                   'testMatch',
                                                   'addPaths',
                                                   'configSection',
                                                   'debug',
                                                   'debugLog',
                                                   'exclude',
                                                   'getTestCaseNamesCompat',
                                                   'includeExe',
                                                   'ignoreFilesDefaultStrings',
                                                   'ignoreFiles',
                                                   'include',
                                                   'loggingConfig',
                                                   'logStream',
                                                   'options',
                                                   'parser',
                                                   'plugins',
                                                   'srcDirs',
                                                   'runOnInit',
                                                   'stopOnError',
                                                   'stream',
                                                   'testNames',
                                                   'verbosity',
                                                   'where',
                                                   'py3where',
                                                   'workingDir',
                                                   'traverseNamespace',
                                                   'firstPackageWins',
                                                   'parserClass',
                                                   'worker',
                                                   '_default',
                                                   '_orig',
                                                   '__str__']},
             'nose.config.ConfigError': {'bases': ['Exception'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'nose.config.ConfiguredDefaultsOptionParser': {'bases': ['object'],
                                                            'constructor': ['parser',
                                                                            'config_section',
                                                                            'error=None',
                                                                            'file_error=None'],
                                                            'docstring': '\n    Handler for options from commandline and config files.\n    ',
                                                            'methods': [('_configTuples',
                                                                         ['cfg', 'filename'],
                                                                         ''),
                                                                        ('_readFromFilenames',
                                                                         ['filenames'],
                                                                         ''),
                                                                        ('_readFromFileObject',
                                                                         ['fh'],
                                                                         ''),
                                                                        ('_readConfiguration',
                                                                         ['config_files'],
                                                                         ''),
                                                                        ('_processConfigValue',
                                                                         ['name',
                                                                          'value',
                                                                          'values',
                                                                          'parser'],
                                                                         ''),
                                                                        ('_applyConfigurationToValues',
                                                                         ['parser',
                                                                          'config',
                                                                          'values'],
                                                                         ''),
                                                                        ('parseArgsAndConfigFiles',
                                                                         ['args',
                                                                          'config_files'],
                                                                         '')],
                                                            'properties': ['_parser',
                                                                           '_config_section',
                                                                           '_error',
                                                                           '_file_error']},
             'nose.config.NoOptions': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': 'Options container that returns None for all options.\n    ',
                                       'methods': [('__getstate__', [], ''),
                                                   ('__setstate__', ['state'], ''),
                                                   ('__getnewargs__', [], ''),
                                                   ('__getattr__', ['attr'], ''),
                                                   ('__nonzero__', [], '')],
                                       'properties': []},
             'nose.config.NoSuchOptionError': {'bases': ['Exception'],
                                               'constructor': ['name'],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['name']},
             'nose.core.TestProgram': {'bases': ['unittest.TestProgram'],
                                       'constructor': ['module=None',
                                                       "defaultTest='.'",
                                                       'argv=None',
                                                       'testRunner=None',
                                                       'testLoader=None',
                                                       'env=None',
                                                       'config=None',
                                                       'suite=None',
                                                       'exit=True',
                                                       'plugins=None',
                                                       'addplugins=None'],
                                       'docstring': "Collect and run tests, returning success or failure.\n\n    The arguments to TestProgram() are the same as to\n    :func:`main()` and :func:`run()`:\n\n    * module: All tests are in this module (default: None)\n    * defaultTest: Tests to load (default: '.')\n    * argv: Command line arguments (default: None; sys.argv is read)\n    * testRunner: Test runner instance (default: None)\n    * testLoader: Test loader instance (default: None)\n    * env: Environment; ignored if config is provided (default: None;\n      os.environ is read)\n    * config: :class:`nose.config.Config` instance (default: None)\n    * suite: Suite or list of tests to run (default: None). Passing a\n      suite or lists of tests will bypass all test discovery and\n      loading. *ALSO NOTE* that if you pass a unittest.TestSuite\n      instance as the suite, context fixtures at the class, module and\n      package level will not be used, and many plugin hooks will not\n      be called. If you want normal nose behavior, either pass a list\n      of tests, or a fully-configured :class:`nose.suite.ContextSuite`.\n    * exit: Exit after running tests and printing report (default: True)\n    * plugins: List of plugins to use; ignored if config is provided\n      (default: load plugins with DefaultPluginManager)\n    * addplugins: List of **extra** plugins to use. Pass a list of plugin\n      instances in this argument to make custom plugins available while\n      still using the DefaultPluginManager.\n    ",
                                       'methods': [('makeConfig',
                                                    ['env', 'plugins=None'],
                                                    'Load a Config, pre-filled with user config files if any are\n        found.\n        '),
                                                   ('parseArgs',
                                                    ['argv'],
                                                    'Parse argv and env and configure running environment.\n        '),
                                                   ('createTests',
                                                    [],
                                                    'Create the tests to run. If a self.suite\n        is set, then that suite will be used. Otherwise, tests will be\n        loaded from the given test names (self.testNames) using the\n        test loader.\n        '),
                                                   ('runTests',
                                                    [],
                                                    'Run Tests. Returns true on success, false on failure, and sets\n        self.success to the same value.\n        '),
                                                   ('showPlugins',
                                                    [],
                                                    'Print list of available plugins.\n        '),
                                                   ('usage', [], '')],
                                       'properties': ['verbosity',
                                                      'config',
                                                      'suite',
                                                      'exit',
                                                      'testLoader',
                                                      'testNames',
                                                      'test',
                                                      'testRunner',
                                                      'success',
                                                      'usage']},
             'nose.core.TextTestRunner': {'bases': ['unittest.TextTestRunner'],
                                          'constructor': ['stream=sys.stderr',
                                                          'descriptions=1',
                                                          'verbosity=1',
                                                          'config=None'],
                                          'docstring': "Test runner that uses nose's TextTestResult to enable errorClasses,\n    as well as providing hooks for plugins to override or replace the test\n    output stream, results, and the test case itself.\n    ",
                                          'methods': [('_makeResult', [], ''),
                                                      ('run',
                                                       ['test'],
                                                       'Overrides to provide plugin hooks and defer all output to\n        the test result class.\n        ')],
                                          'properties': ['config', 'stream']},
             'nose.ext.dtcompat.DebugRunner': {'bases': ['nose.ext.dtcompat.DocTestRunner'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('run',
                                                            ['test',
                                                             'compileflags=None',
                                                             'out=None',
                                                             'clear_globs=True'],
                                                            ''),
                                                           ('report_unexpected_exception',
                                                            ['out',
                                                             'test',
                                                             'example',
                                                             'exc_info'],
                                                            ''),
                                                           ('report_failure',
                                                            ['out', 'test', 'example', 'got'],
                                                            '')],
                                               'properties': []},
             'nose.ext.dtcompat.DocFileCase': {'bases': ['nose.ext.dtcompat.DocTestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('id', [], ''),
                                                           ('__repr__', [], ''),
                                                           ('format_failure', ['err'], '')],
                                               'properties': ['__str__']},
             'nose.ext.dtcompat.DocTest': {'bases': [],
                                           'constructor': ['examples',
                                                           'globs',
                                                           'name',
                                                           'filename',
                                                           'lineno',
                                                           'docstring'],
                                           'docstring': '\n    A collection of doctest examples that should be run in a single\n    namespace.  Each `DocTest` defines the following attributes:\n\n      - examples: the list of examples.\n\n      - globs: The namespace (aka globals) that the examples should\n        be run in.\n\n      - name: A name identifying the DocTest (typically, the name of\n        the object whose docstring this DocTest was extracted from).\n\n      - filename: The name of the file that this DocTest was extracted\n        from, or `None` if the filename is unknown.\n\n      - lineno: The line number within filename where this DocTest\n        begins, or `None` if the line number is unavailable.  This\n        line number is zero-based, with respect to the beginning of\n        the file.\n\n      - docstring: The string that the examples were extracted from,\n        or `None` if the string is unavailable.\n    ',
                                           'methods': [('__repr__', [], ''),
                                                       ('__cmp__', ['other'], '')],
                                           'properties': ['examples',
                                                          'docstring',
                                                          'globs',
                                                          'name',
                                                          'filename',
                                                          'lineno']},
             'nose.ext.dtcompat.DocTestCase': {'bases': ['unittest.TestCase'],
                                               'constructor': ['test',
                                                               'optionflags=0',
                                                               'setUp=None',
                                                               'tearDown=None',
                                                               'checker=None'],
                                               'docstring': '',
                                               'methods': [('setUp', [], ''),
                                                           ('tearDown', [], ''),
                                                           ('runTest', [], ''),
                                                           ('format_failure', ['err'], ''),
                                                           ('debug', [], ''),
                                                           ('id', [], ''),
                                                           ('__repr__', [], ''),
                                                           ('shortDescription', [], '')],
                                               'properties': ['_dt_optionflags',
                                                              '_dt_checker',
                                                              '_dt_test',
                                                              '_dt_setUp',
                                                              '_dt_tearDown',
                                                              '__str__']},
             'nose.ext.dtcompat.DocTestFailure': {'bases': ['Exception'],
                                                  'constructor': ['test', 'example', 'got'],
                                                  'docstring': 'A DocTest example has failed in debugging mode.\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - excample: the Example object that failed\n\n    - got: the actual output\n    ',
                                                  'methods': [('__str__', [], '')],
                                                  'properties': ['test', 'example', 'got']},
             'nose.ext.dtcompat.DocTestFinder': {'bases': [],
                                                 'constructor': ['verbose=False',
                                                                 'parser=DocTestParser()',
                                                                 'recurse=True',
                                                                 '_namefilter=None',
                                                                 'exclude_empty=True'],
                                                 'docstring': '\n    A class used to extract the DocTests that are relevant to a given\n    object, from its docstring and the docstrings of its contained\n    objects.  Doctests can currently be extracted from the following\n    object types: modules, functions, classes, methods, staticmethods,\n    classmethods, and properties.\n    ',
                                                 'methods': [('find',
                                                              ['obj',
                                                               'name=None',
                                                               'module=None',
                                                               'globs=None',
                                                               'extraglobs=None'],
                                                              "\n        Return a list of the DocTests that are defined by the given\n        object's docstring, or by any of its contained objects'\n        docstrings.\n\n        The optional parameter `module` is the module that contains\n        the given object.  If the module is not specified or is None, then\n        the test finder will attempt to automatically determine the\n        correct module.  The object's module is used:\n\n            - As a default namespace, if `globs` is not specified.\n            - To prevent the DocTestFinder from extracting DocTests\n              from objects that are imported from other modules.\n            - To find the name of the file containing the object.\n            - To help find the line number of the object within its\n              file.\n\n        Contained objects whose module does not match `module` are ignored.\n\n        If `module` is False, no attempt to find the module will be made.\n        This is obscure, of use mostly in tests:  if `module` is False, or\n        is None but cannot be found automatically, then all objects are\n        considered to belong to the (non-existent) module, so all contained\n        objects will (recursively) be searched for doctests.\n\n        The globals for each DocTest is formed by combining `globs`\n        and `extraglobs` (bindings in `extraglobs` override bindings\n        in `globs`).  A new copy of the globals dictionary is created\n        for each DocTest.  If `globs` is not specified, then it\n        defaults to the module's `__dict__`, if specified, or {}\n        otherwise.  If `extraglobs` is not specified, then it defaults\n        to {}.\n\n        "),
                                                             ('_filter',
                                                              ['obj', 'prefix', 'base'],
                                                              '\n        Return true if the given object should not be examined.\n        '),
                                                             ('_from_module',
                                                              ['module', 'object'],
                                                              '\n        Return true if the given object is defined in the given\n        module.\n        '),
                                                             ('_find',
                                                              ['tests',
                                                               'obj',
                                                               'name',
                                                               'module',
                                                               'source_lines',
                                                               'globs',
                                                               'seen'],
                                                              '\n        Find tests for the given object and any contained objects, and\n        add them to `tests`.\n        '),
                                                             ('_get_test',
                                                              ['obj',
                                                               'name',
                                                               'module',
                                                               'globs',
                                                               'source_lines'],
                                                              '\n        Return a DocTest for the given object, if it defines a docstring;\n        otherwise, return None.\n        '),
                                                             ('_find_lineno',
                                                              ['obj', 'source_lines'],
                                                              "\n        Return a line number of the given object's docstring.  Note:\n        this method assumes that the object has a docstring.\n        ")],
                                                 'properties': ['_parser',
                                                                '_verbose',
                                                                '_recurse',
                                                                '_exclude_empty',
                                                                '_namefilter']},
             'nose.ext.dtcompat.DocTestParser': {'bases': [],
                                                 'constructor': [],
                                                 'docstring': '\n    A class used to parse strings containing doctest examples.\n    ',
                                                 'methods': [('parse',
                                                              ['string', "name='<string>'"],
                                                              '\n        Divide the given string into examples and intervening text,\n        and return them as a list of alternating Examples and strings.\n        Line numbers for the Examples are 0-based.  The optional\n        argument `name` is a name identifying this string, and is only\n        used for error messages.\n        '),
                                                             ('get_doctest',
                                                              ['string',
                                                               'globs',
                                                               'name',
                                                               'filename',
                                                               'lineno'],
                                                              '\n        Extract all doctest examples from the given string, and\n        collect them into a `DocTest` object.\n\n        `globs`, `name`, `filename`, and `lineno` are attributes for\n        the new `DocTest` object.  See the documentation for `DocTest`\n        for more information.\n        '),
                                                             ('get_examples',
                                                              ['string', "name='<string>'"],
                                                              '\n        Extract all doctest examples from the given string, and return\n        them as a list of `Example` objects.  Line numbers are\n        0-based, because it\'s most common in doctests that nothing\n        interesting appears on the same line as opening triple-quote,\n        and so the first interesting line is called "line 1" then.\n\n        The optional argument `name` is a name identifying this\n        string, and is only used for error messages.\n        '),
                                                             ('_parse_example',
                                                              ['m', 'name', 'lineno'],
                                                              "\n        Given a regular expression match from `_EXAMPLE_RE` (`m`),\n        return a pair `(source, want)`, where `source` is the matched\n        example's source code (with prompts and indentation stripped);\n        and `want` is the example's expected output (with indentation\n        stripped).\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                             ('_find_options',
                                                              ['source', 'name', 'lineno'],
                                                              "\n        Return a dictionary containing option overrides extracted from\n        option directives in the given source string.\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                             ('_min_indent',
                                                              ['s'],
                                                              'Return the minimum indentation of any non-blank line in `s`'),
                                                             ('_check_prompt_blank',
                                                              ['lines',
                                                               'indent',
                                                               'name',
                                                               'lineno'],
                                                              '\n        Given the lines of a source string (including prompts and\n        leading indentation), check to make sure that every prompt is\n        followed by a space character.  If any line is not followed by\n        a space character, then raise ValueError.\n        '),
                                                             ('_check_prefix',
                                                              ['lines',
                                                               'prefix',
                                                               'name',
                                                               'lineno'],
                                                              '\n        Check that every line in the given list starts with the given\n        prefix; if any line does not, then raise a ValueError.\n        ')],
                                                 'properties': ['_EXAMPLE_RE',
                                                                '_EXCEPTION_RE',
                                                                '_IS_BLANK_OR_COMMENT',
                                                                '_OPTION_DIRECTIVE_RE',
                                                                '_INDENT_RE']},
             'nose.ext.dtcompat.DocTestRunner': {'bases': [],
                                                 'constructor': ['checker=None',
                                                                 'verbose=None',
                                                                 'optionflags=0'],
                                                 'docstring': '',
                                                 'methods': [('report_start',
                                                              ['out', 'test', 'example'],
                                                              '\n        Report that the test runner is about to process the given\n        example.  (Only displays a message if verbose=True)\n        '),
                                                             ('report_success',
                                                              ['out',
                                                               'test',
                                                               'example',
                                                               'got'],
                                                              '\n        Report that the given example ran successfully.  (Only\n        displays a message if verbose=True)\n        '),
                                                             ('report_failure',
                                                              ['out',
                                                               'test',
                                                               'example',
                                                               'got'],
                                                              '\n        Report that the given example failed.\n        '),
                                                             ('report_unexpected_exception',
                                                              ['out',
                                                               'test',
                                                               'example',
                                                               'exc_info'],
                                                              '\n        Report that the given example raised an unexpected exception.\n        '),
                                                             ('_failure_header',
                                                              ['test', 'example'],
                                                              ''),
                                                             ('__run',
                                                              ['test', 'compileflags', 'out'],
                                                              '\n        Run the examples in `test`.  Write the outcome of each example\n        with one of the `DocTestRunner.report_*` methods, using the\n        writer function `out`.  `compileflags` is the set of compiler\n        flags that should be used to execute examples.  Return a tuple\n        `(f, t)`, where `t` is the number of examples tried, and `f`\n        is the number of examples that failed.  The examples are run\n        in the namespace `test.globs`.\n        '),
                                                             ('__record_outcome',
                                                              ['test', 'f', 't'],
                                                              '\n        Record the fact that the given DocTest (`test`) generated `f`\n        failures out of `t` tried examples.\n        '),
                                                             ('__patched_linecache_getlines',
                                                              ['filename'],
                                                              ''),
                                                             ('run',
                                                              ['test',
                                                               'compileflags=None',
                                                               'out=None',
                                                               'clear_globs=True'],
                                                              '\n        Run the examples in `test`, and display the results using the\n        writer function `out`.\n\n        The examples are run in the namespace `test.globs`.  If\n        `clear_globs` is true (the default), then this namespace will\n        be cleared after the test runs, to help with garbage\n        collection.  If you would like to examine the namespace after\n        the test completes, then use `clear_globs=False`.\n\n        `compileflags` gives the set of flags that should be used by\n        the Python compiler when running the examples.  If not\n        specified, then it will default to the set of future-import\n        flags that apply to `globs`.\n\n        The output of each example is checked using\n        `DocTestRunner.check_output`, and the results are formatted by\n        the `DocTestRunner.report_*` methods.\n        '),
                                                             ('summarize',
                                                              ['verbose=None'],
                                                              "\n        Print a summary of all the test cases that have been run by\n        this DocTestRunner, and return a tuple `(f, t)`, where `f` is\n        the total number of failed examples, and `t` is the total\n        number of tried examples.\n\n        The optional `verbose` argument controls how detailed the\n        summary is.  If the verbosity is not specified, then the\n        DocTestRunner's verbosity is used.\n        "),
                                                             ('merge', ['other'], '')],
                                                 'properties': ['DIVIDER',
                                                                '_checker',
                                                                '_verbose',
                                                                'optionflags',
                                                                'original_optionflags',
                                                                'tries',
                                                                'failures',
                                                                '_name2ft',
                                                                '_fakeout',
                                                                '__LINECACHE_FILENAME_RE',
                                                                'test',
                                                                'debugger',
                                                                'save_linecache_getlines']},
             'nose.ext.dtcompat.Example': {'bases': [],
                                           'constructor': ['source',
                                                           'want',
                                                           'exc_msg=None',
                                                           'lineno=0',
                                                           'indent=0',
                                                           'options=None'],
                                           'docstring': "\n    A single doctest example, consisting of source code and expected\n    output.  `Example` defines the following attributes:\n\n      - source: A single Python statement, always ending with a newline.\n        The constructor adds a newline if needed.\n\n      - want: The expected output from running the source code (either\n        from stdout, or a traceback in case of exception).  `want` ends\n        with a newline unless it's empty, in which case it's an empty\n        string.  The constructor adds a newline if needed.\n\n      - exc_msg: The exception message generated by the example, if\n        the example is expected to generate an exception; or `None` if\n        it is not expected to generate an exception.  This exception\n        message is compared against the return value of\n        `traceback.format_exception_only()`.  `exc_msg` ends with a\n        newline unless it's `None`.  The constructor adds a newline\n        if needed.\n\n      - lineno: The line number within the DocTest string containing\n        this Example where the Example begins.  This line number is\n        zero-based, with respect to the beginning of the DocTest.\n\n      - indent: The example's indentation in the DocTest string.\n        I.e., the number of space characters that preceed the\n        example's first prompt.\n\n      - options: A dictionary mapping from option flags to True or\n        False, which is used to override default options for this\n        example.  Any option flags not contained in this dictionary\n        are left at their default value (as specified by the\n        DocTestRunner's optionflags).  By default, no options are set.\n    ",
                                           'methods': [],
                                           'properties': ['source',
                                                          'want',
                                                          'lineno',
                                                          'indent',
                                                          'options',
                                                          'exc_msg']},
             'nose.ext.dtcompat.OutputChecker': {'bases': [],
                                                 'constructor': [],
                                                 'docstring': '\n    A class used to check the whether the actual output from a doctest\n    example matches the expected output.  `OutputChecker` defines two\n    methods: `check_output`, which compares a given pair of outputs,\n    and returns true if they match; and `output_difference`, which\n    returns a string describing the differences between two outputs.\n    ',
                                                 'methods': [('check_output',
                                                              ['want', 'got', 'optionflags'],
                                                              '\n        Return True iff the actual output from an example (`got`)\n        matches the expected output (`want`).  These strings are\n        always considered to match if they are identical; but\n        depending on what option flags the test runner is using,\n        several non-exact match types are also possible.  See the\n        documentation for `TestRunner` for more information about\n        option flags.\n        '),
                                                             ('_do_a_fancy_diff',
                                                              ['want', 'got', 'optionflags'],
                                                              ''),
                                                             ('output_difference',
                                                              ['example',
                                                               'got',
                                                               'optionflags'],
                                                              '\n        Return a string describing the differences between the\n        expected output for a given example (`example`) and the actual\n        output (`got`).  `optionflags` is the set of option flags used\n        to compare `want` and `got`.\n        ')],
                                                 'properties': []},
             'nose.ext.dtcompat.Tester': {'bases': [],
                                          'constructor': ['mod=None',
                                                          'globs=None',
                                                          'verbose=None',
                                                          'isprivate=None',
                                                          'optionflags=0'],
                                          'docstring': '',
                                          'methods': [('runstring', ['s', 'name'], ''),
                                                      ('rundoc',
                                                       ['object', 'name=None', 'module=None'],
                                                       ''),
                                                      ('rundict',
                                                       ['d', 'name', 'module=None'],
                                                       ''),
                                                      ('run__test__', ['d', 'name'], ''),
                                                      ('summarize', ['verbose=None'], ''),
                                                      ('merge', ['other'], '')],
                                          'properties': ['globs',
                                                         'verbose',
                                                         'isprivate',
                                                         'optionflags',
                                                         'testfinder',
                                                         'testrunner']},
             'nose.ext.dtcompat.UnexpectedException': {'bases': ['Exception'],
                                                       'constructor': ['test',
                                                                       'example',
                                                                       'exc_info'],
                                                       'docstring': 'A DocTest example has encountered an unexpected exception\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - excample: the Example object that failed\n\n    - exc_info: the exception info\n    ',
                                                       'methods': [('__str__', [], '')],
                                                       'properties': ['test',
                                                                      'example',
                                                                      'exc_info']},
             'nose.ext.dtcompat._OutputRedirectingPdb': {'bases': ['pdb.Pdb'],
                                                         'constructor': ['out'],
                                                         'docstring': '\n    A specialized version of the python debugger that redirects stdout\n    to a given stream when interacting with the user.  Stdout is *not*\n    redirected when traced code is executed.\n    ',
                                                         'methods': [('trace_dispatch',
                                                                      ['*args'],
                                                                      '')],
                                                         'properties': ['__out']},
             'nose.ext.dtcompat._SpoofOut': {'bases': ['StringIO.StringIO'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('getvalue', [], ''),
                                                         ('truncate', ['size=None'], '')],
                                             'properties': ['softspace']},
             'nose.failure.Failure': {'bases': ['unittest.TestCase'],
                                      'constructor': ['exc_class',
                                                      'exc_val',
                                                      'tb=None',
                                                      'address=None'],
                                      'docstring': 'Unloadable or unexecutable test.\n\n    A Failure case is placed in a test suite to indicate the presence of a\n    test that could not be loaded or executed. A common example is a test\n    module that fails to import.\n    \n    ',
                                      'methods': [('__str__', [], ''),
                                                  ('address', [], ''),
                                                  ('runTest', [], '')],
                                      'properties': ['__test__',
                                                     'exc_class',
                                                     'exc_val',
                                                     'tb',
                                                     '_address']},
             'nose.importer.Importer': {'bases': ['object'],
                                        'constructor': ['config=None'],
                                        'docstring': 'An importer class that does only path-specific imports. That\n    is, the given module is not searched for on sys.path, but only at\n    the path or in the directory specified.\n    ',
                                        'methods': [('importFromPath',
                                                     ['path', 'fqname'],
                                                     'Import a dotted-name package whose tail is at path. In other words,\n        given foo.bar and path/to/foo/bar.py, import foo from path/to/foo then\n        bar from path/to/foo/bar, returning bar.\n        '),
                                                    ('importFromDir',
                                                     ['dir', 'fqname'],
                                                     'Import a module *only* from path, ignoring sys.path and\n        reloading if the version in sys.modules is not the one we want.\n        '),
                                                    ('sameModule', ['mod', 'filename'], '')],
                                        'properties': ['config']},
             'nose.inspector.Expander': {'bases': [],
                                         'constructor': ['locals', 'globals'],
                                         'docstring': 'Simple expression expander. Uses tokenize to find the names and\n    expands any that can be looked up in the frame.\n    ',
                                         'methods': [('__call__',
                                                      ['ttype', 'tok', 'start', 'end', 'line'],
                                                      '')],
                                         'properties': ['locals',
                                                        'globals',
                                                        'lpos',
                                                        'expanded_source']},
             'nose.loader.TestLoader': {'bases': ['unittest.TestLoader'],
                                        'constructor': ['config=None',
                                                        'importer=None',
                                                        'workingDir=None',
                                                        'selector=None'],
                                        'docstring': 'Test loader that extends unittest.TestLoader to:\n\n    * Load tests from test-like functions and classes that are not\n      unittest.TestCase subclasses\n    * Find and load test modules in a directory\n    * Support tests that are generators\n    * Support easy extensions of or changes to that behavior through plugins\n    ',
                                        'methods': [('getTestCaseNames',
                                                     ['testCaseClass'],
                                                     'Override to select with selector, unless\n        config.getTestCaseNamesCompat is True\n        '),
                                                    ('loadTestsFromDir',
                                                     ['path'],
                                                     'Load tests from the directory at path. This is a generator\n        -- each suite of tests from a module or other file is yielded\n        and is expected to be executed before the next file is\n        examined.\n        '),
                                                    ('loadTestsFromFile',
                                                     ['filename'],
                                                     'Load tests from a non-module file. Default is to raise a\n        ValueError; plugins may implement `loadTestsFromFile` to\n        provide a list of tests loaded from the file.\n        '),
                                                    ('loadTestsFromGenerator',
                                                     ['generator', 'module'],
                                                     'Lazy-load tests from a generator function. The generator function\n        may yield either:\n\n        * a callable, or\n        * a function name resolvable within the same module\n        '),
                                                    ('loadTestsFromGeneratorMethod',
                                                     ['generator', 'cls'],
                                                     'Lazy-load tests from a generator method.\n\n        This is more complicated than loading from a generator function,\n        since a generator method may yield:\n\n        * a function\n        * a bound or unbound method, or\n        * a method name\n        '),
                                                    ('loadTestsFromModule',
                                                     ['module',
                                                      'path=None',
                                                      'discovered=False'],
                                                     'Load all tests from module and return a suite containing\n        them. If the module has been discovered and is not test-like,\n        the suite will be empty by default, though plugins may add\n        their own tests.\n        '),
                                                    ('loadTestsFromName',
                                                     ['name',
                                                      'module=None',
                                                      'discovered=False'],
                                                     'Load tests from the entity with the given name.\n\n        The name may indicate a file, directory, module, or any object\n        within a module. See `nose.util.split_test_name` for details on\n        test name parsing.\n        '),
                                                    ('loadTestsFromNames',
                                                     ['names', 'module=None'],
                                                     'Load tests from all names, returning a suite containing all\n        tests.\n        '),
                                                    ('loadTestsFromTestCase',
                                                     ['testCaseClass'],
                                                     'Load tests from a unittest.TestCase subclass.\n        '),
                                                    ('loadTestsFromTestClass',
                                                     ['cls'],
                                                     "Load tests from a test class that is *not* a unittest.TestCase\n        subclass.\n\n        In this case, we can't depend on the class's `__init__` taking method\n        name arguments, so we have to compose a MethodTestCase for each\n        method in the class that looks testlike.\n        "),
                                                    ('makeTest', ['obj', 'parent=None'], ''),
                                                    ('_makeTest',
                                                     ['obj', 'parent=None'],
                                                     'Given a test object and its parent, return a test case\n        or test suite.\n        '),
                                                    ('resolve',
                                                     ['name', 'module'],
                                                     'Resolve name within module\n        '),
                                                    ('parseGeneratedTest',
                                                     ['test'],
                                                     'Given the yield value of a test generator, return a func and args.\n\n        This is used in the two loadTestsFromGenerator* methods.\n\n        ')],
                                        'properties': ['config',
                                                       'importer',
                                                       'workingDir',
                                                       'selector',
                                                       'suiteClass']},
             'nose.plugins.allmodules.AllModules': {'bases': ['nose.plugins.base.Plugin'],
                                                    'constructor': [],
                                                    'docstring': 'Collect tests from all python modules.\n    ',
                                                    'methods': [('options',
                                                                 ['parser', 'env'],
                                                                 'Register commandline options.\n        '),
                                                                ('wantFile',
                                                                 ['file'],
                                                                 'Override to return True for all files ending with .py'),
                                                                ('wantModule',
                                                                 ['module'],
                                                                 'Override return True for all modules')],
                                                    'properties': []},
             'nose.plugins.attrib.AttributeSelector': {'bases': ['nose.plugins.base.Plugin'],
                                                       'constructor': [],
                                                       'docstring': 'Selects test cases to be run based on their attributes.\n    ',
                                                       'methods': [('options',
                                                                    ['parser', 'env'],
                                                                    'Register command line options'),
                                                                   ('configure',
                                                                    ['options', 'config'],
                                                                    'Configure the plugin and system, based on selected options.\n\n        attr and eval_attr may each be lists.\n\n        self.attribs will be a list of lists of tuples. In that list, each\n        list is a group of attributes, all of which must match for the rule to\n        match.\n        '),
                                                                   ('validateAttrib',
                                                                    ['method', 'cls=None'],
                                                                    'Verify whether a method has the required attributes\n        The method is considered a match if it matches all attributes\n        for any attribute group.\n        .'),
                                                                   ('wantFunction',
                                                                    ['function'],
                                                                    'Accept the function if its attributes match.\n        '),
                                                                   ('wantMethod',
                                                                    ['method'],
                                                                    'Accept the method if its attributes match.\n        ')],
                                                       'properties': ['attribs', 'enabled']},
             'nose.plugins.attrib.ContextHelper': {'bases': [],
                                                   'constructor': ['method', 'cls'],
                                                   'docstring': 'Object that can act as context dictionary for eval and looks up\n    names as attributes on a method/ function and its class. \n    ',
                                                   'methods': [('__getitem__', ['name'], '')],
                                                   'properties': ['method', 'cls']},
             'nose.plugins.base.IPluginInterface': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': '\n    IPluginInterface describes the plugin API. Do not subclass or use this\n    class directly.\n    ',
                                                    'methods': [('__new__',
                                                                 ['*arg', '**kw'],
                                                                 ''),
                                                                ('addOptions',
                                                                 ['parser', 'env'],
                                                                 'Called to allow plugin to register command-line options with the\n        parser. DO NOT return a value from this method unless you want to stop\n        all other plugins from setting their options.\n\n        .. warning ::\n\n           DEPRECATED -- implement\n           :meth:`options <nose.plugins.base.IPluginInterface.options>` instead.\n        '),
                                                                ('addDeprecated',
                                                                 ['test'],
                                                                 'Called when a deprecated test is seen. DO NOT return a value\n        unless you want to stop other plugins from seeing the deprecated\n        test.\n\n        .. warning :: DEPRECATED -- check error class in addError instead\n        '),
                                                                ('addError',
                                                                 ['test', 'err'],
                                                                 'Called when a test raises an uncaught exception. DO NOT return a\n        value unless you want to stop other plugins from seeing that the\n        test has raised an error.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`            \n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('addFailure',
                                                                 ['test', 'err'],
                                                                 'Called when a test fails. DO NOT return a value unless you\n        want to stop other plugins from seeing that the test has failed.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        :param err: 3-tuple\n        :type err: sys.exc_info() tuple\n        '),
                                                                ('addSkip',
                                                                 ['test'],
                                                                 'Called when a test is skipped. DO NOT return a value unless\n        you want to stop other plugins from seeing the skipped test.\n\n        .. warning:: DEPRECATED -- check error class in addError instead\n        '),
                                                                ('addSuccess',
                                                                 ['test'],
                                                                 'Called when a test passes. DO NOT return a value unless you\n        want to stop other plugins from seeing the passing test.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        '),
                                                                ('afterContext',
                                                                 [],
                                                                 'Called after a context (generally a module) has been\n        lazy-loaded, imported, setup, had its tests loaded and\n        executed, and torn down.\n        '),
                                                                ('afterDirectory',
                                                                 ['path'],
                                                                 'Called after all tests have been loaded from directory at path\n        and run.\n\n        :param path: the directory that has finished processing\n        :type path: string\n        '),
                                                                ('afterImport',
                                                                 ['filename', 'module'],
                                                                 'Called after module is imported from filename. afterImport\n        is called even if the import failed.\n\n        :param filename: The file that was loaded\n        :type filename: string\n        :param filename: The name of the module\n        :type module: string\n        '),
                                                                ('afterTest',
                                                                 ['test'],
                                                                 'Called after the test has been run and the result recorded\n        (after stopTest).\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        '),
                                                                ('beforeContext',
                                                                 [],
                                                                 "Called before a context (generally a module) is\n        examined. Because the context is not yet loaded, plugins don't\n        get to know what the context is; so any context operations\n        should use a stack that is pushed in `beforeContext` and popped\n        in `afterContext` to ensure they operate symmetrically.\n\n        `beforeContext` and `afterContext` are mainly useful for tracking\n        and restoring global state around possible changes from within a\n        context, whatever the context may be. If you need to operate on\n        contexts themselves, see `startContext` and `stopContext`, which\n        are passed the context in question, but are called after\n        it has been loaded (imported in the module case).\n        "),
                                                                ('beforeDirectory',
                                                                 ['path'],
                                                                 'Called before tests are loaded from directory at path.\n\n        :param path: the directory that is about to be processed\n        '),
                                                                ('beforeImport',
                                                                 ['filename', 'module'],
                                                                 'Called before module is imported from filename.\n\n        :param filename: The file that will be loaded\n        :param module: The name of the module found in file\n        :type module: string\n        '),
                                                                ('beforeTest',
                                                                 ['test'],
                                                                 'Called before the test is run (before startTest).\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        '),
                                                                ('begin',
                                                                 [],
                                                                 'Called before any tests are collected or run. Use this to\n        perform any setup needed before testing begins.\n        '),
                                                                ('configure',
                                                                 ['options', 'conf'],
                                                                 'Called after the command line has been parsed, with the\n        parsed options and the config container. Here, implement any\n        config storage or changes to state or operation that are set\n        by command line options.\n\n        DO NOT return a value from this method unless you want to\n        stop all other plugins from being configured.\n        '),
                                                                ('finalize',
                                                                 ['result'],
                                                                 'Called after all report output, including output from all\n        plugins, has been sent to the stream. Use this to print final\n        test results or perform final cleanup. Return None to allow\n        other plugins to continue printing, or any other value to stop\n        them.\n\n        :param result: test result object\n        \n        .. Note:: When tests are run under a test runner other than\n           :class:`nose.core.TextTestRunner`, such as\n           via ``python setup.py test``, this method may be called\n           **before** the default report output is sent.\n        '),
                                                                ('describeTest',
                                                                 ['test'],
                                                                 'Return a test description.\n\n        Called by :meth:`nose.case.Test.shortDescription`.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        '),
                                                                ('formatError',
                                                                 ['test', 'err'],
                                                                 'Called in result.addError, before plugin.addError. If you\n        want to replace or modify the error tuple, return a new error\n        tuple.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('formatFailure',
                                                                 ['test', 'err'],
                                                                 "Called in result.addFailure, before plugin.addFailure. If you\n        want to replace or modify the error tuple, return a new error\n        tuple. Because this method is chainable, you must return the\n        test as well, so you'll return something like::\n\n          return (test, err)\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        "),
                                                                ('handleError',
                                                                 ['test', 'err'],
                                                                 'Called on addError. To handle the error yourself and prevent normal\n        error processing, return a true value.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('handleFailure',
                                                                 ['test', 'err'],
                                                                 'Called on addFailure. To handle the failure yourself and\n        prevent normal failure processing, return a true value.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('loadTestsFromDir',
                                                                 ['path'],
                                                                 'Return iterable of tests from a directory. May be a\n        generator.  Each item returned must be a runnable\n        unittest.TestCase (or subclass) instance or suite instance.\n        Return None if your plugin cannot collect any tests from\n        directory.\n\n        :param  path: The path to the directory.\n        '),
                                                                ('loadTestsFromModule',
                                                                 ['module', 'path=None'],
                                                                 'Return iterable of tests in a module. May be a\n        generator. Each item returned must be a runnable\n        unittest.TestCase (or subclass) instance.\n        Return None if your plugin cannot\n        collect any tests from module.\n\n        :param module: The module object\n        :type module: python module\n        :param path: the path of the module to search, to distinguish from\n            namespace package modules\n\n            .. note::\n\n               NEW. The ``path`` parameter will only be passed by nose 0.11\n               or above.\n        '),
                                                                ('loadTestsFromName',
                                                                 ['name',
                                                                  'module=None',
                                                                  'importPath=None'],
                                                                 'Return tests in this file or module. Return None if you are not able\n        to load any tests, or an iterable if you are. May be a\n        generator.\n\n        :param name: The test name. May be a file or module name plus a test\n            callable. Use split_test_name to split into parts. Or it might\n            be some crazy name of your own devising, in which case, do\n            whatever you want.\n        :param module: Module from which the name is to be loaded\n        :param importPath: Path from which file (must be a python module) was\n            found\n\n            .. warning:: DEPRECATED: this argument will NOT be passed.\n        '),
                                                                ('loadTestsFromNames',
                                                                 ['names', 'module=None'],
                                                                 'Return a tuple of (tests loaded, remaining names). Return\n        None if you are not able to load any tests. Multiple plugins\n        may implement loadTestsFromNames; the remaining name list from\n        each will be passed to the next as input.\n\n        :param names: List of test names.\n        :type names: iterable\n        :param module: Module from which the names are to be loaded\n        '),
                                                                ('loadTestsFromFile',
                                                                 ['filename'],
                                                                 'Return tests in this file. Return None if you are not\n        interested in loading any tests, or an iterable if you are and\n        can load some. May be a generator. *If you are interested in\n        loading tests from the file and encounter no errors, but find\n        no tests, yield False or return [False].*\n\n        .. Note:: This method replaces loadTestsFromPath from the 0.9\n                  API.\n\n        :param filename: The full path to the file or directory.\n        '),
                                                                ('loadTestsFromPath',
                                                                 ['path'],
                                                                 '\n        .. warning:: DEPRECATED -- use loadTestsFromFile instead\n        '),
                                                                ('loadTestsFromTestCase',
                                                                 ['cls'],
                                                                 'Return tests in this test case class. Return None if you are\n        not able to load any tests, or an iterable if you are. May be a\n        generator.\n\n        :param cls: The test case class. Must be subclass of\n           :class:`unittest.TestCase`.\n        '),
                                                                ('loadTestsFromTestClass',
                                                                 ['cls'],
                                                                 'Return tests in this test class. Class will *not* be a\n        unittest.TestCase subclass. Return None if you are not able to\n        load any tests, an iterable if you are. May be a generator.\n\n        :param cls: The test case class. Must be **not** be subclass of\n           :class:`unittest.TestCase`.\n        '),
                                                                ('makeTest',
                                                                 ['obj', 'parent'],
                                                                 'Given an object and its parent, return or yield one or more\n        test cases. Each test must be a unittest.TestCase (or subclass)\n        instance. This is called before default test loading to allow\n        plugins to load an alternate test case or cases for an\n        object. May be a generator.\n\n        :param obj: The object to be made into a test\n        :param parent: The parent of obj (eg, for a method, the class)\n        '),
                                                                ('options',
                                                                 ['parser', 'env'],
                                                                 'Called to allow plugin to register command line\n        options with the parser.\n\n        DO NOT return a value from this method unless you want to stop\n        all other plugins from setting their options.\n\n        :param parser: options parser instance\n        :type parser: :class:`ConfigParser.ConfigParser`\n        :param env: environment, default is os.environ\n        '),
                                                                ('prepareTest',
                                                                 ['test'],
                                                                 'Called before the test is run by the test runner. Please\n        note the article *the* in the previous sentence: prepareTest\n        is called *only once*, and is passed the test case or test\n        suite that the test runner will execute. It is *not* called\n        for each individual test case. If you return a non-None value,\n        that return value will be run as the test. Use this hook to\n        wrap or decorate the test with another function. If you need\n        to modify or wrap individual test cases, use `prepareTestCase`\n        instead.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        '),
                                                                ('prepareTestCase',
                                                                 ['test'],
                                                                 'Prepare or wrap an individual test case. Called before\n        execution of the test. The test passed here is a\n        nose.case.Test instance; the case to be executed is in the\n        test attribute of the passed case. To modify the test to be\n        run, you should return a callable that takes one argument (the\n        test result object) -- it is recommended that you *do not*\n        side-effect the nose.case.Test instance you have been passed.\n\n        Keep in mind that when you replace the test callable you are\n        replacing the run() method of the test case -- including the\n        exception handling and result calls, etc.\n\n        :param test: the test case\n        :type test: :class:`nose.case.Test`\n        '),
                                                                ('prepareTestLoader',
                                                                 ['loader'],
                                                                 'Called before tests are loaded. To replace the test loader,\n        return a test loader. To allow other plugins to process the\n        test loader, return None. Only one plugin may replace the test\n        loader. Only valid when using nose.TestProgram.\n\n        :param loader: :class:`nose.loader.TestLoader` \n             (or other loader) instance\n        '),
                                                                ('prepareTestResult',
                                                                 ['result'],
                                                                 "Called before the first test is run. To use a different\n        test result handler for all tests than the given result,\n        return a test result handler. NOTE however that this handler\n        will only be seen by tests, that is, inside of the result\n        proxy system. The TestRunner and TestProgram -- whether nose's\n        or other -- will continue to see the original result\n        handler. For this reason, it is usually better to monkeypatch\n        the result (for instance, if you want to handle some\n        exceptions in a unique way). Only one plugin may replace the\n        result, but many may monkeypatch it. If you want to\n        monkeypatch and stop other plugins from doing so, monkeypatch\n        and return the patched result.\n\n        :param result: :class:`nose.result.TextTestResult` \n             (or other result) instance\n        "),
                                                                ('prepareTestRunner',
                                                                 ['runner'],
                                                                 'Called before tests are run. To replace the test runner,\n        return a test runner. To allow other plugins to process the\n        test runner, return None. Only valid when using nose.TestProgram.\n\n        :param runner: :class:`nose.core.TextTestRunner` \n             (or other runner) instance\n        '),
                                                                ('report',
                                                                 ['stream'],
                                                                 "Called after all error output has been printed. Print your\n        plugin's report to the provided stream. Return None to allow\n        other plugins to print reports, any other value to stop them.\n\n        :param stream: stream object; send your output here\n        :type stream: file-like object\n        "),
                                                                ('setOutputStream',
                                                                 ['stream'],
                                                                 'Called before test output begins. To direct test output to a\n        new stream, return a stream object, which must implement a\n        `write(msg)` method. If you only want to note the stream, not\n        capture or redirect it, then return None.\n\n        :param stream: stream object; send your output here\n        :type stream: file-like object\n        '),
                                                                ('startContext',
                                                                 ['context'],
                                                                 'Called before context setup and the running of tests in the\n        context. Note that tests have already been *loaded* from the\n        context before this call.\n\n        :param context: the context about to be setup. May be a module or\n             class, or any other object that contains tests.\n        '),
                                                                ('startTest',
                                                                 ['test'],
                                                                 'Called before each test is run. DO NOT return a value unless\n        you want to stop other plugins from seeing the test start.\n\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('stopContext',
                                                                 ['context'],
                                                                 'Called after the tests in a context have run and the\n        context has been torn down.\n\n        :param context: the context about to be setup. May be a module or\n             class, or any other object that contains tests.\n        '),
                                                                ('stopTest',
                                                                 ['test'],
                                                                 'Called after each test is run. DO NOT return a value unless\n        you want to stop other plugins from seeing that the test has stopped.\n\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('testName',
                                                                 ['test'],
                                                                 'Return a short test name. Called by `nose.case.Test.__str__`.\n\n        :param err: sys.exc_info() tuple\n        :type err: 3-tuple\n        '),
                                                                ('wantClass',
                                                                 ['cls'],
                                                                 "Return true if you want the main test selector to collect\n        tests from this class, false if you don't, and None if you don't\n        care.\n\n        :param cls: The class being examined by the selector\n        "),
                                                                ('wantDirectory',
                                                                 ['dirname'],
                                                                 "Return true if you want test collection to descend into this\n        directory, false if you do not, and None if you don't care.\n\n        :param dirname: Full path to directory being examined by the selector\n        "),
                                                                ('wantFile',
                                                                 ['file'],
                                                                 "Return true if you want to collect tests from this file,\n        false if you do not and None if you don't care.\n\n        Change from 0.9: The optional package parameter is no longer passed.\n\n        :param file: Full path to file being examined by the selector\n        "),
                                                                ('wantFunction',
                                                                 ['function'],
                                                                 "Return true to collect this function as a test, false to\n        prevent it from being collected, and None if you don't care.\n\n        :param function: The function object being examined by the selector\n        "),
                                                                ('wantMethod',
                                                                 ['method'],
                                                                 "Return true to collect this method as a test, false to\n        prevent it from being collected, and None if you don't care.\n        \n        :param method: The method object being examined by the selector\n        :type method: unbound method\n        "),
                                                                ('wantModule',
                                                                 ['module'],
                                                                 "Return true if you want to collection to descend into this\n        module, false to prevent the collector from descending into the\n        module, and None if you don't care.\n\n        :param module: The module object being examined by the selector\n        :type module: python module\n        "),
                                                                ('wantModuleTests',
                                                                 ['module'],
                                                                 '\n        .. warning:: DEPRECATED -- this method will not be called, it has\n                     been folded into wantModule.\n        ')],
                                                    'properties': ['add_options']},
             'nose.plugins.base.Plugin': {'bases': ['object'],
                                          'constructor': [],
                                          'docstring': "Base class for nose plugins. It's recommended but not *necessary* to\n    subclass this class to create a plugin, but all plugins *must* implement\n    `options(self, parser, env)` and `configure(self, options, conf)`, and\n    must have the attributes `enabled`, `name` and `score`.  The `name`\n    attribute may contain hyphens ('-').\n\n    Plugins should not be enabled by default.\n\n    Subclassing Plugin (and calling the superclass methods in\n    __init__, configure, and options, if you override them) will give\n    your plugin some friendly default behavior:\n\n    * A --with-$name option will be added to the command line interface\n      to enable the plugin, and a corresponding environment variable\n      will be used as the default value. The plugin class's docstring\n      will be used as the help for this option.\n    * The plugin will not be enabled unless this option is selected by\n      the user.\n    ",
                                          'methods': [('addOptions',
                                                       ['parser', 'env=None'],
                                                       "Add command-line options for this plugin.\n\n        The base plugin class adds --with-$name by default, used to enable the\n        plugin.\n\n        .. warning :: Don't implement addOptions unless you want to override\n                      all default option handling behavior, including\n                      warnings for conflicting options. Implement\n                      :meth:`options\n                      <nose.plugins.base.IPluginInterface.options>`\n                      instead.\n        "),
                                                      ('add_options',
                                                       ['parser', 'env=None'],
                                                       'Non-camel-case version of func name for backwards compatibility.\n\n        .. warning ::\n\n           DEPRECATED: Do not use this method,\n           use :meth:`options <nose.plugins.base.IPluginInterface.options>`\n           instead.\n\n        '),
                                                      ('options',
                                                       ['parser', 'env'],
                                                       'Register commandline options.\n\n        Implement this method for normal options behavior with protection from\n        OptionConflictErrors. If you override this method and want the default\n        --with-$name option to be registered, be sure to call super().\n        '),
                                                      ('configure',
                                                       ['options', 'conf'],
                                                       'Configure the plugin and system, based on selected options.\n\n        The base plugin class sets the plugin to enabled if the enable option\n        for the plugin (self.enableOpt) is true.\n        '),
                                                      ('help',
                                                       [],
                                                       'Return help for this plugin. This will be output as the help\n        section of the --with-$name option that enables the plugin.\n        '),
                                                      ('tolist', ['val'], '')],
                                          'properties': ['can_configure',
                                                         'enabled',
                                                         'enableOpt',
                                                         'name',
                                                         'score',
                                                         'conf']},
             'nose.plugins.capture.Capture': {'bases': ['nose.plugins.base.Plugin'],
                                              'constructor': [],
                                              'docstring': '\n    Output capture plugin. Enabled by default. Disable with ``-s`` or\n    ``--nocapture``. This plugin captures stdout during test execution,\n    appending any output captured to the error or failure output,\n    should the test fail or raise an error.\n    ',
                                              'methods': [('options',
                                                           ['parser', 'env'],
                                                           'Register commandline options\n        '),
                                                          ('configure',
                                                           ['options', 'conf'],
                                                           'Configure plugin. Plugin is enabled by default.\n        '),
                                                          ('afterTest',
                                                           ['test'],
                                                           'Clear capture buffer.\n        '),
                                                          ('begin',
                                                           [],
                                                           'Replace sys.stdout with capture buffer.\n        '),
                                                          ('beforeTest',
                                                           ['test'],
                                                           'Flush capture buffer.\n        '),
                                                          ('formatError',
                                                           ['test', 'err'],
                                                           'Add captured output to error report.\n        '),
                                                          ('formatFailure',
                                                           ['test', 'err'],
                                                           'Add captured output to failure report.\n        '),
                                                          ('addCaptureToErr',
                                                           ['ev', 'output'],
                                                           ''),
                                                          ('start', [], ''),
                                                          ('end', [], ''),
                                                          ('finalize',
                                                           ['result'],
                                                           'Restore stdout.\n        '),
                                                          ('_get_buffer', [], '')],
                                              'properties': ['enabled',
                                                             'env_opt',
                                                             'name',
                                                             'score',
                                                             'stdout',
                                                             '_buf',
                                                             'conf',
                                                             'buffer']},
             'nose.plugins.collect.CollectOnly': {'bases': ['nose.plugins.base.Plugin'],
                                                  'constructor': [],
                                                  'docstring': "\n    Collect and output test names only, don't run any tests.\n    ",
                                                  'methods': [('options',
                                                               ['parser', 'env'],
                                                               'Register commandline options.\n        '),
                                                              ('prepareTestLoader',
                                                               ['loader'],
                                                               'Install collect-only suite class in TestLoader.\n        '),
                                                              ('prepareTestCase',
                                                               ['test'],
                                                               'Replace actual test with dummy that always passes.\n        ')],
                                                  'properties': ['name', 'enableOpt']},
             'nose.plugins.collect.TestSuite': {'bases': ['unittest.TestSuite'],
                                                'constructor': ['tests=()', 'conf=None'],
                                                'docstring': '\n    Basic test suite that bypasses most proxy and plugin calls, but does\n    wrap tests in a nose.case.Test so prepareTestCase will be called.\n    ',
                                                'methods': [('addTest', ['test'], '')],
                                                'properties': ['conf']},
             'nose.plugins.collect.TestSuiteFactory': {'bases': [],
                                                       'constructor': ['conf'],
                                                       'docstring': '\n    Factory for producing configured test suites.\n    ',
                                                       'methods': [('__call__',
                                                                    ['tests=()', '**kw'],
                                                                    '')],
                                                       'properties': ['conf']},
             'nose.plugins.cover.Coverage': {'bases': ['nose.plugins.base.Plugin'],
                                             'constructor': [],
                                             'docstring': "\n    Activate a coverage report using Ned Batchelder's coverage module.\n    ",
                                             'methods': [('options',
                                                          ['parser', 'env'],
                                                          '\n        Add options to command line.\n        '),
                                                         ('configure',
                                                          ['options', 'conf'],
                                                          '\n        Configure plugin.\n        '),
                                                         ('begin',
                                                          [],
                                                          '\n        Begin recording coverage information.\n        '),
                                                         ('report',
                                                          ['stream'],
                                                          '\n        Output code coverage report.\n        '),
                                                         ('wantModuleCoverage',
                                                          ['name', 'module'],
                                                          ''),
                                                         ('wantFile',
                                                          ['file', 'package=None'],
                                                          'If inclusive coverage enabled, return true for all source files\n        in wanted packages.\n        ')],
                                             'properties': ['coverTests',
                                                            'coverPackages',
                                                            'coverInstance',
                                                            'coverErase',
                                                            'coverMinPercentage',
                                                            'score',
                                                            'status',
                                                            'enabled',
                                                            'conf',
                                                            'coverInclusive',
                                                            'coverHtmlDir',
                                                            'coverBranches',
                                                            'coverXmlFile',
                                                            'skipModules']},
             'nose.plugins.debug.Pdb': {'bases': ['nose.plugins.base.Plugin'],
                                        'constructor': [],
                                        'docstring': '\n    Provides --pdb and --pdb-failures options that cause the test runner to\n    drop into pdb if it encounters an error or failure, respectively.\n    ',
                                        'methods': [('options',
                                                     ['parser', 'env'],
                                                     'Register commandline options.\n        '),
                                                    ('configure',
                                                     ['options', 'conf'],
                                                     'Configure which kinds of exceptions trigger plugin.\n        '),
                                                    ('addError',
                                                     ['test', 'err'],
                                                     'Enter pdb if configured to debug errors.\n        '),
                                                    ('addFailure',
                                                     ['test', 'err'],
                                                     'Enter pdb if configured to debug failures.\n        '),
                                                    ('debug', ['err'], '')],
                                        'properties': ['enabled_for_errors',
                                                       'enabled_for_failures',
                                                       'score',
                                                       'conf',
                                                       'enabled']},
             'nose.plugins.deprecated.Deprecated': {'bases': ['nose.plugins.errorclass.ErrorClassPlugin'],
                                                    'constructor': [],
                                                    'docstring': '\n    Installs a DEPRECATED error class for the DeprecatedTest exception. Enabled\n    by default.\n    ',
                                                    'methods': [('options',
                                                                 ['parser', 'env'],
                                                                 'Register commandline options.\n        '),
                                                                ('configure',
                                                                 ['options', 'conf'],
                                                                 'Configure plugin.\n        ')],
                                                    'properties': ['enabled',
                                                                   'deprecated',
                                                                   'conf']},
             'nose.plugins.deprecated.DeprecatedTest': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': 'Raise this exception to mark a test as deprecated.\n    ',
                                                        'methods': [],
                                                        'properties': []},
             'nose.plugins.doctests.DocFileCase': {'bases': ['nose.ext.dtcompat.DocFileCase'],
                                                   'constructor': ['test',
                                                                   'optionflags=0',
                                                                   'setUp=None',
                                                                   'tearDown=None',
                                                                   'checker=None',
                                                                   "result_var='_'"],
                                                   'docstring': 'Overrides to provide address() method that returns the correct\n    address for the doc file case.\n    ',
                                                   'methods': [('address', [], ''),
                                                               ('setUp', [], ''),
                                                               ('_displayhook', ['value'], ''),
                                                               ('tearDown', [], '')],
                                                   'properties': ['_result_var',
                                                                  '_old_displayhook']},
             'nose.plugins.doctests.DocTestCase': {'bases': ['nose.ext.dtcompat.DocTestCase'],
                                                   'constructor': ['test',
                                                                   'optionflags=0',
                                                                   'setUp=None',
                                                                   'tearDown=None',
                                                                   'checker=None',
                                                                   'obj=None',
                                                                   "result_var='_'"],
                                                   'docstring': 'Overrides DocTestCase to\n    provide an address() method that returns the correct address for\n    the doctest case. To provide hints for address(), an obj may also\n    be passed -- this will be used as the test object for purposes of\n    determining the test address, if it is provided.\n    ',
                                                   'methods': [('address', [], ''),
                                                               ('id', [], ''),
                                                               ('__repr__', [], ''),
                                                               ('shortDescription', [], ''),
                                                               ('setUp', [], ''),
                                                               ('_displayhook', ['value'], ''),
                                                               ('tearDown', [], '')],
                                                   'properties': ['_result_var',
                                                                  '_nose_obj',
                                                                  '__str__',
                                                                  '_old_displayhook']},
             'nose.plugins.doctests.Doctest': {'bases': ['nose.plugins.base.Plugin'],
                                               'constructor': [],
                                               'docstring': '\n    Activate doctest plugin to find and run doctests in non-test modules.\n    ',
                                               'methods': [('options',
                                                            ['parser', 'env'],
                                                            'Register commmandline options.\n        '),
                                                           ('configure',
                                                            ['options', 'config'],
                                                            'Configure plugin.\n        '),
                                                           ('prepareTestLoader',
                                                            ['loader'],
                                                            "Capture loader's suiteClass.\n\n        This is used to create test suites from doctest files.\n        \n        "),
                                                           ('loadTestsFromModule',
                                                            ['module'],
                                                            'Load doctests from the module.\n        '),
                                                           ('loadTestsFromFile',
                                                            ['filename'],
                                                            "Load doctests from the file.\n\n        Tests are loaded only if filename's extension matches\n        configured doctest extension.\n\n        "),
                                                           ('makeTest',
                                                            ['obj', 'parent'],
                                                            'Look for doctests in the given object, which will be a\n        function, method or class.\n        '),
                                                           ('matches', ['name'], ''),
                                                           ('wantFile',
                                                            ['file'],
                                                            'Override to select all modules and any file ending with\n        configured doctest extension.\n        ')],
                                               'properties': ['extension',
                                                              'suiteClass',
                                                              'doctest_result_var',
                                                              'doctest_tests',
                                                              'fixtures',
                                                              'finder',
                                                              'optionflags']},
             'nose.plugins.doctests.DoctestSuite': {'bases': ['unittest.TestSuite'],
                                                    'constructor': ['tests=()',
                                                                    'context=None',
                                                                    'can_split=False'],
                                                    'docstring': "\n    Doctest suites are parallelizable at the module or file level only,\n    since they may be attached to objects that are not individually\n    addressable (like properties). This suite subclass is used when\n    loading doctests from a module to ensure that behavior.\n\n    This class is used only if the plugin is not fully prepared;\n    in normal use, the loader's suiteClass is used.\n    \n    ",
                                                    'methods': [('address', [], ''),
                                                                ('__iter__', [], ''),
                                                                ('__str__', [], '')],
                                                    'properties': ['can_split', 'context']},
             'nose.plugins.doctests.NoseOutputRedirectingPdb': {'bases': ['nose.plugins.doctests._orp'],
                                                                'constructor': ['out'],
                                                                'docstring': '',
                                                                'methods': [('set_trace',
                                                                             [],
                                                                             ''),
                                                                            ('set_continue',
                                                                             [],
                                                                             '')],
                                                                'properties': ['__debugger_used']},
             'nose.plugins.errorclass.ErrorClass': {'bases': ['object'],
                                                    'constructor': ['*errorClasses', '**kw'],
                                                    'docstring': '',
                                                    'methods': [('__iter__', [], '')],
                                                    'properties': ['errorClasses']},
             'nose.plugins.errorclass.ErrorClassPlugin': {'bases': ['nose.plugins.base.Plugin'],
                                                          'constructor': [],
                                                          'docstring': '\n    Base class for ErrorClass plugins. Subclass this class and declare the\n    exceptions that you wish to handle as attributes of the subclass.\n    ',
                                                          'methods': [('addError',
                                                                       ['test', 'err'],
                                                                       ''),
                                                                      ('prepareTestResult',
                                                                       ['result'],
                                                                       ''),
                                                                      ('patchResult',
                                                                       ['result'],
                                                                       '')],
                                                          'properties': ['__metaclass__',
                                                                         'score',
                                                                         'errorClasses']},
             'nose.plugins.errorclass.MetaErrorClass': {'bases': ['type'],
                                                        'constructor': ['name', 'bases', 'attr'],
                                                        'docstring': 'Metaclass for ErrorClassPlugins that allows error classes to be\n    set up in a declarative manner.\n    ',
                                                        'methods': [],
                                                        'properties': ['errorClasses']},
             'nose.plugins.failuredetail.FailureDetail': {'bases': ['nose.plugins.Plugin'],
                                                          'constructor': [],
                                                          'docstring': '\n    Plugin that provides extra information in tracebacks of test failures.\n    ',
                                                          'methods': [('options',
                                                                       ['parser', 'env'],
                                                                       'Register commmandline options.\n        '),
                                                                      ('configure',
                                                                       ['options', 'conf'],
                                                                       'Configure plugin.\n        '),
                                                                      ('formatFailure',
                                                                       ['test', 'err'],
                                                                       'Add detail from traceback inspection to error message of a failure.\n        ')],
                                                          'properties': ['score',
                                                                         'enabled',
                                                                         'conf']},
             'nose.plugins.isolate.IsolationPlugin': {'bases': ['nose.plugins.Plugin'],
                                                      'constructor': [],
                                                      'docstring': '\n    Activate the isolation plugin to isolate changes to external\n    modules to a single test module or package. The isolation plugin\n    resets the contents of sys.modules after each test module or\n    package runs to its state before the test. PLEASE NOTE that this\n    plugin should not be used with the coverage plugin, or in any other case\n    where module reloading may produce undesirable side-effects.\n    ',
                                                      'methods': [('configure',
                                                                   ['options', 'conf'],
                                                                   'Configure plugin.\n        '),
                                                                  ('beforeContext',
                                                                   [],
                                                                   'Copy sys.modules onto my mod stack\n        '),
                                                                  ('afterContext',
                                                                   [],
                                                                   'Pop my mod stack and restore sys.modules to the state\n        it was in when mod stack was pushed.\n        '),
                                                                  ('loadTestsFromNames',
                                                                   ['names', 'module=None'],
                                                                   'Create a lazy suite that calls beforeContext and afterContext\n        around each name. The side-effect of this is that full context\n        fixtures will be set up and torn down around each test named.\n        '),
                                                                  ('prepareTestLoader',
                                                                   ['loader'],
                                                                   'Get handle on test loader so we can use it in loadTestsFromNames.\n        ')],
                                                      'properties': ['score',
                                                                     'name',
                                                                     '_mod_stack',
                                                                     'loader']},
             'nose.plugins.logcapture.FilterSet': {'bases': ['object'],
                                                   'constructor': ['filter_components'],
                                                   'docstring': '',
                                                   'methods': [('_partition', [], ''),
                                                               ('allow',
                                                                ['record'],
                                                                'returns whether this record should be printed'),
                                                               ('_any_match',
                                                                ['record'],
                                                                'return the bool of whether `record` starts with\n        any item in `matchers`'),
                                                               ('_allow', ['record'], ''),
                                                               ('_deny', ['record'], '')],
                                                   'properties': ['inclusive',
                                                                  'exclusive',
                                                                  '_partition',
                                                                  '_any_match']},
             'nose.plugins.logcapture.LogCapture': {'bases': ['nose.plugins.base.Plugin'],
                                                    'constructor': [],
                                                    'docstring': '\n    Log capture plugin. Enabled by default. Disable with --nologcapture.\n    This plugin captures logging statements issued during test execution,\n    appending any output captured to the error or failure output,\n    should the test fail or raise an error.\n    ',
                                                    'methods': [('options',
                                                                 ['parser', 'env'],
                                                                 'Register commandline options.\n        '),
                                                                ('configure',
                                                                 ['options', 'conf'],
                                                                 'Configure plugin.\n        '),
                                                                ('setupLoghandler', [], ''),
                                                                ('begin',
                                                                 [],
                                                                 'Set up logging handler before test run begins.\n        '),
                                                                ('start', [], ''),
                                                                ('end', [], ''),
                                                                ('beforeTest',
                                                                 ['test'],
                                                                 'Clear buffers and handlers before test.\n        '),
                                                                ('afterTest',
                                                                 ['test'],
                                                                 'Clear buffers after test.\n        '),
                                                                ('formatFailure',
                                                                 ['test', 'err'],
                                                                 'Add captured log messages to failure output.\n        '),
                                                                ('formatError',
                                                                 ['test', 'err'],
                                                                 'Add captured log messages to error output.\n        '),
                                                                ('formatLogRecords', [], ''),
                                                                ('addCaptureToErr',
                                                                 ['ev', 'records'],
                                                                 '')],
                                                    'properties': ['enabled',
                                                                   'env_opt',
                                                                   'name',
                                                                   'score',
                                                                   'logformat',
                                                                   'logdatefmt',
                                                                   'clear',
                                                                   'filters',
                                                                   'conf',
                                                                   'loglevel',
                                                                   'handler']},
             'nose.plugins.logcapture.MyMemoryHandler': {'bases': ['logging.handlers.BufferingHandler'],
                                                         'constructor': ['capacity',
                                                                         'logformat',
                                                                         'logdatefmt',
                                                                         'filters'],
                                                         'docstring': '',
                                                         'methods': [('flush', [], ''),
                                                                     ('truncate', [], ''),
                                                                     ('filter', ['record'], ''),
                                                                     ('__getstate__', [], ''),
                                                                     ('__setstate__',
                                                                      ['state'],
                                                                      '')],
                                                         'properties': ['filterset',
                                                                        'buffer',
                                                                        'lock']},
             'nose.plugins.manager.BuiltinPluginManager': {'bases': ['nose.plugins.manager.PluginManager'],
                                                           'constructor': [],
                                                           'docstring': 'Plugin manager that loads plugins from the list in\n    `nose.plugins.builtin`.\n    ',
                                                           'methods': [('loadPlugins',
                                                                        [],
                                                                        'Load plugins in nose.plugins.builtin\n        ')],
                                                           'properties': []},
             'nose.plugins.manager.DefaultPluginManager': {'bases': ['nose.plugins.manager.BuiltinPluginManager'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'nose.plugins.manager.EntryPointPluginManager': {'bases': ['nose.plugins.manager.PluginManager'],
                                                              'constructor': [],
                                                              'docstring': 'Plugin manager that loads plugins from the `nose.plugins` and\n    `nose.plugins.0.10` entry points.\n    ',
                                                              'methods': [('loadPlugins',
                                                                           [],
                                                                           'Load plugins by iterating the `nose.plugins` entry point.\n        ')],
                                                              'properties': ['entry_points']},
             'nose.plugins.manager.NoPlugins': {'bases': ['object'],
                                                'constructor': [],
                                                'docstring': 'Null Plugin manager that has no plugins.',
                                                'methods': [('__iter__', [], ''),
                                                            ('_doNothing',
                                                             ['*args', '**kwds'],
                                                             ''),
                                                            ('_emptyIterator',
                                                             ['*args', '**kwds'],
                                                             ''),
                                                            ('__getattr__', ['call'], ''),
                                                            ('addPlugin', ['plug'], ''),
                                                            ('addPlugins', ['plugins'], ''),
                                                            ('configure',
                                                             ['options', 'config'],
                                                             ''),
                                                            ('loadPlugins', [], ''),
                                                            ('sort', [], '')],
                                                'properties': ['interface',
                                                               '_plugins',
                                                               'plugins']},
             'nose.plugins.manager.PluginManager': {'bases': ['object'],
                                                    'constructor': ['plugins=()',
                                                                    'proxyClass=None'],
                                                    'docstring': 'Base class for plugin managers. PluginManager is intended to be\n    used only with a static list of plugins. The loadPlugins() implementation\n    only reloads plugins from _extraplugins to prevent those from being\n    overridden by a subclass.\n\n    The basic functionality of a plugin manager is to proxy all unknown\n    attributes through a ``PluginProxy`` to a list of plugins.\n\n    Note that the list of plugins *may not* be changed after the first plugin\n    call.\n    ',
                                                    'methods': [('__getattr__', ['call'], ''),
                                                                ('__iter__', [], ''),
                                                                ('addPlugin', ['plug'], ''),
                                                                ('addPlugins',
                                                                 ['plugins=()',
                                                                  'extraplugins=()'],
                                                                 'extraplugins are maintained in a separate list and\n        re-added by loadPlugins() to prevent their being overwritten\n        by plugins added by a subclass of PluginManager\n        '),
                                                                ('configure',
                                                                 ['options', 'config'],
                                                                 'Configure the set of plugins with the given options\n        and config instance. After configuration, disabled plugins\n        are removed from the plugins list.\n        '),
                                                                ('loadPlugins', [], ''),
                                                                ('sort', [], ''),
                                                                ('_get_plugins', [], ''),
                                                                ('_set_plugins',
                                                                 ['plugins'],
                                                                 '')],
                                                    'properties': ['proxyClass',
                                                                   '_plugins',
                                                                   '_extraplugins',
                                                                   '_proxies',
                                                                   'config',
                                                                   'plugins']},
             'nose.plugins.manager.PluginProxy': {'bases': ['object'],
                                                  'constructor': ['call', 'plugins'],
                                                  'docstring': 'Proxy for plugin calls. Essentially a closure bound to the\n    given call and plugin list.\n\n    The plugin proxy also must be bound to a particular plugin\n    interface specification, so that it knows what calls are available\n    and any special handling that is required for each call.\n    ',
                                                  'methods': [('__call__',
                                                               ['*arg', '**kw'],
                                                               ''),
                                                              ('addPlugin',
                                                               ['plugin', 'call'],
                                                               "Add plugin to my list of plugins to call, if it has the attribute\n        I'm bound to.\n        "),
                                                              ('makeCall', ['call'], ''),
                                                              ('chain',
                                                               ['*arg', '**kw'],
                                                               'Call plugins in a chain, where the result of each plugin call is\n        sent to the next plugin as input. The final output result is returned.\n        '),
                                                              ('generate',
                                                               ['*arg', '**kw'],
                                                               'Call all plugins, yielding each item in each non-None result.\n        '),
                                                              ('simple',
                                                               ['*arg', '**kw'],
                                                               'Call all plugins, returning the first non-None result.\n        '),
                                                              ('_loadTestsFromNames',
                                                               ['names', 'module=None'],
                                                               'Chainable but not quite normal. Plugins return a tuple of\n        (tests, names) after processing the names. The tests are added\n        to a suite that is accumulated throughout the full call, while\n        names are input for the next plugin in the chain.\n        ')],
                                                  'properties': ['interface',
                                                                 'method',
                                                                 'call',
                                                                 'plugins']},
             'nose.plugins.manager.RestrictedPluginManager': {'bases': ['nose.plugins.manager.DefaultPluginManager'],
                                                              'constructor': ['plugins=()',
                                                                              'exclude=()',
                                                                              'load=True'],
                                                              'docstring': "Plugin manager that restricts the plugin list to those not\n    excluded by a list of exclude methods. Any plugin that implements\n    an excluded method will be removed from the manager's plugin list\n    after plugins are loaded.\n    ",
                                                              'methods': [('excludedOption',
                                                                           ['name'],
                                                                           ''),
                                                                          ('loadPlugins',
                                                                           [],
                                                                           '')],
                                                              'properties': ['load',
                                                                             'exclude',
                                                                             'excluded',
                                                                             '_excludedOpts',
                                                                             'plugins']},
             'nose.plugins.manager.ZeroNinePlugin': {'bases': [],
                                                     'constructor': ['plugin'],
                                                     'docstring': 'Proxy for 0.9 plugins, adapts 0.10 calls to 0.9 standard.\n    ',
                                                     'methods': [('options',
                                                                  ['parser', 'env=os.environ'],
                                                                  ''),
                                                                 ('addError',
                                                                  ['test', 'err'],
                                                                  ''),
                                                                 ('loadTestsFromFile',
                                                                  ['filename'],
                                                                  ''),
                                                                 ('addFailure',
                                                                  ['test', 'err'],
                                                                  ''),
                                                                 ('addSuccess', ['test'], ''),
                                                                 ('startTest', ['test'], ''),
                                                                 ('stopTest', ['test'], ''),
                                                                 ('__getattr__', ['val'], '')],
                                                     'properties': ['plugin']},
             'nose.plugins.multiprocess.MultiProcess': {'bases': ['nose.plugins.base.Plugin'],
                                                        'constructor': [],
                                                        'docstring': '\n    Run tests in multiple processes. Requires processing module.\n    ',
                                                        'methods': [('options',
                                                                     ['parser', 'env'],
                                                                     '\n        Register command-line options.\n        '),
                                                                    ('configure',
                                                                     ['options', 'config'],
                                                                     '\n        Configure plugin.\n        '),
                                                                    ('prepareTestLoader',
                                                                     ['loader'],
                                                                     'Remember loader class so MultiProcessTestRunner can instantiate\n        the right loader.\n        '),
                                                                    ('prepareTestRunner',
                                                                     ['runner'],
                                                                     'Replace test runner with MultiProcessTestRunner.\n        ')],
                                                        'properties': ['score',
                                                                       'status',
                                                                       'enabled',
                                                                       'config',
                                                                       'loaderClass']},
             'nose.plugins.multiprocess.MultiProcessTestRunner': {'bases': ['nose.core.TextTestRunner'],
                                                                  'constructor': ['**kw'],
                                                                  'docstring': '',
                                                                  'methods': [('collect',
                                                                               ['test',
                                                                                'testQueue',
                                                                                'tasks',
                                                                                'to_teardown',
                                                                                'result'],
                                                                               ''),
                                                                              ('startProcess',
                                                                               ['iworker',
                                                                                'testQueue',
                                                                                'resultQueue',
                                                                                'shouldStop',
                                                                                'result'],
                                                                               ''),
                                                                              ('run',
                                                                               ['test'],
                                                                               '\n        Execute the test (which may be a test suite). If the test is a suite,\n        distribute it out among as many processes as have been configured, at\n        as fine a level as is possible given the context fixtures defined in\n        the suite or any sub-suites.\n\n        '),
                                                                              ('addtask',
                                                                               ['tasks',
                                                                                'case'],
                                                                               ''),
                                                                              ('address',
                                                                               [],
                                                                               ''),
                                                                              ('nextBatch',
                                                                               ['test'],
                                                                               ''),
                                                                              ('checkCanSplit',
                                                                               ['fixt'],
                                                                               '\n        Callback that we use to check whether the fixtures found in a\n        context or ancestor are ones we care about.\n\n        Contexts can tell us that their fixtures are reentrant by setting\n        _multiprocess_can_split_. So if we see that, we return False to\n        disregard those fixtures.\n        '),
                                                                              ('sharedFixtures',
                                                                               ['case'],
                                                                               ''),
                                                                              ('consolidate',
                                                                               ['result',
                                                                                'batch_result'],
                                                                               '')],
                                                                  'properties': ['waitkilltime',
                                                                                 'loaderClass',
                                                                                 'stream',
                                                                                 'addtask',
                                                                                 'address',
                                                                                 'checkCanSplit']},
             'nose.plugins.multiprocess.NoSharedFixtureContextSuite': {'bases': ['nose.suite.ContextSuite'],
                                                                       'constructor': [],
                                                                       'docstring': '\n    Context suite that never fires shared fixtures.\n\n    When a context sets _multiprocess_shared_, fixtures in that context\n    are executed by the main process. Using this suite class prevents them\n    from executing in the runner process as well.\n\n    ',
                                                                       'methods': [('setupContext',
                                                                                    ['context'],
                                                                                    ''),
                                                                                   ('teardownContext',
                                                                                    ['context'],
                                                                                    ''),
                                                                                   ('run',
                                                                                    ['result'],
                                                                                    'Run tests in suite inside of suite fixtures.\n        ')],
                                                                       'properties': ['testQueue',
                                                                                      'tasks',
                                                                                      'arg',
                                                                                      'error_context',
                                                                                      'has_run']},
             'nose.plugins.multiprocess.TestLet': {'bases': [],
                                                   'constructor': ['case'],
                                                   'docstring': '',
                                                   'methods': [('id', [], ''),
                                                               ('shortDescription', [], ''),
                                                               ('__str__', [], '')],
                                                   'properties': ['_id',
                                                                  '_short_description',
                                                                  '_str']},
             'nose.plugins.multiprocess.TimedOutException': {'bases': ['KeyboardInterrupt'],
                                                             'constructor': ["value='Timed Out'"],
                                                             'docstring': '',
                                                             'methods': [('__str__', [], '')],
                                                             'properties': ['value']},
             'nose.plugins.plugintest.AccessDecorator': {'bases': ['object'],
                                                         'constructor': ['stream'],
                                                         'docstring': '',
                                                         'methods': [('__contains__',
                                                                      ['val'],
                                                                      ''),
                                                                     ('__iter__', [], ''),
                                                                     ('__str__', [], '')],
                                                         'properties': ['stream', '_buf']},
             'nose.plugins.plugintest.MultiProcessFile': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': "\n    helper for testing multiprocessing\n\n    multiprocessing poses a problem for doctests, since the strategy\n    of replacing sys.stdout/stderr with file-like objects then\n    inspecting the results won't work: the child processes will\n    write to the objects, but the data will not be reflected\n    in the parent doctest-ing process.\n\n    The solution is to create file-like objects which will interact with\n    multiprocessing in a more desirable way.\n\n    All processes can write to this object, but only the creator can read.\n    This allows the testing system to see a unified picture of I/O.\n    ",
                                                          'methods': [('buffer', [], ''),
                                                                      ('write', ['data'], ''),
                                                                      ('__iter__',
                                                                       [],
                                                                       "getattr doesn't work for iter()"),
                                                                      ('seek',
                                                                       ['offset', 'whence=0'],
                                                                       ''),
                                                                      ('getvalue', [], ''),
                                                                      ('__getattr__',
                                                                       ['attr'],
                                                                       '')],
                                                          'properties': ['__master',
                                                                         '__queue',
                                                                         '__buffer',
                                                                         'softspace']},
             'nose.plugins.plugintest.PluginTester': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': 'A mixin for testing nose plugins in their runtime environment.\n\n    Subclass this and mix in unittest.TestCase to run integration/functional\n    tests on your plugin.  When setUp() is called, the stub test suite is\n    executed with your plugin so that during an actual test you can inspect the\n    artifacts of how your plugin interacted with the stub test suite.\n\n    - activate\n\n      - the argument to send nosetests to activate the plugin\n\n    - suitepath\n\n      - if set, this is the path of the suite to test. Otherwise, you\n        will need to use the hook, makeSuite()\n\n    - plugins\n\n      - the list of plugins to make available during the run. Note\n        that this does not mean these plugins will be *enabled* during\n        the run -- only the plugins enabled by the activate argument\n        or other settings in argv or env will be enabled.\n\n    - args\n\n      - a list of arguments to add to the nosetests command, in addition to\n        the activate argument\n\n    - env\n\n      - optional dict of environment variables to send nosetests\n\n    ',
                                                      'methods': [('makeSuite',
                                                                   [],
                                                                   'returns a suite object of tests to run (unittest.TestSuite())\n\n        If self.suitepath is None, this must be implemented. The returned suite\n        object will be executed with all plugins activated.  It may return\n        None.\n\n        Here is an example of a basic suite object you can return ::\n\n            >>> import unittest\n            >>> class SomeTest(unittest.TestCase):\n            ...     def runTest(self):\n            ...         raise ValueError("Now do something, plugin!")\n            ...\n            >>> unittest.TestSuite([SomeTest()]) # doctest: +ELLIPSIS\n            <unittest...TestSuite tests=[<...SomeTest testMethod=runTest>]>\n\n        '),
                                                                  ('_execPlugin',
                                                                   [],
                                                                   'execute the plugin on the internal test suite.\n        '),
                                                                  ('setUp',
                                                                   [],
                                                                   'runs nosetests with the specified test suite, all plugins\n        activated.\n        ')],
                                                      'properties': ['activate',
                                                                     'suitepath',
                                                                     'args',
                                                                     'env',
                                                                     'argv',
                                                                     'plugins',
                                                                     'ignoreFiles',
                                                                     'nose',
                                                                     'output']},
             'nose.plugins.prof.Profile': {'bases': ['nose.plugins.base.Plugin'],
                                           'constructor': [],
                                           'docstring': '\n    Use this plugin to run tests using the hotshot profiler. \n    ',
                                           'methods': [('options',
                                                        ['parser', 'env'],
                                                        'Register commandline options.\n        '),
                                                       ('available', [], ''),
                                                       ('begin',
                                                        [],
                                                        'Create profile stats file and load profiler.\n        '),
                                                       ('configure',
                                                        ['options', 'conf'],
                                                        'Configure plugin.\n        '),
                                                       ('prepareTest',
                                                        ['test'],
                                                        'Wrap entire test run in :func:`prof.runcall`.\n        '),
                                                       ('report',
                                                        ['stream'],
                                                        'Output profiler report.\n        '),
                                                       ('finalize',
                                                        ['result'],
                                                        'Clean up stats file, if configured to do so.\n        '),
                                                       ('_create_pfile', [], '')],
                                           'properties': ['pfile',
                                                          'clean_stats_file',
                                                          'available',
                                                          'prof',
                                                          'enabled',
                                                          'conf',
                                                          'fileno',
                                                          'sort',
                                                          'restrict']},
             'nose.plugins.skip.Skip': {'bases': ['nose.plugins.errorclass.ErrorClassPlugin'],
                                        'constructor': [],
                                        'docstring': "\n    Plugin that installs a SKIP error class for the SkipTest\n    exception.  When SkipTest is raised, the exception will be logged\n    in the skipped attribute of the result, 'S' or 'SKIP' (verbose)\n    will be output, and the exception will not be counted as an error\n    or failure.\n    ",
                                        'methods': [('options',
                                                     ['parser', 'env'],
                                                     '\n        Add my options to command line.\n        '),
                                                    ('configure',
                                                     ['options', 'conf'],
                                                     '\n        Configure plugin. Skip plugin is enabled by default.\n        ')],
                                        'properties': ['enabled', 'skipped', 'conf']},
             'nose.plugins.skip.SkipTest': {'bases': ['Exception'],
                                            'constructor': [],
                                            'docstring': 'Raise this exception to mark a test as skipped.\n        ',
                                            'methods': [],
                                            'properties': []},
             'nose.plugins.testid.TestId': {'bases': ['nose.plugins.Plugin'],
                                            'constructor': [],
                                            'docstring': '\n    Activate to add a test id (like #1) to each test name output. Activate\n    with --failed to rerun failing tests only.\n    ',
                                            'methods': [('options',
                                                         ['parser', 'env'],
                                                         'Register commandline options.\n        '),
                                                        ('configure',
                                                         ['options', 'conf'],
                                                         'Configure plugin.\n        '),
                                                        ('finalize',
                                                         ['result'],
                                                         'Save new ids file, if needed.\n        '),
                                                        ('loadTestsFromNames',
                                                         ['names', 'module=None'],
                                                         'Translate ids in the list of requested names into their\n        test addresses, if they are found in my dict of tests.\n        '),
                                                        ('makeName', ['addr'], ''),
                                                        ('setOutputStream',
                                                         ['stream'],
                                                         'Get handle on output stream so the plugin can print id #s\n        '),
                                                        ('startTest',
                                                         ['test'],
                                                         'Maybe output an id # before the test name.\n\n        Example output::\n\n          #1 test.test ... ok\n          #2 test.test_two ... ok\n\n        '),
                                                        ('afterTest', ['test'], ''),
                                                        ('tr', ['name'], ''),
                                                        ('write', ['output'], '')],
                                            'properties': ['name',
                                                           'idfile',
                                                           'collecting',
                                                           'loopOnFailed',
                                                           'enabled',
                                                           'id',
                                                           'ids',
                                                           'tests',
                                                           'failed',
                                                           'source_names',
                                                           '_seen',
                                                           '_write_hashes',
                                                           'stream']},
             'nose.plugins.xunit.Xunit': {'bases': ['nose.plugins.base.Plugin'],
                                          'constructor': [],
                                          'docstring': 'This plugin provides test results in the standard XUnit XML format.',
                                          'methods': [('_timeTaken', [], ''),
                                                      ('_quoteattr',
                                                       ['attr'],
                                                       'Escape an XML attribute. Value can be unicode.'),
                                                      ('options',
                                                       ['parser', 'env'],
                                                       'Sets additional command line options.'),
                                                      ('configure',
                                                       ['options', 'config'],
                                                       'Configures the xunit plugin.'),
                                                      ('report',
                                                       ['stream'],
                                                       'Writes an Xunit-formatted XML file\n\n        The file includes a report of test errors and failures.\n\n        '),
                                                      ('startTest',
                                                       ['test'],
                                                       'Initializes a timer before starting a test.'),
                                                      ('addError',
                                                       ['test', 'err', 'capt=None'],
                                                       'Add error output to Xunit report.\n        '),
                                                      ('addFailure',
                                                       ['test',
                                                        'err',
                                                        'capt=None',
                                                        'tb_info=None'],
                                                       'Add failure output to Xunit report.\n        '),
                                                      ('addSuccess',
                                                       ['test', 'capt=None'],
                                                       'Add success output to Xunit report.\n        '),
                                                      ('_forceUnicode', ['s'], '')],
                                          'properties': ['name',
                                                         'score',
                                                         'encoding',
                                                         'error_report_file',
                                                         'config',
                                                         'stats',
                                                         'errorlist',
                                                         '_timer']},
             'nose.proxy.ResultProxy': {'bases': ['object'],
                                        'constructor': ['result', 'test', 'config=None'],
                                        'docstring': 'Proxy to TestResults (or other results handler).\n\n    One ResultProxy is created for each nose.case.Test. The result\n    proxy calls plugins with the nose.case.Test instance (instead of\n    the wrapped test case) as each result call is made. Finally, the\n    real result method is called, also with the nose.case.Test\n    instance as the test parameter.\n\n    ',
                                        'methods': [('__repr__', [], ''),
                                                    ('_prepareErr', ['err'], ''),
                                                    ('assertMyTest', ['test'], ''),
                                                    ('afterTest', ['test'], ''),
                                                    ('beforeTest', ['test'], ''),
                                                    ('addError', ['test', 'err'], ''),
                                                    ('addFailure', ['test', 'err'], ''),
                                                    ('addSkip', ['test', 'reason'], ''),
                                                    ('addSuccess', ['test'], ''),
                                                    ('startTest', ['test'], ''),
                                                    ('stop', [], ''),
                                                    ('stopTest', ['test'], '')],
                                        'properties': ['config',
                                                       'plugins',
                                                       'result',
                                                       'test',
                                                       'shouldStop',
                                                       'errors',
                                                       'failures',
                                                       'testsRun']},
             'nose.proxy.ResultProxyFactory': {'bases': ['object'],
                                               'constructor': ['config=None'],
                                               'docstring': 'Factory for result proxies. Generates a ResultProxy bound to each test\n    and the result passed to the test.\n    ',
                                               'methods': [('__call__',
                                                            ['result', 'test'],
                                                            'Return a ResultProxy for the current test.\n\n        On first call, plugins are given a chance to replace the\n        result used for the remaining tests. If a plugin returns a\n        value from prepareTestResult, that object will be used as the\n        result for all tests.\n        ')],
                                               'properties': ['config',
                                                              '__prepared',
                                                              '__result']},
             'nose.pyversion.UnboundMethod': {'bases': [],
                                              'constructor': ['cls', 'func'],
                                              'docstring': '',
                                              'methods': [('address', [], ''),
                                                          ('__call__',
                                                           ['*args', '**kwargs'],
                                                           ''),
                                                          ('__getattr__', ['attr'], ''),
                                                          ('__repr__', [], '')],
                                              'properties': ['__dict__', '_func', '__self__']},
             'nose.pyversion.UnboundSelf': {'bases': [],
                                            'constructor': ['cls'],
                                            'docstring': '',
                                            'methods': [('__getattribute__', ['attr'], '')],
                                            'properties': ['cls']},
             'nose.result.TextTestResult': {'bases': ['unittest._TextTestResult'],
                                            'constructor': ['stream',
                                                            'descriptions',
                                                            'verbosity',
                                                            'config=None',
                                                            'errorClasses=None'],
                                            'docstring': "Text test result that extends unittest's default test result\n    support for a configurable set of errorClasses (eg, Skip,\n    Deprecated, TODO) that extend the errors/failures/success triad.\n    ",
                                            'methods': [('addSkip', ['test', 'reason'], ''),
                                                        ('addError',
                                                         ['test', 'err'],
                                                         'Overrides normal addError to add support for\n        errorClasses. If the exception is a registered class, the\n        error will be added to the list for that class, not errors.\n        '),
                                                        ('getDescription', ['test'], ''),
                                                        ('printLabel',
                                                         ['label', 'err=None'],
                                                         ''),
                                                        ('printErrors',
                                                         [],
                                                         'Overrides to print all errorClasses errors as well.\n        '),
                                                        ('printSummary',
                                                         ['start', 'stop'],
                                                         'Called by the test runner to print the final summary of test\n        run results.\n        '),
                                                        ('wasSuccessful',
                                                         [],
                                                         'Overrides to check that there are no errors in errorClasses\n        lists that are marked as errors and should cause a run to\n        fail.\n        '),
                                                        ('_addError', ['test', 'err'], ''),
                                                        ('_exc_info_to_string',
                                                         ['err', 'test=None'],
                                                         '')],
                                            'properties': ['errorClasses', 'config']},
             'nose.selector.Selector': {'bases': ['object'],
                                        'constructor': ['config'],
                                        'docstring': 'Core test selector. Examines test candidates and determines whether,\n    given the specified configuration, the test candidate should be selected\n    as a test.\n    ',
                                        'methods': [('configure', ['config'], ''),
                                                    ('matches',
                                                     ['name'],
                                                     'Does the name match my requirements?\n\n        To match, a name must match config.testMatch OR config.include\n        and it must not match config.exclude\n        '),
                                                    ('wantClass',
                                                     ['cls'],
                                                     'Is the class a wanted test class?\n\n        A class must be a unittest.TestCase subclass, or match test name\n        requirements. Classes that start with _ are always excluded.\n        '),
                                                    ('wantDirectory',
                                                     ['dirname'],
                                                     'Is the directory a wanted test directory?\n\n        All package directories match, so long as they do not match exclude. \n        All other directories must match test requirements.\n        '),
                                                    ('wantFile',
                                                     ['file'],
                                                     'Is the file a wanted test file?\n\n        The file must be a python source file and match testMatch or\n        include, and not match exclude. Files that match ignore are *never*\n        wanted, regardless of plugin, testMatch, include or exclude settings.\n        '),
                                                    ('wantFunction',
                                                     ['function'],
                                                     'Is the function a test function?\n        '),
                                                    ('wantMethod',
                                                     ['method'],
                                                     'Is the method a test method?\n        '),
                                                    ('wantModule',
                                                     ['module'],
                                                     'Is the module a test module?\n\n        The tail of the module name must match test requirements. One exception:\n        we always want __main__.\n        ')],
                                        'properties': ['config',
                                                       'exclude',
                                                       'ignoreFiles',
                                                       'include',
                                                       'plugins',
                                                       'match']},
             'nose.selector.TestAddress': {'bases': ['object'],
                                           'constructor': ['name', 'workingDir=None'],
                                           'docstring': "A test address represents a user's request to run a particular\n    test. The user may specify a filename or module (or neither),\n    and/or a callable (a class, function, or method). The naming\n    format for test addresses is:\n\n    filename_or_module:callable\n\n    Filenames that are not absolute will be made absolute relative to\n    the working dir.\n\n    The filename or module part will be considered a module name if it\n    doesn't look like a file, that is, if it doesn't exist on the file\n    system and it doesn't contain any directory separators and it\n    doesn't end in .py.\n\n    Callables may be a class name, function name, method name, or\n    class.method specification.\n    ",
                                           'methods': [('totuple', [], ''),
                                                       ('__str__', [], ''),
                                                       ('__repr__', [], '')],
                                           'properties': ['name',
                                                          'workingDir',
                                                          'filename',
                                                          'module',
                                                          'call']},
             'nose.sphinx.pluginopts.Opt': {'bases': ['object'],
                                            'constructor': ['*arg', '**kw'],
                                            'docstring': '',
                                            'methods': [('options', [], ''),
                                                        ('meta', ['optstring'], '')],
                                            'properties': ['opts',
                                                           'action',
                                                           'default',
                                                           'metavar',
                                                           'help']},
             'nose.sphinx.pluginopts.OptBucket': {'bases': ['object'],
                                                  'constructor': ['doc=None',
                                                                  "prog='nosetests'"],
                                                  'docstring': '',
                                                  'methods': [('__iter__', [], ''),
                                                              ('format_help', [], ''),
                                                              ('add_option',
                                                               ['*arg', '**kw'],
                                                               '')],
                                                  'properties': ['opts', 'doc', 'prog']},
             'nose.suite.ContextList': {'bases': ['object'],
                                        'constructor': ['tests', 'context=None'],
                                        'docstring': 'Not quite a suite -- a group of tests in a context. This is used\n    to hint the ContextSuiteFactory about what context the tests\n    belong to, in cases where it may be ambiguous or missing.\n    ',
                                        'methods': [('__iter__', [], '')],
                                        'properties': ['tests', 'context']},
             'nose.suite.ContextSuite': {'bases': ['nose.suite.LazySuite'],
                                         'constructor': ['tests=()',
                                                         'context=None',
                                                         'factory=None',
                                                         'config=None',
                                                         'resultProxy=None',
                                                         'can_split=True'],
                                         'docstring': 'A suite with context.\n\n    A ContextSuite executes fixtures (setup and teardown functions or\n    methods) for the context containing its tests.\n\n    The context may be explicitly passed. If it is not, a context (or\n    nested set of contexts) will be constructed by examining the tests\n    in the suite.\n    ',
                                         'methods': [('__repr__', [], ''),
                                                     ('id', [], ''),
                                                     ('__hash__', [], ''),
                                                     ('__call__', ['*arg', '**kw'], ''),
                                                     ('exc_info',
                                                      [],
                                                      'Hook for replacing error tuple output\n        '),
                                                     ('_exc_info',
                                                      [],
                                                      'Bottleneck to fix up IronPython string exceptions\n        '),
                                                     ('run',
                                                      ['result'],
                                                      'Run tests in suite inside of suite fixtures.\n        '),
                                                     ('hasFixtures', ['ctx_callback=None'], ''),
                                                     ('implementsAnyFixture',
                                                      ['context', 'ctx_callback'],
                                                      ''),
                                                     ('setUp', [], ''),
                                                     ('setupContext', ['context'], ''),
                                                     ('shortDescription', [], ''),
                                                     ('tearDown', [], ''),
                                                     ('teardownContext', ['context'], ''),
                                                     ('_get_wrapped_tests', [], '')],
                                         'properties': ['failureException',
                                                        'was_setup',
                                                        'was_torndown',
                                                        'classSetup',
                                                        'classTeardown',
                                                        'moduleSetup',
                                                        'moduleTeardown',
                                                        'packageSetup',
                                                        'packageTeardown',
                                                        'context',
                                                        'factory',
                                                        'config',
                                                        'resultProxy',
                                                        'has_run',
                                                        'can_split',
                                                        'error_context',
                                                        '__str__',
                                                        '_tests']},
             'nose.suite.ContextSuiteFactory': {'bases': ['object'],
                                                'constructor': ['config=None',
                                                                'suiteClass=None',
                                                                'resultProxy=_def'],
                                                'docstring': 'Factory for ContextSuites. Called with a collection of tests,\n    the factory decides on a hierarchy of contexts by introspecting\n    the collection or the tests themselves to find the objects\n    containing the test objects. It always returns one suite, but that\n    suite may consist of a hierarchy of nested suites.\n    ',
                                                'methods': [('__call__',
                                                             ['tests', '**kw'],
                                                             'Return ``ContextSuite`` for tests. ``tests`` may either\n        be a callable (in which case the resulting ContextSuite will\n        have no parent context and be evaluated lazily) or an\n        iterable. In that case the tests will wrapped in\n        nose.case.Test, be examined and the context of each found and a\n        suite of suites returned, organized into a stack with the\n        outermost suites belonging to the outermost contexts.\n        '),
                                                            ('ancestry',
                                                             ['context'],
                                                             'Return the ancestry of the context (that is, all of the\n        packages and modules containing the context), in order of\n        descent with the outermost ancestor last.\n        This method is a generator.\n        '),
                                                            ('findContext', ['tests'], ''),
                                                            ('makeSuite',
                                                             ['tests', 'context', '**kw'],
                                                             ''),
                                                            ('mixedSuites',
                                                             ['tests'],
                                                             "The complex case where there are tests that don't all share\n        the same context. Groups tests into suites with common ancestors,\n        according to the following (essentially tail-recursive) procedure:\n\n        Starting with the context of the first test, if it is not\n        None, look for tests in the remaining tests that share that\n        ancestor. If any are found, group into a suite with that\n        ancestor as the context, and replace the current suite with\n        that suite. Continue this process for each ancestor of the\n        first test, until all ancestors have been processed. At this\n        point if any tests remain, recurse with those tests as the\n        input, returning a list of the common suite (which may be the\n        suite or test we started with, if no common tests were found)\n        plus the results of recursion.\n        "),
                                                            ('wrapTests', ['tests'], '')],
                                                'properties': ['suiteClass',
                                                               'config',
                                                               'resultProxy',
                                                               'suites',
                                                               'context',
                                                               'was_setup',
                                                               'was_torndown']},
             'nose.suite.FinalizingSuiteWrapper': {'bases': ['unittest.TestSuite'],
                                                   'constructor': ['suite', 'finalize'],
                                                   'docstring': "Wraps suite and calls final function after suite has\n    executed. Used to call final functions in cases (like running in\n    the standard test runner) where test running is not under nose's\n    control.\n    ",
                                                   'methods': [('__call__',
                                                                ['*arg', '**kw'],
                                                                ''),
                                                               ('__iter__', [], ''),
                                                               ('run', ['*arg', '**kw'], '')],
                                                   'properties': ['suite', 'finalize']},
             'nose.suite.LazySuite': {'bases': ['unittest.TestSuite'],
                                      'constructor': ['tests=()'],
                                      'docstring': 'A suite that may use a generator as its list of tests\n    ',
                                      'methods': [('__iter__', [], ''),
                                                  ('__repr__', [], ''),
                                                  ('__hash__', [], ''),
                                                  ('addTest', ['test'], ''),
                                                  ('run', ['result'], ''),
                                                  ('__nonzero__', [], ''),
                                                  ('_get_tests', [], ''),
                                                  ('_set_tests', ['tests'], '')],
                                      'properties': ['__str__',
                                                     '_precache',
                                                     'test_generator',
                                                     '_tests']},
             'nose.suite.MixedContextError': {'bases': ['Exception'],
                                              'constructor': [],
                                              'docstring': 'Error raised when a context suite sees tests from more than\n    one context.\n    ',
                                              'methods': [],
                                              'properties': []},
             'nose.suite.StringException': {'bases': ['Exception'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'nose.suite.TestDir': {'bases': [],
                                    'constructor': ['**kw'],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'nose.suite.TestModule': {'bases': [],
                                       'constructor': ['**kw'],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'nose.tools.nontrivial.TimeExpired': {'bases': ['AssertionError'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'nose.tools.trivial.Dummy': {'bases': ['unittest.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('nop', [], '')],
                                          'properties': []},
             'nose.util.odict': {'bases': ['dict'],
                                 'constructor': ['*arg', '**kw'],
                                 'docstring': 'Simple ordered dict implementation, based on:\n\n    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/107747\n    ',
                                 'methods': [('__delitem__', ['key'], ''),
                                             ('__setitem__', ['key', 'item'], ''),
                                             ('__str__', [], ''),
                                             ('clear', [], ''),
                                             ('copy', [], ''),
                                             ('items', [], ''),
                                             ('keys', [], ''),
                                             ('setdefault', ['key', 'failobj=None'], ''),
                                             ('update', ['dict'], ''),
                                             ('values', [], '')],
                                 'properties': ['_keys']},
             'numpy._import_tools.PackageLoader': {'bases': [],
                                                   'constructor': ['verbose=False',
                                                                   'infunc=False'],
                                                   'docstring': '',
                                                   'methods': [('_get_info_files',
                                                                ['package_dir',
                                                                 'parent_path',
                                                                 'parent_package=None'],
                                                                ' Return list of (package name,info.py file) from parent_path subdirectories.\n        '),
                                                               ('_init_info_modules',
                                                                ['packages=None'],
                                                                'Initialize info_modules = {<package_name>: <package info.py module>}.\n        '),
                                                               ('_get_sorted_names',
                                                                [],
                                                                ' Return package names sorted in the order as they should be\n        imported due to dependence relations between packages.\n        '),
                                                               ('__call__',
                                                                ['*packages', '**options'],
                                                                "Load one or more packages into parent package top-level namespace.\n\n       This function is intended to shorten the need to import many\n       subpackages, say of scipy, constantly with statements such as\n\n         import scipy.linalg, scipy.fftpack, scipy.etc...\n\n       Instead, you can say:\n\n         import scipy\n         scipy.pkgload('linalg','fftpack',...)\n\n       or\n\n         scipy.pkgload()\n\n       to load all of them in one call.\n\n       If a name which doesn't exist in scipy's namespace is\n       given, a warning is shown.\n\n       Parameters\n       ----------\n        *packages : arg-tuple\n             the names (one or more strings) of all the modules one\n             wishes to load into the top-level namespace.\n        verbose= : integer\n             verbosity level [default: -1].\n             verbose=-1 will suspend also warnings.\n        force= : bool\n             when True, force reloading loaded packages [default: False].\n        postpone= : bool\n             when True, don't load packages [default: False]\n\n     "),
                                                               ('_execcmd',
                                                                ['cmdstr'],
                                                                ' Execute command in parent_frame.'),
                                                               ('_obj2repr',
                                                                ['obj'],
                                                                ' Return repr(obj) with'),
                                                               ('log', ['mess'], ''),
                                                               ('warn', ['mess'], ''),
                                                               ('error', ['mess'], ''),
                                                               ('_get_doc_title',
                                                                ['info_module'],
                                                                ' Get the title from a package info.py file.\n        '),
                                                               ('_format_titles',
                                                                ['titles', "colsep='---'"],
                                                                ''),
                                                               ('get_pkgdocs',
                                                                [],
                                                                ' Return documentation summary of subpackages.\n        ')],
                                                   'properties': ['parent_frame',
                                                                  'parent_name',
                                                                  'parent_path',
                                                                  'parent_export_names',
                                                                  'info_modules',
                                                                  'imported_packages',
                                                                  'verbose']},
             'numpy._import_tools.PackageLoaderDebug': {'bases': ['numpy._import_tools.PackageLoader'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('_execcmd',
                                                                     ['cmdstr'],
                                                                     ' Execute command in parent_frame.')],
                                                        'properties': []},
             'numpy.core._internal._ctypes': {'bases': ['object'],
                                              'constructor': ['array', 'ptr=None'],
                                              'docstring': '',
                                              'methods': [('data_as', ['obj'], ''),
                                                          ('shape_as', ['obj'], ''),
                                                          ('strides_as', ['obj'], ''),
                                                          ('get_data', [], ''),
                                                          ('get_shape', [], ''),
                                                          ('get_strides', [], ''),
                                                          ('get_as_parameter', [], '')],
                                              'properties': ['_ctypes',
                                                             '_arr',
                                                             '_data',
                                                             '_zerod',
                                                             'data',
                                                             'shape',
                                                             'strides',
                                                             '_as_parameter_']},
             'numpy.core._internal._missing_ctypes': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('cast', ['num', 'obj'], ''),
                                                                  ('c_void_p', ['num'], '')],
                                                      'properties': []},
             'numpy.core._mx_datetime_parser.RangeError': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'numpy.core.arrayprint.ComplexFormat': {'bases': ['object'],
                                                     'constructor': ['x',
                                                                     'precision',
                                                                     'suppress_small'],
                                                     'docstring': '',
                                                     'methods': [('__call__', ['x'], '')],
                                                     'properties': ['real_format',
                                                                    'imag_format']},
             'numpy.core.arrayprint.FloatFormat': {'bases': ['object'],
                                                   'constructor': ['data',
                                                                   'precision',
                                                                   'suppress_small',
                                                                   'sign=False'],
                                                   'docstring': '',
                                                   'methods': [('fillFormat', ['data'], ''),
                                                               ('__call__',
                                                                ['x', 'strip_zeros=True'],
                                                                '')],
                                                   'properties': ['precision',
                                                                  'suppress_small',
                                                                  'sign',
                                                                  'exp_format',
                                                                  'large_exponent',
                                                                  'max_str_len',
                                                                  'special_fmt',
                                                                  'format']},
             'numpy.core.arrayprint.LongComplexFormat': {'bases': ['object'],
                                                         'constructor': ['precision'],
                                                         'docstring': '',
                                                         'methods': [('__call__', ['x'], '')],
                                                         'properties': ['real_format',
                                                                        'imag_format']},
             'numpy.core.arrayprint.LongFloatFormat': {'bases': ['object'],
                                                       'constructor': ['precision',
                                                                       'sign=False'],
                                                       'docstring': '',
                                                       'methods': [('__call__', ['x'], '')],
                                                       'properties': ['precision', 'sign']},
             'numpy.core.defchararray.chararray': {'bases': ['numeric.ndarray'],
                                                   'constructor': [],
                                                   'docstring': '\n    chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0,\n              strides=None, order=None)\n\n    Provides a convenient view on arrays of string and unicode values.\n\n    .. note::\n       The `chararray` class exists for backwards compatibility with\n       Numarray, it is not recommended for new development. Starting from numpy\n       1.4, if one needs arrays of strings, it is recommended to use arrays of\n       `dtype` `object_`, `string_` or `unicode_`, and use the free functions\n       in the `numpy.char` module for fast vectorized string operations.\n\n    Versus a regular Numpy array of type `str` or `unicode`, this\n    class adds the following functionality:\n\n      1) values automatically have whitespace removed from the end\n         when indexed\n\n      2) comparison operators automatically remove whitespace from the\n         end when comparing values\n\n      3) vectorized string operations are provided as methods\n         (e.g. `.endswith`) and infix operators (e.g. ``"+", "*", "%"``)\n\n    chararrays should be created using `numpy.char.array` or\n    `numpy.char.asarray`, rather than this constructor directly.\n\n    This constructor creates the array, using `buffer` (with `offset`\n    and `strides`) if it is not ``None``. If `buffer` is ``None``, then\n    constructs a new array with `strides` in "C order", unless both\n    ``len(shape) >= 2`` and ``order=\'Fortran\'``, in which case `strides`\n    is in "Fortran order".\n\n    Methods\n    -------\n    astype\n    argsort\n    copy\n    count\n    decode\n    dump\n    dumps\n    encode\n    endswith\n    expandtabs\n    fill\n    find\n    flatten\n    getfield\n    index\n    isalnum\n    isalpha\n    isdecimal\n    isdigit\n    islower\n    isnumeric\n    isspace\n    istitle\n    isupper\n    item\n    join\n    ljust\n    lower\n    lstrip\n    nonzero\n    put\n    ravel\n    repeat\n    replace\n    reshape\n    resize\n    rfind\n    rindex\n    rjust\n    rsplit\n    rstrip\n    searchsorted\n    setfield\n    setflags\n    sort\n    split\n    splitlines\n    squeeze\n    startswith\n    strip\n    swapaxes\n    swapcase\n    take\n    title\n    tofile\n    tolist\n    tostring\n    translate\n    transpose\n    upper\n    view\n    zfill\n\n    Parameters\n    ----------\n    shape : tuple\n        Shape of the array.\n    itemsize : int, optional\n        Length of each array element, in number of characters. Default is 1.\n    unicode : bool, optional\n        Are the array elements of type unicode (True) or string (False).\n        Default is False.\n    buffer : int, optional\n        Memory address of the start of the array data.  Default is None,\n        in which case a new array is created.\n    offset : int, optional\n        Fixed stride displacement from the beginning of an axis?\n        Default is 0. Needs to be >=0.\n    strides : array_like of ints, optional\n        Strides for the array (see `ndarray.strides` for full description).\n        Default is None.\n    order : {\'C\', \'F\'}, optional\n        The order in which the array data is stored in memory: \'C\' ->\n        "row major" order (the default), \'F\' -> "column major"\n        (Fortran) order.\n\n    Examples\n    --------\n    >>> charar = np.chararray((3, 3))\n    >>> charar[:] = \'a\'\n    >>> charar\n    chararray([[\'a\', \'a\', \'a\'],\n           [\'a\', \'a\', \'a\'],\n           [\'a\', \'a\', \'a\']],\n          dtype=\'|S1\')\n\n    >>> charar = np.chararray(charar.shape, itemsize=5)\n    >>> charar[:] = \'abc\'\n    >>> charar\n    chararray([[\'abc\', \'abc\', \'abc\'],\n           [\'abc\', \'abc\', \'abc\'],\n           [\'abc\', \'abc\', \'abc\']],\n          dtype=\'|S5\')\n\n    ',
                                                   'methods': [('__new__',
                                                                ['shape',
                                                                 'itemsize=1',
                                                                 'unicode=False',
                                                                 'buffer=None',
                                                                 'offset=0',
                                                                 'strides=None',
                                                                 "order='C'"],
                                                                ''),
                                                               ('__array_finalize__',
                                                                ['obj'],
                                                                ''),
                                                               ('__getitem__', ['obj'], ''),
                                                               ('__eq__',
                                                                ['other'],
                                                                '\n        Return (self == other) element-wise.\n\n        See also\n        --------\n        equal\n        '),
                                                               ('__ne__',
                                                                ['other'],
                                                                '\n        Return (self != other) element-wise.\n\n        See also\n        --------\n        not_equal\n        '),
                                                               ('__ge__',
                                                                ['other'],
                                                                '\n        Return (self >= other) element-wise.\n\n        See also\n        --------\n        greater_equal\n        '),
                                                               ('__le__',
                                                                ['other'],
                                                                '\n        Return (self <= other) element-wise.\n\n        See also\n        --------\n        less_equal\n        '),
                                                               ('__gt__',
                                                                ['other'],
                                                                '\n        Return (self > other) element-wise.\n\n        See also\n        --------\n        greater\n        '),
                                                               ('__lt__',
                                                                ['other'],
                                                                '\n        Return (self < other) element-wise.\n\n        See also\n        --------\n        less\n        '),
                                                               ('__add__',
                                                                ['other'],
                                                                '\n        Return (self + other), that is string concatenation,\n        element-wise for a pair of array_likes of str or unicode.\n\n        See also\n        --------\n        add\n        '),
                                                               ('__radd__',
                                                                ['other'],
                                                                '\n        Return (other + self), that is string concatenation,\n        element-wise for a pair of array_likes of `string_` or `unicode_`.\n\n        See also\n        --------\n        add\n        '),
                                                               ('__mul__',
                                                                ['i'],
                                                                '\n        Return (self * i), that is string multiple concatenation,\n        element-wise.\n\n        See also\n        --------\n        multiply\n        '),
                                                               ('__rmul__',
                                                                ['i'],
                                                                '\n        Return (self * i), that is string multiple concatenation,\n        element-wise.\n\n        See also\n        --------\n        multiply\n        '),
                                                               ('__mod__',
                                                                ['i'],
                                                                '\n        Return (self % i), that is pre-Python 2.6 string formatting\n        (iterpolation), element-wise for a pair of array_likes of `string_`\n        or `unicode_`.\n\n        See also\n        --------\n        mod\n        '),
                                                               ('__rmod__', ['other'], ''),
                                                               ('argsort',
                                                                ['axis=-1',
                                                                 "kind='quicksort'",
                                                                 'order=None'],
                                                                '\n        Return the indices that sort the array lexicographically.\n\n        For full documentation see `numpy.argsort`, for which this method is\n        in fact merely a "thin wrapper."\n\n        Examples\n        --------\n        >>> c = np.array([\'a1b c\', \'1b ca\', \'b ca1\', \'Ca1b\'], \'S5\')\n        >>> c = c.view(np.chararray); c\n        chararray([\'a1b c\', \'1b ca\', \'b ca1\', \'Ca1b\'],\n              dtype=\'|S5\')\n        >>> c[c.argsort()]\n        chararray([\'1b ca\', \'Ca1b\', \'a1b c\', \'b ca1\'],\n              dtype=\'|S5\')\n\n        '),
                                                               ('capitalize',
                                                                [],
                                                                '\n        Return a copy of `self` with only the first character of each element\n        capitalized.\n\n        See also\n        --------\n        char.capitalize\n\n        '),
                                                               ('center',
                                                                ['width', "fillchar=' '"],
                                                                '\n            Return a copy of `self` with its elements centered in a\n            string of length `width`.\n\n            See also\n            --------\n            center\n            '),
                                                               ('center',
                                                                ['width'],
                                                                '\n            Return a copy of `self` with its elements centered in a\n            string of length `width`.\n\n            See also\n            --------\n            center\n            '),
                                                               ('count',
                                                                ['sub', 'start=0', 'end=None'],
                                                                '\n        Returns an array with the number of non-overlapping occurrences of\n        substring `sub` in the range [`start`, `end`].\n\n        See also\n        --------\n        char.count\n\n        '),
                                                               ('decode',
                                                                ['encoding=None',
                                                                 'errors=None'],
                                                                '\n        Calls `str.decode` element-wise.\n\n        See also\n        --------\n        char.decode\n\n        '),
                                                               ('encode',
                                                                ['encoding=None',
                                                                 'errors=None'],
                                                                '\n        Calls `str.encode` element-wise.\n\n        See also\n        --------\n        char.encode\n\n        '),
                                                               ('endswith',
                                                                ['suffix',
                                                                 'start=0',
                                                                 'end=None'],
                                                                '\n        Returns a boolean array which is `True` where the string element\n        in `self` ends with `suffix`, otherwise `False`.\n\n        See also\n        --------\n        char.endswith\n\n        '),
                                                               ('expandtabs',
                                                                ['tabsize=8'],
                                                                '\n        Return a copy of each string element where all tab characters are\n        replaced by one or more spaces.\n\n        See also\n        --------\n        char.expandtabs\n\n        '),
                                                               ('find',
                                                                ['sub', 'start=0', 'end=None'],
                                                                '\n        For each element, return the lowest index in the string where\n        substring `sub` is found.\n\n        See also\n        --------\n        char.find\n\n        '),
                                                               ('index',
                                                                ['sub', 'start=0', 'end=None'],
                                                                '\n        Like `find`, but raises `ValueError` when the substring is not found.\n\n        See also\n        --------\n        char.index\n\n        '),
                                                               ('isalnum',
                                                                [],
                                                                '\n        Returns true for each element if all characters in the string\n        are alphanumeric and there is at least one character, false\n        otherwise.\n\n        See also\n        --------\n        char.isalnum\n\n        '),
                                                               ('isalpha',
                                                                [],
                                                                '\n        Returns true for each element if all characters in the string\n        are alphabetic and there is at least one character, false\n        otherwise.\n\n        See also\n        --------\n        char.isalpha\n\n        '),
                                                               ('isdigit',
                                                                [],
                                                                '\n        Returns true for each element if all characters in the string are\n        digits and there is at least one character, false otherwise.\n\n        See also\n        --------\n        char.isdigit\n\n        '),
                                                               ('islower',
                                                                [],
                                                                '\n        Returns true for each element if all cased characters in the\n        string are lowercase and there is at least one cased character,\n        false otherwise.\n\n        See also\n        --------\n        char.islower\n\n        '),
                                                               ('isspace',
                                                                [],
                                                                '\n        Returns true for each element if there are only whitespace\n        characters in the string and there is at least one character,\n        false otherwise.\n\n        See also\n        --------\n        char.isspace\n\n        '),
                                                               ('istitle',
                                                                [],
                                                                '\n        Returns true for each element if the element is a titlecased\n        string and there is at least one character, false otherwise.\n\n        See also\n        --------\n        char.istitle\n\n        '),
                                                               ('isupper',
                                                                [],
                                                                '\n        Returns true for each element if all cased characters in the\n        string are uppercase and there is at least one character, false\n        otherwise.\n\n        See also\n        --------\n        char.isupper\n\n        '),
                                                               ('join',
                                                                ['seq'],
                                                                '\n        Return a string which is the concatenation of the strings in the\n        sequence `seq`.\n\n        See also\n        --------\n        char.join\n\n        '),
                                                               ('ljust',
                                                                ['width', "fillchar=' '"],
                                                                '\n            Return an array with the elements of `self` left-justified in a\n            string of length `width`.\n\n            See also\n            --------\n            char.ljust\n\n            '),
                                                               ('ljust',
                                                                ['width'],
                                                                '\n            Return an array with the elements of `self` left-justified in a\n            string of length `width`.\n\n            See also\n            --------\n            ljust\n            '),
                                                               ('lower',
                                                                [],
                                                                '\n        Return an array with the elements of `self` converted to\n        lowercase.\n\n        See also\n        --------\n        char.lower\n\n        '),
                                                               ('lstrip',
                                                                ['chars=None'],
                                                                '\n        For each element in `self`, return a copy with the leading characters\n        removed.\n\n        See also\n        --------\n        char.lstrip\n\n        '),
                                                               ('partition',
                                                                ['sep'],
                                                                '\n            Partition each element in `self` around `sep`.\n\n            See also\n            --------\n            partition\n            '),
                                                               ('replace',
                                                                ['old', 'new', 'count=None'],
                                                                '\n        For each element in `self`, return a copy of the string with all\n        occurrences of substring `old` replaced by `new`.\n\n        See also\n        --------\n        char.replace\n\n        '),
                                                               ('rfind',
                                                                ['sub', 'start=0', 'end=None'],
                                                                '\n        For each element in `self`, return the highest index in the string\n        where substring `sub` is found, such that `sub` is contained\n        within [`start`, `end`].\n\n        See also\n        --------\n        char.rfind\n\n        '),
                                                               ('rindex',
                                                                ['sub', 'start=0', 'end=None'],
                                                                '\n        Like `rfind`, but raises `ValueError` when the substring `sub` is\n        not found.\n\n        See also\n        --------\n        char.rindex\n\n        '),
                                                               ('rjust',
                                                                ['width', "fillchar=' '"],
                                                                '\n            Return an array with the elements of `self`\n            right-justified in a string of length `width`.\n\n            See also\n            --------\n            char.rjust\n\n            '),
                                                               ('rjust',
                                                                ['width'],
                                                                '\n            Return an array with the elements of `self`\n            right-justified in a string of length `width`.\n\n            See also\n            --------\n            rjust\n            '),
                                                               ('rpartition',
                                                                ['sep'],
                                                                '\n            Partition each element in `self` around `sep`.\n\n            See also\n            --------\n            rpartition\n            '),
                                                               ('rsplit',
                                                                ['sep=None', 'maxsplit=None'],
                                                                '\n            For each element in `self`, return a list of the words in\n            the string, using `sep` as the delimiter string.\n\n            See also\n            --------\n            char.rsplit\n\n            '),
                                                               ('rstrip',
                                                                ['chars=None'],
                                                                '\n        For each element in `self`, return a copy with the trailing\n        characters removed.\n\n        See also\n        --------\n        char.rstrip\n\n        '),
                                                               ('split',
                                                                ['sep=None', 'maxsplit=None'],
                                                                '\n        For each element in `self`, return a list of the words in the\n        string, using `sep` as the delimiter string.\n\n        See also\n        --------\n        char.split\n\n        '),
                                                               ('splitlines',
                                                                ['keepends=None'],
                                                                '\n        For each element in `self`, return a list of the lines in the\n        element, breaking at line boundaries.\n\n        See also\n        --------\n        char.splitlines\n\n        '),
                                                               ('startswith',
                                                                ['prefix',
                                                                 'start=0',
                                                                 'end=None'],
                                                                '\n        Returns a boolean array which is `True` where the string element\n        in `self` starts with `prefix`, otherwise `False`.\n\n        See also\n        --------\n        char.startswith\n\n        '),
                                                               ('strip',
                                                                ['chars=None'],
                                                                '\n        For each element in `self`, return a copy with the leading and\n        trailing characters removed.\n\n        See also\n        --------\n        char.strip\n\n        '),
                                                               ('swapcase',
                                                                [],
                                                                '\n        For each element in `self`, return a copy of the string with\n        uppercase characters converted to lowercase and vice versa.\n\n        See also\n        --------\n        char.swapcase\n\n        '),
                                                               ('title',
                                                                [],
                                                                '\n        For each element in `self`, return a titlecased version of the\n        string: words start with uppercase characters, all remaining cased\n        characters are lowercase.\n\n        See also\n        --------\n        char.title\n\n        '),
                                                               ('translate',
                                                                ['table', 'deletechars=None'],
                                                                '\n        For each element in `self`, return a copy of the string where\n        all characters occurring in the optional argument\n        `deletechars` are removed, and the remaining characters have\n        been mapped through the given translation table.\n\n        See also\n        --------\n        char.translate\n\n        '),
                                                               ('upper',
                                                                [],
                                                                '\n        Return an array with the elements of `self` converted to\n        uppercase.\n\n        See also\n        --------\n        char.upper\n\n        '),
                                                               ('zfill',
                                                                ['width'],
                                                                '\n        Return the numeric string left-filled with zeros in a string of\n        length `width`.\n\n        See also\n        --------\n        char.zfill\n\n        '),
                                                               ('isnumeric',
                                                                [],
                                                                '\n        For each element in `self`, return True if there are only\n        numeric characters in the element.\n\n        See also\n        --------\n        char.isnumeric\n\n        '),
                                                               ('isdecimal',
                                                                [],
                                                                '\n        For each element in `self`, return True if there are only\n        decimal characters in the element.\n\n        See also\n        --------\n        char.isdecimal\n\n        ')],
                                                   'properties': []},
             'numpy.core.getlimits.finfo': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': "\n    finfo(dtype)\n\n    Machine limits for floating point types.\n\n    Attributes\n    ----------\n    eps : float\n        The smallest representable positive number such that\n        ``1.0 + eps != 1.0``.  Type of `eps` is an appropriate floating\n        point type.\n    epsneg : floating point number of the appropriate type\n        The smallest representable positive number such that\n        ``1.0 - epsneg != 1.0``.\n    iexp : int\n        The number of bits in the exponent portion of the floating point\n        representation.\n    machar : MachAr\n        The object which calculated these parameters and holds more\n        detailed information.\n    machep : int\n        The exponent that yields `eps`.\n    max : floating point number of the appropriate type\n        The largest representable number.\n    maxexp : int\n        The smallest positive power of the base (2) that causes overflow.\n    min : floating point number of the appropriate type\n        The smallest representable number, typically ``-max``.\n    minexp : int\n        The most negative power of the base (2) consistent with there\n        being no leading 0's in the mantissa.\n    negep : int\n        The exponent that yields `epsneg`.\n    nexp : int\n        The number of bits in the exponent including its sign and bias.\n    nmant : int\n        The number of bits in the mantissa.\n    precision : int\n        The approximate number of decimal digits to which this kind of\n        float is precise.\n    resolution : floating point number of the appropriate type\n        The approximate decimal resolution of this type, i.e.,\n        ``10**-precision``.\n    tiny : float\n        The smallest positive usable number.  Type of `tiny` is an\n        appropriate floating point type.\n\n    Parameters\n    ----------\n    dtype : float, dtype, or instance\n        Kind of floating point data-type about which to get information.\n\n    See Also\n    --------\n    MachAr : The implementation of the tests that produce this information.\n    iinfo : The equivalent for integer data types.\n\n    Notes\n    -----\n    For developers of NumPy: do not instantiate this at the module level.\n    The initial calculation of these parameters is expensive and negatively\n    impacts import times.  These objects are cached, so calling ``finfo()``\n    repeatedly inside your functions is not a problem.\n\n    ",
                                            'methods': [('__new__', ['dtype'], ''),
                                                        ('_init', ['dtype'], ''),
                                                        ('__str__', [], '')],
                                            'properties': ['_finfo_cache',
                                                           'dtype',
                                                           'max',
                                                           'min',
                                                           'eps',
                                                           'nexp',
                                                           'nmant',
                                                           'machar',
                                                           '_str_tiny',
                                                           '_str_max',
                                                           '_str_epsneg',
                                                           '_str_eps',
                                                           '_str_resolution']},
             'numpy.core.getlimits.iinfo': {'bases': [],
                                            'constructor': ['int_type'],
                                            'docstring': '\n    iinfo(type)\n\n    Machine limits for integer types.\n\n    Attributes\n    ----------\n    min : int\n        The smallest integer expressible by the type.\n    max : int\n        The largest integer expressible by the type.\n\n    Parameters\n    ----------\n    type : integer type, dtype, or instance\n        The kind of integer data type to get information about.\n\n    See Also\n    --------\n    finfo : The equivalent for floating point data types.\n\n    Examples\n    --------\n    With types:\n\n    >>> ii16 = np.iinfo(np.int16)\n    >>> ii16.min\n    -32768\n    >>> ii16.max\n    32767\n    >>> ii32 = np.iinfo(np.int32)\n    >>> ii32.min\n    -2147483648\n    >>> ii32.max\n    2147483647\n\n    With instances:\n\n    >>> ii32 = np.iinfo(np.int32(10))\n    >>> ii32.min\n    -2147483648\n    >>> ii32.max\n    2147483647\n\n    ',
                                            'methods': [('min',
                                                         [],
                                                         'Minimum value of given dtype.'),
                                                        ('max',
                                                         [],
                                                         'Maximum value of given dtype.'),
                                                        ('__str__',
                                                         [],
                                                         'String representation.')],
                                            'properties': ['_min_vals',
                                                           '_max_vals',
                                                           'dtype',
                                                           'kind',
                                                           'bits',
                                                           'key',
                                                           'min',
                                                           'max']},
             'numpy.core.machar.MachAr': {'bases': ['object'],
                                          'constructor': ['float_conv=float',
                                                          'int_conv=int',
                                                          'float_to_float=float',
                                                          "float_to_str=lambda v: '%24.16e'%v",
                                                          "title='Python floating point number'"],
                                          'docstring': '\n    Diagnosing machine parameters.\n\n    Attributes\n    ----------\n    ibeta : int\n        Radix in which numbers are represented.\n    it : int\n        Number of base-`ibeta` digits in the floating point mantissa M.\n    machep : int\n        Exponent of the smallest (most negative) power of `ibeta` that,\n        added to 1.0, gives something different from 1.0\n    eps : float\n        Floating-point number ``beta**machep`` (floating point precision)\n    negep : int\n        Exponent of the smallest power of `ibeta` that, substracted\n        from 1.0, gives something different from 1.0.\n    epsneg : float\n        Floating-point number ``beta**negep``.\n    iexp : int\n        Number of bits in the exponent (including its sign and bias).\n    minexp : int\n        Smallest (most negative) power of `ibeta` consistent with there\n        being no leading zeros in the mantissa.\n    xmin : float\n        Floating point number ``beta**minexp`` (the smallest [in\n        magnitude] usable floating value).\n    maxexp : int\n        Smallest (positive) power of `ibeta` that causes overflow.\n    xmax : float\n        ``(1-epsneg) * beta**maxexp`` (the largest [in magnitude]\n        usable floating value).\n    irnd : int\n        In ``range(6)``, information on what kind of rounding is done\n        in addition, and on how underflow is handled.\n    ngrd : int\n        Number of \'guard digits\' used when truncating the product\n        of two mantissas to fit the representation.\n    epsilon : float\n        Same as `eps`.\n    tiny : float\n        Same as `xmin`.\n    huge : float\n        Same as `xmax`.\n    precision : float\n        ``- int(-log10(eps))``\n    resolution : float\n        ``- 10**(-precision)``\n\n    Parameters\n    ----------\n    float_conv : function, optional\n        Function that converts an integer or integer array to a float\n        or float array. Default is `float`.\n    int_conv : function, optional\n        Function that converts a float or float array to an integer or\n        integer array. Default is `int`.\n    float_to_float : function, optional\n        Function that converts a float array to float. Default is `float`.\n        Note that this does not seem to do anything useful in the current\n        implementation.\n    float_to_str : function, optional\n        Function that converts a single float to a string. Default is\n        ``lambda v:\'%24.16e\' %v``.\n    title : str, optional\n        Title that is printed in the string representation of `MachAr`.\n\n    See Also\n    --------\n    finfo : Machine limits for floating point types.\n    iinfo : Machine limits for integer types.\n\n    References\n    ----------\n    .. [1] Press, Teukolsky, Vetterling and Flannery,\n           "Numerical Recipes in C++," 2nd ed,\n           Cambridge University Press, 2002, p. 31.\n\n    ',
                                          'methods': [('_do_init',
                                                       ['float_conv',
                                                        'int_conv',
                                                        'float_to_float',
                                                        'float_to_str',
                                                        'title'],
                                                       ''),
                                                      ('__str__', [], '')],
                                          'properties': ['ibeta',
                                                         'it',
                                                         'negep',
                                                         'epsneg',
                                                         '_str_epsneg',
                                                         'machep',
                                                         'eps',
                                                         '_str_eps',
                                                         'ngrd',
                                                         'iexp',
                                                         'minexp',
                                                         'xmin',
                                                         '_str_xmin',
                                                         'maxexp',
                                                         'xmax',
                                                         '_str_xmax',
                                                         'irnd',
                                                         'title',
                                                         'epsilon',
                                                         'tiny',
                                                         'huge',
                                                         'precision',
                                                         'resolution',
                                                         '_str_resolution']},
             'numpy.core.memmap.memmap': {'bases': ['numeric.ndarray'],
                                          'constructor': [],
                                          'docstring': "\n    Create a memory-map to an array stored in a *binary* file on disk.\n\n    Memory-mapped files are used for accessing small segments of large files\n    on disk, without reading the entire file into memory.  Numpy's\n    memmap's are array-like objects.  This differs from Python's ``mmap``\n    module, which uses file-like objects.\n\n    Parameters\n    ----------\n    filename : str or file-like object\n        The file name or file object to be used as the array data buffer.\n    dtype : data-type, optional\n        The data-type used to interpret the file contents.\n        Default is `uint8`.\n    mode : {'r+', 'r', 'w+', 'c'}, optional\n        The file is opened in this mode:\n\n        +------+-------------------------------------------------------------+\n        | 'r'  | Open existing file for reading only.                        |\n        +------+-------------------------------------------------------------+\n        | 'r+' | Open existing file for reading and writing.                 |\n        +------+-------------------------------------------------------------+\n        | 'w+' | Create or overwrite existing file for reading and writing.  |\n        +------+-------------------------------------------------------------+\n        | 'c'  | Copy-on-write: assignments affect data in memory, but       |\n        |      | changes are not saved to disk.  The file on disk is         |\n        |      | read-only.                                                  |\n        +------+-------------------------------------------------------------+\n\n        Default is 'r+'.\n    offset : int, optional\n        In the file, array data starts at this offset. Since `offset` is\n        measured in bytes, it should be a multiple of the byte-size of\n        `dtype`. Requires ``shape=None``. The default is 0.\n    shape : tuple, optional\n        The desired shape of the array. By default, the returned array will be\n        1-D with the number of elements determined by file size and data-type.\n    order : {'C', 'F'}, optional\n        Specify the order of the ndarray memory layout: C (row-major) or\n        Fortran (column-major).  This only has an effect if the shape is\n        greater than 1-D.  The default order is 'C'.\n\n    Attributes\n    ----------\n    filename : str\n        Path to the mapped file.\n    offset : int\n        Offset position in the file.\n    mode : str\n        File mode.\n\n\n    Methods\n    -------\n    close\n        Close the memmap file.\n    flush\n        Flush any changes in memory to file on disk.\n        When you delete a memmap object, flush is called first to write\n        changes to disk before removing the object.\n\n    Notes\n    -----\n    The memmap object can be used anywhere an ndarray is accepted.\n    Given a memmap ``fp``, ``isinstance(fp, numpy.ndarray)`` returns\n    ``True``.\n\n    Memory-mapped arrays use the Python memory-map object which\n    (prior to Python 2.5) does not allow files to be larger than a\n    certain size depending on the platform. This size is always < 2GB\n    even on 64-bit systems.\n\n    Examples\n    --------\n    >>> data = np.arange(12, dtype='float32')\n    >>> data.resize((3,4))\n\n    This example uses a temporary file so that doctest doesn't write\n    files to your directory. You would use a 'normal' filename.\n\n    >>> from tempfile import mkdtemp\n    >>> import os.path as path\n    >>> filename = path.join(mkdtemp(), 'newfile.dat')\n\n    Create a memmap with dtype and shape that matches our data:\n\n    >>> fp = np.memmap(filename, dtype='float32', mode='w+', shape=(3,4))\n    >>> fp\n    memmap([[ 0.,  0.,  0.,  0.],\n            [ 0.,  0.,  0.,  0.],\n            [ 0.,  0.,  0.,  0.]], dtype=float32)\n\n    Write data to memmap array:\n\n    >>> fp[:] = data[:]\n    >>> fp\n    memmap([[  0.,   1.,   2.,   3.],\n            [  4.,   5.,   6.,   7.],\n            [  8.,   9.,  10.,  11.]], dtype=float32)\n\n    >>> fp.filename == path.abspath(filename)\n    True\n\n    Deletion flushes memory changes to disk before removing the object:\n\n    >>> del fp\n\n    Load the memmap and verify data was stored:\n\n    >>> newfp = np.memmap(filename, dtype='float32', mode='r', shape=(3,4))\n    >>> newfp\n    memmap([[  0.,   1.,   2.,   3.],\n            [  4.,   5.,   6.,   7.],\n            [  8.,   9.,  10.,  11.]], dtype=float32)\n\n    Read-only memmap:\n\n    >>> fpr = np.memmap(filename, dtype='float32', mode='r', shape=(3,4))\n    >>> fpr.flags.writeable\n    False\n\n    Copy-on-write memmap:\n\n    >>> fpc = np.memmap(filename, dtype='float32', mode='c', shape=(3,4))\n    >>> fpc.flags.writeable\n    True\n\n    It's possible to assign to copy-on-write array, but values are only\n    written into the memory copy of the array, and not written to disk:\n\n    >>> fpc\n    memmap([[  0.,   1.,   2.,   3.],\n            [  4.,   5.,   6.,   7.],\n            [  8.,   9.,  10.,  11.]], dtype=float32)\n    >>> fpc[0,:] = 0\n    >>> fpc\n    memmap([[  0.,   0.,   0.,   0.],\n            [  4.,   5.,   6.,   7.],\n            [  8.,   9.,  10.,  11.]], dtype=float32)\n\n    File on disk is unchanged:\n\n    >>> fpr\n    memmap([[  0.,   1.,   2.,   3.],\n            [  4.,   5.,   6.,   7.],\n            [  8.,   9.,  10.,  11.]], dtype=float32)\n\n    Offset into a memmap:\n\n    >>> fpo = np.memmap(filename, dtype='float32', mode='r', offset=16)\n    >>> fpo\n    memmap([  4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.], dtype=float32)\n\n    ",
                                          'methods': [('__new__',
                                                       ['filename',
                                                        'dtype=uint8',
                                                        "mode='r+'",
                                                        'offset=0',
                                                        'shape=None',
                                                        "order='C'"],
                                                       ''),
                                                      ('__array_finalize__', ['obj'], ''),
                                                      ('flush',
                                                       [],
                                                       '\n        Write any changes in the array to the file on disk.\n\n        For further information, see `memmap`.\n\n        Parameters\n        ----------\n        None\n\n        See Also\n        --------\n        memmap\n\n        '),
                                                      ('_close',
                                                       [],
                                                       'Close the memmap file.  Only do this when deleting the object.'),
                                                      ('__del__', [], '')],
                                          'properties': ['__array_priority__',
                                                         '_mmap',
                                                         'offset',
                                                         'mode',
                                                         'filename']},
             'numpy.core.numeric.ComplexWarning': {'bases': ['RuntimeWarning'],
                                                   'constructor': [],
                                                   'docstring': '\n    The warning raised when casting a complex dtype to a real dtype.\n\n    As implemented, casting a complex number to a real discards its imaginary\n    part, but this behavior may not be what the user actually wants.\n\n    ',
                                                   'methods': [],
                                                   'properties': []},
             'numpy.core.numeric._unspecified': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'numpy.core.numeric.errstate': {'bases': ['object'],
                                             'constructor': ['**kwargs'],
                                             'docstring': '\n    errstate(**kwargs)\n\n    Context manager for floating-point error handling.\n\n    Using an instance of `errstate` as a context manager allows statements in\n    that context to execute with a known error handling behavior. Upon entering\n    the context the error handling is set with `seterr` and `seterrcall`, and\n    upon exiting it is reset to what it was before.\n\n    Parameters\n    ----------\n    kwargs : {divide, over, under, invalid}\n        Keyword arguments. The valid keywords are the possible floating-point\n        exceptions. Each keyword should have a string value that defines the\n        treatment for the particular error. Possible values are\n        {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}.\n\n    See Also\n    --------\n    seterr, geterr, seterrcall, geterrcall\n\n    Notes\n    -----\n    The ``with`` statement was introduced in Python 2.5, and can only be used\n    there by importing it: ``from __future__ import with_statement``. In\n    earlier Python versions the ``with`` statement is not available.\n\n    For complete documentation of the types of floating-point exceptions and\n    treatment options, see `seterr`.\n\n    Examples\n    --------\n    >>> from __future__ import with_statement  # use \'with\' in Python 2.5\n    >>> olderr = np.seterr(all=\'ignore\')  # Set error handling to known state.\n\n    >>> np.arange(3) / 0.\n    array([ NaN,  Inf,  Inf])\n    >>> with np.errstate(divide=\'warn\'):\n    ...     np.arange(3) / 0.\n    ...\n    __main__:2: RuntimeWarning: divide by zero encountered in divide\n    array([ NaN,  Inf,  Inf])\n\n    >>> np.sqrt(-1)\n    nan\n    >>> with np.errstate(invalid=\'raise\'):\n    ...     np.sqrt(-1)\n    Traceback (most recent call last):\n      File "<stdin>", line 2, in <module>\n    FloatingPointError: invalid value encountered in sqrt\n\n    Outside the context the error handling behavior has not changed:\n\n    >>> np.geterr()\n    {\'over\': \'warn\', \'divide\': \'warn\', \'invalid\': \'warn\',\n    \'under\': \'ignore\'}\n\n    ',
                                             'methods': [('__enter__', [], ''),
                                                         ('__exit__', ['*exc_info'], '')],
                                             'properties': ['call',
                                                            'kwargs',
                                                            'oldstate',
                                                            'oldcall']},
             'numpy.core.numerictypes._typedict': {'bases': ['dict'],
                                                   'constructor': [],
                                                   'docstring': '\n    Base object for a dictionary for look-up with any alias for an array dtype.\n\n    Instances of `_typedict` can not be used as dictionaries directly,\n    first they have to be populated.\n\n    ',
                                                   'methods': [('__getitem__', ['obj'], '')],
                                                   'properties': []},
             'numpy.core.numerictypes.long': {'bases': ['int'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'numpy.core.records.format_parser': {'bases': [],
                                                  'constructor': ['formats',
                                                                  'names',
                                                                  'titles',
                                                                  'aligned=False',
                                                                  'byteorder=None'],
                                                  'docstring': "\n    Class to convert formats, names, titles description to a dtype.\n\n    After constructing the format_parser object, the dtype attribute is\n    the converted data-type:\n    ``dtype = format_parser(formats, names, titles).dtype``\n\n    Attributes\n    ----------\n    dtype : dtype\n        The converted data-type.\n\n    Parameters\n    ----------\n    formats : str or list of str\n        The format description, either specified as a string with\n        comma-separated format descriptions in the form ``'f8, i4, a5'``, or\n        a list of format description strings  in the form\n        ``['f8', 'i4', 'a5']``.\n    names : str or list/tuple of str\n        The field names, either specified as a comma-separated string in the\n        form ``'col1, col2, col3'``, or as a list or tuple of strings in the\n        form ``['col1', 'col2', 'col3']``.\n        An empty list can be used, in that case default field names\n        ('f0', 'f1', ...) are used.\n    titles : sequence\n        Sequence of title strings. An empty list can be used to leave titles\n        out.\n    aligned : bool, optional\n        If True, align the fields by padding as the C-compiler would.\n        Default is False.\n    byteorder : str, optional\n        If specified, all the fields will be changed to the\n        provided byte-order.  Otherwise, the default byte-order is\n        used. For all available string specifiers, see `dtype.newbyteorder`.\n\n    See Also\n    --------\n    dtype, typename, sctype2char\n\n    Examples\n    --------\n    >>> np.format_parser(['f8', 'i4', 'a5'], ['col1', 'col2', 'col3'],\n    ...                  ['T1', 'T2', 'T3']).dtype\n    dtype([(('T1', 'col1'), '<f8'), (('T2', 'col2'), '<i4'),\n           (('T3', 'col3'), '|S5')])\n\n    `names` and/or `titles` can be empty lists. If `titles` is an empty list,\n    titles will simply not appear. If `names` is empty, default field names\n    will be used.\n\n    >>> np.format_parser(['f8', 'i4', 'a5'], ['col1', 'col2', 'col3'],\n    ...                  []).dtype\n    dtype([('col1', '<f8'), ('col2', '<i4'), ('col3', '|S5')])\n    >>> np.format_parser(['f8', 'i4', 'a5'], [], []).dtype\n    dtype([('f0', '<f8'), ('f1', '<i4'), ('f2', '|S5')])\n\n    ",
                                                  'methods': [('_parseFormats',
                                                               ['formats', 'aligned=0'],
                                                               ' Parse the field formats '),
                                                              ('_setfieldnames',
                                                               ['names', 'titles'],
                                                               'convert input field names into a list and assign to the _names\n        attribute '),
                                                              ('_createdescr',
                                                               ['byteorder'],
                                                               '')],
                                                  'properties': ['dtype',
                                                                 '_f_formats',
                                                                 '_offsets',
                                                                 '_nfields',
                                                                 '_names',
                                                                 '_titles',
                                                                 '_descr']},
             'numpy.core.records.recarray': {'bases': ['numpy.core.records.ndarray'],
                                             'constructor': [],
                                             'docstring': "\n    Construct an ndarray that allows field access using attributes.\n\n    Arrays may have a data-types containing fields, analogous\n    to columns in a spread sheet.  An example is ``[(x, int), (y, float)]``,\n    where each entry in the array is a pair of ``(int, float)``.  Normally,\n    these attributes are accessed using dictionary lookups such as ``arr['x']``\n    and ``arr['y']``.  Record arrays allow the fields to be accessed as members\n    of the array, using ``arr.x`` and ``arr.y``.\n\n    Parameters\n    ----------\n    shape : tuple\n        Shape of output array.\n    dtype : data-type, optional\n        The desired data-type.  By default, the data-type is determined\n        from `formats`, `names`, `titles`, `aligned` and `byteorder`.\n    formats : list of data-types, optional\n        A list containing the data-types for the different columns, e.g.\n        ``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\n        convention of using types directly, i.e. ``(int, float, int)``.\n        Note that `formats` must be a list, not a tuple.\n        Given that `formats` is somewhat limited, we recommend specifying\n        `dtype` instead.\n    names : tuple of str, optional\n        The name of each column, e.g. ``('x', 'y', 'z')``.\n    buf : buffer, optional\n        By default, a new array is created of the given shape and data-type.\n        If `buf` is specified and is an object exposing the buffer interface,\n        the array will use the memory from the existing buffer.  In this case,\n        the `offset` and `strides` keywords are available.\n\n    Other Parameters\n    ----------------\n    titles : tuple of str, optional\n        Aliases for column names.  For example, if `names` were\n        ``('x', 'y', 'z')`` and `titles` is\n        ``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n        ``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.\n    byteorder : {'<', '>', '='}, optional\n        Byte-order for all fields.\n    aligned : bool, optional\n        Align the fields in memory as the C-compiler would.\n    strides : tuple of ints, optional\n        Buffer (`buf`) is interpreted according to these strides (strides\n        define how many bytes each array element, row, column, etc.\n        occupy in memory).\n    offset : int, optional\n        Start reading buffer (`buf`) from this offset onwards.\n    order : {'C', 'F'}, optional\n        Row-major or column-major order.\n\n    Returns\n    -------\n    rec : recarray\n        Empty array of the given shape and type.\n\n    See Also\n    --------\n    rec.fromrecords : Construct a record array from data.\n    record : fundamental data-type for `recarray`.\n    format_parser : determine a data-type from formats, names, titles.\n\n    Notes\n    -----\n    This constructor can be compared to ``empty``: it creates a new record\n    array but does not fill it with data.  To create a record array from data,\n    use one of the following methods:\n\n    1. Create a standard ndarray and convert it to a record array,\n       using ``arr.view(np.recarray)``\n    2. Use the `buf` keyword.\n    3. Use `np.rec.fromrecords`.\n\n    Examples\n    --------\n    Create an array with two fields, ``x`` and ``y``:\n\n    >>> x = np.array([(1.0, 2), (3.0, 4)], dtype=[('x', float), ('y', int)])\n    >>> x\n    array([(1.0, 2), (3.0, 4)],\n          dtype=[('x', '<f8'), ('y', '<i4')])\n\n    >>> x['x']\n    array([ 1.,  3.])\n\n    View the array as a record array:\n\n    >>> x = x.view(np.recarray)\n\n    >>> x.x\n    array([ 1.,  3.])\n\n    >>> x.y\n    array([2, 4])\n\n    Create a new, empty record array:\n\n    >>> np.recarray((2,),\n    ... dtype=[('x', int), ('y', float), ('z', int)]) #doctest: +SKIP\n    rec.array([(-1073741821, 1.2249118382103472e-301, 24547520),\n           (3471280, 1.2134086255804012e-316, 0)],\n          dtype=[('x', '<i4'), ('y', '<f8'), ('z', '<i4')])\n\n    ",
                                             'methods': [('__new__',
                                                          ['shape',
                                                           'dtype=None',
                                                           'buf=None',
                                                           'offset=0',
                                                           'strides=None',
                                                           'formats=None',
                                                           'names=None',
                                                           'titles=None',
                                                           'byteorder=None',
                                                           'aligned=False',
                                                           "order='C'"],
                                                          ''),
                                                         ('__getattribute__', ['attr'], ''),
                                                         ('__setattr__', ['attr', 'val'], ''),
                                                         ('__getitem__', ['indx'], ''),
                                                         ('__repr__', [], ''),
                                                         ('field', ['attr', 'val=None'], ''),
                                                         ('view',
                                                          ['dtype=None', 'type=None'],
                                                          '')],
                                             'properties': []},
             'numpy.core.records.record': {'bases': ['numerictypes.void'],
                                           'constructor': [],
                                           'docstring': 'A data-type scalar that allows field access as attribute lookup.\n    ',
                                           'methods': [('__repr__', [], ''),
                                                       ('__str__', [], ''),
                                                       ('__getattribute__', ['attr'], ''),
                                                       ('__setattr__', ['attr', 'val'], ''),
                                                       ('pprint',
                                                        [],
                                                        'Pretty-print all fields.')],
                                           'properties': []},
             'numpy.core.setup.CallOnceOnly': {'bases': ['object'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('check_types', ['*a', '**kw'], ''),
                                                           ('check_ieee_macros',
                                                            ['*a', '**kw'],
                                                            ''),
                                                           ('check_complex',
                                                            ['*a', '**kw'],
                                                            '')],
                                               'properties': ['_check_types',
                                                              '_check_ieee_macros',
                                                              '_check_complex']},
             'numpy.core.setup_common.MismatchCAPIWarning': {'bases': ['Warning'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': []},
             'numpy.ctypeslib._ndptr': {'bases': ['numpy.ctypeslib._ndptr_base'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('_check_retval_',
                                                     [],
                                                     'This method is called when this class is used as the .restype\n        asttribute for a shared-library function.   It constructs a numpy\n        array from a void pointer.'),
                                                    ('from_param', ['obj'], '')],
                                        'properties': ['__array_interface__']},
             'numpy.distutils.command.bdist_rpm.bdist_rpm': {'bases': ['distutils.command.bdist_rpm.bdist_rpm'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('_make_spec_file',
                                                                          [],
                                                                          '')],
                                                             'properties': []},
             'numpy.distutils.command.build.build': {'bases': ['distutils.command.build.build'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('initialize_options', [], ''),
                                                                 ('finalize_options', [], ''),
                                                                 ('run', [], '')],
                                                     'properties': ['sub_commands',
                                                                    'user_options',
                                                                    'help_options',
                                                                    'fcompiler',
                                                                    'build_scripts']},
             'numpy.distutils.command.build_clib.build_clib': {'bases': ['distutils.command.build_clib.build_clib'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('initialize_options',
                                                                            [],
                                                                            ''),
                                                                           ('have_f_sources',
                                                                            [],
                                                                            ''),
                                                                           ('have_cxx_sources',
                                                                            [],
                                                                            ''),
                                                                           ('run', [], ''),
                                                                           ('get_source_files',
                                                                            [],
                                                                            ''),
                                                                           ('build_libraries',
                                                                            ['libraries'],
                                                                            ''),
                                                                           ('build_a_library',
                                                                            ['build_info',
                                                                             'lib_name',
                                                                             'libraries'],
                                                                            '')],
                                                               'properties': ['description',
                                                                              'user_options',
                                                                              'boolean_options',
                                                                              'fcompiler',
                                                                              'inplace',
                                                                              'compiler',
                                                                              'libraries',
                                                                              '_f_compiler']},
             'numpy.distutils.command.build_ext.build_ext': {'bases': ['distutils.command.build_ext.build_ext'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('initialize_options',
                                                                          [],
                                                                          ''),
                                                                         ('finalize_options',
                                                                          [],
                                                                          ''),
                                                                         ('run', [], ''),
                                                                         ('swig_sources',
                                                                          ['sources'],
                                                                          ''),
                                                                         ('build_extension',
                                                                          ['ext'],
                                                                          ''),
                                                                         ('_add_dummy_mingwex_sym',
                                                                          ['c_sources'],
                                                                          ''),
                                                                         ('_libs_with_msvc_and_fortran',
                                                                          ['fcompiler',
                                                                           'c_libraries',
                                                                           'c_library_dirs'],
                                                                          ''),
                                                                         ('get_source_files',
                                                                          [],
                                                                          ''),
                                                                         ('get_outputs',
                                                                          [],
                                                                          '')],
                                                             'properties': ['description',
                                                                            'user_options',
                                                                            'help_options',
                                                                            'fcompiler',
                                                                            'compiler',
                                                                            '_cxx_compiler',
                                                                            '_f77_compiler',
                                                                            '_f90_compiler']},
             'numpy.distutils.command.build_py.build_py': {'bases': ['distutils.command.build_py.build_py'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('run', [], ''),
                                                                       ('find_package_modules',
                                                                        ['package',
                                                                         'package_dir'],
                                                                        ''),
                                                                       ('find_modules', [], '')],
                                                           'properties': ['packages']},
             'numpy.distutils.command.build_scripts.build_scripts': {'bases': ['distutils.command.build_scripts.build_scripts'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('generate_scripts',
                                                                                  ['scripts'],
                                                                                  ''),
                                                                                 ('run',
                                                                                  [],
                                                                                  ''),
                                                                                 ('get_source_files',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['scripts']},
             'numpy.distutils.command.build_src.build_src': {'bases': ['distutils.command.build_ext.build_ext'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('initialize_options',
                                                                          [],
                                                                          ''),
                                                                         ('finalize_options',
                                                                          [],
                                                                          ''),
                                                                         ('run', [], ''),
                                                                         ('build_sources',
                                                                          [],
                                                                          ''),
                                                                         ('build_data_files_sources',
                                                                          [],
                                                                          ''),
                                                                         ('_build_npy_pkg_config',
                                                                          ['info', 'gd'],
                                                                          ''),
                                                                         ('build_npy_pkg_config',
                                                                          [],
                                                                          ''),
                                                                         ('build_py_modules_sources',
                                                                          [],
                                                                          ''),
                                                                         ('build_library_sources',
                                                                          ['lib_name',
                                                                           'build_info'],
                                                                          ''),
                                                                         ('build_extension_sources',
                                                                          ['ext'],
                                                                          ''),
                                                                         ('generate_sources',
                                                                          ['sources',
                                                                           'extension'],
                                                                          ''),
                                                                         ('filter_py_files',
                                                                          ['sources'],
                                                                          ''),
                                                                         ('filter_h_files',
                                                                          ['sources'],
                                                                          ''),
                                                                         ('filter_files',
                                                                          ['sources',
                                                                           'exts=[]'],
                                                                          ''),
                                                                         ('template_sources',
                                                                          ['sources',
                                                                           'extension'],
                                                                          ''),
                                                                         ('pyrex_sources',
                                                                          ['sources',
                                                                           'extension'],
                                                                          ''),
                                                                         ('generate_a_pyrex_source',
                                                                          ['base',
                                                                           'ext_name',
                                                                           'source',
                                                                           'extension'],
                                                                          ''),
                                                                         ('f2py_sources',
                                                                          ['sources',
                                                                           'extension'],
                                                                          ''),
                                                                         ('swig_sources',
                                                                          ['sources',
                                                                           'extension'],
                                                                          '')],
                                                             'properties': ['description',
                                                                            'user_options',
                                                                            'boolean_options',
                                                                            'help_options',
                                                                            'extensions',
                                                                            'package',
                                                                            'py_modules',
                                                                            'py_modules_dict',
                                                                            'build_src',
                                                                            'build_lib',
                                                                            'build_base',
                                                                            'force',
                                                                            'inplace',
                                                                            'package_dir',
                                                                            'f2pyflags',
                                                                            'f2py_opts',
                                                                            'swigflags',
                                                                            'swig_opts',
                                                                            'swig_cpp',
                                                                            'swig',
                                                                            'libraries',
                                                                            'data_files',
                                                                            'get_package_dir',
                                                                            'ext_target_dir']},
             'numpy.distutils.command.config.GrabStdout': {'bases': ['object'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('write', ['data'], ''),
                                                                       ('flush', [], ''),
                                                                       ('restore', [], '')],
                                                           'properties': ['sys_stdout', 'data']},
             'numpy.distutils.command.config.config': {'bases': ['distutils.command.config.config'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('initialize_options',
                                                                    [],
                                                                    ''),
                                                                   ('try_run',
                                                                    ['body',
                                                                     'headers=None',
                                                                     'include_dirs=None',
                                                                     'libraries=None',
                                                                     'library_dirs=None',
                                                                     "lang='c'"],
                                                                    ''),
                                                                   ('_check_compiler', [], ''),
                                                                   ('_wrap_method',
                                                                    ['mth', 'lang', 'args'],
                                                                    ''),
                                                                   ('_compile',
                                                                    ['body',
                                                                     'headers',
                                                                     'include_dirs',
                                                                     'lang'],
                                                                    ''),
                                                                   ('_link',
                                                                    ['body',
                                                                     'headers',
                                                                     'include_dirs',
                                                                     'libraries',
                                                                     'library_dirs',
                                                                     'lang'],
                                                                    ''),
                                                                   ('check_header',
                                                                    ['header',
                                                                     'include_dirs=None',
                                                                     'library_dirs=None',
                                                                     "lang='c'"],
                                                                    ''),
                                                                   ('check_decl',
                                                                    ['symbol',
                                                                     'headers=None',
                                                                     'include_dirs=None'],
                                                                    ''),
                                                                   ('check_macro_true',
                                                                    ['symbol',
                                                                     'headers=None',
                                                                     'include_dirs=None'],
                                                                    ''),
                                                                   ('check_type',
                                                                    ['type_name',
                                                                     'headers=None',
                                                                     'include_dirs=None',
                                                                     'library_dirs=None'],
                                                                    'Check type availability. Return True if the type can be compiled,\n        False otherwise'),
                                                                   ('check_type_size',
                                                                    ['type_name',
                                                                     'headers=None',
                                                                     'include_dirs=None',
                                                                     'library_dirs=None',
                                                                     'expected=None'],
                                                                    'Check size of a given type.'),
                                                                   ('check_func',
                                                                    ['func',
                                                                     'headers=None',
                                                                     'include_dirs=None',
                                                                     'libraries=None',
                                                                     'library_dirs=None',
                                                                     'decl=False',
                                                                     'call=False',
                                                                     'call_args=None'],
                                                                    ''),
                                                                   ('check_funcs_once',
                                                                    ['funcs',
                                                                     'headers=None',
                                                                     'include_dirs=None',
                                                                     'libraries=None',
                                                                     'library_dirs=None',
                                                                     'decl=False',
                                                                     'call=False',
                                                                     'call_args=None'],
                                                                    'Check a list of functions at once.\n\n        This is useful to speed up things, since all the functions in the funcs\n        list will be put in one compilation unit.\n\n        Arguments\n        ---------\n        funcs: seq\n            list of functions to test\n        include_dirs : seq\n            list of header paths\n        libraries : seq\n            list of libraries to link the code snippet to\n        libraru_dirs : seq\n            list of library paths\n        decl : dict\n            for every (key, value), the declaration in the value will be\n            used for function in key. If a function is not in the\n            dictionay, no declaration will be used.\n        call : dict\n            for every item (f, value), if the value is True, a call will be\n            done to the function f.\n        '),
                                                                   ('check_inline',
                                                                    [],
                                                                    'Return the inline keyword recognized by the compiler, empty string\n        otherwise.'),
                                                                   ('check_compiler_gcc4',
                                                                    [],
                                                                    'Return True if the C compiler is gcc >= 4.'),
                                                                   ('get_output',
                                                                    ['body',
                                                                     'headers=None',
                                                                     'include_dirs=None',
                                                                     'libraries=None',
                                                                     'library_dirs=None',
                                                                     "lang='c'"],
                                                                    "Try to compile, link to an executable, and run a program\n        built from 'body' and 'headers'. Returns the exit status code\n        of the program and its output.\n        ")],
                                                       'properties': ['fcompiler', 'compiler']},
             'numpy.distutils.command.config_compiler.config_cc': {'bases': ['distutils.core.Command'],
                                                                   'constructor': [],
                                                                   'docstring': ' Distutils command to hold user specified options\n    to C/C++ compilers.\n    ',
                                                                   'methods': [('initialize_options',
                                                                                [],
                                                                                ''),
                                                                               ('finalize_options',
                                                                                [],
                                                                                ''),
                                                                               ('run', [], '')],
                                                                   'properties': ['description',
                                                                                  'user_options',
                                                                                  'compiler']},
             'numpy.distutils.command.config_compiler.config_fc': {'bases': ['distutils.core.Command'],
                                                                   'constructor': [],
                                                                   'docstring': ' Distutils command to hold user specified options\n    to Fortran compilers.\n\n    config_fc command is used by the FCompiler.customize() method.\n    ',
                                                                   'methods': [('initialize_options',
                                                                                [],
                                                                                ''),
                                                                               ('finalize_options',
                                                                                [],
                                                                                ''),
                                                                               ('run', [], '')],
                                                                   'properties': ['description',
                                                                                  'user_options',
                                                                                  'help_options',
                                                                                  'boolean_options',
                                                                                  'fcompiler',
                                                                                  'f77exec',
                                                                                  'f90exec',
                                                                                  'f77flags',
                                                                                  'f90flags',
                                                                                  'opt',
                                                                                  'arch',
                                                                                  'debug',
                                                                                  'noopt',
                                                                                  'noarch']},
             'numpy.distutils.command.develop.develop': {'bases': ['setuptools.command.develop.develop'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('install_for_development',
                                                                      [],
                                                                      '')],
                                                         'properties': ['__doc__']},
             'numpy.distutils.command.egg_info.egg_info': {'bases': ['setuptools.command.egg_info.egg_info'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('run', [], '')],
                                                           'properties': []},
             'numpy.distutils.command.install.install': {'bases': ['numpy.distutils.command.install.old_install'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('finalize_options',
                                                                      [],
                                                                      ''),
                                                                     ('setuptools_run',
                                                                      [],
                                                                      ' The setuptools version of the .run() method.\n\n        We must pull in the entire code so we can override the level used in the\n        _getframe() call since we wrap this call by one more level.\n        '),
                                                                     ('run', [], '')],
                                                         'properties': ['sub_commands',
                                                                        'install_lib']},
             'numpy.distutils.command.install_clib.install_clib': {'bases': ['distutils.core.Command'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('initialize_options',
                                                                                [],
                                                                                ''),
                                                                               ('finalize_options',
                                                                                [],
                                                                                ''),
                                                                               ('run', [], ''),
                                                                               ('get_outputs',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['description',
                                                                                  'user_options',
                                                                                  'install_dir',
                                                                                  'outfiles']},
             'numpy.distutils.command.install_data.install_data': {'bases': ['distutils.command.install_data.install_data'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('run', [], ''),
                                                                               ('finalize_options',
                                                                                [],
                                                                                '')],
                                                                   'properties': []},
             'numpy.distutils.command.install_headers.install_headers': {'bases': ['distutils.command.install_headers.install_headers'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('run',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': []},
             'numpy.distutils.command.scons.scons': {'bases': ['numpy.distutils.command.build_ext.build_ext'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('initialize_options', [], ''),
                                                                 ('_init_ccompiler',
                                                                  ['compiler_type'],
                                                                  ''),
                                                                 ('_init_fcompiler',
                                                                  ['compiler_type'],
                                                                  ''),
                                                                 ('_init_cxxcompiler',
                                                                  ['compiler_type'],
                                                                  ''),
                                                                 ('finalize_options', [], ''),
                                                                 ('_call_scons',
                                                                  ['scons_exec',
                                                                   'sconscript',
                                                                   'pkg_name',
                                                                   'pkg_path',
                                                                   'bootstrapping'],
                                                                  ''),
                                                                 ('run', [], '')],
                                                     'properties': ['description',
                                                                    'library_options',
                                                                    'user_options',
                                                                    'build_clib',
                                                                    'debug',
                                                                    'compiler',
                                                                    'cxxcompiler',
                                                                    'fcompiler',
                                                                    'jobs',
                                                                    'silent',
                                                                    'import_env',
                                                                    'scons_tool_path',
                                                                    '_bypass_distutils_cc',
                                                                    'scons_compiler',
                                                                    'scons_compiler_path',
                                                                    'scons_fcompiler',
                                                                    'scons_fcompiler_path',
                                                                    'scons_cxxcompiler',
                                                                    'scons_cxxcompiler_path',
                                                                    'package_list',
                                                                    'inplace',
                                                                    'bypass',
                                                                    'log_level',
                                                                    'with_perflib',
                                                                    'with_mkl_lib',
                                                                    'with_mkl_include',
                                                                    'with_mkl_libraries',
                                                                    'with_atlas_lib',
                                                                    'with_atlas_include',
                                                                    'with_atlas_libraries',
                                                                    'sconscripts',
                                                                    'pre_hooks',
                                                                    'post_hooks',
                                                                    'pkg_names',
                                                                    'pkg_paths']},
             'numpy.distutils.command.sdist.sdist': {'bases': ['distutils.command.sdist.sdist'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('add_defaults', [], '')],
                                                     'properties': []},
             'numpy.distutils.cpuinfo.CPUInfoBase': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': 'Holds CPU information and provides methods for requiring\n    the availability of various CPU features.\n    ',
                                                     'methods': [('_try_call', ['func'], ''),
                                                                 ('__getattr__', ['name'], ''),
                                                                 ('_getNCPUs', [], ''),
                                                                 ('__get_nbits', [], ''),
                                                                 ('_is_32bit', [], ''),
                                                                 ('_is_64bit', [], '')],
                                                     'properties': []},
             'numpy.distutils.cpuinfo.DarwinCPUInfo': {'bases': ['numpy.distutils.cpuinfo.CPUInfoBase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('_not_impl', [], ''),
                                                                   ('_getNCPUs', [], ''),
                                                                   ('_is_Power_Macintosh',
                                                                    [],
                                                                    ''),
                                                                   ('_is_i386', [], ''),
                                                                   ('_is_ppc', [], ''),
                                                                   ('__machine', ['n'], ''),
                                                                   ('_is_ppc601', [], ''),
                                                                   ('_is_ppc602', [], ''),
                                                                   ('_is_ppc603', [], ''),
                                                                   ('_is_ppc603e', [], ''),
                                                                   ('_is_ppc604', [], ''),
                                                                   ('_is_ppc604e', [], ''),
                                                                   ('_is_ppc620', [], ''),
                                                                   ('_is_ppc630', [], ''),
                                                                   ('_is_ppc740', [], ''),
                                                                   ('_is_ppc7400', [], ''),
                                                                   ('_is_ppc7450', [], ''),
                                                                   ('_is_ppc750', [], ''),
                                                                   ('_is_ppc403', [], ''),
                                                                   ('_is_ppc505', [], ''),
                                                                   ('_is_ppc801', [], ''),
                                                                   ('_is_ppc821', [], ''),
                                                                   ('_is_ppc823', [], ''),
                                                                   ('_is_ppc860', [], '')],
                                                       'properties': ['info']},
             'numpy.distutils.cpuinfo.IRIXCPUInfo': {'bases': ['numpy.distutils.cpuinfo.CPUInfoBase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('_not_impl', [], ''),
                                                                 ('_is_singleCPU', [], ''),
                                                                 ('_getNCPUs', [], ''),
                                                                 ('__cputype', ['n'], ''),
                                                                 ('_is_r2000', [], ''),
                                                                 ('_is_r3000', [], ''),
                                                                 ('_is_r3900', [], ''),
                                                                 ('_is_r4000', [], ''),
                                                                 ('_is_r4100', [], ''),
                                                                 ('_is_r4300', [], ''),
                                                                 ('_is_r4400', [], ''),
                                                                 ('_is_r4600', [], ''),
                                                                 ('_is_r4650', [], ''),
                                                                 ('_is_r5000', [], ''),
                                                                 ('_is_r6000', [], ''),
                                                                 ('_is_r8000', [], ''),
                                                                 ('_is_r10000', [], ''),
                                                                 ('_is_r12000', [], ''),
                                                                 ('_is_rorion', [], ''),
                                                                 ('get_ip', [], ''),
                                                                 ('__machine', ['n'], ''),
                                                                 ('_is_IP19', [], ''),
                                                                 ('_is_IP20', [], ''),
                                                                 ('_is_IP21', [], ''),
                                                                 ('_is_IP22', [], ''),
                                                                 ('_is_IP22_4k', [], ''),
                                                                 ('_is_IP22_5k', [], ''),
                                                                 ('_is_IP24', [], ''),
                                                                 ('_is_IP25', [], ''),
                                                                 ('_is_IP26', [], ''),
                                                                 ('_is_IP27', [], ''),
                                                                 ('_is_IP28', [], ''),
                                                                 ('_is_IP30', [], ''),
                                                                 ('_is_IP32', [], ''),
                                                                 ('_is_IP32_5k', [], ''),
                                                                 ('_is_IP32_10k', [], '')],
                                                     'properties': ['info']},
             'numpy.distutils.cpuinfo.LinuxCPUInfo': {'bases': ['numpy.distutils.cpuinfo.CPUInfoBase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('_not_impl', [], ''),
                                                                  ('_is_AMD', [], ''),
                                                                  ('_is_AthlonK6_2', [], ''),
                                                                  ('_is_AthlonK6_3', [], ''),
                                                                  ('_is_AthlonK6', [], ''),
                                                                  ('_is_AthlonK7', [], ''),
                                                                  ('_is_AthlonMP', [], ''),
                                                                  ('_is_AMD64', [], ''),
                                                                  ('_is_Athlon64', [], ''),
                                                                  ('_is_AthlonHX', [], ''),
                                                                  ('_is_Opteron', [], ''),
                                                                  ('_is_Hammer', [], ''),
                                                                  ('_is_Alpha', [], ''),
                                                                  ('_is_EV4', [], ''),
                                                                  ('_is_EV5', [], ''),
                                                                  ('_is_EV56', [], ''),
                                                                  ('_is_PCA56', [], ''),
                                                                  ('_is_Intel', [], ''),
                                                                  ('_is_i486', [], ''),
                                                                  ('_is_i586', [], ''),
                                                                  ('_is_i686', [], ''),
                                                                  ('_is_Celeron', [], ''),
                                                                  ('_is_Pentium', [], ''),
                                                                  ('_is_PentiumII', [], ''),
                                                                  ('_is_PentiumPro', [], ''),
                                                                  ('_is_PentiumMMX', [], ''),
                                                                  ('_is_PentiumIII', [], ''),
                                                                  ('_is_PentiumIV', [], ''),
                                                                  ('_is_PentiumM', [], ''),
                                                                  ('_is_Prescott', [], ''),
                                                                  ('_is_Nocona', [], ''),
                                                                  ('_is_Core2', [], ''),
                                                                  ('_is_Itanium', [], ''),
                                                                  ('_is_XEON', [], ''),
                                                                  ('_is_singleCPU', [], ''),
                                                                  ('_getNCPUs', [], ''),
                                                                  ('_has_fdiv_bug', [], ''),
                                                                  ('_has_f00f_bug', [], ''),
                                                                  ('_has_mmx', [], ''),
                                                                  ('_has_sse', [], ''),
                                                                  ('_has_sse2', [], ''),
                                                                  ('_has_sse3', [], ''),
                                                                  ('_has_ssse3', [], ''),
                                                                  ('_has_3dnow', [], ''),
                                                                  ('_has_3dnowext', [], '')],
                                                      'properties': ['info',
                                                                     '_is_i386',
                                                                     '_is_Xeon']},
             'numpy.distutils.cpuinfo.SunOSCPUInfo': {'bases': ['numpy.distutils.cpuinfo.CPUInfoBase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('_not_impl', [], ''),
                                                                  ('_is_i386', [], ''),
                                                                  ('_is_sparc', [], ''),
                                                                  ('_is_sparcv9', [], ''),
                                                                  ('_getNCPUs', [], ''),
                                                                  ('_is_sun4', [], ''),
                                                                  ('_is_SUNW', [], ''),
                                                                  ('_is_sparcstation5', [], ''),
                                                                  ('_is_ultra1', [], ''),
                                                                  ('_is_ultra250', [], ''),
                                                                  ('_is_ultra2', [], ''),
                                                                  ('_is_ultra30', [], ''),
                                                                  ('_is_ultra4', [], ''),
                                                                  ('_is_ultra5_10', [], ''),
                                                                  ('_is_ultra5', [], ''),
                                                                  ('_is_ultra60', [], ''),
                                                                  ('_is_ultra80', [], ''),
                                                                  ('_is_ultraenterprice',
                                                                   [],
                                                                   ''),
                                                                  ('_is_ultraenterprice10k',
                                                                   [],
                                                                   ''),
                                                                  ('_is_sunfire', [], ''),
                                                                  ('_is_ultra', [], ''),
                                                                  ('_is_cpusparcv7', [], ''),
                                                                  ('_is_cpusparcv8', [], ''),
                                                                  ('_is_cpusparcv9', [], '')],
                                                      'properties': ['info']},
             'numpy.distutils.cpuinfo.Win32CPUInfo': {'bases': ['numpy.distutils.cpuinfo.CPUInfoBase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('_not_impl', [], ''),
                                                                  ('_is_AMD', [], ''),
                                                                  ('_is_Am486', [], ''),
                                                                  ('_is_Am5x86', [], ''),
                                                                  ('_is_AMDK5', [], ''),
                                                                  ('_is_AMDK6', [], ''),
                                                                  ('_is_AMDK6_2', [], ''),
                                                                  ('_is_AMDK6_3', [], ''),
                                                                  ('_is_AMDK7', [], ''),
                                                                  ('_is_AMD64', [], ''),
                                                                  ('_is_Intel', [], ''),
                                                                  ('_is_i386', [], ''),
                                                                  ('_is_i486', [], ''),
                                                                  ('_is_i586', [], ''),
                                                                  ('_is_i686', [], ''),
                                                                  ('_is_Pentium', [], ''),
                                                                  ('_is_PentiumMMX', [], ''),
                                                                  ('_is_PentiumPro', [], ''),
                                                                  ('_is_PentiumII', [], ''),
                                                                  ('_is_PentiumIII', [], ''),
                                                                  ('_is_PentiumIV', [], ''),
                                                                  ('_is_PentiumM', [], ''),
                                                                  ('_is_Core2', [], ''),
                                                                  ('_is_singleCPU', [], ''),
                                                                  ('_getNCPUs', [], ''),
                                                                  ('_has_mmx', [], ''),
                                                                  ('_has_sse', [], ''),
                                                                  ('_has_sse2', [], ''),
                                                                  ('_has_3dnow', [], ''),
                                                                  ('_has_3dnowext', [], '')],
                                                      'properties': ['info', 'pkey']},
             'numpy.distutils.environment.EnvironmentConfig': {'bases': [],
                                                               'constructor': ["distutils_section='ALL'",
                                                                               '**kw'],
                                                               'docstring': '',
                                                               'methods': [('dump_variable',
                                                                            ['name'],
                                                                            ''),
                                                                           ('dump_variables',
                                                                            [],
                                                                            ''),
                                                                           ('__getattr__',
                                                                            ['name'],
                                                                            ''),
                                                                           ('get',
                                                                            ['name',
                                                                             'default=None'],
                                                                            ''),
                                                                           ('_get_var',
                                                                            ['name',
                                                                             'conf_desc'],
                                                                            ''),
                                                                           ('clone',
                                                                            ['hook_handler'],
                                                                            ''),
                                                                           ('use_distribution',
                                                                            ['dist'],
                                                                            '')],
                                                               'properties': ['_distutils_section',
                                                                              '_conf_keys',
                                                                              '_conf',
                                                                              '_hook_handler']},
             'numpy.distutils.extension.Extension': {'bases': ['distutils.extension.Extension'],
                                                     'constructor': ['name',
                                                                     'sources',
                                                                     'include_dirs=None',
                                                                     'define_macros=None',
                                                                     'undef_macros=None',
                                                                     'library_dirs=None',
                                                                     'libraries=None',
                                                                     'runtime_library_dirs=None',
                                                                     'extra_objects=None',
                                                                     'extra_compile_args=None',
                                                                     'extra_link_args=None',
                                                                     'export_symbols=None',
                                                                     'swig_opts=None',
                                                                     'depends=None',
                                                                     'language=None',
                                                                     'f2py_options=None',
                                                                     'module_dirs=None',
                                                                     'extra_f77_compile_args=None',
                                                                     'extra_f90_compile_args=None'],
                                                     'docstring': '',
                                                     'methods': [('has_cxx_sources', [], ''),
                                                                 ('has_f2py_sources', [], '')],
                                                     'properties': ['sources',
                                                                    'swig_opts',
                                                                    'depends',
                                                                    'language',
                                                                    'f2py_options',
                                                                    'module_dirs',
                                                                    'extra_f77_compile_args',
                                                                    'extra_f90_compile_args']},
             'numpy.distutils.fcompiler.CompilerNotFound': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'numpy.distutils.fcompiler.FCompiler': {'bases': ['numpy.distutils.ccompiler.CCompiler'],
                                                     'constructor': ['*args', '**kw'],
                                                     'docstring': "Abstract base class to define the interface that must be implemented\n    by real Fortran compiler classes.\n\n    Methods that subclasses may redefine:\n\n        update_executables(), find_executables(), get_version()\n        get_flags(), get_flags_opt(), get_flags_arch(), get_flags_debug()\n        get_flags_f77(), get_flags_opt_f77(), get_flags_arch_f77(),\n        get_flags_debug_f77(), get_flags_f90(), get_flags_opt_f90(),\n        get_flags_arch_f90(), get_flags_debug_f90(),\n        get_flags_fix(), get_flags_linker_so()\n\n    DON'T call these methods (except get_version) after\n    constructing a compiler instance or inside any other method.\n    All methods, except update_executables() and find_executables(),\n    may call the get_version() method.\n\n    After constructing a compiler instance, always call customize(dist=None)\n    method that finalizes compiler construction and makes the following\n    attributes available:\n      compiler_f77\n      compiler_f90\n      compiler_fix\n      linker_so\n      archiver\n      ranlib\n      libraries\n      library_dirs\n    ",
                                                     'methods': [('__copy__', [], ''),
                                                                 ('copy', [], ''),
                                                                 ('_command_property', [], ''),
                                                                 ('set_executable',
                                                                  ['key', 'value'],
                                                                  ''),
                                                                 ('set_commands', ['**kw'], ''),
                                                                 ('set_command',
                                                                  ['key', 'value'],
                                                                  ''),
                                                                 ('find_executables',
                                                                  [],
                                                                  'Go through the self.executables dictionary, and attempt to\n        find and assign appropiate executables.\n\n        Executable names are looked for in the environment (environment\n        variables, the distutils.cfg, and command line), the 0th-element of\n        the command list, and the self.possible_executables list.\n\n        Also, if the 0th element is "<F77>" or "<F90>", the Fortran 77\n        or the Fortran 90 compiler executable is used, unless overridden\n        by an environment setting.\n\n        Subclasses should call this if overriden.\n        '),
                                                                 ('update_executables',
                                                                  [],
                                                                  'Called at the beginning of customisation. Subclasses should\n        override this if they need to set up the executables dictionary.\n\n        Note that self.find_executables() is run afterwards, so the\n        self.executables dictionary values can contain <F77> or <F90> as\n        the command, which will be replaced by the found F77 or F90\n        compiler.\n        '),
                                                                 ('get_flags',
                                                                  [],
                                                                  'List of flags common to all compiler types.'),
                                                                 ('_get_command_flags',
                                                                  ['key'],
                                                                  ''),
                                                                 ('get_flags_f77',
                                                                  [],
                                                                  'List of Fortran 77 specific flags.'),
                                                                 ('get_flags_f90',
                                                                  [],
                                                                  'List of Fortran 90 specific flags.'),
                                                                 ('get_flags_free',
                                                                  [],
                                                                  'List of Fortran 90 free format specific flags.'),
                                                                 ('get_flags_fix',
                                                                  [],
                                                                  'List of Fortran 90 fixed format specific flags.'),
                                                                 ('get_flags_linker_so',
                                                                  [],
                                                                  'List of linker flags to build a shared library.'),
                                                                 ('get_flags_linker_exe',
                                                                  [],
                                                                  'List of linker flags to build an executable.'),
                                                                 ('get_flags_ar',
                                                                  [],
                                                                  'List of archiver flags. '),
                                                                 ('get_flags_opt',
                                                                  [],
                                                                  'List of architecture independent compiler flags.'),
                                                                 ('get_flags_arch',
                                                                  [],
                                                                  'List of architecture dependent compiler flags.'),
                                                                 ('get_flags_debug',
                                                                  [],
                                                                  'List of compiler flags to compile with debugging information.'),
                                                                 ('get_libraries',
                                                                  [],
                                                                  'List of compiler libraries.'),
                                                                 ('get_library_dirs',
                                                                  [],
                                                                  'List of compiler library directories.'),
                                                                 ('get_version',
                                                                  ['force=False',
                                                                   'ok_status=[0]'],
                                                                  ''),
                                                                 ('customize',
                                                                  ['dist=None'],
                                                                  'Customize Fortran compiler.\n\n        This method gets Fortran compiler specific information from\n        (i) class definition, (ii) environment, (iii) distutils config\n        files, and (iv) command line (later overrides earlier).\n\n        This method should be always called after constructing a\n        compiler instance. But not in __init__ because Distribution\n        instance is needed for (iii) and (iv).\n        '),
                                                                 ('dump_properties',
                                                                  [],
                                                                  'Print out the attributes of a compiler instance.'),
                                                                 ('_compile',
                                                                  ['obj',
                                                                   'src',
                                                                   'ext',
                                                                   'cc_args',
                                                                   'extra_postargs',
                                                                   'pp_opts'],
                                                                  "Compile 'src' to product 'obj'."),
                                                                 ('module_options',
                                                                  ['module_dirs',
                                                                   'module_build_dir'],
                                                                  ''),
                                                                 ('library_option',
                                                                  ['lib'],
                                                                  ''),
                                                                 ('library_dir_option',
                                                                  ['dir'],
                                                                  ''),
                                                                 ('link',
                                                                  ['target_desc',
                                                                   'objects',
                                                                   'output_filename',
                                                                   'output_dir=None',
                                                                   'libraries=None',
                                                                   'library_dirs=None',
                                                                   'runtime_library_dirs=None',
                                                                   'export_symbols=None',
                                                                   'debug=0',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None',
                                                                   'build_temp=None',
                                                                   'target_lang=None'],
                                                                  ''),
                                                                 ('_environment_hook',
                                                                  ['name', 'hook_name'],
                                                                  '')],
                                                     'properties': ['distutils_vars',
                                                                    'command_vars',
                                                                    'flag_vars',
                                                                    'language_map',
                                                                    'language_order',
                                                                    'compiler_type',
                                                                    'compiler_aliases',
                                                                    'version_pattern',
                                                                    'possible_executables',
                                                                    'executables',
                                                                    'suggested_f90_compiler',
                                                                    'compile_switch',
                                                                    'object_switch',
                                                                    'library_switch',
                                                                    'module_dir_switch',
                                                                    'module_include_switch',
                                                                    'pic_flags',
                                                                    'src_extensions',
                                                                    'obj_extension',
                                                                    'shared_lib_extension',
                                                                    'static_lib_extension',
                                                                    'static_lib_format',
                                                                    'shared_lib_format',
                                                                    'exe_extension',
                                                                    '_exe_cache',
                                                                    '_executable_keys',
                                                                    'c_compiler',
                                                                    'extra_f77_compile_args',
                                                                    'extra_f90_compile_args',
                                                                    '_is_customised',
                                                                    'version_cmd',
                                                                    'compiler_f77',
                                                                    'compiler_f90',
                                                                    'compiler_fix',
                                                                    'linker_so',
                                                                    'linker_exe',
                                                                    'archiver',
                                                                    'ranlib',
                                                                    'get_flags_opt_f77',
                                                                    'get_flags_opt_f90',
                                                                    'get_flags_arch_f77',
                                                                    'get_flags_arch_f90',
                                                                    'get_flags_debug_f77',
                                                                    'get_flags_debug_f90']},
             'numpy.distutils.fcompiler.absoft.AbsoftFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('update_executables',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_linker_so',
                                                                               [],
                                                                               ''),
                                                                              ('library_dir_option',
                                                                               ['dir'],
                                                                               ''),
                                                                              ('library_option',
                                                                               ['lib'],
                                                                               ''),
                                                                              ('get_library_dirs',
                                                                               [],
                                                                               ''),
                                                                              ('get_libraries',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_f77',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_f90',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_fix',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_opt',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['compiler_type',
                                                                                 'description',
                                                                                 'version_pattern',
                                                                                 'executables',
                                                                                 'library_switch',
                                                                                 'module_dir_switch',
                                                                                 'module_include_switch']},
             'numpy.distutils.fcompiler.compaq.CompaqFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('get_flags',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_debug',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_opt',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_arch',
                                                                               [],
                                                                               ''),
                                                                              ('get_flags_linker_so',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['compiler_type',
                                                                                 'description',
                                                                                 'version_pattern',
                                                                                 'fc_exe',
                                                                                 'executables',
                                                                                 'module_dir_switch',
                                                                                 'module_include_switch']},
             'numpy.distutils.fcompiler.compaq.CompaqVisualFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('get_flags',
                                                                                     [],
                                                                                     ''),
                                                                                    ('get_flags_opt',
                                                                                     [],
                                                                                     ''),
                                                                                    ('get_flags_arch',
                                                                                     [],
                                                                                     ''),
                                                                                    ('get_flags_debug',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['compiler_type',
                                                                                       'description',
                                                                                       'version_pattern',
                                                                                       'compile_switch',
                                                                                       'object_switch',
                                                                                       'library_switch',
                                                                                       'static_lib_extension',
                                                                                       'static_lib_format',
                                                                                       'module_dir_switch',
                                                                                       'module_include_switch',
                                                                                       'ar_exe',
                                                                                       'fc_exe',
                                                                                       'm',
                                                                                       'msg',
                                                                                       'e',
                                                                                       'executables']},
             'numpy.distutils.fcompiler.g95.G95FCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get_flags', [], ''),
                                                                        ('get_flags_opt',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_debug',
                                                                         [],
                                                                         '')],
                                                            'properties': ['compiler_type',
                                                                           'description',
                                                                           'version_pattern',
                                                                           'executables',
                                                                           'pic_flags',
                                                                           'module_dir_switch',
                                                                           'module_include_switch']},
             'numpy.distutils.fcompiler.gnu.Gnu95FCompiler': {'bases': ['numpy.distutils.fcompiler.gnu.GnuFCompiler'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('version_match',
                                                                           ['version_string'],
                                                                           ''),
                                                                          ('_universal_flags',
                                                                           ['cmd'],
                                                                           'Return a list of -arch flags for every supported architecture.'),
                                                                          ('get_flags', [], ''),
                                                                          ('get_flags_linker_so',
                                                                           [],
                                                                           ''),
                                                                          ('get_library_dirs',
                                                                           [],
                                                                           ''),
                                                                          ('get_libraries',
                                                                           [],
                                                                           ''),
                                                                          ('get_target',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_opt',
                                                                           [],
                                                                           '')],
                                                              'properties': ['compiler_type',
                                                                             'compiler_aliases',
                                                                             'description',
                                                                             'possible_executables',
                                                                             'executables',
                                                                             'module_dir_switch',
                                                                             'module_include_switch',
                                                                             'g2c']},
             'numpy.distutils.fcompiler.gnu.GnuFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('gnu_version_match',
                                                                         ['version_string'],
                                                                         'Handle the different versions of GNU fortran compilers'),
                                                                        ('version_match',
                                                                         ['version_string'],
                                                                         ''),
                                                                        ('get_flags_linker_so',
                                                                         [],
                                                                         ''),
                                                                        ('get_libgcc_dir',
                                                                         [],
                                                                         ''),
                                                                        ('get_library_dirs',
                                                                         [],
                                                                         ''),
                                                                        ('get_libraries',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_debug',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_opt',
                                                                         [],
                                                                         ''),
                                                                        ('_c_arch_flags',
                                                                         [],
                                                                         ' Return detected arch flags from CFLAGS '),
                                                                        ('get_flags_arch',
                                                                         [],
                                                                         '')],
                                                            'properties': ['compiler_type',
                                                                           'compiler_aliases',
                                                                           'description',
                                                                           'possible_executables',
                                                                           'executables',
                                                                           'module_dir_switch',
                                                                           'module_include_switch',
                                                                           'pic_flags',
                                                                           'key',
                                                                           'g2c',
                                                                           'suggested_f90_compiler']},
             'numpy.distutils.fcompiler.hpux.HPUXFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('get_flags', [], ''),
                                                                          ('get_flags_opt',
                                                                           [],
                                                                           ''),
                                                                          ('get_libraries',
                                                                           [],
                                                                           ''),
                                                                          ('get_library_dirs',
                                                                           [],
                                                                           ''),
                                                                          ('get_version',
                                                                           ['force=0',
                                                                            'ok_status=[256, 0, 1]'],
                                                                           '')],
                                                              'properties': ['compiler_type',
                                                                             'description',
                                                                             'version_pattern',
                                                                             'executables',
                                                                             'module_dir_switch',
                                                                             'module_include_switch',
                                                                             'pic_flags']},
             'numpy.distutils.fcompiler.ibm.IBMFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get_version',
                                                                         ['*args', '**kwds'],
                                                                         ''),
                                                                        ('get_flags', [], ''),
                                                                        ('get_flags_debug',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_linker_so',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_opt',
                                                                         [],
                                                                         '')],
                                                            'properties': ['compiler_type',
                                                                           'description',
                                                                           'version_pattern',
                                                                           'executables',
                                                                           'version']},
             'numpy.distutils.fcompiler.intel.BaseIntelFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('update_executables',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': []},
             'numpy.distutils.fcompiler.intel.IntelEM64TFCompiler': {'bases': ['numpy.distutils.fcompiler.intel.IntelFCompiler'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('get_flags_arch',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['compiler_type',
                                                                                    'compiler_aliases',
                                                                                    'description',
                                                                                    'version_match',
                                                                                    'possible_executables',
                                                                                    'executables']},
             'numpy.distutils.fcompiler.intel.IntelEM64VisualFCompiler': {'bases': ['numpy.distutils.fcompiler.intel.IntelVisualFCompiler'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['compiler_type',
                                                                                         'description',
                                                                                         'version_match']},
             'numpy.distutils.fcompiler.intel.IntelFCompiler': {'bases': ['numpy.distutils.fcompiler.intel.BaseIntelFCompiler'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('get_flags',
                                                                             [],
                                                                             ''),
                                                                            ('get_flags_free',
                                                                             [],
                                                                             ''),
                                                                            ('get_flags_opt',
                                                                             [],
                                                                             ''),
                                                                            ('get_flags_arch',
                                                                             [],
                                                                             ''),
                                                                            ('get_flags_linker_so',
                                                                             [],
                                                                             '')],
                                                                'properties': ['compiler_type',
                                                                               'compiler_aliases',
                                                                               'description',
                                                                               'version_match',
                                                                               'possible_executables',
                                                                               'executables',
                                                                               'pic_flags',
                                                                               'module_dir_switch',
                                                                               'module_include_switch']},
             'numpy.distutils.fcompiler.intel.IntelItaniumFCompiler': {'bases': ['numpy.distutils.fcompiler.intel.IntelFCompiler'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['compiler_type',
                                                                                      'compiler_aliases',
                                                                                      'description',
                                                                                      'version_match',
                                                                                      'possible_executables',
                                                                                      'executables']},
             'numpy.distutils.fcompiler.intel.IntelItaniumVisualFCompiler': {'bases': ['numpy.distutils.fcompiler.intel.IntelVisualFCompiler'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['compiler_type',
                                                                                            'description',
                                                                                            'version_match',
                                                                                            'possible_executables',
                                                                                            'ar_exe',
                                                                                            'executables']},
             'numpy.distutils.fcompiler.intel.IntelVisualFCompiler': {'bases': ['numpy.distutils.fcompiler.intel.BaseIntelFCompiler'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('update_executables',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_flags',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_flags_free',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_flags_debug',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_flags_opt',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_flags_arch',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['compiler_type',
                                                                                     'description',
                                                                                     'version_match',
                                                                                     'ar_exe',
                                                                                     'possible_executables',
                                                                                     'executables',
                                                                                     'compile_switch',
                                                                                     'object_switch',
                                                                                     'library_switch',
                                                                                     'module_dir_switch',
                                                                                     'module_include_switch']},
             'numpy.distutils.fcompiler.lahey.LaheyFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('get_flags_opt',
                                                                             [],
                                                                             ''),
                                                                            ('get_flags_debug',
                                                                             [],
                                                                             ''),
                                                                            ('get_library_dirs',
                                                                             [],
                                                                             ''),
                                                                            ('get_libraries',
                                                                             [],
                                                                             '')],
                                                                'properties': ['compiler_type',
                                                                               'description',
                                                                               'version_pattern',
                                                                               'executables',
                                                                               'module_dir_switch',
                                                                               'module_include_switch']},
             'numpy.distutils.fcompiler.mips.MIPSFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('get_flags', [], ''),
                                                                          ('get_flags_opt',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_arch',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_arch_f77',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_arch_f90',
                                                                           [],
                                                                           '')],
                                                              'properties': ['compiler_type',
                                                                             'description',
                                                                             'version_pattern',
                                                                             'executables',
                                                                             'module_dir_switch',
                                                                             'module_include_switch',
                                                                             'pic_flags']},
             'numpy.distutils.fcompiler.nag.NAGFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get_flags_linker_so',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_opt',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_arch',
                                                                         [],
                                                                         ''),
                                                                        ('get_flags_debug',
                                                                         [],
                                                                         '')],
                                                            'properties': ['compiler_type',
                                                                           'description',
                                                                           'version_pattern',
                                                                           'executables']},
             'numpy.distutils.fcompiler.none.NoneFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('find_executables',
                                                                           [],
                                                                           '')],
                                                              'properties': ['compiler_type',
                                                                             'description',
                                                                             'executables']},
             'numpy.distutils.fcompiler.pathf95.PathScaleFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('get_flags_opt',
                                                                                   [],
                                                                                   ''),
                                                                                  ('get_flags_debug',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['compiler_type',
                                                                                     'description',
                                                                                     'version_pattern',
                                                                                     'executables',
                                                                                     'pic_flags',
                                                                                     'module_dir_switch',
                                                                                     'module_include_switch']},
             'numpy.distutils.fcompiler.pg.PGroupFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('get_flags', [], ''),
                                                                          ('get_flags_opt',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_debug',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_linker_so',
                                                                           [],
                                                                           '')],
                                                              'properties': ['compiler_type',
                                                                             'description',
                                                                             'version_pattern',
                                                                             'executables',
                                                                             'pic_flags',
                                                                             'module_dir_switch',
                                                                             'module_include_switch']},
             'numpy.distutils.fcompiler.sun.SunFCompiler': {'bases': ['numpy.distutils.fcompiler.FCompiler'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('get_flags_f77',
                                                                         [],
                                                                         ''),
                                                                        ('get_opt', [], ''),
                                                                        ('get_arch', [], ''),
                                                                        ('get_libraries',
                                                                         [],
                                                                         '')],
                                                            'properties': ['compiler_type',
                                                                           'description',
                                                                           'version_match',
                                                                           'executables',
                                                                           'module_dir_switch',
                                                                           'module_include_switch',
                                                                           'pic_flags']},
             'numpy.distutils.fcompiler.vast.VastFCompiler': {'bases': ['numpy.distutils.fcompiler.gnu.GnuFCompiler'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('find_executables',
                                                                           [],
                                                                           ''),
                                                                          ('get_version_cmd',
                                                                           [],
                                                                           ''),
                                                                          ('get_flags_arch',
                                                                           [],
                                                                           '')],
                                                              'properties': ['compiler_type',
                                                                             'compiler_aliases',
                                                                             'description',
                                                                             'version_pattern',
                                                                             'object_switch',
                                                                             'executables',
                                                                             'module_dir_switch',
                                                                             'module_include_switch',
                                                                             'version']},
             'numpy.distutils.intelccompiler.IntelCCompiler': {'bases': ['distutils.unixccompiler.UnixCCompiler'],
                                                               'constructor': ['verbose=0',
                                                                               'dry_run=0',
                                                                               'force=0'],
                                                               'docstring': ' A modified Intel compiler compatible with an gcc built Python.',
                                                               'methods': [],
                                                               'properties': ['compiler_type',
                                                                              'cc_exe',
                                                                              'cc_args']},
             'numpy.distutils.intelccompiler.IntelEM64TCCompiler': {'bases': ['distutils.unixccompiler.UnixCCompiler'],
                                                                    'constructor': ['verbose=0',
                                                                                    'dry_run=0',
                                                                                    'force=0'],
                                                                    'docstring': ' A modified Intel x86_64 compiler compatible with a 64bit gcc built Python.\n    ',
                                                                    'methods': [],
                                                                    'properties': ['compiler_type',
                                                                                   'cc_exe',
                                                                                   'cc_args']},
             'numpy.distutils.intelccompiler.IntelItaniumCCompiler': {'bases': ['numpy.distutils.intelccompiler.IntelCCompiler'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': ['compiler_type',
                                                                                     'cc_exe']},
             'numpy.distutils.log.Log': {'bases': ['distutils.log.Log'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('_log', ['level', 'msg', 'args'], ''),
                                                     ('good',
                                                      ['msg', '*args'],
                                                      "If we'd log WARN messages, log this message as a 'nice' anti-warn\n        message.\n        ")],
                                         'properties': []},
             'numpy.distutils.mingw32ccompiler.Mingw32CCompiler': {'bases': ['distutils.cygwinccompiler.CygwinCCompiler'],
                                                                   'constructor': ['verbose=0',
                                                                                   'dry_run=0',
                                                                                   'force=0'],
                                                                   'docstring': ' A modified MingW32 compiler compatible with an MSVC built Python.\n\n    ',
                                                                   'methods': [('link',
                                                                                ['target_desc',
                                                                                 'objects',
                                                                                 'output_filename',
                                                                                 'output_dir',
                                                                                 'libraries',
                                                                                 'library_dirs',
                                                                                 'runtime_library_dirs',
                                                                                 'export_symbols=None',
                                                                                 'debug=0',
                                                                                 'extra_preargs=None',
                                                                                 'extra_postargs=None',
                                                                                 'build_temp=None',
                                                                                 'target_lang=None'],
                                                                                ''),
                                                                               ('object_filenames',
                                                                                ['source_filenames',
                                                                                 'strip_dir=0',
                                                                                 "output_dir=''"],
                                                                                '')],
                                                                   'properties': ['compiler_type',
                                                                                  'gcc_version',
                                                                                  'linker',
                                                                                  'compiler_cxx']},
             'numpy.distutils.misc_util.Configuration': {'bases': ['object'],
                                                         'constructor': ['package_name=None',
                                                                         'parent_name=None',
                                                                         'top_path=None',
                                                                         'package_path=None',
                                                                         'caller_level=1',
                                                                         "setup_name='setup.py'",
                                                                         '**attrs'],
                                                         'docstring': '',
                                                         'methods': [('todict',
                                                                      [],
                                                                      '\n        Return a dictionary compatible with the keyword arguments of distutils\n        setup function.\n\n        Examples\n        --------\n        >>> setup(**config.todict())                           #doctest: +SKIP\n        '),
                                                                     ('info', ['message'], ''),
                                                                     ('warn', ['message'], ''),
                                                                     ('set_options',
                                                                      ['**options'],
                                                                      '\n        Configure Configuration instance.\n\n        The following options are available:\n         - ignore_setup_xxx_py\n         - assume_default_configuration\n         - delegate_options_to_subpackages\n         - quiet\n\n        '),
                                                                     ('get_distribution',
                                                                      [],
                                                                      'Return the distutils distribution object for self.'),
                                                                     ('_wildcard_get_subpackage',
                                                                      ['subpackage_name',
                                                                       'parent_name',
                                                                       'caller_level=1'],
                                                                      ''),
                                                                     ('_get_configuration_from_setup_py',
                                                                      ['setup_py',
                                                                       'subpackage_name',
                                                                       'subpackage_path',
                                                                       'parent_name',
                                                                       'caller_level=1'],
                                                                      ''),
                                                                     ('get_subpackage',
                                                                      ['subpackage_name',
                                                                       'subpackage_path=None',
                                                                       'parent_name=None',
                                                                       'caller_level=1'],
                                                                      "Return list of subpackage configurations.\n\n        Parameters\n        ----------\n        subpackage_name: str,None\n            Name of the subpackage to get the configuration. '*' in\n            subpackage_name is handled as a wildcard.\n        subpackage_path: str\n            If None, then the path is assumed to be the local path plus the\n            subpackage_name. If a setup.py file is not found in the\n            subpackage_path, then a default configuration is used.\n        parent_name: str\n            Parent name.\n        "),
                                                                     ('add_subpackage',
                                                                      ['subpackage_name',
                                                                       'subpackage_path=None',
                                                                       'standalone=False'],
                                                                      'Add a sub-package to the current Configuration instance.\n\n        This is useful in a setup.py script for adding sub-packages to a\n        package.\n\n        Parameters\n        ----------\n        subpackage_name: str\n            name of the subpackage\n        subpackage_path: str\n            if given, the subpackage path such as the subpackage is in\n            subpackage_path / subpackage_name. If None,the subpackage is\n            assumed to be located in the local path / subpackage_name.\n        standalone: bool\n        '),
                                                                     ('add_data_dir',
                                                                      ['data_path'],
                                                                      "Recursively add files under data_path to data_files list.\n\n        Recursively add files under data_path to the list of data_files to be\n        installed (and distributed). The data_path can be either a relative\n        path-name, or an absolute path-name, or a 2-tuple where the first\n        argument shows where in the install directory the data directory\n        should be installed to.\n\n        Parameters\n        ----------\n        data_path: seq,str\n            Argument can be either\n\n                * 2-sequence (<datadir suffix>,<path to data directory>)\n                * path to data directory where python datadir suffix defaults\n                  to package dir.\n\n        Notes\n        -----\n        Rules for installation paths:\n          foo/bar -> (foo/bar, foo/bar) -> parent/foo/bar\n          (gun, foo/bar) -> parent/gun\n          foo/* -> (foo/a, foo/a), (foo/b, foo/b) -> parent/foo/a, parent/foo/b\n          (gun, foo/*) -> (gun, foo/a), (gun, foo/b) -> gun\n          (gun/*, foo/*) -> parent/gun/a, parent/gun/b\n          /foo/bar -> (bar, /foo/bar) -> parent/bar\n          (gun, /foo/bar) -> parent/gun\n          (fun/*/gun/*, sun/foo/bar) -> parent/fun/foo/gun/bar\n\n        Examples\n        --------\n        For example suppose the source directory contains fun/foo.dat and\n        fun/bar/car.dat::\n\n            >>> self.add_data_dir('fun')                       #doctest: +SKIP\n            >>> self.add_data_dir(('sun', 'fun'))              #doctest: +SKIP\n            >>> self.add_data_dir(('gun', '/full/path/to/fun'))#doctest: +SKIP\n\n        Will install data-files to the locations::\n\n            <package install directory>/\n              fun/\n                foo.dat\n                bar/\n                  car.dat\n              sun/\n                foo.dat\n                bar/\n                  car.dat\n              gun/\n                foo.dat\n                car.dat\n        "),
                                                                     ('_optimize_data_files',
                                                                      [],
                                                                      ''),
                                                                     ('add_data_files',
                                                                      ['*files'],
                                                                      "Add data files to configuration data_files.\n\n        Parameters\n        ----------\n        files: sequence\n            Argument(s) can be either\n\n                * 2-sequence (<datadir prefix>,<path to data file(s)>)\n                * paths to data files where python datadir prefix defaults\n                  to package dir.\n\n        Notes\n        -----\n        The form of each element of the files sequence is very flexible\n        allowing many combinations of where to get the files from the package\n        and where they should ultimately be installed on the system. The most\n        basic usage is for an element of the files argument sequence to be a\n        simple filename. This will cause that file from the local path to be\n        installed to the installation path of the self.name package (package\n        path). The file argument can also be a relative path in which case the\n        entire relative path will be installed into the package directory.\n        Finally, the file can be an absolute path name in which case the file\n        will be found at the absolute path name but installed to the package\n        path.\n\n        This basic behavior can be augmented by passing a 2-tuple in as the\n        file argument. The first element of the tuple should specify the\n        relative path (under the package install directory) where the\n        remaining sequence of files should be installed to (it has nothing to\n        do with the file-names in the source distribution). The second element\n        of the tuple is the sequence of files that should be installed. The\n        files in this sequence can be filenames, relative paths, or absolute\n        paths. For absolute paths the file will be installed in the top-level\n        package installation directory (regardless of the first argument).\n        Filenames and relative path names will be installed in the package\n        install directory under the path name given as the first element of\n        the tuple.\n\n        Rules for installation paths:\n\n          #. file.txt -> (., file.txt)-> parent/file.txt\n          #. foo/file.txt -> (foo, foo/file.txt) -> parent/foo/file.txt\n          #. /foo/bar/file.txt -> (., /foo/bar/file.txt) -> parent/file.txt\n          #. *.txt -> parent/a.txt, parent/b.txt\n          #. foo/*.txt -> parent/foo/a.txt, parent/foo/b.txt\n          #. */*.txt -> (*, */*.txt) -> parent/c/a.txt, parent/d/b.txt\n          #. (sun, file.txt) -> parent/sun/file.txt\n          #. (sun, bar/file.txt) -> parent/sun/file.txt\n          #. (sun, /foo/bar/file.txt) -> parent/sun/file.txt\n          #. (sun, *.txt) -> parent/sun/a.txt, parent/sun/b.txt\n          #. (sun, bar/*.txt) -> parent/sun/a.txt, parent/sun/b.txt\n          #. (sun/*, */*.txt) -> parent/sun/c/a.txt, parent/d/b.txt\n\n        An additional feature is that the path to a data-file can actually be\n        a function that takes no arguments and returns the actual path(s) to\n        the data-files. This is useful when the data files are generated while\n        building the package.\n\n        Examples\n        --------\n        Add files to the list of data_files to be included with the package.\n\n            >>> self.add_data_files('foo.dat',\n            ...     ('fun', ['gun.dat', 'nun/pun.dat', '/tmp/sun.dat']),\n            ...     'bar/cat.dat',\n            ...     '/full/path/to/can.dat')                   #doctest: +SKIP\n\n        will install these data files to::\n\n            <package install directory>/\n             foo.dat\n             fun/\n               gun.dat\n               nun/\n                 pun.dat\n             sun.dat\n             bar/\n               car.dat\n             can.dat\n\n        where <package install directory> is the package (or sub-package)\n        directory such as '/usr/lib/python2.4/site-packages/mypackage' ('C:\n        \\Python2.4 \\Lib \\site-packages \\mypackage') or\n        '/usr/lib/python2.4/site- packages/mypackage/mysubpackage' ('C:\n        \\Python2.4 \\Lib \\site-packages \\mypackage \\mysubpackage').\n        "),
                                                                     ('add_include_dirs',
                                                                      ['*paths'],
                                                                      'Add paths to configuration include directories.\n\n        Add the given sequence of paths to the beginning of the include_dirs\n        list. This list will be visible to all extension modules of the\n        current package.\n        '),
                                                                     ('add_numarray_include_dirs',
                                                                      [],
                                                                      ''),
                                                                     ('add_headers',
                                                                      ['*files'],
                                                                      "Add installable headers to configuration.\n\n        Add the given sequence of files to the beginning of the headers list.\n        By default, headers will be installed under <python-\n        include>/<self.name.replace('.','/')>/ directory. If an item of files\n        is a tuple, then its first argument specifies the actual installation\n        location relative to the <python-include> path.\n\n        Parameters\n        ----------\n        files: str, seq\n            Argument(s) can be either:\n\n                * 2-sequence (<includedir suffix>,<path to header file(s)>)\n                * path(s) to header file(s) where python includedir suffix will\n                  default to package name.\n        "),
                                                                     ('paths',
                                                                      ['*paths', '**kws'],
                                                                      'Apply glob to paths and prepend local_path if needed.\n\n        Applies glob.glob(...) to each path in the sequence (if needed) and\n        pre-pends the local_path if needed. Because this is called on all\n        source lists, this allows wildcard characters to be specified in lists\n        of sources for extension modules and libraries and scripts and allows\n        path-names be relative to the source directory.\n\n        '),
                                                                     ('_fix_paths_dict',
                                                                      ['kw'],
                                                                      ''),
                                                                     ('add_extension',
                                                                      ['name',
                                                                       'sources',
                                                                       '**kw'],
                                                                      'Add extension to configuration.\n\n        Create and add an Extension instance to the ext_modules list. This\n        method also takes the following optional keyword arguments that are\n        passed on to the Extension constructor.\n\n        Parameters\n        ----------\n        name: str\n            name of the extension\n        sources: seq\n            list of the sources. The list of sources may contain functions\n            (called source generators) which must take an extension instance\n            and a build directory as inputs and return a source file or list of\n            source files or None. If None is returned then no sources are\n            generated. If the Extension instance has no sources after\n            processing all source generators, then no extension module is\n            built.\n        include_dirs:\n        define_macros:\n        undef_macros:\n        library_dirs:\n        libraries:\n        runtime_library_dirs:\n        extra_objects:\n        extra_compile_args:\n        extra_link_args:\n        extra_f77_compile_args:\n        extra_f90_compile_args:\n        export_symbols:\n        swig_opts:\n        depends:\n            The depends list contains paths to files or directories that the\n            sources of the extension module depend on. If any path in the\n            depends list is newer than the extension module, then the module\n            will be rebuilt.\n        language:\n        f2py_options:\n        module_dirs:\n        extra_info: dict,list\n            dict or list of dict of keywords to be appended to keywords.\n\n        Notes\n        -----\n        The self.paths(...) method is applied to all lists that may contain\n        paths.\n        '),
                                                                     ('add_library',
                                                                      ['name',
                                                                       'sources',
                                                                       '**build_info'],
                                                                      '\n        Add library to configuration.\n\n        Parameters\n        ----------\n        name : str\n            Name of the extension.\n        sources : sequence\n            List of the sources. The list of sources may contain functions\n            (called source generators) which must take an extension instance\n            and a build directory as inputs and return a source file or list of\n            source files or None. If None is returned then no sources are\n            generated. If the Extension instance has no sources after\n            processing all source generators, then no extension module is\n            built.\n        build_info : dict, optional\n            The following keys are allowed:\n\n                * depends\n                * macros\n                * include_dirs\n                * extra_compiler_args\n                * extra_f77_compiler_args\n                * extra_f90_compiler_args\n                * f2py_options\n                * language\n\n        '),
                                                                     ('_add_library',
                                                                      ['name',
                                                                       'sources',
                                                                       'install_dir',
                                                                       'build_info'],
                                                                      'Common implementation for add_library and add_installed_library. Do\n        not use directly'),
                                                                     ('add_installed_library',
                                                                      ['name',
                                                                       'sources',
                                                                       'install_dir',
                                                                       'build_info=None'],
                                                                      '\n        Similar to add_library, but the specified library is installed.\n\n        Most C libraries used with `distutils` are only used to build python\n        extensions, but libraries built through this method will be installed\n        so that they can be reused by third-party packages.\n\n        Parameters\n        ----------\n        name : str\n            Name of the installed library.\n        sources : sequence\n            List of the library\'s source files. See `add_library` for details.\n        install_dir : str\n            Path to install the library, relative to the current sub-package.\n        build_info : dict, optional\n            The following keys are allowed:\n\n                * depends\n                * macros\n                * include_dirs\n                * extra_compiler_args\n                * extra_f77_compiler_args\n                * extra_f90_compiler_args\n                * f2py_options\n                * language\n\n        Returns\n        -------\n        None\n\n        See Also\n        --------\n        add_library, add_npy_pkg_config, get_info\n\n        Notes\n        -----\n        The best way to encode the options required to link against the specified\n        C libraries is to use a "libname.ini" file, and use `get_info` to\n        retrieve the required options (see `add_npy_pkg_config` for more\n        information).\n\n        '),
                                                                     ('add_npy_pkg_config',
                                                                      ['template',
                                                                       'install_dir',
                                                                       'subst_dict=None'],
                                                                      "\n        Generate and install a npy-pkg config file from a template.\n\n        The config file generated from `template` is installed in the\n        given install directory, using `subst_dict` for variable substitution.\n\n        Parameters\n        ----------\n        template : str\n            The path of the template, relatively to the current package path.\n        install_dir : str\n            Where to install the npy-pkg config file, relatively to the current\n            package path.\n        subst_dict : dict, optional\n            If given, any string of the form ``@key@`` will be replaced by\n            ``subst_dict[key]`` in the template file when installed. The install\n            prefix is always available through the variable ``@prefix@``, since the\n            install prefix is not easy to get reliably from setup.py.\n\n        See also\n        --------\n        add_installed_library, get_info\n\n        Notes\n        -----\n        This works for both standard installs and in-place builds, i.e. the\n        ``@prefix@`` refer to the source directory for in-place builds.\n\n        Examples\n        --------\n        ::\n\n            config.add_npy_pkg_config('foo.ini.in', 'lib', {'foo': bar})\n\n        Assuming the foo.ini.in file has the following content::\n\n            [meta]\n            Name=@foo@\n            Version=1.0\n            Description=dummy description\n\n            [default]\n            Cflags=-I@prefix@/include\n            Libs=\n\n        The generated file will have the following content::\n\n            [meta]\n            Name=bar\n            Version=1.0\n            Description=dummy description\n\n            [default]\n            Cflags=-Iprefix_dir/include\n            Libs=\n\n        and will be installed as foo.ini in the 'lib' subpath.\n\n        "),
                                                                     ('add_scons_installed_library',
                                                                      ['name', 'install_dir'],
                                                                      '\n        Add a scons-built installable library to distutils.\n\n        Parameters\n        ----------\n        name : str\n            The name of the library.\n        install_dir : str\n            Path to install the library, relative to the current sub-package.\n\n        '),
                                                                     ('add_sconscript',
                                                                      ['sconscript',
                                                                       'subpackage_path=None',
                                                                       'standalone=False',
                                                                       'pre_hook=None',
                                                                       'post_hook=None',
                                                                       'source_files=None',
                                                                       'package_path=None'],
                                                                      'Add a sconscript to configuration.\n\n        pre_hook and post hook should be sequences of callable, which will be\n        use before and after executing scons. The callable should be defined as\n        callable(*args, **kw). It is ugly, but well, hooks are ugly anyway...\n\n        sconscript can be None, which can be useful to add only post/pre\n        hooks.'),
                                                                     ('add_scripts',
                                                                      ['*files'],
                                                                      'Add scripts to configuration.\n\n        Add the sequence of files to the beginning of the scripts list.\n        Scripts will be installed under the <prefix>/bin/ directory.\n\n        '),
                                                                     ('dict_append',
                                                                      ['**dict'],
                                                                      ''),
                                                                     ('__str__', [], ''),
                                                                     ('get_config_cmd',
                                                                      [],
                                                                      '\n        Returns the numpy.distutils config command instance.\n        '),
                                                                     ('get_build_temp_dir',
                                                                      [],
                                                                      '\n        Return a path to a temporary directory where temporary files should be\n        placed.\n        '),
                                                                     ('have_f77c',
                                                                      [],
                                                                      'Check for availability of Fortran 77 compiler.\n\n        Use it inside source generating function to ensure that\n        setup distribution instance has been initialized.\n\n        Notes\n        -----\n        True if a Fortran 77 compiler is available (because a simple Fortran 77\n        code was able to be compiled successfully).\n        '),
                                                                     ('have_f90c',
                                                                      [],
                                                                      'Check for availability of Fortran 90 compiler.\n\n        Use it inside source generating function to ensure that\n        setup distribution instance has been initialized.\n\n        Notes\n        -----\n        True if a Fortran 90 compiler is available (because a simple Fortran\n        90 code was able to be compiled successfully)\n        '),
                                                                     ('append_to',
                                                                      ['extlib'],
                                                                      'Append libraries, include_dirs to extension or library item.\n        '),
                                                                     ('_get_svn_revision',
                                                                      ['path'],
                                                                      "Return path's SVN revision number.\n        "),
                                                                     ('_get_hg_revision',
                                                                      ['path'],
                                                                      "Return path's Mercurial revision number.\n        "),
                                                                     ('get_version',
                                                                      ['version_file=None',
                                                                       'version_variable=None'],
                                                                      'Try to get version string of a package.\n\n        Return a version string of the current package or None if the version\n        information could not be detected.\n\n        Notes\n        -----\n        This method scans files named\n        __version__.py, <packagename>_version.py, version.py, and\n        __svn_version__.py for string variables version, __version\\__, and\n        <packagename>_version, until a version number is found.\n        '),
                                                                     ('make_svn_version_py',
                                                                      ['delete=True'],
                                                                      'Appends a data function to the data_files list that will generate\n        __svn_version__.py file to the current package directory.\n\n        Generate package __svn_version__.py file from SVN revision number,\n        it will be removed after python exits but will be available\n        when sdist, etc commands are executed.\n\n        Notes\n        -----\n        If __svn_version__.py existed before, nothing is done.\n\n        This is\n        intended for working with source directories that are in an SVN\n        repository.\n        '),
                                                                     ('make_hg_version_py',
                                                                      ['delete=True'],
                                                                      'Appends a data function to the data_files list that will generate\n        __hg_version__.py file to the current package directory.\n\n        Generate package __hg_version__.py file from Mercurial revision,\n        it will be removed after python exits but will be available\n        when sdist, etc commands are executed.\n\n        Notes\n        -----\n        If __hg_version__.py existed before, nothing is done.\n\n        This is intended for working with source directories that are\n        in an Mercurial repository.\n        '),
                                                                     ('make_config_py',
                                                                      ["name='__config__'"],
                                                                      'Generate package __config__.py file containing system_info\n        information used during building the package.\n\n        This file is installed to the\n        package installation directory.\n\n        '),
                                                                     ('scons_make_config_py',
                                                                      ["name='__config__'"],
                                                                      'Generate package __config__.py file containing system_info\n        information used during building the package.\n        '),
                                                                     ('get_info',
                                                                      ['*names'],
                                                                      'Get resources information.\n\n        Return information (from system_info.get_info) for all of the names in\n        the argument list in a single dictionary.\n        ')],
                                                         'properties': ['_list_keys',
                                                                        '_dict_keys',
                                                                        '_extra_keys',
                                                                        'numpy_include_dirs',
                                                                        'name',
                                                                        'version',
                                                                        'local_path',
                                                                        'top_path',
                                                                        'package_path',
                                                                        'path_in_package',
                                                                        'list_keys',
                                                                        'dict_keys',
                                                                        'extra_keys',
                                                                        'options',
                                                                        'setup_name']},
             'numpy.distutils.misc_util.InstallableLib': {'bases': [],
                                                          'constructor': ['name',
                                                                          'build_info',
                                                                          'target_dir'],
                                                          'docstring': '\n    Container to hold information on an installable library.\n\n    Parameters\n    ----------\n    name : str\n        Name of the installed library.\n    build_info : dict\n        Dictionary holding build information.\n    target_dir : str\n        Absolute path specifying where to install the library.\n\n    See Also\n    --------\n    Configuration.add_installed_library\n\n    Notes\n    -----\n    The three parameters are stored as attributes with the same names.\n\n    ',
                                                          'methods': [],
                                                          'properties': ['name',
                                                                         'build_info',
                                                                         'target_dir']},
             'numpy.distutils.misc_util.SconsInfo': {'bases': ['object'],
                                                     'constructor': ['scons_path',
                                                                     'parent_name',
                                                                     'pre_hook',
                                                                     'post_hook',
                                                                     'source_files',
                                                                     'pkg_path'],
                                                     'docstring': '\n    Container object holding build info for building a package with scons.\n\n    Parameters\n    ----------\n    scons_path : str or None\n        Path to scons script, relative to the directory of setup.py.\n        If None, no scons script is specified. This can be useful to add only\n        pre- and post-hooks to a configuration.\n    parent_name : str or None\n        Name of the parent package (for example "numpy").\n    pre_hook : sequence of callables or None\n        Callables that are executed before scons is invoked.\n        Each callable should be defined as ``callable(*args, **kw)``.\n    post_hook : sequence of callables or None\n        Callables that are executed after scons is invoked.\n        Each callable should be defined as ``callable(*args, **kw)``.\n    source_files : list of str or None\n        List of paths to source files, relative to the directory of setup.py.\n    pkg_path : str or None\n        Path to the package for which the `SconsInfo` instance holds the\n        build info, relative to the directory of setup.py.\n\n    Notes\n    -----\n    All parameters are available as attributes of a `SconsInfo` instance.\n\n    ',
                                                     'methods': [],
                                                     'properties': ['scons_path',
                                                                    'parent_name',
                                                                    'pre_hook',
                                                                    'post_hook',
                                                                    'source_files',
                                                                    'pkg_path']},
             'numpy.distutils.npy_pkg_config.FormatError': {'bases': ['IOError'],
                                                            'constructor': ['msg'],
                                                            'docstring': '\n    Exception thrown when there is a problem parsing a configuration file.\n\n    ',
                                                            'methods': [('__str__', [], '')],
                                                            'properties': ['msg']},
             'numpy.distutils.npy_pkg_config.LibraryInfo': {'bases': ['object'],
                                                            'constructor': ['name',
                                                                            'description',
                                                                            'version',
                                                                            'sections',
                                                                            'vars',
                                                                            'requires=None'],
                                                            'docstring': '\n    Object containing build information about a library.\n\n    Parameters\n    ----------\n    name : str\n        The library name.\n    description : str\n        Description of the library.\n    version : str\n        Version string.\n    sections : dict\n        The sections of the configuration file for the library. The keys are\n        the section headers, the values the text under each header.\n    vars : class instance\n        A `VariableSet` instance, which contains ``(name, value)`` pairs for\n        variables defined in the configuration file for the library.\n    requires : sequence, optional\n        The required libraries for the library to be installed.\n\n    Notes\n    -----\n    All input parameters (except "sections" which is a method) are available as\n    attributes of the same name.\n\n    ',
                                                            'methods': [('sections',
                                                                         [],
                                                                         '\n        Return the section headers of the config file.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        keys : list of str\n            The list of section headers.\n\n        '),
                                                                        ('cflags',
                                                                         ["section='default'"],
                                                                         ''),
                                                                        ('libs',
                                                                         ["section='default'"],
                                                                         ''),
                                                                        ('__str__', [], '')],
                                                            'properties': ['name',
                                                                           'description',
                                                                           'requires',
                                                                           'version',
                                                                           '_sections',
                                                                           'vars']},
             'numpy.distutils.npy_pkg_config.PkgNotFound': {'bases': ['IOError'],
                                                            'constructor': ['msg'],
                                                            'docstring': 'Exception raised when a package can not be located.',
                                                            'methods': [('__str__', [], '')],
                                                            'properties': ['msg']},
             'numpy.distutils.npy_pkg_config.VariableSet': {'bases': ['object'],
                                                            'constructor': ['d'],
                                                            'docstring': '\n    Container object for the variables defined in a config file.\n\n    `VariableSet` can be used as a plain dictionary, with the variable names\n    as keys.\n\n    Parameters\n    ----------\n    d : dict\n        Dict of items in the "variables" section of the configuration file.\n\n    ',
                                                            'methods': [('_init_parse', [], ''),
                                                                        ('_init_parse_var',
                                                                         ['name', 'value'],
                                                                         ''),
                                                                        ('interpolate',
                                                                         ['value'],
                                                                         ''),
                                                                        ('variables',
                                                                         [],
                                                                         '\n        Return the list of variable names.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        names : list of str\n            The names of all variables in the `VariableSet` instance.\n\n        '),
                                                                        ('__getitem__',
                                                                         ['name'],
                                                                         ''),
                                                                        ('__setitem__',
                                                                         ['name', 'value'],
                                                                         '')],
                                                            'properties': ['_raw_data',
                                                                           '_re',
                                                                           '_re_sub']},
             'numpy.distutils.numpy_distribution.NumpyDistribution': {'bases': ['distutils.core.Distribution'],
                                                                      'constructor': ['attrs=None'],
                                                                      'docstring': '',
                                                                      'methods': [('has_scons_scripts',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['scons_data',
                                                                                     'installed_libraries',
                                                                                     'installed_pkg_config']},
             'numpy.distutils.pathccompiler.PathScaleCCompiler': {'bases': ['distutils.unixccompiler.UnixCCompiler'],
                                                                  'constructor': ['verbose=0',
                                                                                  'dry_run=0',
                                                                                  'force=0'],
                                                                  'docstring': '\n    PathScale compiler compatible with an gcc built Python.\n    ',
                                                                  'methods': [],
                                                                  'properties': ['compiler_type',
                                                                                 'cc_exe',
                                                                                 'cxx_exe']},
             'numpy.distutils.system_info.AtlasNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                                'constructor': [],
                                                                'docstring': '\n    Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [atlas]) or by setting\n    the ATLAS environment variable.',
                                                                'methods': [],
                                                                'properties': []},
             'numpy.distutils.system_info.BlasNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                               'constructor': [],
                                                               'docstring': '\n    Blas (http://www.netlib.org/blas/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [blas]) or by setting\n    the BLAS environment variable.',
                                                               'methods': [],
                                                               'properties': []},
             'numpy.distutils.system_info.BlasSrcNotFoundError': {'bases': ['numpy.distutils.system_info.BlasNotFoundError'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    Blas (http://www.netlib.org/blas/) sources not found.\n    Directories to search for the sources can be specified in the\n    numpy/distutils/site.cfg file (section [blas_src]) or by setting\n    the BLAS_SRC environment variable.',
                                                                  'methods': [],
                                                                  'properties': []},
             'numpy.distutils.system_info.DJBFFTNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    DJBFFT (http://cr.yp.to/djbfft.html) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [djbfft]) or by setting\n    the DJBFFT environment variable.',
                                                                 'methods': [],
                                                                 'properties': []},
             'numpy.distutils.system_info.FFTWNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                               'constructor': [],
                                                               'docstring': '\n    FFTW (http://www.fftw.org/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [fftw]) or by setting\n    the FFTW environment variable.',
                                                               'methods': [],
                                                               'properties': []},
             'numpy.distutils.system_info.LapackNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                                 'constructor': [],
                                                                 'docstring': '\n    Lapack (http://www.netlib.org/lapack/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [lapack]) or by setting\n    the LAPACK environment variable.',
                                                                 'methods': [],
                                                                 'properties': []},
             'numpy.distutils.system_info.LapackSrcNotFoundError': {'bases': ['numpy.distutils.system_info.LapackNotFoundError'],
                                                                    'constructor': [],
                                                                    'docstring': '\n    Lapack (http://www.netlib.org/lapack/) sources not found.\n    Directories to search for the sources can be specified in the\n    numpy/distutils/site.cfg file (section [lapack_src]) or by setting\n    the LAPACK_SRC environment variable.',
                                                                    'methods': [],
                                                                    'properties': []},
             'numpy.distutils.system_info.NotFoundError': {'bases': ['distutils.errors.DistutilsError'],
                                                           'constructor': [],
                                                           'docstring': 'Some third-party program or library is not found.',
                                                           'methods': [],
                                                           'properties': []},
             'numpy.distutils.system_info.NumericNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    Numeric (http://www.numpy.org/) module not found.\n    Get it from above location, install it, and retry setup.py.',
                                                                  'methods': [],
                                                                  'properties': []},
             'numpy.distutils.system_info.Numeric_info': {'bases': ['numpy.distutils.system_info._numpy_info'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['section',
                                                                         'modulename']},
             'numpy.distutils.system_info.UmfpackNotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    UMFPACK sparse solver (http://www.cise.ufl.edu/research/sparse/umfpack/)\n    not found. Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [umfpack]) or by setting\n    the UMFPACK environment variable.',
                                                                  'methods': [],
                                                                  'properties': []},
             'numpy.distutils.system_info.X11NotFoundError': {'bases': ['numpy.distutils.system_info.NotFoundError'],
                                                              'constructor': [],
                                                              'docstring': 'X11 libraries not found.',
                                                              'methods': [],
                                                              'properties': []},
             'numpy.distutils.system_info._numpy_info': {'bases': ['system_info'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('calc_info', [], '')],
                                                         'properties': ['section',
                                                                        'modulename',
                                                                        'notfounderror']},
             'numpy.distutils.system_info._pkg_config_info': {'bases': ['system_info'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('get_config_exe',
                                                                           [],
                                                                           ''),
                                                                          ('get_config_output',
                                                                           ['config_exe',
                                                                            'option'],
                                                                           ''),
                                                                          ('calc_info', [], '')],
                                                              'properties': ['section',
                                                                             'config_env_var',
                                                                             'default_config_exe',
                                                                             'append_config_exe',
                                                                             'version_macro_name',
                                                                             'release_macro_name',
                                                                             'version_flag',
                                                                             'cflags_flag']},
             'numpy.distutils.system_info.agg2_info': {'bases': ['system_info'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('get_paths',
                                                                    ['section', 'key'],
                                                                    ''),
                                                                   ('calc_info', [], '')],
                                                       'properties': ['section', 'dir_env_var']},
             'numpy.distutils.system_info.amd_info': {'bases': ['system_info'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('calc_info', [], '')],
                                                      'properties': ['section',
                                                                     'dir_env_var',
                                                                     '_lib_names']},
             'numpy.distutils.system_info.atlas_blas_info': {'bases': ['numpy.distutils.system_info.atlas_info'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('calc_info', [], '')],
                                                             'properties': ['_lib_names']},
             'numpy.distutils.system_info.atlas_blas_threads_info': {'bases': ['numpy.distutils.system_info.atlas_blas_info'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['dir_env_var',
                                                                                    '_lib_names']},
             'numpy.distutils.system_info.atlas_info': {'bases': ['system_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('get_paths',
                                                                     ['section', 'key'],
                                                                     ''),
                                                                    ('calc_info', [], '')],
                                                        'properties': ['section',
                                                                       'dir_env_var',
                                                                       '_lib_names',
                                                                       '_lib_atlas',
                                                                       '_lib_lapack',
                                                                       'notfounderror']},
             'numpy.distutils.system_info.atlas_threads_info': {'bases': ['numpy.distutils.system_info.atlas_info'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['dir_env_var',
                                                                               '_lib_names']},
             'numpy.distutils.system_info.blas_info': {'bases': ['system_info'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('calc_info', [], '')],
                                                       'properties': ['section',
                                                                      'dir_env_var',
                                                                      '_lib_names',
                                                                      'notfounderror']},
             'numpy.distutils.system_info.blas_mkl_info': {'bases': ['numpy.distutils.system_info.mkl_info'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'numpy.distutils.system_info.blas_opt_info': {'bases': ['system_info'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('calc_info', [], '')],
                                                           'properties': ['notfounderror']},
             'numpy.distutils.system_info.blas_src_info': {'bases': ['system_info'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('get_paths',
                                                                        ['section', 'key'],
                                                                        ''),
                                                                       ('calc_info', [], '')],
                                                           'properties': ['section',
                                                                          'dir_env_var',
                                                                          'notfounderror']},
             'numpy.distutils.system_info.boost_python_info': {'bases': ['system_info'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('get_paths',
                                                                            ['section', 'key'],
                                                                            ''),
                                                                           ('calc_info',
                                                                            [],
                                                                            '')],
                                                               'properties': ['section',
                                                                              'dir_env_var']},
             'numpy.distutils.system_info.dfftw_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['section',
                                                                       'dir_env_var',
                                                                       'ver_info']},
             'numpy.distutils.system_info.dfftw_threads_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['section',
                                                                               'dir_env_var',
                                                                               'ver_info']},
             'numpy.distutils.system_info.djbfft_info': {'bases': ['system_info'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('get_paths',
                                                                      ['section', 'key'],
                                                                      ''),
                                                                     ('calc_info', [], '')],
                                                         'properties': ['section',
                                                                        'dir_env_var',
                                                                        'notfounderror']},
             'numpy.distutils.system_info.f2py_info': {'bases': ['system_info'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('calc_info', [], '')],
                                                       'properties': []},
             'numpy.distutils.system_info.fft_opt_info': {'bases': ['system_info'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('calc_info', [], '')],
                                                          'properties': []},
             'numpy.distutils.system_info.fftw2_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['section',
                                                                       'dir_env_var',
                                                                       'notfounderror',
                                                                       'ver_info']},
             'numpy.distutils.system_info.fftw3_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['section',
                                                                       'dir_env_var',
                                                                       'notfounderror',
                                                                       'ver_info']},
             'numpy.distutils.system_info.fftw_info': {'bases': ['system_info'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('calc_ver_info',
                                                                    ['ver_param'],
                                                                    'Returns True on successful version detection, else False'),
                                                                   ('calc_info', [], '')],
                                                       'properties': ['section',
                                                                      'dir_env_var',
                                                                      'notfounderror',
                                                                      'ver_info']},
             'numpy.distutils.system_info.fftw_threads_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['section',
                                                                              'dir_env_var',
                                                                              'ver_info']},
             'numpy.distutils.system_info.freetype2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['section',
                                                                           'append_config_exe',
                                                                           'version_macro_name']},
             'numpy.distutils.system_info.gdk_2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['section',
                                                                       'append_config_exe',
                                                                       'version_macro_name']},
             'numpy.distutils.system_info.gdk_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['section',
                                                                     'append_config_exe',
                                                                     'version_macro_name']},
             'numpy.distutils.system_info.gdk_pixbuf_2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['section',
                                                                              'append_config_exe',
                                                                              'version_macro_name']},
             'numpy.distutils.system_info.gdk_pixbuf_xlib_2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['section',
                                                                                   'append_config_exe',
                                                                                   'version_macro_name']},
             'numpy.distutils.system_info.gdk_x11_2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['section',
                                                                           'append_config_exe',
                                                                           'version_macro_name']},
             'numpy.distutils.system_info.gtkp_2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['section',
                                                                        'append_config_exe',
                                                                        'version_macro_name']},
             'numpy.distutils.system_info.gtkp_x11_2_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['section',
                                                                            'append_config_exe',
                                                                            'version_macro_name']},
             'numpy.distutils.system_info.lapack_atlas_info': {'bases': ['numpy.distutils.system_info.atlas_info'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['_lib_names']},
             'numpy.distutils.system_info.lapack_atlas_threads_info': {'bases': ['numpy.distutils.system_info.atlas_threads_info'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['_lib_names']},
             'numpy.distutils.system_info.lapack_info': {'bases': ['system_info'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('calc_info', [], '')],
                                                         'properties': ['section',
                                                                        'dir_env_var',
                                                                        '_lib_names',
                                                                        'notfounderror']},
             'numpy.distutils.system_info.lapack_mkl_info': {'bases': ['numpy.distutils.system_info.mkl_info'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('calc_info', [], '')],
                                                             'properties': []},
             'numpy.distutils.system_info.lapack_opt_info': {'bases': ['system_info'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('calc_info', [], '')],
                                                             'properties': ['notfounderror']},
             'numpy.distutils.system_info.lapack_src_info': {'bases': ['system_info'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('get_paths',
                                                                          ['section', 'key'],
                                                                          ''),
                                                                         ('calc_info', [], '')],
                                                             'properties': ['section',
                                                                            'dir_env_var',
                                                                            'notfounderror']},
             'numpy.distutils.system_info.mkl_info': {'bases': ['system_info'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('get_mkl_rootdir', [], ''),
                                                                  ('calc_info', [], '')],
                                                      'properties': ['section',
                                                                     'dir_env_var',
                                                                     '_lib_mkl']},
             'numpy.distutils.system_info.numarray_info': {'bases': ['numpy.distutils.system_info._numpy_info'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['section',
                                                                          'modulename']},
             'numpy.distutils.system_info.numerix_info': {'bases': ['system_info'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('calc_info', [], '')],
                                                          'properties': ['section']},
             'numpy.distutils.system_info.numpy_info': {'bases': ['numpy.distutils.system_info._numpy_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['section', 'modulename']},
             'numpy.distutils.system_info.sfftw_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['section',
                                                                       'dir_env_var',
                                                                       'ver_info']},
             'numpy.distutils.system_info.sfftw_threads_info': {'bases': ['numpy.distutils.system_info.fftw_info'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['section',
                                                                               'dir_env_var',
                                                                               'ver_info']},
             'numpy.distutils.system_info.system_info': {'bases': [],
                                                         'constructor': ['default_lib_dirs=default_lib_dirs',
                                                                         'default_include_dirs=default_include_dirs',
                                                                         'verbosity=1'],
                                                         'docstring': " get_info() is the only public method. Don't use others.\n    ",
                                                         'methods': [('parse_config_files',
                                                                      [],
                                                                      ''),
                                                                     ('calc_libraries_info',
                                                                      [],
                                                                      ''),
                                                                     ('set_info',
                                                                      ['**info'],
                                                                      ''),
                                                                     ('has_info', [], ''),
                                                                     ('get_info',
                                                                      ['notfound_action=0'],
                                                                      ' Return a dictonary with items that are compatible\n            with numpy.distutils.setup keyword arguments.\n        '),
                                                                     ('get_paths',
                                                                      ['section', 'key'],
                                                                      ''),
                                                                     ('get_lib_dirs',
                                                                      ["key='library_dirs'"],
                                                                      ''),
                                                                     ('get_include_dirs',
                                                                      ["key='include_dirs'"],
                                                                      ''),
                                                                     ('get_src_dirs',
                                                                      ["key='src_dirs'"],
                                                                      ''),
                                                                     ('get_libs',
                                                                      ['key', 'default'],
                                                                      ''),
                                                                     ('get_libraries',
                                                                      ["key='libraries'"],
                                                                      ''),
                                                                     ('library_extensions',
                                                                      [],
                                                                      ''),
                                                                     ('check_libs',
                                                                      ['lib_dir',
                                                                       'libs',
                                                                       'opt_libs=[]'],
                                                                      'If static or shared libraries are available then return\n        their info dictionary.\n\n        Checks for all libraries as shared libraries first, then\n        static (or vice versa if self.search_static_first is True).\n        '),
                                                                     ('check_libs2',
                                                                      ['lib_dir',
                                                                       'libs',
                                                                       'opt_libs=[]'],
                                                                      'If static or shared libraries are available then return\n        their info dictionary.\n\n        Checks each library for shared or static.\n        '),
                                                                     ('_lib_list',
                                                                      ['lib_dir',
                                                                       'libs',
                                                                       'exts'],
                                                                      ''),
                                                                     ('_check_libs',
                                                                      ['lib_dir',
                                                                       'libs',
                                                                       'opt_libs',
                                                                       'exts'],
                                                                      ''),
                                                                     ('combine_paths',
                                                                      ['*args'],
                                                                      'Return a list of existing paths composed by all combinations\n        of items from the arguments.\n        ')],
                                                         'properties': ['section',
                                                                        'dir_env_var',
                                                                        'search_static_first',
                                                                        'verbosity',
                                                                        'saved_results',
                                                                        'notfounderror',
                                                                        'local_prefixes',
                                                                        'cp',
                                                                        'files']},
             'numpy.distutils.system_info.umfpack_info': {'bases': ['system_info'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('calc_info', [], '')],
                                                          'properties': ['section',
                                                                         'dir_env_var',
                                                                         'notfounderror',
                                                                         '_lib_names']},
             'numpy.distutils.system_info.wx_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['section',
                                                                    'config_env_var',
                                                                    'default_config_exe',
                                                                    'append_config_exe',
                                                                    'version_macro_name',
                                                                    'release_macro_name',
                                                                    'version_flag',
                                                                    'cflags_flag']},
             'numpy.distutils.system_info.x11_info': {'bases': ['system_info'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('calc_info', [], '')],
                                                      'properties': ['section', 'notfounderror']},
             'numpy.distutils.system_info.xft_info': {'bases': ['numpy.distutils.system_info._pkg_config_info'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['section',
                                                                     'append_config_exe',
                                                                     'version_macro_name']},
             'numpy.f2py.auxfuncs.F2PYError': {'bases': ['Exception'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'numpy.f2py.auxfuncs.throw_error': {'bases': [],
                                                 'constructor': ['mess'],
                                                 'docstring': '',
                                                 'methods': [('__call__', ['var'], '')],
                                                 'properties': ['mess']},
             'numpy.lib._datasource.DataSource': {'bases': ['object'],
                                                  'constructor': ['destpath=os.curdir'],
                                                  'docstring': "\n    DataSource(destpath='.')\n\n    A generic data source file (file, http, ftp, ...).\n\n    DataSources can be local files or remote files/URLs.  The files may\n    also be compressed or uncompressed. DataSource hides some of the low-level\n    details of downloading the file, allowing you to simply pass in a valid\n    file path (or URL) and obtain a file object.\n\n    Parameters\n    ----------\n    destpath : str or None, optional\n        Path to the directory where the source file gets downloaded to for use.\n        If `destpath` is None, a temporary directory will be created.\n        The default path is the current directory.\n\n    Notes\n    -----\n    URLs require a scheme string (``http://``) to be used, without it they\n    will fail::\n\n        >>> repos = DataSource()\n        >>> repos.exists('www.google.com/index.html')\n        False\n        >>> repos.exists('http://www.google.com/index.html')\n        True\n\n    Temporary directories are deleted when the DataSource is deleted.\n\n    Examples\n    --------\n    ::\n\n        >>> ds = DataSource('/home/guido')\n        >>> urlname = 'http://www.google.com/index.html'\n        >>> gfile = ds.open('http://www.google.com/index.html')  # remote file\n        >>> ds.abspath(urlname)\n        '/home/guido/www.google.com/site/index.html'\n\n        >>> ds = DataSource(None)  # use with temporary file\n        >>> ds.open('/home/guido/foobar.txt')\n        <open file '/home/guido.foobar.txt', mode 'r' at 0x91d4430>\n        >>> ds.abspath('/home/guido/foobar.txt')\n        '/tmp/tmpy4pgsP/home/guido/foobar.txt'\n\n    ",
                                                  'methods': [('__del__', [], ''),
                                                              ('_iszip',
                                                               ['filename'],
                                                               'Test if the filename is a zip file by looking at the file extension.\n        '),
                                                              ('_iswritemode',
                                                               ['mode'],
                                                               'Test if the given mode will open a file for writing.'),
                                                              ('_splitzipext',
                                                               ['filename'],
                                                               'Split zip extension from filename and return filename.\n\n        *Returns*:\n            base, zip_ext : {tuple}\n\n        '),
                                                              ('_possible_names',
                                                               ['filename'],
                                                               'Return a tuple containing compressed filename variations.'),
                                                              ('_isurl',
                                                               ['path'],
                                                               'Test if path is a net location.  Tests the scheme and netloc.'),
                                                              ('_cache',
                                                               ['path'],
                                                               'Cache the file specified by path.\n\n        Creates a copy of the file in the datasource cache.\n\n        '),
                                                              ('_findfile',
                                                               ['path'],
                                                               'Searches for ``path`` and returns full path if found.\n\n        If path is an URL, _findfile will cache a local copy and return\n        the path to the cached file.\n        If path is a local file, _findfile will return a path to that local\n        file.\n\n        The search will include possible compressed versions of the file and\n        return the first occurence found.\n\n        '),
                                                              ('abspath',
                                                               ['path'],
                                                               '\n        Return absolute path of file in the DataSource directory.\n\n        If `path` is an URL, then `abspath` will return either the location\n        the file exists locally or the location it would exist when opened\n        using the `open` method.\n\n        Parameters\n        ----------\n        path : str\n            Can be a local file or a remote URL.\n\n        Returns\n        -------\n        out : str\n            Complete path, including the `DataSource` destination directory.\n\n        Notes\n        -----\n        The functionality is based on `os.path.abspath`.\n\n        '),
                                                              ('_sanitize_relative_path',
                                                               ['path'],
                                                               'Return a sanitised relative path for which\n        os.path.abspath(os.path.join(base, path)).startswith(base)\n        '),
                                                              ('exists',
                                                               ['path'],
                                                               "\n        Test if path exists.\n\n        Test if `path` exists as (and in this order):\n\n        - a local file.\n        - a remote URL that has been downloaded and stored locally in the\n          `DataSource` directory.\n        - a remote URL that has not been downloaded, but is valid and accessible.\n\n        Parameters\n        ----------\n        path : str\n            Can be a local file or a remote URL.\n\n        Returns\n        -------\n        out : bool\n            True if `path` exists.\n\n        Notes\n        -----\n        When `path` is an URL, `exists` will return True if it's either stored\n        locally in the `DataSource` directory, or is a valid remote URL.\n        `DataSource` does not discriminate between the two, the file is accessible\n        if it exists in either location.\n\n        "),
                                                              ('open',
                                                               ['path', "mode='r'"],
                                                               "\n        Open and return file-like object.\n\n        If `path` is an URL, it will be downloaded, stored in the `DataSource`\n        directory and opened from there.\n\n        Parameters\n        ----------\n        path : str\n            Local file path or URL to open.\n        mode : {'r', 'w', 'a'}, optional\n            Mode to open `path`.  Mode 'r' for reading, 'w' for writing, 'a' to\n            append. Available modes depend on the type of object specified by\n            `path`. Default is 'r'.\n\n        Returns\n        -------\n        out : file object\n            File object.\n\n        ")],
                                                  'properties': ['_destpath', '_istmpdest']},
             'numpy.lib._datasource.Repository': {'bases': ['numpy.lib._datasource.DataSource'],
                                                  'constructor': ['baseurl',
                                                                  'destpath=os.curdir'],
                                                  'docstring': "\n    Repository(baseurl, destpath='.')\n\n    A data repository where multiple DataSource's share a base URL/directory.\n\n    `Repository` extends `DataSource` by prepending a base URL (or directory)\n    to all the files it handles. Use `Repository` when you will be working\n    with multiple files from one base URL.  Initialize `Repository` with the\n    base URL, then refer to each file by its filename only.\n\n    Parameters\n    ----------\n    baseurl : str\n        Path to the local directory or remote location that contains the\n        data files.\n    destpath : str or None, optional\n        Path to the directory where the source file gets downloaded to for use.\n        If `destpath` is None, a temporary directory will be created.\n        The default path is the current directory.\n\n    Examples\n    --------\n    To analyze all files in the repository, do something like this\n    (note: this is not self-contained code)::\n\n        >>> repos = np.lib._datasource.Repository('/home/user/data/dir/')\n        >>> for filename in filelist:\n        ...     fp = repos.open(filename)\n        ...     fp.analyze()\n        ...     fp.close()\n\n    Similarly you could use a URL for a repository::\n\n        >>> repos = np.lib._datasource.Repository('http://www.xyz.edu/data')\n\n    ",
                                                  'methods': [('__del__', [], ''),
                                                              ('_fullpath',
                                                               ['path'],
                                                               'Return complete path for path.  Prepends baseurl if necessary.'),
                                                              ('_findfile',
                                                               ['path'],
                                                               'Extend DataSource method to prepend baseurl to ``path``.'),
                                                              ('abspath',
                                                               ['path'],
                                                               '\n        Return absolute path of file in the Repository directory.\n\n        If `path` is an URL, then `abspath` will return either the location\n        the file exists locally or the location it would exist when opened\n        using the `open` method.\n\n        Parameters\n        ----------\n        path : str\n            Can be a local file or a remote URL. This may, but does not have\n            to, include the `baseurl` with which the `Repository` was initialized.\n\n        Returns\n        -------\n        out : str\n            Complete path, including the `DataSource` destination directory.\n\n        '),
                                                              ('exists',
                                                               ['path'],
                                                               "\n        Test if path exists prepending Repository base URL to path.\n\n        Test if `path` exists as (and in this order):\n\n        - a local file.\n        - a remote URL that has been downloaded and stored locally in the\n          `DataSource` directory.\n        - a remote URL that has not been downloaded, but is valid and\n          accessible.\n\n        Parameters\n        ----------\n        path : str\n            Can be a local file or a remote URL. This may, but does not have\n            to, include the `baseurl` with which the `Repository` was initialized.\n\n        Returns\n        -------\n        out : bool\n            True if `path` exists.\n\n        Notes\n        -----\n        When `path` is an URL, `exists` will return True if it's either stored\n        locally in the `DataSource` directory, or is a valid remote URL.\n        `DataSource` does not discriminate between the two, the file is accessible\n        if it exists in either location.\n\n        "),
                                                              ('open',
                                                               ['path', "mode='r'"],
                                                               "\n        Open and return file-like object prepending Repository base URL.\n\n        If `path` is an URL, it will be downloaded, stored in the DataSource\n        directory and opened from there.\n\n        Parameters\n        ----------\n        path : str\n            Local file path or URL to open. This may, but does not have to,\n            include the `baseurl` with which the `Repository` was initialized.\n        mode : {'r', 'w', 'a'}, optional\n            Mode to open `path`.  Mode 'r' for reading, 'w' for writing, 'a' to\n            append. Available modes depend on the type of object specified by\n            `path`. Default is 'r'.\n\n        Returns\n        -------\n        out : file object\n            File object.\n\n        "),
                                                              ('listdir',
                                                               [],
                                                               '\n        List files in the source Repository.\n\n        Returns\n        -------\n        files : list of str\n            List of file names (not containing a directory part).\n\n        Notes\n        -----\n        Does not currently work for remote repositories.\n\n        ')],
                                                  'properties': ['_baseurl']},
             'numpy.lib._datasource._FileOpeners': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': "\n    Container for different methods to open (un-)compressed files.\n\n    `_FileOpeners` contains a dictionary that holds one method for each\n    supported file format. Attribute lookup is implemented in such a way that\n    an instance of `_FileOpeners` itself can be indexed with the keys of that\n    dictionary. Currently uncompressed files as well as files\n    compressed with ``gzip`` or ``bz2`` compression are supported.\n\n    Notes\n    -----\n    `_file_openers`, an instance of `_FileOpeners`, is made available for\n    use in the `_datasource` module.\n\n    Examples\n    --------\n    >>> np.lib._datasource._file_openers.keys()\n    [None, '.bz2', '.gz']\n    >>> np.lib._datasource._file_openers['.gz'] is gzip.open\n    True\n\n    ",
                                                    'methods': [('_load', [], ''),
                                                                ('keys',
                                                                 [],
                                                                 "\n        Return the keys of currently supported file openers.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        keys : list\n            The keys are None for uncompressed files and the file extension\n            strings (i.e. ``'.gz'``, ``'.bz2'``) for supported compression\n            methods.\n\n        "),
                                                                ('__getitem__', ['key'], '')],
                                                    'properties': ['_loaded', '_file_openers']},
             'numpy.lib._iotools.ConversionWarning': {'bases': ['UserWarning'],
                                                      'constructor': [],
                                                      'docstring': '\n    Warning issued when a string converter has a problem.\n\n    Notes\n    -----\n    In `genfromtxt` a `ConversionWarning` is issued if raising exceptions\n    is explicitly suppressed with the "invalid_raise" keyword.\n\n    ',
                                                      'methods': [],
                                                      'properties': []},
             'numpy.lib._iotools.ConverterError': {'bases': ['Exception'],
                                                   'constructor': [],
                                                   'docstring': '\n    Exception raised when an error occurs in a converter for string values.\n\n    ',
                                                   'methods': [],
                                                   'properties': []},
             'numpy.lib._iotools.ConverterLockError': {'bases': ['numpy.lib._iotools.ConverterError'],
                                                       'constructor': [],
                                                       'docstring': '\n    Exception raised when an attempt is made to upgrade a locked converter.\n\n    ',
                                                       'methods': [],
                                                       'properties': []},
             'numpy.lib._iotools.LineSplitter': {'bases': [],
                                                 'constructor': ['delimiter=None',
                                                                 "comments=asbytes('#')",
                                                                 'autostrip=True'],
                                                 'docstring': "\n    Object to split a string at a given delimiter or at given places.\n\n    Parameters\n    ----------\n    delimiter : str, int, or sequence of ints, optional\n        If a string, character used to delimit consecutive fields.\n        If an integer or a sequence of integers, width(s) of each field.\n    comment : str, optional\n        Character used to mark the beginning of a comment. Default is '#'.\n    autostrip : bool, optional\n        Whether to strip each individual field. Default is True.\n\n    ",
                                                 'methods': [('autostrip',
                                                              ['method'],
                                                              '\n        Wrapper to strip each member of the output of `method`.\n\n        Parameters\n        ----------\n        method : function\n            Function that takes a single argument and returns a sequence of\n            strings.\n\n        Returns\n        -------\n        wrapped : function\n            The result of wrapping `method`. `wrapped` takes a single input\n            argument and returns a list of strings that are stripped of\n            white-space.\n\n        '),
                                                             ('_delimited_splitter',
                                                              ['line'],
                                                              ''),
                                                             ('_fixedwidth_splitter',
                                                              ['line'],
                                                              ''),
                                                             ('_variablewidth_splitter',
                                                              ['line'],
                                                              ''),
                                                             ('__call__', ['line'], '')],
                                                 'properties': ['comments',
                                                                'delimiter',
                                                                '_handyman']},
             'numpy.lib._iotools.NameValidator': {'bases': [],
                                                  'constructor': ['excludelist=None',
                                                                  'deletechars=None',
                                                                  'case_sensitive=None',
                                                                  "replace_space='_'"],
                                                  'docstring': '\n    Object to validate a list of strings to use as field names.\n\n    The strings are stripped of any non alphanumeric character, and spaces\n    are replaced by \'_\'. During instantiation, the user can define a list of\n    names to exclude, as well as a list of invalid characters. Names in the\n    exclusion list are appended a \'_\' character.\n\n    Once an instance has been created, it can be called with a list of names,\n    and a list of valid names will be created.\n    The `__call__` method accepts an optional keyword "default" that sets\n    the default name in case of ambiguity. By default this is \'f\', so\n    that names will default to `f0`, `f1`, etc.\n\n    Parameters\n    ----------\n    excludelist : sequence, optional\n        A list of names to exclude. This list is appended to the default list\n        [\'return\', \'file\', \'print\']. Excluded names are appended an underscore:\n        for example, `file` becomes `file_` if supplied.\n    deletechars : str, optional\n        A string combining invalid characters that must be deleted from the\n        names.\n    casesensitive : {True, False, \'upper\', \'lower\'}, optional\n        * If True, field names are case-sensitive.\n        * If False or \'upper\', field names are converted to upper case.\n        * If \'lower\', field names are converted to lower case.\n\n        The default value is True.\n    replace_space: \'_\', optional\n        Character(s) used in replacement of white spaces.\n\n    Notes\n    -----\n    Calling an instance of `NameValidator` is the same as calling its method\n    `validate`.\n\n    Examples\n    --------\n    >>> validator = np.lib._iotools.NameValidator()\n    >>> validator([\'file\', \'field2\', \'with space\', \'CaSe\'])\n    [\'file_\', \'field2\', \'with_space\', \'CaSe\']\n\n    >>> validator = np.lib._iotools.NameValidator(excludelist=[\'excl\'],\n                                                  deletechars=\'q\',\n                                                  case_sensitive=\'False\')\n    >>> validator([\'excl\', \'field2\', \'no_q\', \'with space\', \'CaSe\'])\n    [\'excl_\', \'field2\', \'no_\', \'with_space\', \'case\']\n\n    ',
                                                  'methods': [('validate',
                                                               ['names',
                                                                "defaultfmt='f%i'",
                                                                'nbfields=None'],
                                                               '\n        Validate a list of strings to use as field names for a structured array.\n\n        Parameters\n        ----------\n        names : sequence of str\n            Strings to be validated.\n        defaultfmt : str, optional\n            Default format string, used if validating a given string reduces its\n            length to zero.\n        nboutput : integer, optional\n            Final number of validated names, used to expand or shrink the initial\n            list of names.\n\n        Returns\n        -------\n        validatednames : list of str\n            The list of validated field names.\n\n        Notes\n        -----\n        A `NameValidator` instance can be called directly, which is the same as\n        calling `validate`. For examples, see `NameValidator`.\n\n        '),
                                                              ('__call__',
                                                               ['names',
                                                                "defaultfmt='f%i'",
                                                                'nbfields=None'],
                                                               '')],
                                                  'properties': ['defaultexcludelist',
                                                                 'defaultdeletechars',
                                                                 'excludelist',
                                                                 'deletechars',
                                                                 'case_converter',
                                                                 'replace_space']},
             'numpy.lib._iotools.StringConverter': {'bases': [],
                                                    'constructor': ['dtype_or_func=None',
                                                                    'default=None',
                                                                    'missing_values=None',
                                                                    'locked=False'],
                                                    'docstring': '\n    Factory class for function transforming a string into another object (int,\n    float).\n\n    After initialization, an instance can be called to transform a string\n    into another object. If the string is recognized as representing a missing\n    value, a default value is returned.\n\n    Attributes\n    ----------\n    func : function\n        Function used for the conversion.\n    default : any\n        Default value to return when the input corresponds to a missing value.\n    type : type\n        Type of the output.\n    _status : int\n        Integer representing the order of the conversion.\n    _mapper : sequence of tuples\n        Sequence of tuples (dtype, function, default value) to evaluate in\n        order.\n    _locked : bool\n        Holds `locked` parameter.\n\n    Parameters\n    ----------\n    dtype_or_func : {None, dtype, function}, optional\n        If a `dtype`, specifies the input data type, used to define a basic\n        function and a default value for missing data. For example, when\n        `dtype` is float, the `func` attribute is set to `float` and the\n        default value to `np.nan`.\n        If a function, this function is used to convert a string to another\n        object. In this case, it is recommended to give an associated default\n        value as input.\n    default : any, optional\n        Value to return by default, that is, when the string to be converted\n        is flagged as missing. If not given, `StringConverter` tries to supply\n        a reasonable default value.\n    missing_values : sequence of str, optional\n        Sequence of strings indicating a missing value.\n    locked : bool, optional\n        Whether the StringConverter should be locked to prevent automatic\n        upgrade or not. Default is False.\n\n    ',
                                                    'methods': [('_getsubdtype',
                                                                 ['val'],
                                                                 'Returns the type of the dtype of the input variable.'),
                                                                ('upgrade_mapper',
                                                                 ['func', 'default=None'],
                                                                 '\n    Upgrade the mapper of a StringConverter by adding a new function and its\n    corresponding default.\n    \n    The input function (or sequence of functions) and its associated default \n    value (if any) is inserted in penultimate position of the mapper.\n    The corresponding type is estimated from the dtype of the default value.\n    \n    Parameters\n    ----------\n    func : var\n        Function, or sequence of functions\n\n    Examples\n    --------\n    >>> import dateutil.parser\n    >>> import datetime\n    >>> dateparser = datetustil.parser.parse\n    >>> defaultdate = datetime.date(2000, 1, 1)\n    >>> StringConverter.upgrade_mapper(dateparser, default=defaultdate)\n        '),
                                                                ('_loose_call', ['value'], ''),
                                                                ('_strict_call', ['value'], ''),
                                                                ('__call__', ['value'], ''),
                                                                ('upgrade',
                                                                 ['value'],
                                                                 '\n        Try to find the best converter for a given string, and return the result.\n\n        The supplied string `value` is converted by testing different\n        converters in order. First the `func` method of the `StringConverter`\n        instance is tried, if this fails other available converters are tried.\n        The order in which these other converters are tried is determined by the\n        `_status` attribute of the instance.\n\n        Parameters\n        ----------\n        value : str\n            The string to convert.\n\n        Returns\n        -------\n        out : any\n            The result of converting `value` with the appropriate converter.\n\n        '),
                                                                ('iterupgrade', ['value'], ''),
                                                                ('update',
                                                                 ['func',
                                                                  'default=None',
                                                                  'testing_value=None',
                                                                  "missing_values=asbytes('')",
                                                                  'locked=False'],
                                                                 '\n        Set StringConverter attributes directly.\n\n        Parameters\n        ----------\n        func : function\n            Conversion function.\n        default : any, optional\n            Value to return by default, that is, when the string to be converted\n            is flagged as missing. If not given, `StringConverter` tries to supply\n            a reasonable default value.\n        testing_value : str, optional\n            A string representing a standard input value of the converter.\n            This string is used to help defining a reasonable default value.\n        missing_values : sequence of str, optional\n            Sequence of strings indicating a missing value.\n        locked : bool, optional\n            Whether the StringConverter should be locked to prevent automatic\n            upgrade or not. Default is False.\n\n        Notes\n        -----\n        `update` takes the same parameters as the constructor of `StringConverter`,\n        except that `func` does not accept a `dtype` whereas `dtype_or_func` in\n        the constructor does.\n\n        ')],
                                                    'properties': ['_mapper',
                                                                   '_defaulttype',
                                                                   '_defaultfunc',
                                                                   '_defaultfill',
                                                                   '_locked',
                                                                   'func',
                                                                   '_status',
                                                                   'default',
                                                                   'missing_values',
                                                                   '_callingfunction',
                                                                   'type',
                                                                   '_checked',
                                                                   '_initial_default']},
             'numpy.lib.arrayterator.Arrayterator': {'bases': ['object'],
                                                     'constructor': ['var', 'buf_size=None'],
                                                     'docstring': '\n    Buffered iterator for big arrays.\n\n    `Arrayterator` creates a buffered iterator for reading big arrays in small\n    contiguous blocks. The class is useful for objects stored in the\n    file system. It allows iteration over the object *without* reading\n    everything in memory; instead, small blocks are read and iterated over.\n\n    `Arrayterator` can be used with any object that supports multidimensional\n    slices. This includes NumPy arrays, but also variables from\n    Scientific.IO.NetCDF or pynetcdf for example.\n\n    Parameters\n    ----------\n    var : array_like\n        The object to iterate over.\n    buf_size : int, optional\n        The buffer size. If `buf_size` is supplied, the maximum amount of\n        data that will be read into memory is `buf_size` elements.\n        Default is None, which will read as many element as possible\n        into memory.\n\n    Attributes\n    ----------\n    var\n    buf_size\n    start\n    stop\n    step\n    shape\n    flat\n\n    See Also\n    --------\n    ndenumerate : Multidimensional array iterator.\n    flatiter : Flat array iterator.\n    memmap : Create a memory-map to an array stored in a binary file on disk.\n\n    Notes\n    -----\n    The algorithm works by first finding a "running dimension", along which\n    the blocks will be extracted. Given an array of dimensions\n    ``(d1, d2, ..., dn)``, e.g. if `buf_size` is smaller than ``d1``, the\n    first dimension will be used. If, on the other hand,\n    ``d1 < buf_size < d1*d2`` the second dimension will be used, and so on.\n    Blocks are extracted along this dimension, and when the last block is\n    returned the process continues from the next dimension, until all\n    elements have been read.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> a = np.arange(3 * 4 * 5 * 6).reshape(3, 4, 5, 6)\n    >>> a_itor = np.lib.arrayterator.Arrayterator(a, 2)\n    >>> a_itor.shape\n    (3, 4, 5, 6)\n\n    Now we can iterate over ``a_itor``, and it will return arrays of size\n    two. Since `buf_size` was smaller than any dimension, the first\n    dimension will be iterated over first:\n\n    >>> for subarr in a_itor:\n    ...     if not subarr.all():\n    ...         print subarr, subarr.shape\n    ...\n    [[[[0 1]]]] (1, 1, 1, 2)\n\n    ',
                                                     'methods': [('__getattr__', ['attr'], ''),
                                                                 ('__getitem__',
                                                                  ['index'],
                                                                  '\n        Return a new arrayterator.\n\n        '),
                                                                 ('__array__',
                                                                  [],
                                                                  '\n        Return corresponding data.\n\n        '),
                                                                 ('__iter__', [], '')],
                                                     'properties': ['var',
                                                                    'buf_size',
                                                                    'start',
                                                                    'stop',
                                                                    'step',
                                                                    'flat',
                                                                    'shape']},
             'numpy.lib.function_base.vectorize': {'bases': ['object'],
                                                   'constructor': ['pyfunc',
                                                                   "otypes=''",
                                                                   'doc=None'],
                                                   'docstring': '\n    vectorize(pyfunc, otypes=\'\', doc=None)\n\n    Generalized function class.\n\n    Define a vectorized function which takes a nested sequence\n    of objects or numpy arrays as inputs and returns a\n    numpy array as output. The vectorized function evaluates `pyfunc` over\n    successive tuples of the input arrays like the python map function,\n    except it uses the broadcasting rules of numpy.\n\n    The data type of the output of `vectorized` is determined by calling\n    the function with the first element of the input.  This can be avoided\n    by specifying the `otypes` argument.\n\n    Parameters\n    ----------\n    pyfunc : callable\n        A python function or method.\n    otypes : str or list of dtypes, optional\n        The output data type. It must be specified as either a string of\n        typecode characters or a list of data type specifiers. There should\n        be one data type specifier for each output.\n    doc : str, optional\n        The docstring for the function. If None, the docstring will be the\n        `pyfunc` one.\n\n    Examples\n    --------\n    >>> def myfunc(a, b):\n    ...     """Return a-b if a>b, otherwise return a+b"""\n    ...     if a > b:\n    ...         return a - b\n    ...     else:\n    ...         return a + b\n\n    >>> vfunc = np.vectorize(myfunc)\n    >>> vfunc([1, 2, 3, 4], 2)\n    array([3, 4, 1, 2])\n\n    The docstring is taken from the input function to `vectorize` unless it\n    is specified\n\n    >>> vfunc.__doc__\n    \'Return a-b if a>b, otherwise return a+b\'\n    >>> vfunc = np.vectorize(myfunc, doc=\'Vectorized `myfunc`\')\n    >>> vfunc.__doc__\n    \'Vectorized `myfunc`\'\n\n    The output type is determined by evaluating the first element of the input,\n    unless it is specified\n\n    >>> out = vfunc([1, 2, 3, 4], 2)\n    >>> type(out[0])\n    <type \'numpy.int32\'>\n    >>> vfunc = np.vectorize(myfunc, otypes=[np.float])\n    >>> out = vfunc([1, 2, 3, 4], 2)\n    >>> type(out[0])\n    <type \'numpy.float64\'>\n\n    ',
                                                   'methods': [('__call__', ['*args'], '')],
                                                   'properties': ['thefunc',
                                                                  'ufunc',
                                                                  'nin',
                                                                  'nin_wo_defaults',
                                                                  'nout',
                                                                  '__doc__',
                                                                  'otypes',
                                                                  'lastcallargs']},
             'numpy.lib.index_tricks.AxisConcatenator': {'bases': ['object'],
                                                         'constructor': ['axis=0',
                                                                         'matrix=False',
                                                                         'ndmin=1',
                                                                         'trans1d=-1'],
                                                         'docstring': '\n    Translates slice objects to concatenation along an axis.\n\n    For detailed documentation on usage, see `r_`.\n\n    ',
                                                         'methods': [('_retval', ['res'], ''),
                                                                     ('__getitem__',
                                                                      ['key'],
                                                                      ''),
                                                                     ('__getslice__',
                                                                      ['i', 'j'],
                                                                      ''),
                                                                     ('__len__', [], '')],
                                                         'properties': ['axis',
                                                                        'matrix',
                                                                        'col',
                                                                        '_axis',
                                                                        '_matrix',
                                                                        'trans1d',
                                                                        'ndmin']},
             'numpy.lib.index_tricks.CClass': {'bases': ['numpy.lib.index_tricks.AxisConcatenator'],
                                               'constructor': [],
                                               'docstring': "\n    Translates slice objects to concatenation along the second axis.\n\n    This is short-hand for ``np.r_['-1,2,0', index expression]``, which is\n    useful because of its common occurrence. In particular, arrays will be\n    stacked along their last axis after being upgraded to at least 2-D with\n    1's post-pended to the shape (column vectors made out of 1-D arrays).\n\n    For detailed documentation, see `r_`.\n\n    Examples\n    --------\n    >>> np.c_[np.array([[1,2,3]]), 0, 0, np.array([[4,5,6]])]\n    array([[1, 2, 3, 0, 0, 4, 5, 6]])\n\n    ",
                                               'methods': [],
                                               'properties': []},
             'numpy.lib.index_tricks.IndexExpression': {'bases': ['object'],
                                                        'constructor': ['maketuple'],
                                                        'docstring': "\n    A nicer way to build up index tuples for arrays.\n\n    .. note::\n       Use one of the two predefined instances `index_exp` or `s_`\n       rather than directly using `IndexExpression`.\n\n    For any index combination, including slicing and axis insertion,\n    ``a[indices]`` is the same as ``a[np.index_exp[indices]]`` for any\n    array `a`. However, ``np.index_exp[indices]`` can be used anywhere\n    in Python code and returns a tuple of slice objects that can be\n    used in the construction of complex index expressions.\n\n    Parameters\n    ----------\n    maketuple : bool\n        If True, always returns a tuple.\n\n    See Also\n    --------\n    index_exp : Predefined instance that always returns a tuple:\n       `index_exp = IndexExpression(maketuple=True)`.\n    s_ : Predefined instance without tuple conversion:\n       `s_ = IndexExpression(maketuple=False)`.\n\n    Notes\n    -----\n    You can do all this with `slice()` plus a few special objects,\n    but there's a lot to remember and this version is simpler because\n    it uses the standard array indexing syntax.\n\n    Examples\n    --------\n    >>> np.s_[2::2]\n    slice(2, None, 2)\n    >>> np.index_exp[2::2]\n    (slice(2, None, 2),)\n\n    >>> np.array([0, 1, 2, 3, 4])[np.s_[2::2]]\n    array([2, 4])\n\n    ",
                                                        'methods': [('__getitem__',
                                                                     ['item'],
                                                                     '')],
                                                        'properties': ['maketuple']},
             'numpy.lib.index_tricks.RClass': {'bases': ['numpy.lib.index_tricks.AxisConcatenator'],
                                               'constructor': [],
                                               'docstring': "\n    Translates slice objects to concatenation along the first axis.\n\n    This is a simple way to build up arrays quickly. There are two use cases.\n\n    1. If the index expression contains comma separated arrays, then stack\n       them along their first axis.\n    2. If the index expression contains slice notation or scalars then create\n       a 1-D array with a range indicated by the slice notation.\n\n    If slice notation is used, the syntax ``start:stop:step`` is equivalent\n    to ``np.arange(start, stop, step)`` inside of the brackets. However, if\n    ``step`` is an imaginary number (i.e. 100j) then its integer portion is\n    interpreted as a number-of-points desired and the start and stop are\n    inclusive. In other words ``start:stop:stepj`` is interpreted as\n    ``np.linspace(start, stop, step, endpoint=1)`` inside of the brackets.\n    After expansion of slice notation, all comma separated sequences are\n    concatenated together.\n\n    Optional character strings placed as the first element of the index\n    expression can be used to change the output. The strings 'r' or 'c' result\n    in matrix output. If the result is 1-D and 'r' is specified a 1 x N (row)\n    matrix is produced. If the result is 1-D and 'c' is specified, then a N x 1\n    (column) matrix is produced. If the result is 2-D then both provide the\n    same matrix result.\n\n    A string integer specifies which axis to stack multiple comma separated\n    arrays along. A string of two comma-separated integers allows indication\n    of the minimum number of dimensions to force each entry into as the\n    second integer (the axis to concatenate along is still the first integer).\n\n    A string with three comma-separated integers allows specification of the\n    axis to concatenate along, the minimum number of dimensions to force the\n    entries to, and which axis should contain the start of the arrays which\n    are less than the specified number of dimensions. In other words the third\n    integer allows you to specify where the 1's should be placed in the shape\n    of the arrays that have their shapes upgraded. By default, they are placed\n    in the front of the shape tuple. The third argument allows you to specify\n    where the start of the array should be instead. Thus, a third argument of\n    '0' would place the 1's at the end of the array shape. Negative integers\n    specify where in the new shape tuple the last dimension of upgraded arrays\n    should be placed, so the default is '-1'.\n\n    Parameters\n    ----------\n    Not a function, so takes no parameters\n\n\n    Returns\n    -------\n    A concatenated ndarray or matrix.\n\n    See Also\n    --------\n    concatenate : Join a sequence of arrays together.\n    c_ : Translates slice objects to concatenation along the second axis.\n\n    Examples\n    --------\n    >>> np.r_[np.array([1,2,3]), 0, 0, np.array([4,5,6])]\n    array([1, 2, 3, 0, 0, 4, 5, 6])\n    >>> np.r_[-1:1:6j, [0]*3, 5, 6]\n    array([-1. , -0.6, -0.2,  0.2,  0.6,  1. ,  0. ,  0. ,  0. ,  5. ,  6. ])\n\n    String integers specify the axis to concatenate along or the minimum\n    number of dimensions to force entries into.\n\n    >>> a = np.array([[0, 1, 2], [3, 4, 5]])\n    >>> np.r_['-1', a, a] # concatenate along last axis\n    array([[0, 1, 2, 0, 1, 2],\n           [3, 4, 5, 3, 4, 5]])\n    >>> np.r_['0,2', [1,2,3], [4,5,6]] # concatenate along first axis, dim>=2\n    array([[1, 2, 3],\n           [4, 5, 6]])\n\n    >>> np.r_['0,2,0', [1,2,3], [4,5,6]]\n    array([[1],\n           [2],\n           [3],\n           [4],\n           [5],\n           [6]])\n    >>> np.r_['1,2,0', [1,2,3], [4,5,6]]\n    array([[1, 4],\n           [2, 5],\n           [3, 6]])\n\n    Using 'r' or 'c' as a first string argument creates a matrix.\n\n    >>> np.r_['r',[1,2,3], [4,5,6]]\n    matrix([[1, 2, 3, 4, 5, 6]])\n\n    ",
                                               'methods': [],
                                               'properties': []},
             'numpy.lib.index_tricks.nd_grid': {'bases': ['object'],
                                                'constructor': ['sparse=False'],
                                                'docstring': '\n    Construct a multi-dimensional "meshgrid".\n\n    ``grid = nd_grid()`` creates an instance which will return a mesh-grid\n    when indexed.  The dimension and number of the output arrays are equal\n    to the number of indexing dimensions.  If the step length is not a\n    complex number, then the stop is not inclusive.\n\n    However, if the step length is a **complex number** (e.g. 5j), then the\n    integer part of its magnitude is interpreted as specifying the\n    number of points to create between the start and stop values, where\n    the stop value **is inclusive**.\n\n    If instantiated with an argument of ``sparse=True``, the mesh-grid is\n    open (or not fleshed out) so that only one-dimension of each returned\n    argument is greater than 1.\n\n    Parameters\n    ----------\n    sparse : bool, optional\n        Whether the grid is sparse or not. Default is False.\n\n    Notes\n    -----\n    Two instances of `nd_grid` are made available in the NumPy namespace,\n    `mgrid` and `ogrid`::\n\n        mgrid = nd_grid(sparse=False)\n        ogrid = nd_grid(sparse=True)\n\n    Users should use these pre-defined instances instead of using `nd_grid`\n    directly.\n\n    Examples\n    --------\n    >>> mgrid = np.lib.index_tricks.nd_grid()\n    >>> mgrid[0:5,0:5]\n    array([[[0, 0, 0, 0, 0],\n            [1, 1, 1, 1, 1],\n            [2, 2, 2, 2, 2],\n            [3, 3, 3, 3, 3],\n            [4, 4, 4, 4, 4]],\n           [[0, 1, 2, 3, 4],\n            [0, 1, 2, 3, 4],\n            [0, 1, 2, 3, 4],\n            [0, 1, 2, 3, 4],\n            [0, 1, 2, 3, 4]]])\n    >>> mgrid[-1:1:5j]\n    array([-1. , -0.5,  0. ,  0.5,  1. ])\n\n    >>> ogrid = np.lib.index_tricks.nd_grid(sparse=True)\n    >>> ogrid[0:5,0:5]\n    [array([[0],\n            [1],\n            [2],\n            [3],\n            [4]]), array([[0, 1, 2, 3, 4]])]\n\n    ',
                                                'methods': [('__getitem__', ['key'], ''),
                                                            ('__getslice__', ['i', 'j'], ''),
                                                            ('__len__', [], '')],
                                                'properties': ['sparse']},
             'numpy.lib.index_tricks.ndenumerate': {'bases': ['object'],
                                                    'constructor': ['arr'],
                                                    'docstring': '\n    Multidimensional index iterator.\n\n    Return an iterator yielding pairs of array coordinates and values.\n\n    Parameters\n    ----------\n    a : ndarray\n      Input array.\n\n    See Also\n    --------\n    ndindex, flatiter\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> for index, x in np.ndenumerate(a):\n    ...     print index, x\n    (0, 0) 1\n    (0, 1) 2\n    (1, 0) 3\n    (1, 1) 4\n\n    ',
                                                    'methods': [('next',
                                                                 [],
                                                                 '\n        Standard iterator method, returns the index tuple and array value.\n\n        Returns\n        -------\n        coords : tuple of ints\n            The indices of the current iteration.\n        val : scalar\n            The array element of the current iteration.\n\n        '),
                                                                ('__iter__', [], '')],
                                                    'properties': ['iter']},
             'numpy.lib.index_tricks.ndindex': {'bases': ['object'],
                                                'constructor': ['*args'],
                                                'docstring': '\n    An N-dimensional iterator object to index arrays.\n\n    Given the shape of an array, an `ndindex` instance iterates over\n    the N-dimensional index of the array. At each iteration a tuple\n    of indices is returned, the last dimension is iterated over first.\n\n    Parameters\n    ----------\n    `*args` : ints\n      The size of each dimension of the array.\n\n    See Also\n    --------\n    ndenumerate, flatiter\n\n    Examples\n    --------\n    >>> for index in np.ndindex(3, 2, 1):\n    ...     print index\n    (0, 0, 0)\n    (0, 1, 0)\n    (1, 0, 0)\n    (1, 1, 0)\n    (2, 0, 0)\n    (2, 1, 0)\n\n    ',
                                                'methods': [('_incrementone', ['axis'], ''),
                                                            ('ndincr',
                                                             [],
                                                             '\n        Increment the multi-dimensional index by one.\n\n        `ndincr` takes care of the "wrapping around" of the axes.\n        It is called by `ndindex.next` and not normally used directly.\n\n        '),
                                                            ('next',
                                                             [],
                                                             '\n        Standard iterator method, updates the index and returns the index tuple.\n\n        Returns\n        -------\n        val : tuple of ints\n            Returns a tuple containing the indices of the current iteration.\n\n        '),
                                                            ('__iter__', [], '')],
                                                'properties': ['nd',
                                                               'ind',
                                                               'index',
                                                               'maxvals',
                                                               'total']},
             'numpy.lib.npyio.BagObj': {'bases': ['object'],
                                        'constructor': ['obj'],
                                        'docstring': '\n    BagObj(obj)\n\n    Convert attribute look-ups to getitems on the object passed in.\n\n    Parameters\n    ----------\n    obj : class instance\n        Object on which attribute look-up is performed.\n\n    Examples\n    --------\n    >>> from numpy.lib.npyio import BagObj as BO\n    >>> class BagDemo(object):\n    ...     def __getitem__(self, key): # An instance of BagObj(BagDemo)\n    ...                                 # will call this method when any\n    ...                                 # attribute look-up is required\n    ...         result = "Doesn\'t matter what you want, "\n    ...         return result + "you\'re gonna get this"\n    ...\n    >>> demo_obj = BagDemo()\n    >>> bagobj = BO(demo_obj)\n    >>> bagobj.hello_there\n    "Doesn\'t matter what you want, you\'re gonna get this"\n    >>> bagobj.I_can_be_anything\n    "Doesn\'t matter what you want, you\'re gonna get this"\n\n    ',
                                        'methods': [('__getattribute__', ['key'], '')],
                                        'properties': ['_obj']},
             'numpy.lib.npyio.NpzFile': {'bases': ['object'],
                                         'constructor': ['fid', 'own_fid=False'],
                                         'docstring': '\n    NpzFile(fid)\n\n    A dictionary-like object with lazy-loading of files in the zipped\n    archive provided on construction.\n\n    `NpzFile` is used to load files in the NumPy ``.npz`` data archive\n    format. It assumes that files in the archive have a ".npy" extension,\n    other files are ignored.\n\n    The arrays and file strings are lazily loaded on either\n    getitem access using ``obj[\'key\']`` or attribute lookup using\n    ``obj.f.key``. A list of all files (without ".npy" extensions) can\n    be obtained with ``obj.files`` and the ZipFile object itself using\n    ``obj.zip``.\n\n    Attributes\n    ----------\n    files : list of str\n        List of all files in the archive with a ".npy" extension.\n    zip : ZipFile instance\n        The ZipFile object initialized with the zipped archive.\n    f : BagObj instance\n        An object on which attribute can be performed as an alternative\n        to getitem access on the `NpzFile` instance itself.\n\n    Parameters\n    ----------\n    fid : file or str\n        The zipped archive to open. This is either a file-like object\n        or a string containing the path to the archive.\n    own_fid : bool, optional\n        Whether NpzFile should close the file handle.\n        Requires that `fid` is a file-like object.\n\n    Examples\n    --------\n    >>> from tempfile import TemporaryFile\n    >>> outfile = TemporaryFile()\n    >>> x = np.arange(10)\n    >>> y = np.sin(x)\n    >>> np.savez(outfile, x=x, y=y)\n    >>> outfile.seek(0)\n\n    >>> npz = np.load(outfile)\n    >>> isinstance(npz, np.lib.io.NpzFile)\n    True\n    >>> npz.files\n    [\'y\', \'x\']\n    >>> npz[\'x\']  # getitem access\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> npz.f.x  # attribute lookup\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    ',
                                         'methods': [('close',
                                                      [],
                                                      '\n        Close the file.\n\n        '),
                                                     ('__del__', [], ''),
                                                     ('__getitem__', ['key'], ''),
                                                     ('__iter__', [], ''),
                                                     ('items',
                                                      [],
                                                      '\n        Return a list of tuples, with each tuple (filename, array in file).\n\n        '),
                                                     ('iteritems',
                                                      [],
                                                      'Generator that returns tuples (filename, array in file).'),
                                                     ('keys',
                                                      [],
                                                      'Return files in the archive with a ".npy" extension.'),
                                                     ('iterkeys',
                                                      [],
                                                      'Return an iterator over the files in the archive.'),
                                                     ('__contains__', ['key'], '')],
                                         'properties': ['_files', 'files', 'zip', 'f', 'fid']},
             'numpy.lib.polynomial.RankWarning': {'bases': ['UserWarning'],
                                                  'constructor': [],
                                                  'docstring': '\n    Issued by `polyfit` when the Vandermonde matrix is rank deficient.\n\n    For more information, a way to suppress the warning, and an example of\n    `RankWarning` being issued, see `polyfit`.\n\n    ',
                                                  'methods': [],
                                                  'properties': []},
             'numpy.lib.polynomial.poly1d': {'bases': ['object'],
                                             'constructor': ['c_or_r', 'r=0', 'variable=None'],
                                             'docstring': '\n    A one-dimensional polynomial class.\n\n    A convenience class, used to encapsulate "natural" operations on\n    polynomials so that said operations may take on their customary\n    form in code (see Examples).\n\n    Parameters\n    ----------\n    c_or_r : array_like\n        The polynomial\'s coefficients, in decreasing powers, or if\n        the value of the second parameter is True, the polynomial\'s\n        roots (values where the polynomial evaluates to 0).  For example,\n        ``poly1d([1, 2, 3])`` returns an object that represents\n        :math:`x^2 + 2x + 3`, whereas ``poly1d([1, 2, 3], True)`` returns\n        one that represents :math:`(x-1)(x-2)(x-3) = x^3 - 6x^2 + 11x -6`.\n    r : bool, optional\n        If True, `c_or_r` specifies the polynomial\'s roots; the default\n        is False.\n    variable : str, optional\n        Changes the variable used when printing `p` from `x` to `variable`\n        (see Examples).\n\n    Examples\n    --------\n    Construct the polynomial :math:`x^2 + 2x + 3`:\n\n    >>> p = np.poly1d([1, 2, 3])\n    >>> print np.poly1d(p)\n       2\n    1 x + 2 x + 3\n\n    Evaluate the polynomial at :math:`x = 0.5`:\n\n    >>> p(0.5)\n    4.25\n\n    Find the roots:\n\n    >>> p.r\n    array([-1.+1.41421356j, -1.-1.41421356j])\n    >>> p(p.r)\n    array([ -4.44089210e-16+0.j,  -4.44089210e-16+0.j])\n    \n    These numbers in the previous line represent (0, 0) to machine precision\n\n    Show the coefficients:\n\n    >>> p.c\n    array([1, 2, 3])\n\n    Display the order (the leading zero-coefficients are removed):\n\n    >>> p.order\n    2\n\n    Show the coefficient of the k-th power in the polynomial\n    (which is equivalent to ``p.c[-(i+1)]``):\n\n    >>> p[1]\n    2\n\n    Polynomials can be added, subtracted, multiplied, and divided\n    (returns quotient and remainder):\n\n    >>> p * p\n    poly1d([ 1,  4, 10, 12,  9])\n\n    >>> (p**3 + 4) / p\n    (poly1d([  1.,   4.,  10.,  12.,   9.]), poly1d([ 4.]))\n\n    ``asarray(p)`` gives the coefficient array, so polynomials can be\n    used in all functions that accept arrays:\n\n    >>> p**2 # square of polynomial\n    poly1d([ 1,  4, 10, 12,  9])\n\n    >>> np.square(p) # square of individual coefficients\n    array([1, 4, 9])\n\n    The variable used in the string representation of `p` can be modified,\n    using the `variable` parameter:\n\n    >>> p = np.poly1d([1,2,3], variable=\'z\')\n    >>> print p\n       2\n    1 z + 2 z + 3\n\n    Construct a polynomial from its roots:\n\n    >>> np.poly1d([1, 2], True)\n    poly1d([ 1, -3,  2])\n\n    This is the same polynomial as obtained by:\n\n    >>> np.poly1d([1, -1]) * np.poly1d([1, -2])\n    poly1d([ 1, -3,  2])\n\n    ',
                                             'methods': [('__array__', ['t=None'], ''),
                                                         ('__repr__', [], ''),
                                                         ('__len__', [], ''),
                                                         ('__str__', [], ''),
                                                         ('__call__', ['val'], ''),
                                                         ('__neg__', [], ''),
                                                         ('__pos__', [], ''),
                                                         ('__mul__', ['other'], ''),
                                                         ('__rmul__', ['other'], ''),
                                                         ('__add__', ['other'], ''),
                                                         ('__radd__', ['other'], ''),
                                                         ('__pow__', ['val'], ''),
                                                         ('__sub__', ['other'], ''),
                                                         ('__rsub__', ['other'], ''),
                                                         ('__div__', ['other'], ''),
                                                         ('__rdiv__', ['other'], ''),
                                                         ('__eq__', ['other'], ''),
                                                         ('__ne__', ['other'], ''),
                                                         ('__setattr__', ['key', 'val'], ''),
                                                         ('__getattr__', ['key'], ''),
                                                         ('__getitem__', ['val'], ''),
                                                         ('__setitem__', ['key', 'val'], ''),
                                                         ('__iter__', [], ''),
                                                         ('integ',
                                                          ['m=1', 'k=0'],
                                                          '\n        Return an antiderivative (indefinite integral) of this polynomial.\n\n        Refer to `polyint` for full documentation.\n\n        See Also\n        --------\n        polyint : equivalent function\n\n        '),
                                                         ('deriv',
                                                          ['m=1'],
                                                          '\n        Return a derivative of this polynomial.\n\n        Refer to `polyder` for full documentation.\n\n        See Also\n        --------\n        polyder : equivalent function\n\n        ')],
                                             'properties': ['coeffs',
                                                            'order',
                                                            'variable',
                                                            '__truediv__',
                                                            '__rtruediv__']},
             'numpy.lib.stride_tricks.DummyArray': {'bases': ['object'],
                                                    'constructor': ['interface', 'base=None'],
                                                    'docstring': ' Dummy object that just exists to hang __array_interface__ dictionaries\n    and possibly keep alive a reference to a base array.\n    ',
                                                    'methods': [],
                                                    'properties': ['__array_interface__',
                                                                   'base']},
             'numpy.lib.user_array.container': {'bases': ['object'],
                                                'constructor': ['data',
                                                                'dtype=None',
                                                                'copy=True'],
                                                'docstring': '',
                                                'methods': [('__repr__', [], ''),
                                                            ('__array__', ['t=None'], ''),
                                                            ('__len__', [], ''),
                                                            ('__getitem__', ['index'], ''),
                                                            ('__getslice__', ['i', 'j'], ''),
                                                            ('__setitem__',
                                                             ['index', 'value'],
                                                             ''),
                                                            ('__setslice__',
                                                             ['i', 'j', 'value'],
                                                             ''),
                                                            ('__abs__', [], ''),
                                                            ('__neg__', [], ''),
                                                            ('__add__', ['other'], ''),
                                                            ('__iadd__', ['other'], ''),
                                                            ('__sub__', ['other'], ''),
                                                            ('__rsub__', ['other'], ''),
                                                            ('__isub__', ['other'], ''),
                                                            ('__mul__', ['other'], ''),
                                                            ('__imul__', ['other'], ''),
                                                            ('__div__', ['other'], ''),
                                                            ('__rdiv__', ['other'], ''),
                                                            ('__idiv__', ['other'], ''),
                                                            ('__mod__', ['other'], ''),
                                                            ('__rmod__', ['other'], ''),
                                                            ('__imod__', ['other'], ''),
                                                            ('__divmod__', ['other'], ''),
                                                            ('__rdivmod__', ['other'], ''),
                                                            ('__pow__', ['other'], ''),
                                                            ('__rpow__', ['other'], ''),
                                                            ('__ipow__', ['other'], ''),
                                                            ('__lshift__', ['other'], ''),
                                                            ('__rshift__', ['other'], ''),
                                                            ('__rlshift__', ['other'], ''),
                                                            ('__rrshift__', ['other'], ''),
                                                            ('__ilshift__', ['other'], ''),
                                                            ('__irshift__', ['other'], ''),
                                                            ('__and__', ['other'], ''),
                                                            ('__rand__', ['other'], ''),
                                                            ('__iand__', ['other'], ''),
                                                            ('__xor__', ['other'], ''),
                                                            ('__rxor__', ['other'], ''),
                                                            ('__ixor__', ['other'], ''),
                                                            ('__or__', ['other'], ''),
                                                            ('__ror__', ['other'], ''),
                                                            ('__ior__', ['other'], ''),
                                                            ('__pos__', [], ''),
                                                            ('__invert__', [], ''),
                                                            ('_scalarfunc', ['func'], ''),
                                                            ('__complex__', [], ''),
                                                            ('__float__', [], ''),
                                                            ('__int__', [], ''),
                                                            ('__long__', [], ''),
                                                            ('__hex__', [], ''),
                                                            ('__oct__', [], ''),
                                                            ('__lt__', ['other'], ''),
                                                            ('__le__', ['other'], ''),
                                                            ('__eq__', ['other'], ''),
                                                            ('__ne__', ['other'], ''),
                                                            ('__gt__', ['other'], ''),
                                                            ('__ge__', ['other'], ''),
                                                            ('copy', [], ''),
                                                            ('tostring', [], ''),
                                                            ('byteswap', [], ''),
                                                            ('astype', ['typecode'], ''),
                                                            ('_rc', ['a'], ''),
                                                            ('__array_wrap__', ['*args'], ''),
                                                            ('__setattr__',
                                                             ['attr', 'value'],
                                                             ''),
                                                            ('__getattr__', ['attr'], '')],
                                                'properties': ['array', '__radd__', '__rmul__']},
             'numpy.lib.utils.SafeEval': {'bases': ['object'],
                                          'constructor': [],
                                          'docstring': '\n    Object to evaluate constant string expressions.\n\n    This includes strings with lists, dicts and tuples using the abstract\n    syntax tree created by ``compiler.parse``.\n\n    For an example of usage, see `safe_eval`.\n\n    See Also\n    --------\n    safe_eval\n\n    ',
                                          'methods': [('visit', ['node', '**kw'], ''),
                                                      ('default', ['node', '**kw'], ''),
                                                      ('visitExpression', ['node', '**kw'], ''),
                                                      ('visitConst', ['node', '**kw'], ''),
                                                      ('visitDict', ['node', '**kw'], ''),
                                                      ('visitTuple', ['node', '**kw'], ''),
                                                      ('visitList', ['node', '**kw'], ''),
                                                      ('visitUnaryAdd', ['node', '**kw'], ''),
                                                      ('visitUnarySub', ['node', '**kw'], ''),
                                                      ('visitName', ['node', '**kw'], ''),
                                                      ('visit', ['node'], ''),
                                                      ('default', ['node'], ''),
                                                      ('visitExpression', ['node'], ''),
                                                      ('visitNum', ['node'], ''),
                                                      ('visitStr', ['node'], ''),
                                                      ('visitBytes', ['node'], ''),
                                                      ('visitTuple', ['node'], ''),
                                                      ('visitList', ['node'], ''),
                                                      ('visitUnaryOp', ['node'], ''),
                                                      ('visitName', ['node'], '')],
                                          'properties': []},
             'numpy.lib.utils._Deprecate': {'bases': ['object'],
                                            'constructor': ['old_name=None',
                                                            'new_name=None',
                                                            'message=None'],
                                            'docstring': '\n    Decorator class to deprecate old functions.\n\n    Refer to `deprecate` for details.\n\n    See Also\n    --------\n    deprecate\n\n    ',
                                            'methods': [('__call__',
                                                         ['func', '*args', '**kwargs'],
                                                         '\n        Decorator call.  Refer to ``decorate``.\n\n        ')],
                                            'properties': ['old_name', 'new_name', 'message']},
             'numpy.linalg.linalg.LinAlgError': {'bases': ['Exception'],
                                                 'constructor': [],
                                                 'docstring': '\n    Generic Python-exception-derived object raised by linalg functions.\n\n    General purpose exception class, derived from Python\'s exception.Exception\n    class, programmatically raised in linalg functions when a Linear\n    Algebra-related condition would prevent further correct execution of the\n    function.\n\n    Parameters\n    ----------\n    None\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> LA.inv(np.zeros((2,2)))\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n      File "...linalg.py", line 350,\n        in inv return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))\n      File "...linalg.py", line 249,\n        in solve\n        raise LinAlgError, \'Singular matrix\'\n    numpy.linalg.linalg.LinAlgError: Singular matrix\n\n    ',
                                                 'methods': [],
                                                 'properties': []},
             'numpy.ma.core.MAError': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': 'Class for masked array related errors.',
                                       'methods': [],
                                       'properties': []},
             'numpy.ma.core.MaskError': {'bases': ['numpy.ma.core.MAError'],
                                         'constructor': [],
                                         'docstring': 'Class for mask related errors.',
                                         'methods': [],
                                         'properties': []},
             'numpy.ma.core.MaskedArray': {'bases': ['numpy.ndarray'],
                                           'constructor': [],
                                           'docstring': '\n    An array class with possibly masked values.\n\n    Masked values of True exclude the corresponding element from any\n    computation.\n\n    Construction::\n\n      x = MaskedArray(data, mask=nomask, dtype=None,\n                      copy=False, subok=True, ndmin=0, fill_value=None,\n                      keep_mask=True, hard_mask=None, shrink=True)\n\n    Parameters\n    ----------\n    data : array_like\n        Input data.\n    mask : sequence, optional\n        Mask. Must be convertible to an array of booleans with the same\n        shape as `data`. True indicates a masked (i.e. invalid) data.\n    dtype : dtype, optional\n        Data type of the output.\n        If `dtype` is None, the type of the data argument (``data.dtype``)\n        is used. If `dtype` is not None and different from ``data.dtype``,\n        a copy is performed.\n    copy : bool, optional\n        Whether to copy the input data (True), or to use a reference instead.\n        Default is False.\n    subok : bool, optional\n        Whether to return a subclass of `MaskedArray` if possible (True) or a\n        plain `MaskedArray`. Default is True.\n    ndmin : int, optional\n        Minimum number of dimensions. Default is 0.\n    fill_value : scalar, optional\n        Value used to fill in the masked values when necessary.\n        If None, a default based on the data-type is used.\n    keep_mask : bool, optional\n        Whether to combine `mask` with the mask of the input data, if any\n        (True), or to use only `mask` for the output (False). Default is True.\n    hard_mask : bool, optional\n        Whether to use a hard mask or not. With a hard mask, masked values\n        cannot be unmasked. Default is False.\n    shrink : bool, optional\n        Whether to force compression of an empty mask. Default is True.\n\n    ',
                                           'methods': [('__new__',
                                                        ['data=None',
                                                         'mask=nomask',
                                                         'dtype=None',
                                                         'copy=False',
                                                         'subok=True',
                                                         'ndmin=0',
                                                         'fill_value=None',
                                                         'keep_mask=True',
                                                         'hard_mask=None',
                                                         'shrink=True',
                                                         '**options'],
                                                        '\n    Create a new masked array from scratch.\n\n    Notes\n    -----\n    A masked array can also be created by taking a .view(MaskedArray).\n\n        '),
                                                       ('_update_from',
                                                        ['obj'],
                                                        'Copies some attributes of obj to self.\n        '),
                                                       ('__array_finalize__',
                                                        ['obj'],
                                                        'Finalizes the masked array.\n        '),
                                                       ('__array_wrap__',
                                                        ['obj', 'context=None'],
                                                        '\n        Special hook for ufuncs.\n        Wraps the numpy array and sets the mask according to context.\n        '),
                                                       ('view',
                                                        ['dtype=None', 'type=None'],
                                                        ''),
                                                       ('astype',
                                                        ['newtype'],
                                                        '\n        Returns a copy of the MaskedArray cast to given newtype.\n\n        Returns\n        -------\n        output : MaskedArray\n            A copy of self cast to input newtype.\n            The returned record shape matches self.shape.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3.1],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print x\n        [[1.0 -- 3.1]\n         [-- 5.0 --]\n         [7.0 -- 9.0]]\n        >>> print x.astype(int32)\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n\n        '),
                                                       ('__getitem__',
                                                        ['indx'],
                                                        'x.__getitem__(y) <==> x[y]\n\n        Return the item described by i, as a masked array.\n\n        '),
                                                       ('__setitem__',
                                                        ['indx', 'value'],
                                                        'x.__setitem__(i, y) <==> x[i]=y\n\n        Set item described by index. If value is masked, masks those\n        locations.\n\n        '),
                                                       ('__getslice__',
                                                        ['i', 'j'],
                                                        'x.__getslice__(i, j) <==> x[i:j]\n\n        Return the slice described by (i, j).  The use of negative\n        indices is not supported.\n\n        '),
                                                       ('__setslice__',
                                                        ['i', 'j', 'value'],
                                                        'x.__setslice__(i, j, value) <==> x[i:j]=value\n\n    Set the slice (i,j) of a to value. If value is masked, mask\n    those locations.\n\n        '),
                                                       ('__setmask__',
                                                        ['mask', 'copy=False'],
                                                        'Set the mask.\n\n        '),
                                                       ('_get_mask',
                                                        [],
                                                        'Return the current mask.\n\n        '),
                                                       ('_get_recordmask',
                                                        [],
                                                        '\n    Return the mask of the records.\n    A record is masked when all the fields are masked.\n\n        '),
                                                       ('_set_recordmask',
                                                        [],
                                                        'Return the mask of the records.\n    A record is masked when all the fields are masked.\n\n        '),
                                                       ('harden_mask',
                                                        [],
                                                        '\n        Force the mask to hard.\n\n        Whether the mask of a masked array is hard or soft is determined by\n        its `hardmask` property. `harden_mask` sets `hardmask` to True.\n\n        See Also\n        --------\n        hardmask\n\n        '),
                                                       ('soften_mask',
                                                        [],
                                                        '\n        Force the mask to soft.\n\n        Whether the mask of a masked array is hard or soft is determined by\n        its `hardmask` property. `soften_mask` sets `hardmask` to False.\n\n        See Also\n        --------\n        hardmask\n\n        '),
                                                       ('unshare_mask',
                                                        [],
                                                        '\n        Copy the mask and set the sharedmask flag to False.\n\n        Whether the mask is shared between masked arrays can be seen from\n        the `sharedmask` property. `unshare_mask` ensures the mask is not shared.\n        A copy of the mask is only made if it was shared.\n\n        See Also\n        --------\n        sharedmask\n\n        '),
                                                       ('shrink_mask',
                                                        [],
                                                        '\n        Reduce a mask to nomask when possible.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2 ], [3, 4]], mask=[0]*4)\n        >>> x.mask\n        array([[False, False],\n               [False, False]], dtype=bool)\n        >>> x.shrink_mask()\n        >>> x.mask\n        False\n\n        '),
                                                       ('_get_data',
                                                        [],
                                                        'Return the current data, as a view of the original\n        underlying data.\n\n        '),
                                                       ('_get_flat',
                                                        [],
                                                        'Return a flat iterator.'),
                                                       ('_set_flat',
                                                        ['value'],
                                                        'Set a flattened version of self to value.'),
                                                       ('get_fill_value',
                                                        [],
                                                        '\n        Return the filling value of the masked array.\n\n        Returns\n        -------\n        fill_value : scalar\n            The filling value.\n\n        Examples\n        --------\n        >>> for dt in [np.int32, np.int64, np.float64, np.complex128]:\n        ...     np.ma.array([0, 1], dtype=dt).get_fill_value()\n        ...\n        999999\n        999999\n        1e+20\n        (1e+20+0j)\n\n        >>> x = np.ma.array([0, 1.], fill_value=-np.inf)\n        >>> x.get_fill_value()\n        -inf\n\n        '),
                                                       ('set_fill_value',
                                                        ['value=None'],
                                                        '\n        Set the filling value of the masked array.\n\n        Parameters\n        ----------\n        value : scalar, optional\n            The new filling value. Default is None, in which case a default\n            based on the data type is used.\n\n        See Also\n        --------\n        ma.set_fill_value : Equivalent function.\n\n        Examples\n        --------\n        >>> x = np.ma.array([0, 1.], fill_value=-np.inf)\n        >>> x.fill_value\n        -inf\n        >>> x.set_fill_value(np.pi)\n        >>> x.fill_value\n        3.1415926535897931\n\n        Reset to default:\n\n        >>> x.set_fill_value()\n        >>> x.fill_value\n        1e+20\n\n        '),
                                                       ('filled',
                                                        ['fill_value=None'],
                                                        "\n        Return a copy of self, with masked values filled with a given value.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            The value to use for invalid entries (None by default).\n            If None, the `fill_value` attribute of the array is used instead.\n\n        Returns\n        -------\n        filled_array : ndarray\n            A copy of ``self`` with invalid entries replaced by *fill_value*\n            (be it the function argument or the attribute of ``self``.\n\n        Notes\n        -----\n        The result is **not** a MaskedArray!\n\n        Examples\n        --------\n        >>> x = np.ma.array([1,2,3,4,5], mask=[0,0,1,0,1], fill_value=-999)\n        >>> x.filled()\n        array([1, 2, -999, 4, -999])\n        >>> type(x.filled())\n        <type 'numpy.ndarray'>\n\n        Subclassing is preserved. This means that if the data part of the masked\n        array is a matrix, `filled` returns a matrix:\n\n        >>> x = np.ma.array(np.matrix([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])\n        >>> x.filled()\n        matrix([[     1, 999999],\n                [999999,      4]])\n\n        "),
                                                       ('compressed',
                                                        [],
                                                        "\n        Return all the non-masked data as a 1-D array.\n\n        Returns\n        -------\n        data : ndarray\n            A new `ndarray` holding the non-masked data is returned.\n\n        Notes\n        -----\n        The result is **not** a MaskedArray!\n\n        Examples\n        --------\n        >>> x = np.ma.array(np.arange(5), mask=[0]*2 + [1]*3)\n        >>> x.compressed()\n        array([0, 1])\n        >>> type(x.compressed())\n        <type 'numpy.ndarray'>\n\n        "),
                                                       ('compress',
                                                        ['condition', 'axis=None', 'out=None'],
                                                        '\n        Return `a` where condition is ``True``.\n\n        If condition is a `MaskedArray`, missing values are considered\n        as ``False``.\n\n        Parameters\n        ----------\n        condition : var\n            Boolean 1-d array selecting which entries to return. If len(condition)\n            is less than the size of a along the axis, then output is truncated\n            to length of condition array.\n        axis : {None, int}, optional\n            Axis along which the operation must be performed.\n        out : {None, ndarray}, optional\n            Alternative output array in which to place the result. It must have\n            the same shape as the expected output but the type will be cast if\n            necessary.\n\n        Returns\n        -------\n        result : MaskedArray\n            A :class:`MaskedArray` object.\n\n        Notes\n        -----\n        Please note the difference with :meth:`compressed` !\n        The output of :meth:`compress` has a mask, the output of\n        :meth:`compressed` does not.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print x\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> x.compress([1, 0, 1])\n        masked_array(data = [1 3],\n              mask = [False False],\n              fill_value=999999)\n\n        >>> x.compress([1, 0, 1], axis=1)\n        masked_array(data =\n         [[1 3]\n         [-- --]\n         [7 9]],\n              mask =\n         [[False False]\n         [ True  True]\n         [False False]],\n              fill_value=999999)\n\n        '),
                                                       ('__str__',
                                                        [],
                                                        'String representation.\n\n        '),
                                                       ('__repr__',
                                                        [],
                                                        'Literal string representation.\n\n        '),
                                                       ('__eq__',
                                                        ['other'],
                                                        'Check whether other equals self elementwise'),
                                                       ('__ne__',
                                                        ['other'],
                                                        "Check whether other doesn't equal self elementwise"),
                                                       ('__add__',
                                                        ['other'],
                                                        'Add other to self, and return a new masked array.'),
                                                       ('__radd__',
                                                        ['other'],
                                                        'Add other to self, and return a new masked array.'),
                                                       ('__sub__',
                                                        ['other'],
                                                        'Subtract other to self, and return a new masked array.'),
                                                       ('__rsub__',
                                                        ['other'],
                                                        'Subtract other to self, and return a new masked array.'),
                                                       ('__mul__',
                                                        ['other'],
                                                        'Multiply other by self, and return a new masked array.'),
                                                       ('__rmul__',
                                                        ['other'],
                                                        'Multiply other by self, and return a new masked array.'),
                                                       ('__div__',
                                                        ['other'],
                                                        'Divide other into self, and return a new masked array.'),
                                                       ('__truediv__',
                                                        ['other'],
                                                        'Divide other into self, and return a new masked array.'),
                                                       ('__rtruediv__',
                                                        ['other'],
                                                        'Divide other into self, and return a new masked array.'),
                                                       ('__floordiv__',
                                                        ['other'],
                                                        'Divide other into self, and return a new masked array.'),
                                                       ('__rfloordiv__',
                                                        ['other'],
                                                        'Divide other into self, and return a new masked array.'),
                                                       ('__pow__',
                                                        ['other'],
                                                        'Raise self to the power other, masking the potential NaNs/Infs'),
                                                       ('__rpow__',
                                                        ['other'],
                                                        'Raise self to the power other, masking the potential NaNs/Infs'),
                                                       ('__iadd__',
                                                        ['other'],
                                                        'Add other to self in-place.'),
                                                       ('__isub__',
                                                        ['other'],
                                                        'Subtract other from self in-place.'),
                                                       ('__imul__',
                                                        ['other'],
                                                        'Multiply self by other in-place.'),
                                                       ('__idiv__',
                                                        ['other'],
                                                        'Divide self by other in-place.'),
                                                       ('__ifloordiv__',
                                                        ['other'],
                                                        'Floor divide self by other in-place.'),
                                                       ('__itruediv__',
                                                        ['other'],
                                                        'True divide self by other in-place.'),
                                                       ('__ipow__',
                                                        ['other'],
                                                        'Raise self to the power other, in place.'),
                                                       ('__float__', [], 'Convert to float.'),
                                                       ('__int__', [], 'Convert to int.'),
                                                       ('get_imag',
                                                        [],
                                                        '\n        Return the imaginary part of the masked array.\n\n        The returned array is a view on the imaginary part of the `MaskedArray`\n        whose `get_imag` method is called.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        result : MaskedArray\n            The imaginary part of the masked array.\n\n        See Also\n        --------\n        get_real, real, imag\n\n        Examples\n        --------\n        >>> x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])\n        >>> x.get_imag()\n        masked_array(data = [1.0 -- 1.6],\n                     mask = [False  True False],\n               fill_value = 1e+20)\n\n        '),
                                                       ('get_real',
                                                        [],
                                                        '\n        Return the real part of the masked array.\n\n        The returned array is a view on the real part of the `MaskedArray`\n        whose `get_real` method is called.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        result : MaskedArray\n            The real part of the masked array.\n\n        See Also\n        --------\n        get_imag, real, imag\n\n        Examples\n        --------\n        >>> x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])\n        >>> x.get_real()\n        masked_array(data = [1.0 -- 3.45],\n                     mask = [False  True False],\n               fill_value = 1e+20)\n\n        '),
                                                       ('count',
                                                        ['axis=None'],
                                                        '\n        Count the non-masked elements of the array along the given axis.\n\n        Parameters\n        ----------\n        axis : int, optional\n            Axis along which to count the non-masked elements. If `axis` is\n            `None`, all non-masked elements are counted.\n\n        Returns\n        -------\n        result : int or ndarray\n            If `axis` is `None`, an integer count is returned. When `axis` is\n            not `None`, an array with shape determined by the lengths of the\n            remaining axes, is returned.\n\n        See Also\n        --------\n        count_masked : Count masked elements in array or along a given axis.\n\n        Examples\n        --------\n        >>> import numpy.ma as ma\n        >>> a = ma.arange(6).reshape((2, 3))\n        >>> a[1, :] = ma.masked\n        >>> a\n        masked_array(data =\n         [[0 1 2]\n         [-- -- --]],\n                     mask =\n         [[False False False]\n         [ True  True  True]],\n               fill_value = 999999)\n        >>> a.count()\n        3\n\n        When the `axis` keyword is specified an array of appropriate size is\n        returned.\n\n        >>> a.count(axis=0)\n        array([1, 1, 1])\n        >>> a.count(axis=1)\n        array([3, 0])\n\n        '),
                                                       ('ravel',
                                                        [],
                                                        '\n        Returns a 1D version of self, as a view.\n\n        Returns\n        -------\n        MaskedArray\n            Output view is of shape ``(self.size,)`` (or\n            ``(np.ma.product(self.shape),)``).\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print x\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> print x.ravel()\n        [1 -- 3 -- 5 -- 7 -- 9]\n\n        '),
                                                       ('reshape',
                                                        ['*s', '**kwargs'],
                                                        "\n        Give a new shape to the array without changing its data.\n\n        Returns a masked array containing the same data, but with a new shape.\n        The result is a view on the original array; if this is not possible, a\n        ValueError is raised.\n\n        Parameters\n        ----------\n        shape : int or tuple of ints\n            The new shape should be compatible with the original shape. If an\n            integer is supplied, then the result will be a 1-D array of that\n            length.\n        order : {'C', 'F'}, optional\n            Determines whether the array data should be viewed as in C\n            (row-major) or FORTRAN (column-major) order.\n\n        Returns\n        -------\n        reshaped_array : array\n            A new view on the array.\n\n        See Also\n        --------\n        reshape : Equivalent function in the masked array module.\n        numpy.ndarray.reshape : Equivalent method on ndarray object.\n        numpy.reshape : Equivalent function in the NumPy module.\n\n        Notes\n        -----\n        The reshaping operation cannot guarantee that a copy will not be made,\n        to modify the shape in place, use ``a.shape = s``\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2],[3,4]], mask=[1,0,0,1])\n        >>> print x\n        [[-- 2]\n         [3 --]]\n        >>> x = x.reshape((4,1))\n        >>> print x\n        [[--]\n         [2]\n         [3]\n         [--]]\n\n        "),
                                                       ('resize',
                                                        ['newshape',
                                                         'refcheck=True',
                                                         'order=False'],
                                                        '\n        .. warning::\n\n            This method does nothing, except raise a ValueError exception. A\n            masked array does not own its data and therefore cannot safely be\n            resized in place. Use the `numpy.ma.resize` function instead.\n\n        This method is difficult to implement safely and may be deprecated in\n        future releases of NumPy.\n\n        '),
                                                       ('put',
                                                        ['indices', 'values', "mode='raise'"],
                                                        "\n        Set storage-indexed locations to corresponding values.\n\n        Sets self._data.flat[n] = values[n] for each n in indices.\n        If `values` is shorter than `indices` then it will repeat.\n        If `values` has some masked values, the initial mask is updated\n        in consequence, else the corresponding values are unmasked.\n\n        Parameters\n        ----------\n        indices : 1-D array_like\n            Target indices, interpreted as integers.\n        values : array_like\n            Values to place in self._data copy at target indices.\n        mode : {'raise', 'wrap', 'clip'}, optional\n            Specifies how out-of-bounds indices will behave.\n            'raise' : raise an error.\n            'wrap' : wrap around.\n            'clip' : clip to the range.\n\n        Notes\n        -----\n        `values` can be a scalar or length 1 array.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print x\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> x.put([0,4,8],[10,20,30])\n        >>> print x\n        [[10 -- 3]\n         [-- 20 --]\n         [7 -- 30]]\n\n        >>> x.put(4,999)\n        >>> print x\n        [[10 -- 3]\n         [-- 999 --]\n         [7 -- 30]]\n\n        "),
                                                       ('ids',
                                                        [],
                                                        '\n        Return the addresses of the data and mask areas.\n\n        Parameters\n        ----------\n        None\n\n        Examples\n        --------\n        >>> x = np.ma.array([1, 2, 3], mask=[0, 1, 1])\n        >>> x.ids()\n        (166670640, 166659832)\n\n        If the array has no mask, the address of `nomask` is returned. This address\n        is typically not close to the data in memory:\n\n        >>> x = np.ma.array([1, 2, 3])\n        >>> x.ids()\n        (166691080, 3083169284L)\n\n        '),
                                                       ('iscontiguous',
                                                        [],
                                                        '\n        Return a boolean indicating whether the data is contiguous.\n\n        Parameters\n        ----------\n        None\n\n        Examples\n        --------\n        >>> x = np.ma.array([1, 2, 3])\n        >>> x.iscontiguous()\n        True\n\n        `iscontiguous` returns one of the flags of the masked array:\n\n        >>> x.flags\n          C_CONTIGUOUS : True\n          F_CONTIGUOUS : True\n          OWNDATA : False\n          WRITEABLE : True\n          ALIGNED : True\n          UPDATEIFCOPY : False\n\n        '),
                                                       ('all',
                                                        ['axis=None', 'out=None'],
                                                        '\n    Check if all of the elements of `a` are true.\n\n    Performs a :func:`logical_and` over the given axis and returns the result.\n    Masked values are considered as True during computation.\n    For convenience, the output array is masked where ALL the values along the\n    current axis are masked: if the output would have been a scalar and that\n    all the values are masked, then the output is `masked`.\n\n    Parameters\n    ----------\n    axis : {None, integer}\n        Axis to perform the operation over.\n        If None, perform over flattened array.\n    out : {None, array}, optional\n        Array into which the result can be placed. Its type is preserved\n        and it must be of the right shape to hold the output.\n\n    See Also\n    --------\n    all : equivalent function\n\n    Examples\n    --------\n    >>> np.ma.array([1,2,3]).all()\n    True\n    >>> a = np.ma.array([1,2,3], mask=True)\n    >>> (a.all() is np.ma.masked)\n    True\n\n        '),
                                                       ('any',
                                                        ['axis=None', 'out=None'],
                                                        '\n        Check if any of the elements of `a` are true.\n\n        Performs a logical_or over the given axis and returns the result.\n        Masked values are considered as False during computation.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            Axis to perform the operation over.\n            If None, perform over flattened array and return a scalar.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        See Also\n        --------\n        any : equivalent function\n\n        '),
                                                       ('nonzero',
                                                        [],
                                                        '\n        Return the indices of unmasked elements that are not zero.\n\n        Returns a tuple of arrays, one for each dimension, containing the\n        indices of the non-zero elements in that dimension. The corresponding\n        non-zero values can be obtained with::\n\n            a[a.nonzero()]\n\n        To group the indices by element, rather than dimension, use\n        instead::\n\n            np.transpose(a.nonzero())\n\n        The result of this is always a 2d array, with a row for each non-zero\n        element.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        tuple_of_arrays : tuple\n            Indices of elements that are non-zero.\n\n        See Also\n        --------\n        numpy.nonzero :\n            Function operating on ndarrays.\n        flatnonzero :\n            Return indices that are non-zero in the flattened version of the input\n            array.\n        ndarray.nonzero :\n            Equivalent ndarray method.\n        count_nonzero :\n            Counts the number of non-zero elements in the input array.\n\n        Examples\n        --------\n        >>> import numpy.ma as ma\n        >>> x = ma.array(np.eye(3))\n        >>> x\n        masked_array(data =\n         [[ 1.  0.  0.]\n         [ 0.  1.  0.]\n         [ 0.  0.  1.]],\n              mask =\n         False,\n              fill_value=1e+20)\n        >>> x.nonzero()\n        (array([0, 1, 2]), array([0, 1, 2]))\n\n        Masked elements are ignored.\n\n        >>> x[1, 1] = ma.masked\n        >>> x\n        masked_array(data =\n         [[1.0 0.0 0.0]\n         [0.0 -- 0.0]\n         [0.0 0.0 1.0]],\n              mask =\n         [[False False False]\n         [False  True False]\n         [False False False]],\n              fill_value=1e+20)\n        >>> x.nonzero()\n        (array([0, 2]), array([0, 2]))\n\n        Indices can also be grouped by element.\n\n        >>> np.transpose(x.nonzero())\n        array([[0, 0],\n               [2, 2]])\n\n        A common use for ``nonzero`` is to find the indices of an array, where\n        a condition is True.  Given an array `a`, the condition `a` > 3 is a\n        boolean array and since False is interpreted as 0, ma.nonzero(a > 3)\n        yields the indices of the `a` where the condition is true.\n\n        >>> a = ma.array([[1,2,3],[4,5,6],[7,8,9]])\n        >>> a > 3\n        masked_array(data =\n         [[False False False]\n         [ True  True  True]\n         [ True  True  True]],\n              mask =\n         False,\n              fill_value=999999)\n        >>> ma.nonzero(a > 3)\n        (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))\n\n        The ``nonzero`` method of the condition array can also be called.\n\n        >>> (a > 3).nonzero()\n        (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))\n\n        '),
                                                       ('trace',
                                                        ['offset=0',
                                                         'axis1=0',
                                                         'axis2=1',
                                                         'dtype=None',
                                                         'out=None'],
                                                        '\n        (this docstring should be overwritten)\n        '),
                                                       ('sum',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None'],
                                                        "\n        Return the sum of the array elements over the given axis.\n        Masked elements are set to 0 internally.\n\n        Parameters\n        ----------\n        axis : {None, -1, int}, optional\n            Axis along which the sum is computed. The default\n            (`axis` = None) is to compute over the flattened array.\n        dtype : {None, dtype}, optional\n            Determines the type of the returned array and of the accumulator\n            where the elements are summed. If dtype has the value None and\n            the type of a is an integer type of precision less than the default\n            platform integer, then the default platform integer precision is\n            used.  Otherwise, the dtype is the same as that of a.\n        out :  {None, ndarray}, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n\n        Returns\n        -------\n        sum_along_axis : MaskedArray or scalar\n            An array with the same shape as self, with the specified\n            axis removed.   If self is a 0-d array, or if `axis` is None, a scalar\n            is returned.  If an output array is specified, a reference to\n            `out` is returned.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print x\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> print x.sum()\n        25\n        >>> print x.sum(axis=1)\n        [4 5 16]\n        >>> print x.sum(axis=0)\n        [8 5 12]\n        >>> print type(x.sum(axis=0, dtype=np.int64)[0])\n        <type 'numpy.int64'>\n\n        "),
                                                       ('cumsum',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None'],
                                                        '\n        Return the cumulative sum of the elements along the given axis.\n        The cumulative sum is calculated over the flattened array by\n        default, otherwise over the specified axis.\n\n        Masked values are set to 0 internally during the computation.\n        However, their position is saved, and the result will be masked at\n        the same locations.\n\n        Parameters\n        ----------\n        axis : {None, -1, int}, optional\n            Axis along which the sum is computed. The default (`axis` = None) is to\n            compute over the flattened array. `axis` may be negative, in which case\n            it counts from the   last to the first axis.\n        dtype : {None, dtype}, optional\n            Type of the returned array and of the accumulator in which the\n            elements are summed.  If `dtype` is not specified, it defaults\n            to the dtype of `a`, unless `a` has an integer dtype with a\n            precision less than that of the default platform integer.  In\n            that case, the default platform integer is used.\n        out : ndarray, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n\n        Returns\n        -------\n        cumsum : ndarray.\n            A new array holding the result is returned unless ``out`` is\n            specified, in which case a reference to ``out`` is returned.\n\n        Notes\n        -----\n        The mask is lost if `out` is not a valid :class:`MaskedArray` !\n\n        Arithmetic is modular when using integer types, and no error is\n        raised on overflow.\n\n        Examples\n        --------\n        >>> marr = np.ma.array(np.arange(10), mask=[0,0,0,1,1,1,0,0,0,0])\n        >>> print marr.cumsum()\n        [0 1 3 -- -- -- 9 16 24 33]\n\n        '),
                                                       ('prod',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None'],
                                                        '\n        Return the product of the array elements over the given axis.\n        Masked elements are set to 1 internally for computation.\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis over which the product is taken. If None is used, then the\n            product is over all the array elements.\n        dtype : {None, dtype}, optional\n            Determines the type of the returned array and of the accumulator\n            where the elements are multiplied. If ``dtype`` has the value ``None``\n            and the type of a is an integer type of precision less than the default\n            platform integer, then the default platform integer precision is\n            used.  Otherwise, the dtype is the same as that of a.\n        out : {None, array}, optional\n            Alternative output array in which to place the result. It must have\n            the same shape as the expected output but the type will be cast if\n            necessary.\n\n        Returns\n        -------\n        product_along_axis : {array, scalar}, see dtype parameter above.\n            Returns an array whose shape is the same as a with the specified\n            axis removed. Returns a 0d array when a is 1d or axis=None.\n            Returns a reference to the specified output array if specified.\n\n        See Also\n        --------\n        prod : equivalent function\n\n        Notes\n        -----\n        Arithmetic is modular when using integer types, and no error is raised\n        on overflow.\n\n        Examples\n        --------\n        >>> np.prod([1.,2.])\n        2.0\n        >>> np.prod([1.,2.], dtype=np.int32)\n        2\n        >>> np.prod([[1.,2.],[3.,4.]])\n        24.0\n        >>> np.prod([[1.,2.],[3.,4.]], axis=1)\n        array([  2.,  12.])\n\n        '),
                                                       ('cumprod',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None'],
                                                        '\n        Return the cumulative product of the elements along the given axis.\n        The cumulative product is taken over the flattened array by\n        default, otherwise over the specified axis.\n\n        Masked values are set to 1 internally during the computation.\n        However, their position is saved, and the result will be masked at\n        the same locations.\n\n        Parameters\n        ----------\n        axis : {None, -1, int}, optional\n            Axis along which the product is computed. The default\n            (`axis` = None) is to compute over the flattened array.\n        dtype : {None, dtype}, optional\n            Determines the type of the returned array and of the accumulator\n            where the elements are multiplied. If ``dtype`` has the value ``None``\n            and the type of ``a`` is an integer type of precision less than the\n            default platform integer, then the default platform integer precision\n            is used.  Otherwise, the dtype is the same as that of ``a``.\n        out : ndarray, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n\n        Returns\n        -------\n        cumprod : ndarray\n            A new array holding the result is returned unless out is specified,\n            in which case a reference to out is returned.\n\n        Notes\n        -----\n        The mask is lost if `out` is not a valid MaskedArray !\n\n        Arithmetic is modular when using integer types, and no error is\n        raised on overflow.\n\n        '),
                                                       ('mean',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None'],
                                                        '\n        Returns the average of the array elements.\n\n        Masked entries are ignored.\n        The average is taken over the flattened array by default, otherwise over\n        the specified axis. Refer to `numpy.mean` for the full documentation.\n\n        Parameters\n        ----------\n        a : array_like\n            Array containing numbers whose mean is desired. If `a` is not an\n            array, a conversion is attempted.\n        axis : int, optional\n            Axis along which the means are computed. The default is to compute\n            the mean of the flattened array.\n        dtype : dtype, optional\n            Type to use in computing the mean. For integer inputs, the default\n            is float64; for floating point, inputs it is the same as the input\n            dtype.\n        out : ndarray, optional\n            Alternative output array in which to place the result. It must have\n            the same shape as the expected output but the type will be cast if\n            necessary.\n\n        Returns\n        -------\n        mean : ndarray, see dtype parameter above\n            If `out=None`, returns a new array containing the mean values,\n            otherwise a reference to the output array is returned.\n\n        See Also\n        --------\n        numpy.ma.mean : Equivalent function.\n        numpy.mean : Equivalent function on non-masked arrays.\n        numpy.ma.average: Weighted average.\n\n        Examples\n        --------\n        >>> a = np.ma.array([1,2,3], mask=[False, False, True])\n        >>> a\n        masked_array(data = [1 2 --],\n                     mask = [False False  True],\n               fill_value = 999999)\n        >>> a.mean()\n        1.5\n\n        '),
                                                       ('anom',
                                                        ['axis=None', 'dtype=None'],
                                                        '\n        Compute the anomalies (deviations from the arithmetic mean)\n        along the given axis.\n\n        Returns an array of anomalies, with the same shape as the input and\n        where the arithmetic mean is computed along the given axis.\n\n        Parameters\n        ----------\n        axis : int, optional\n            Axis over which the anomalies are taken.\n            The default is to use the mean of the flattened array as reference.\n        dtype : dtype, optional\n            Type to use in computing the variance. For arrays of integer type\n             the default is float32; for arrays of float types it is the same as\n             the array type.\n\n        See Also\n        --------\n        mean : Compute the mean of the array.\n\n        Examples\n        --------\n        >>> a = np.ma.array([1,2,3])\n        >>> a.anom()\n        masked_array(data = [-1.  0.  1.],\n                     mask = False,\n               fill_value = 1e+20)\n\n        '),
                                                       ('var',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None',
                                                         'ddof=0'],
                                                        ''),
                                                       ('std',
                                                        ['axis=None',
                                                         'dtype=None',
                                                         'out=None',
                                                         'ddof=0'],
                                                        ''),
                                                       ('round',
                                                        ['decimals=0', 'out=None'],
                                                        '\n        Return an array rounded a to the given number of decimals.\n\n        Refer to `numpy.around` for full documentation.\n\n        See Also\n        --------\n        numpy.around : equivalent function\n\n        '),
                                                       ('argsort',
                                                        ['axis=None',
                                                         "kind='quicksort'",
                                                         'order=None',
                                                         'fill_value=None'],
                                                        "\n        Return an ndarray of indices that sort the array along the\n        specified axis.  Masked values are filled beforehand to\n        `fill_value`.\n\n        Parameters\n        ----------\n        axis : int, optional\n            Axis along which to sort.  The default is -1 (last axis).\n            If None, the flattened array is used.\n        fill_value : var, optional\n            Value used to fill the array before sorting.\n            The default is the `fill_value` attribute of the input array.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        order : list, optional\n            When `a` is an array with fields defined, this argument specifies\n            which fields to compare first, second, etc.  Not all fields need be\n            specified.\n\n        Returns\n        -------\n        index_array : ndarray, int\n            Array of indices that sort `a` along the specified axis.\n            In other words, ``a[index_array]`` yields a sorted `a`.\n\n        See Also\n        --------\n        sort : Describes sorting algorithms used.\n        lexsort : Indirect stable sort with multiple keys.\n        ndarray.sort : Inplace sort.\n\n        Notes\n        -----\n        See `sort` for notes on the different sorting algorithms.\n\n        Examples\n        --------\n        >>> a = np.ma.array([3,2,1], mask=[False, False, True])\n        >>> a\n        masked_array(data = [3 2 --],\n                     mask = [False False  True],\n               fill_value = 999999)\n        >>> a.argsort()\n        array([1, 0, 2])\n\n        "),
                                                       ('argmin',
                                                        ['axis=None',
                                                         'fill_value=None',
                                                         'out=None'],
                                                        '\n        Return array of indices to the minimum values along the given axis.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            If None, the index is into the flattened array, otherwise along\n            the specified axis\n        fill_value : {var}, optional\n            Value used to fill in the masked values.  If None, the output of\n            minimum_fill_value(self._data) is used instead.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        Returns\n        -------\n        {ndarray, scalar}\n            If multi-dimension input, returns a new ndarray of indices to the\n            minimum values along the given axis.  Otherwise, returns a scalar\n            of index to the minimum values along the given axis.\n\n        Examples\n        --------\n        >>> x = np.ma.array(arange(4), mask=[1,1,0,0])\n        >>> x.shape = (2,2)\n        >>> print x\n        [[-- --]\n         [2 3]]\n        >>> print x.argmin(axis=0, fill_value=-1)\n        [0 0]\n        >>> print x.argmin(axis=0, fill_value=9)\n        [1 1]\n\n        '),
                                                       ('argmax',
                                                        ['axis=None',
                                                         'fill_value=None',
                                                         'out=None'],
                                                        '\n        Returns array of indices of the maximum values along the given axis.\n        Masked values are treated as if they had the value fill_value.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            If None, the index is into the flattened array, otherwise along\n            the specified axis\n        fill_value : {var}, optional\n            Value used to fill in the masked values.  If None, the output of\n            maximum_fill_value(self._data) is used instead.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        Returns\n        -------\n        index_array : {integer_array}\n\n        Examples\n        --------\n        >>> a = np.arange(6).reshape(2,3)\n        >>> a.argmax()\n        5\n        >>> a.argmax(0)\n        array([1, 1, 1])\n        >>> a.argmax(1)\n        array([2, 2])\n\n        '),
                                                       ('sort',
                                                        ['axis=-1',
                                                         "kind='quicksort'",
                                                         'order=None',
                                                         'endwith=True',
                                                         'fill_value=None'],
                                                        "\n    Sort the array, in-place\n\n    Parameters\n    ----------\n    a : array_like\n        Array to be sorted.\n    axis : int, optional\n        Axis along which to sort. If None, the array is flattened before\n        sorting. The default is -1, which sorts along the last axis.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm. Default is 'quicksort'.\n    order : list, optional\n        When `a` is a structured array, this argument specifies which fields\n        to compare first, second, and so on.  This list does not need to\n        include all of the fields.\n    endwith : {True, False}, optional\n        Whether missing values (if any) should be forced in the upper indices\n        (at the end of the array) (True) or lower indices (at the beginning).\n    fill_value : {var}, optional\n        Value used internally for the masked values.\n        If ``fill_value`` is not None, it supersedes ``endwith``.\n\n    Returns\n    -------\n    sorted_array : ndarray\n        Array of the same type and shape as `a`.\n\n    See Also\n    --------\n    ndarray.sort : Method to sort an array in-place.\n    argsort : Indirect sort.\n    lexsort : Indirect stable sort on multiple keys.\n    searchsorted : Find elements in a sorted array.\n\n    Notes\n    -----\n    See ``sort`` for notes on the different sorting algorithms.\n\n    Examples\n    --------\n    >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])\n    >>> # Default\n    >>> a.sort()\n    >>> print a\n    [1 3 5 -- --]\n\n    >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])\n    >>> # Put missing values in the front\n    >>> a.sort(endwith=False)\n    >>> print a\n    [-- -- 1 3 5]\n\n    >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])\n    >>> # fill_value takes over endwith\n    >>> a.sort(endwith=False, fill_value=3)\n    >>> print a\n    [1 -- -- 3 5]\n\n        "),
                                                       ('min',
                                                        ['axis=None',
                                                         'out=None',
                                                         'fill_value=None'],
                                                        '\n    Return the minimum along a given axis.\n\n    Parameters\n    ----------\n    axis : {None, int}, optional\n        Axis along which to operate.  By default, ``axis`` is None and the\n        flattened input is used.\n    out : array_like, optional\n        Alternative output array in which to place the result.  Must be of\n        the same shape and buffer length as the expected output.\n    fill_value : {var}, optional\n        Value used to fill in the masked values.\n        If None, use the output of `minimum_fill_value`.\n\n    Returns\n    -------\n    amin : array_like\n        New array holding the result.\n        If ``out`` was specified, ``out`` is returned.\n\n    See Also\n    --------\n    minimum_fill_value\n        Returns the minimum filling value for a given datatype.\n\n        '),
                                                       ('mini',
                                                        ['axis=None'],
                                                        '\n        Return the array minimum along the specified axis.\n\n        Parameters\n        ----------\n        axis : int, optional\n            The axis along which to find the minima. Default is None, in which case\n            the minimum value in the whole array is returned.\n\n        Returns\n        -------\n        min : scalar or MaskedArray\n            If `axis` is None, the result is a scalar. Otherwise, if `axis` is\n            given and the array is at least 2-D, the result is a masked array with\n            dimension one smaller than the array on which `mini` is called.\n\n        Examples\n        --------\n        >>> x = np.ma.array(np.arange(6), mask=[0 ,1, 0, 0, 0 ,1]).reshape(3, 2)\n        >>> print x\n        [[0 --]\n         [2 3]\n         [4 --]]\n        >>> x.mini()\n        0\n        >>> x.mini(axis=0)\n        masked_array(data = [0 3],\n                     mask = [False False],\n               fill_value = 999999)\n        >>> print x.mini(axis=1)\n        [0 2 4]\n\n        '),
                                                       ('max',
                                                        ['axis=None',
                                                         'out=None',
                                                         'fill_value=None'],
                                                        '\n        Return the maximum along a given axis.\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis along which to operate.  By default, ``axis`` is None and the\n            flattened input is used.\n        out : array_like, optional\n            Alternative output array in which to place the result.  Must\n            be of the same shape and buffer length as the expected output.\n        fill_value : {var}, optional\n            Value used to fill in the masked values.\n            If None, use the output of maximum_fill_value().\n\n        Returns\n        -------\n        amax : array_like\n            New array holding the result.\n            If ``out`` was specified, ``out`` is returned.\n\n        See Also\n        --------\n        maximum_fill_value\n            Returns the maximum filling value for a given datatype.\n\n        '),
                                                       ('ptp',
                                                        ['axis=None',
                                                         'out=None',
                                                         'fill_value=None'],
                                                        '\n        Return (maximum - minimum) along the the given dimension\n        (i.e. peak-to-peak value).\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis along which to find the peaks.  If None (default) the\n            flattened array is used.\n        out : {None, array_like}, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n        fill_value : {var}, optional\n            Value used to fill in the masked values.\n\n        Returns\n        -------\n        ptp : ndarray.\n            A new array holding the result, unless ``out`` was\n            specified, in which case a reference to ``out`` is returned.\n\n        '),
                                                       ('take',
                                                        ['indices',
                                                         'axis=None',
                                                         'out=None',
                                                         "mode='raise'"],
                                                        '\n        '),
                                                       ('tolist',
                                                        ['fill_value=None'],
                                                        '\n        Return the data portion of the masked array as a hierarchical Python list.\n\n        Data items are converted to the nearest compatible Python type.\n        Masked values are converted to `fill_value`. If `fill_value` is None,\n        the corresponding entries in the output list will be ``None``.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            The value to use for invalid entries. Default is None.\n\n        Returns\n        -------\n        result : list\n            The Python list representation of the masked array.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3], [4,5,6], [7,8,9]], mask=[0] + [1,0]*4)\n        >>> x.tolist()\n        [[1, None, 3], [None, 5, None], [7, None, 9]]\n        >>> x.tolist(-999)\n        [[1, -999, 3], [-999, 5, -999], [7, -999, 9]]\n\n        '),
                                                       ('tostring',
                                                        ['fill_value=None', "order='C'"],
                                                        "\n        Return the array data as a string containing the raw bytes in the array.\n\n        The array is filled with a fill value before the string conversion.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            Value used to fill in the masked values. Deafult is None, in which\n            case `MaskedArray.fill_value` is used.\n        order : {'C','F','A'}, optional\n            Order of the data item in the copy. Default is 'C'.\n\n            - 'C'   -- C order (row major).\n            - 'F'   -- Fortran order (column major).\n            - 'A'   -- Any, current order of array.\n            - None  -- Same as 'A'.\n\n        See Also\n        --------\n        ndarray.tostring\n        tolist, tofile\n\n        Notes\n        -----\n        As for `ndarray.tostring`, information about the shape, dtype, etc.,\n        but also about `fill_value`, will be lost.\n\n        Examples\n        --------\n        >>> x = np.ma.array(np.array([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])\n        >>> x.tostring()\n        '\\x01\\x00\\x00\\x00?B\\x0f\\x00?B\\x0f\\x00\\x04\\x00\\x00\\x00'\n\n        "),
                                                       ('tofile',
                                                        ['fid', "sep=''", "format='%s'"],
                                                        '\n        Save a masked array to a file in binary format.\n\n        .. warning::\n          This function is not implemented yet.\n\n        Raises\n        ------\n        NotImplementedError\n            When `tofile` is called.\n\n        '),
                                                       ('toflex',
                                                        [],
                                                        '\n        Transforms a masked array into a flexible-type array.\n\n        The flexible type array that is returned will have two fields:\n\n        * the ``_data`` field stores the ``_data`` part of the array.\n        * the ``_mask`` field stores the ``_mask`` part of the array.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        record : ndarray\n            A new flexible-type `ndarray` with two fields: the first element\n            containing a value, the second element containing the corresponding\n            mask boolean. The returned record shape matches self.shape.\n\n        Notes\n        -----\n        A side-effect of transforming a masked array into a flexible `ndarray` is\n        that meta information (``fill_value``, ...) will be lost.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print x\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> print x.toflex()\n        [[(1, False) (2, True) (3, False)]\n         [(4, True) (5, False) (6, True)]\n         [(7, False) (8, True) (9, False)]]\n\n        '),
                                                       ('__getstate__',
                                                        [],
                                                        'Return the internal state of the masked array, for pickling\n        purposes.\n\n        '),
                                                       ('__setstate__',
                                                        ['state'],
                                                        'Restore the internal state of the masked array, for\n        pickling purposes.  ``state`` is typically the output of the\n        ``__getstate__`` output, and is a 5-tuple:\n\n        - class name\n        - a tuple giving the shape of the data\n        - a typecode for the data\n        - a binary string for the data\n        - a binary string for the mask.\n\n        '),
                                                       ('__reduce__',
                                                        [],
                                                        'Return a 3-tuple for pickling a MaskedArray.\n\n        '),
                                                       ('__deepcopy__', ['memo=None'], '')],
                                           'properties': ['__array_priority__',
                                                          '_defaultmask',
                                                          '_defaulthardmask',
                                                          '_baseclass',
                                                          '_mask',
                                                          '_fill_value',
                                                          '_sharedmask',
                                                          '_set_mask',
                                                          'mask',
                                                          'recordmask',
                                                          '_hardmask',
                                                          'hardmask',
                                                          'sharedmask',
                                                          'baseclass',
                                                          '_data',
                                                          'data',
                                                          'flat',
                                                          'fill_value',
                                                          'imag',
                                                          'real',
                                                          'flatten',
                                                          'repeat',
                                                          'product',
                                                          'copy',
                                                          'diagonal',
                                                          'transpose',
                                                          'T',
                                                          'swapaxes',
                                                          'clip',
                                                          'squeeze',
                                                          'torecords']},
             'numpy.ma.core.MaskedConstant': {'bases': ['numpy.ma.core.MaskedArray'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('__new__', [], ''),
                                                          ('__array_finalize__', ['obj'], ''),
                                                          ('__array_wrap__', ['obj'], ''),
                                                          ('__str__', [], ''),
                                                          ('__repr__', [], ''),
                                                          ('flatten', [], '')],
                                              'properties': ['_data',
                                                             'data',
                                                             '_mask',
                                                             'mask',
                                                             '_baseclass']},
             'numpy.ma.core.MaskedIterator': {'bases': ['object'],
                                              'constructor': ['ma'],
                                              'docstring': "\n    Flat iterator object to iterate over masked arrays.\n\n    A `MaskedIterator` iterator is returned by ``x.flat`` for any masked array\n    `x`. It allows iterating over the array as if it were a 1-D array,\n    either in a for-loop or by calling its `next` method.\n\n    Iteration is done in C-contiguous style, with the last index varying the\n    fastest. The iterator can also be indexed using basic slicing or\n    advanced indexing.\n\n    See Also\n    --------\n    MaskedArray.flat : Return a flat iterator over an array.\n    MaskedArray.flatten : Returns a flattened copy of an array.\n\n    Notes\n    -----\n    `MaskedIterator` is not exported by the `ma` module. Instead of\n    instantiating a `MaskedIterator` directly, use `MaskedArray.flat`.\n\n    Examples\n    --------\n    >>> x = np.ma.array(arange(6).reshape(2, 3))\n    >>> fl = x.flat\n    >>> type(fl)\n    <class 'numpy.ma.core.MaskedIterator'>\n    >>> for item in fl:\n    ...     print item\n    ...\n    0\n    1\n    2\n    3\n    4\n    5\n\n    Extracting more than a single element b indexing the `MaskedIterator`\n    returns a masked array:\n\n    >>> fl[2:4]\n    masked_array(data = [2 3],\n                 mask = False,\n           fill_value = 999999)\n\n    ",
                                              'methods': [('__iter__', [], ''),
                                                          ('__getitem__', ['indx'], ''),
                                                          ('__setitem__',
                                                           ['index', 'value'],
                                                           ''),
                                                          ('next',
                                                           [],
                                                           '\n        Return the next value, or raise StopIteration.\n\n        Examples\n        --------\n        >>> x = np.ma.array([3, 2], mask=[0, 1])\n        >>> fl = x.flat\n        >>> fl.next()\n        3\n        >>> fl.next()\n        masked_array(data = --,\n                     mask = True,\n               fill_value = 1e+20)\n        >>> fl.next()\n        Traceback (most recent call last):\n          File "<stdin>", line 1, in <module>\n          File "/home/ralf/python/numpy/numpy/ma/core.py", line 2243, in next\n            d = self.dataiter.next()\n        StopIteration\n\n        ')],
                                              'properties': ['ma', 'dataiter', 'maskiter']},
             'numpy.ma.core._DomainCheckInterval': {'bases': [],
                                                    'constructor': ['a', 'b'],
                                                    'docstring': '\n    Define a valid interval, so that :\n\n    ``domain_check_interval(a,b)(x) == True`` where\n    ``x < a`` or ``x > b``.\n\n    ',
                                                    'methods': [('__call__',
                                                                 ['x'],
                                                                 'Execute the call behavior.')],
                                                    'properties': ['a', 'b']},
             'numpy.ma.core._DomainGreater': {'bases': [],
                                              'constructor': ['critical_value'],
                                              'docstring': 'DomainGreater(v)(x) is True where x <= v.',
                                              'methods': [('__call__',
                                                           ['x'],
                                                           'Executes the call behavior.')],
                                              'properties': ['critical_value']},
             'numpy.ma.core._DomainGreaterEqual': {'bases': [],
                                                   'constructor': ['critical_value'],
                                                   'docstring': 'DomainGreaterEqual(v)(x) is True where x < v.',
                                                   'methods': [('__call__',
                                                                ['x'],
                                                                'Executes the call behavior.')],
                                                   'properties': ['critical_value']},
             'numpy.ma.core._DomainSafeDivide': {'bases': [],
                                                 'constructor': ['tolerance=None'],
                                                 'docstring': 'Define a domain for safe division.',
                                                 'methods': [('__call__', ['a', 'b'], '')],
                                                 'properties': ['tolerance']},
             'numpy.ma.core._DomainTan': {'bases': [],
                                          'constructor': ['eps'],
                                          'docstring': 'Define a valid interval for the `tan` function, so that:\n\n    ``domain_tan(eps) = True`` where ``abs(cos(x)) < eps``\n\n    ',
                                          'methods': [('__call__',
                                                       ['x'],
                                                       'Executes the call behavior.')],
                                          'properties': ['eps']},
             'numpy.ma.core._DomainedBinaryOperation': {'bases': [],
                                                        'constructor': ['dbfunc',
                                                                        'domain',
                                                                        'fillx=0',
                                                                        'filly=0'],
                                                        'docstring': '\n    Define binary operations that have a domain, like divide.\n\n    They have no reduce, outer or accumulate.\n\n    Parameters\n    ----------\n    mbfunc : function\n        The function for which to define a masked version. Made available\n        as ``_DomainedBinaryOperation.f``.\n    domain : class instance\n        Default domain for the function. Should be one of the ``_Domain*``\n        classes.\n    fillx : scalar, optional\n        Filling value for the first argument, default is 0.\n    filly : scalar, optional\n        Filling value for the second argument, default is 0.\n\n    ',
                                                        'methods': [('__call__',
                                                                     ['a',
                                                                      'b',
                                                                      '*args',
                                                                      '**kwargs'],
                                                                     'Execute the call behavior.'),
                                                                    ('__str__', [], '')],
                                                        'properties': ['f',
                                                                       'domain',
                                                                       'fillx',
                                                                       'filly',
                                                                       '__doc__',
                                                                       '__name__']},
             'numpy.ma.core._MaskedBinaryOperation': {'bases': [],
                                                      'constructor': ['mbfunc',
                                                                      'fillx=0',
                                                                      'filly=0'],
                                                      'docstring': '\n    Define masked version of binary operations, where invalid\n    values are pre-masked.\n\n    Parameters\n    ----------\n    mbfunc : function\n        The function for which to define a masked version. Made available\n        as ``_MaskedBinaryOperation.f``.\n    domain : class instance\n        Default domain for the function. Should be one of the ``_Domain*``\n        classes. Default is None.\n    fillx : scalar, optional\n        Filling value for the first argument, default is 0.\n    filly : scalar, optional\n        Filling value for the second argument, default is 0.\n\n    ',
                                                      'methods': [('__call__',
                                                                   ['a',
                                                                    'b',
                                                                    '*args',
                                                                    '**kwargs'],
                                                                   'Execute the call behavior.'),
                                                                  ('reduce',
                                                                   ['target',
                                                                    'axis=0',
                                                                    'dtype=None'],
                                                                   'Reduce `target` along the given `axis`.'),
                                                                  ('outer',
                                                                   ['a', 'b'],
                                                                   'Return the function applied to the outer product of a and b.\n\n        '),
                                                                  ('accumulate',
                                                                   ['target', 'axis=0'],
                                                                   'Accumulate `target` along `axis` after filling with y fill\n        value.\n\n        '),
                                                                  ('__str__', [], '')],
                                                      'properties': ['f',
                                                                     'fillx',
                                                                     'filly',
                                                                     '__doc__',
                                                                     '__name__']},
             'numpy.ma.core._MaskedPrintOption': {'bases': [],
                                                  'constructor': ['display'],
                                                  'docstring': '\n    Handle the string used to represent missing data in a masked array.\n\n    ',
                                                  'methods': [('display',
                                                               [],
                                                               'Display the string to print for masked values.'),
                                                              ('set_display',
                                                               ['s'],
                                                               'Set the string to print for masked values.'),
                                                              ('enabled',
                                                               [],
                                                               'Is the use of the display value enabled?'),
                                                              ('enable',
                                                               ['shrink=1'],
                                                               'Set the enabling shrink to `shrink`.'),
                                                              ('__str__', [], '')],
                                                  'properties': ['_display',
                                                                 '_enabled',
                                                                 '__repr__']},
             'numpy.ma.core._MaskedUnaryOperation': {'bases': [],
                                                     'constructor': ['mufunc',
                                                                     'fill=0',
                                                                     'domain=None'],
                                                     'docstring': '\n    Defines masked version of unary operations, where invalid values are\n    pre-masked.\n\n    Parameters\n    ----------\n    mufunc : callable\n        The function for which to define a masked version. Made available\n        as ``_MaskedUnaryOperation.f``.\n    fill : scalar, optional\n        Filling value, default is 0.\n    domain : class instance\n        Domain for the function. Should be one of the ``_Domain*``\n        classes. Default is None.\n\n    ',
                                                     'methods': [('__call__',
                                                                  ['a', '*args', '**kwargs'],
                                                                  'Execute the call behavior.'),
                                                                 ('__str__', [], '')],
                                                     'properties': ['f',
                                                                    'fill',
                                                                    'domain',
                                                                    '__doc__',
                                                                    '__name__']},
             'numpy.ma.core._arraymethod': {'bases': ['object'],
                                            'constructor': ['funcname', 'onmask=True'],
                                            'docstring': '\n    Define a wrapper for basic array methods.\n\n    Upon call, returns a masked array, where the new ``_data`` array is\n    the output of the corresponding method called on the original\n    ``_data``.\n\n    If `onmask` is True, the new mask is the output of the method called\n    on the initial mask. Otherwise, the new mask is just a reference\n    to the initial mask.\n\n    Attributes\n    ----------\n    _onmask : bool\n        Holds the `onmask` parameter.\n    obj : object\n        The object calling `_arraymethod`.\n\n    Parameters\n    ----------\n    funcname : str\n        Name of the function to apply on data.\n    onmask : bool\n        Whether the mask must be processed also (True) or left\n        alone (False). Default is True. Make available as `_onmask`\n        attribute.\n\n    ',
                                            'methods': [('getdoc',
                                                         [],
                                                         'Return the doc of the function (from the doc of the method).'),
                                                        ('__get__',
                                                         ['obj', 'objtype=None'],
                                                         ''),
                                                        ('__call__', ['*args', '**params'], '')],
                                            'properties': ['__name__',
                                                           '_onmask',
                                                           'obj',
                                                           '__doc__']},
             'numpy.ma.core._convert2ma': {'bases': [],
                                           'constructor': ['funcname', 'params=None'],
                                           'docstring': '\n    Convert functions from numpy to numpy.ma.\n\n    Parameters\n    ----------\n        _methodname : string\n            Name of the method to transform.\n\n    ',
                                           'methods': [('getdoc',
                                                        [],
                                                        'Return the doc of the function (from the doc of the method).'),
                                                       ('__call__',
                                                        ['a', '*args', '**params'],
                                                        '')],
                                           'properties': ['__doc__', '_func', '_extras']},
             'numpy.ma.core._extrema_operation': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': '\n    Generic class for maximum/minimum functions.\n\n    .. note::\n      This is the base class for `_maximum_operation` and\n      `_minimum_operation`.\n\n    ',
                                                  'methods': [('__call__',
                                                               ['a', 'b=None'],
                                                               'Executes the call behavior.'),
                                                              ('reduce',
                                                               ['target', 'axis=None'],
                                                               'Reduce target along the given axis.'),
                                                              ('outer',
                                                               ['a', 'b'],
                                                               'Return the function applied to the outer product of a and b.')],
                                                  'properties': []},
             'numpy.ma.core._frommethod': {'bases': [],
                                           'constructor': ['methodname'],
                                           'docstring': '\n    Define functions from existing MaskedArray methods.\n\n    Parameters\n    ----------\n    methodname : str\n        Name of the method to transform.\n\n    ',
                                           'methods': [('getdoc',
                                                        [],
                                                        'Return the doc of the function (from the doc of the method).'),
                                                       ('__call__',
                                                        ['a', '*args', '**params'],
                                                        '')],
                                           'properties': ['__name__', '__doc__']},
             'numpy.ma.core._maximum_operation': {'bases': ['numpy.ma.core._extrema_operation'],
                                                  'constructor': [],
                                                  'docstring': 'Object to calculate maxima',
                                                  'methods': [],
                                                  'properties': ['ufunc',
                                                                 'afunc',
                                                                 'compare',
                                                                 'fill_value_func']},
             'numpy.ma.core._minimum_operation': {'bases': ['numpy.ma.core._extrema_operation'],
                                                  'constructor': [],
                                                  'docstring': 'Object to calculate minima',
                                                  'methods': [],
                                                  'properties': ['ufunc',
                                                                 'afunc',
                                                                 'compare',
                                                                 'fill_value_func']},
             'numpy.ma.core.mvoid': {'bases': ['numpy.ma.core.MaskedArray'],
                                     'constructor': [],
                                     'docstring': "\n    Fake a 'void' object to use for masked array with structured dtypes.\n    ",
                                     'methods': [('__new__',
                                                  ['data',
                                                   'mask=nomask',
                                                   'dtype=None',
                                                   'fill_value=None'],
                                                  ''),
                                                 ('_get_data', [], ''),
                                                 ('__getitem__', ['indx'], 'Get the index...'),
                                                 ('__setitem__', ['indx', 'value'], ''),
                                                 ('__str__', [], ''),
                                                 ('__repr__', [], ''),
                                                 ('__iter__',
                                                  [],
                                                  'Defines an iterator for mvoid'),
                                                 ('filled',
                                                  ['fill_value=None'],
                                                  '\n        Return a copy with masked fields filled with a given value.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            The value to use for invalid entries (None by default).\n            If None, the `fill_value` attribute is used instead.\n\n        Returns\n        -------\n        filled_void:\n            A `np.void` object\n\n        See Also\n        --------\n        MaskedArray.filled\n\n    '),
                                                 ('tolist',
                                                  [],
                                                  '\n    Transforms the mvoid object into a tuple.\n\n    Masked fields are replaced by None.\n\n    Returns\n    -------\n    returned_tuple\n        Tuple of fields\n        ')],
                                     'properties': ['_data']},
             'numpy.ma.extras.MAxisConcatenator': {'bases': ['numpy.lib.index_tricks.AxisConcatenator'],
                                                   'constructor': ['axis=0'],
                                                   'docstring': '\n    Translate slice objects to concatenation along an axis.\n\n    For documentation on usage, see `mr_class`.\n\n    See Also\n    --------\n    mr_class\n\n    ',
                                                   'methods': [('__getitem__', ['key'], '')],
                                                   'properties': ['matrix', 'col', 'axis']},
             'numpy.ma.extras._fromnxfunction': {'bases': [],
                                                 'constructor': ['funcname'],
                                                 'docstring': '\n    Defines a wrapper to adapt NumPy functions to masked arrays.\n\n\n    An instance of `_fromnxfunction` can be called with the same parameters\n    as the wrapped NumPy function. The docstring of `newfunc` is adapted from\n    the wrapped function as well, see `getdoc`.\n\n    Parameters\n    ----------\n    funcname : str\n        The name of the function to be adapted. The function should be\n        in the NumPy namespace (i.e. ``np.funcname``).\n\n    ',
                                                 'methods': [('getdoc',
                                                              [],
                                                              '\n        Retrieve the docstring and signature from the function.\n\n        The ``__doc__`` attribute of the function is used as the docstring for\n        the new masked array version of the function. A note on application\n        of the function to the mask is appended.\n\n        .. warning::\n          If the function docstring already contained a Notes section, the\n          new docstring will have two Notes sections instead of appending a note\n          to the existing section.\n\n        Parameters\n        ----------\n        None\n\n        '),
                                                             ('__call__',
                                                              ['*args', '**params'],
                                                              '')],
                                                 'properties': ['__name__', '__doc__']},
             'numpy.ma.extras.mr_class': {'bases': ['numpy.ma.extras.MAxisConcatenator'],
                                          'constructor': [],
                                          'docstring': '\n    Translate slice objects to concatenation along the first axis.\n\n    This is the masked array version of `lib.index_tricks.RClass`.\n\n    See Also\n    --------\n    lib.index_tricks.RClass\n\n    Examples\n    --------\n    >>> np.ma.mr_[np.ma.array([1,2,3]), 0, 0, np.ma.array([4,5,6])]\n    array([1, 2, 3, 0, 0, 4, 5, 6])\n\n    ',
                                          'methods': [],
                                          'properties': []},
             'numpy.ma.mrecords.MaskedRecords': {'bases': ['numpy.ma.MaskedArray', 'object'],
                                                 'constructor': [],
                                                 'docstring': '\n\n*IVariables*:\n    _data : {recarray}\n        Underlying data, as a record array.\n    _mask : {boolean array}\n        Mask of the records. A record is masked when all its fields are masked.\n    _fieldmask : {boolean recarray}\n        Record array of booleans, setting the mask of each individual field of each record.\n    _fill_value : {record}\n        Filling values for each field.\n    ',
                                                 'methods': [('__new__',
                                                              ['shape',
                                                               'dtype=None',
                                                               'buf=None',
                                                               'offset=0',
                                                               'strides=None',
                                                               'formats=None',
                                                               'names=None',
                                                               'titles=None',
                                                               'byteorder=None',
                                                               'aligned=False',
                                                               'mask=nomask',
                                                               'hard_mask=False',
                                                               'fill_value=None',
                                                               'keep_mask=True',
                                                               'copy=False',
                                                               '**options'],
                                                              ''),
                                                             ('__array_finalize__',
                                                              ['obj'],
                                                              ''),
                                                             ('_getdata',
                                                              [],
                                                              'Returns the data as a recarray.'),
                                                             ('_getfieldmask',
                                                              [],
                                                              'Alias to mask'),
                                                             ('__len__',
                                                              [],
                                                              'Returns the length'),
                                                             ('__getattribute__', ['attr'], ''),
                                                             ('__setattr__',
                                                              ['attr', 'val'],
                                                              'Sets the attribute attr to the value val.'),
                                                             ('__getitem__',
                                                              ['indx'],
                                                              'Returns all the fields sharing the same fieldname base.\nThe fieldname base is either `_data` or `_mask`.'),
                                                             ('__setitem__',
                                                              ['indx', 'value'],
                                                              'Sets the given record to value.'),
                                                             ('__str__',
                                                              [],
                                                              'Calculates the string representation.'),
                                                             ('__repr__',
                                                              [],
                                                              'Calculates the repr representation.'),
                                                             ('view',
                                                              ['dtype=None', 'type=None'],
                                                              'Returns a view of the mrecarray.'),
                                                             ('harden_mask',
                                                              [],
                                                              'Forces the mask to hard'),
                                                             ('soften_mask',
                                                              [],
                                                              'Forces the mask to soft'),
                                                             ('copy',
                                                              [],
                                                              'Returns a copy of the masked record.'),
                                                             ('tolist',
                                                              ['fill_value=None'],
                                                              'Copy the data portion of the array to a hierarchical python\n        list and returns that list.\n\n        Data items are converted to the nearest compatible Python\n        type.  Masked values are converted to fill_value. If\n        fill_value is None, the corresponding entries in the output\n        list will be ``None``.\n\n        '),
                                                             ('__getstate__',
                                                              [],
                                                              'Return the internal state of the masked array, for pickling purposes.\n\n        '),
                                                             ('__setstate__',
                                                              ['state'],
                                                              'Restore the internal state of the masked array, for pickling purposes.\n    ``state`` is typically the output of the ``__getstate__`` output, and is a\n    5-tuple:\n\n        - class name\n        - a tuple giving the shape of the data\n        - a typecode for the data\n        - a binary string for the data\n        - a binary string for the mask.\n\n        '),
                                                             ('__reduce__',
                                                              [],
                                                              'Return a 3-tuple for pickling a MaskedArray.\n\n        ')],
                                                 'properties': ['_mask',
                                                                '_sharedmask',
                                                                '_data',
                                                                '_fieldmask',
                                                                '_hardmask',
                                                                'fill_value']},
             'numpy.ma.timer_comparison.moduletester': {'bases': [],
                                                        'constructor': ['module'],
                                                        'docstring': '',
                                                        'methods': [('assert_array_compare',
                                                                     ['comparison',
                                                                      'x',
                                                                      'y',
                                                                      "err_msg=''",
                                                                      "header=''",
                                                                      'fill_value=True'],
                                                                     'Asserts that a comparison relation between two masked arrays is satisfied\n        elementwise.'),
                                                                    ('assert_array_equal',
                                                                     ['x', 'y', "err_msg=''"],
                                                                     'Checks the elementwise equality of two masked arrays.'),
                                                                    ('test_0',
                                                                     [],
                                                                     'Tests creation'),
                                                                    ('test_1',
                                                                     [],
                                                                     'Tests creation'),
                                                                    ('test_2',
                                                                     [],
                                                                     'Tests conversions and indexing'),
                                                                    ('test_3',
                                                                     [],
                                                                     'Tests resize/repeat'),
                                                                    ('test_4',
                                                                     [],
                                                                     'Test of take, transpose, inner, outer products'),
                                                                    ('test_5',
                                                                     [],
                                                                     'Tests inplace w/ scalar'),
                                                                    ('test_6',
                                                                     [],
                                                                     'Tests inplace w/ array'),
                                                                    ('test_7',
                                                                     [],
                                                                     'Tests ufunc'),
                                                                    ('test_99', [], ''),
                                                                    ('test_A', [], '')],
                                                        'properties': ['module',
                                                                       'allequal',
                                                                       'arange',
                                                                       'array',
                                                                       'concatenate',
                                                                       'count',
                                                                       'equal',
                                                                       'filled',
                                                                       'getmask',
                                                                       'getmaskarray',
                                                                       'id',
                                                                       'inner',
                                                                       'make_mask',
                                                                       'masked',
                                                                       'masked_array',
                                                                       'masked_values',
                                                                       'mask_or',
                                                                       'nomask',
                                                                       'ones',
                                                                       'outer',
                                                                       'repeat',
                                                                       'resize',
                                                                       'sort',
                                                                       'take',
                                                                       'transpose',
                                                                       'zeros',
                                                                       'MaskType',
                                                                       'umath',
                                                                       'testnames']},
             'numpy.matrixlib.defmatrix._NumCharTable': {'bases': [],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('__getitem__', ['i'], '')],
                                                         'properties': []},
             'numpy.matrixlib.defmatrix.matrix': {'bases': ['numpy.core.numeric.ndarray'],
                                                  'constructor': [],
                                                  'docstring': "\n    matrix(data, dtype=None, copy=True)\n\n    Returns a matrix from an array-like object, or from a string of data.\n    A matrix is a specialized 2-D array that retains its 2-D nature\n    through operations.  It has certain special operators, such as ``*``\n    (matrix multiplication) and ``**`` (matrix power).\n\n    Parameters\n    ----------\n    data : array_like or string\n       If `data` is a string, it is interpreted as a matrix with commas\n       or spaces separating columns, and semicolons separating rows.\n    dtype : data-type\n       Data-type of the output matrix.\n    copy : bool\n       If `data` is already an `ndarray`, then this flag determines\n       whether the data is copied (the default), or whether a view is\n       constructed.\n\n    See Also\n    --------\n    array\n\n    Examples\n    --------\n    >>> a = np.matrix('1 2; 3 4')\n    >>> print a\n    [[1 2]\n     [3 4]]\n\n    >>> np.matrix([[1, 2], [3, 4]])\n    matrix([[1, 2],\n            [3, 4]])\n\n    ",
                                                  'methods': [('__new__',
                                                               ['data',
                                                                'dtype=None',
                                                                'copy=True'],
                                                               ''),
                                                              ('__array_finalize__',
                                                               ['obj'],
                                                               ''),
                                                              ('__getitem__', ['index'], ''),
                                                              ('__mul__', ['other'], ''),
                                                              ('__rmul__', ['other'], ''),
                                                              ('__imul__', ['other'], ''),
                                                              ('__pow__', ['other'], ''),
                                                              ('__ipow__', ['other'], ''),
                                                              ('__rpow__', ['other'], ''),
                                                              ('__repr__', [], ''),
                                                              ('__str__', [], ''),
                                                              ('_align',
                                                               ['axis'],
                                                               'A convenience function for operations that need to preserve axis\n        orientation.\n        '),
                                                              ('tolist',
                                                               [],
                                                               '\n        Return the matrix as a (possibly nested) list.\n\n        See `ndarray.tolist` for full documentation.\n\n        See Also\n        --------\n        ndarray.tolist\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.tolist()\n        [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]\n\n        '),
                                                              ('sum',
                                                               ['axis=None',
                                                                'dtype=None',
                                                                'out=None'],
                                                               "\n        Returns the sum of the matrix elements, along the given axis.\n\n        Refer to `numpy.sum` for full documentation.\n\n        See Also\n        --------\n        numpy.sum\n\n        Notes\n        -----\n        This is the same as `ndarray.sum`, except that where an `ndarray` would\n        be returned, a `matrix` object is returned instead.\n\n        Examples\n        --------\n        >>> x = np.matrix([[1, 2], [4, 3]])\n        >>> x.sum()\n        10\n        >>> x.sum(axis=1)\n        matrix([[3],\n                [7]])\n        >>> x.sum(axis=1, dtype='float')\n        matrix([[ 3.],\n                [ 7.]])\n        >>> out = np.zeros((1, 2), dtype='float')\n        >>> x.sum(axis=1, dtype='float', out=out)\n        matrix([[ 3.],\n                [ 7.]])\n\n        "),
                                                              ('mean',
                                                               ['axis=None',
                                                                'dtype=None',
                                                                'out=None'],
                                                               '\n        Returns the average of the matrix elements along the given axis.\n\n        Refer to `numpy.mean` for full documentation.\n\n        See Also\n        --------\n        numpy.mean\n\n        Notes\n        -----\n        Same as `ndarray.mean` except that, where that returns an `ndarray`,\n        this returns a `matrix` object.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3, 4)))\n        >>> x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.mean()\n        5.5\n        >>> x.mean(0)\n        matrix([[ 4.,  5.,  6.,  7.]])\n        >>> x.mean(1)\n        matrix([[ 1.5],\n                [ 5.5],\n                [ 9.5]])\n\n        '),
                                                              ('std',
                                                               ['axis=None',
                                                                'dtype=None',
                                                                'out=None',
                                                                'ddof=0'],
                                                               '\n        Return the standard deviation of the array elements along the given axis.\n\n        Refer to `numpy.std` for full documentation.\n\n        See Also\n        --------\n        numpy.std\n\n        Notes\n        -----\n        This is the same as `ndarray.std`, except that where an `ndarray` would\n        be returned, a `matrix` object is returned instead.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3, 4)))\n        >>> x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.std()\n        3.4520525295346629\n        >>> x.std(0)\n        matrix([[ 3.26598632,  3.26598632,  3.26598632,  3.26598632]])\n        >>> x.std(1)\n        matrix([[ 1.11803399],\n                [ 1.11803399],\n                [ 1.11803399]])\n\n        '),
                                                              ('var',
                                                               ['axis=None',
                                                                'dtype=None',
                                                                'out=None',
                                                                'ddof=0'],
                                                               '\n        Returns the variance of the matrix elements, along the given axis.\n\n        Refer to `numpy.var` for full documentation.\n\n        See Also\n        --------\n        numpy.var\n\n        Notes\n        -----\n        This is the same as `ndarray.var`, except that where an `ndarray` would\n        be returned, a `matrix` object is returned instead.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3, 4)))\n        >>> x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.var()\n        11.916666666666666\n        >>> x.var(0)\n        matrix([[ 10.66666667,  10.66666667,  10.66666667,  10.66666667]])\n        >>> x.var(1)\n        matrix([[ 1.25],\n                [ 1.25],\n                [ 1.25]])\n\n        '),
                                                              ('prod',
                                                               ['axis=None',
                                                                'dtype=None',
                                                                'out=None'],
                                                               '\n        Return the product of the array elements over the given axis.\n\n        Refer to `prod` for full documentation.\n\n        See Also\n        --------\n        prod, ndarray.prod\n\n        Notes\n        -----\n        Same as `ndarray.prod`, except, where that returns an `ndarray`, this\n        returns a `matrix` object instead.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.prod()\n        0\n        >>> x.prod(0)\n        matrix([[  0,  45, 120, 231]])\n        >>> x.prod(1)\n        matrix([[   0],\n                [ 840],\n                [7920]])\n\n        '),
                                                              ('any',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Test whether any array element along a given axis evaluates to True.\n\n        Refer to `numpy.any` for full documentation.\n\n        Parameters\n        ----------\n        axis: int, optional\n            Axis along which logical OR is performed\n        out: ndarray, optional\n            Output to existing array instead of creating new one, must have\n            same shape as expected output\n\n        Returns\n        -------\n            any : bool, ndarray\n                Returns a single bool if `axis` is ``None``; otherwise,\n                returns `ndarray`\n\n        '),
                                                              ('all',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Test whether all matrix elements along a given axis evaluate to True.\n\n        Parameters\n        ----------\n        See `numpy.all` for complete descriptions\n\n        See Also\n        --------\n        numpy.all\n\n        Notes\n        -----\n        This is the same as `ndarray.all`, but it returns a `matrix` object.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> y = x[0]; y\n        matrix([[0, 1, 2, 3]])\n        >>> (x == y)\n        matrix([[ True,  True,  True,  True],\n                [False, False, False, False],\n                [False, False, False, False]], dtype=bool)\n        >>> (x == y).all()\n        False\n        >>> (x == y).all(0)\n        matrix([[False, False, False, False]], dtype=bool)\n        >>> (x == y).all(1)\n        matrix([[ True],\n                [False],\n                [False]], dtype=bool)\n\n        '),
                                                              ('max',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Return the maximum value along an axis.\n\n        Parameters\n        ----------\n        See `amax` for complete descriptions\n\n        See Also\n        --------\n        amax, ndarray.max\n\n        Notes\n        -----\n        This is the same as `ndarray.max`, but returns a `matrix` object\n        where `ndarray.max` would return an ndarray.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.max()\n        11\n        >>> x.max(0)\n        matrix([[ 8,  9, 10, 11]])\n        >>> x.max(1)\n        matrix([[ 3],\n                [ 7],\n                [11]])\n\n        '),
                                                              ('argmax',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Indices of the maximum values along an axis.\n\n        Parameters\n        ----------\n        See `numpy.argmax` for complete descriptions\n\n        See Also\n        --------\n        numpy.argmax\n\n        Notes\n        -----\n        This is the same as `ndarray.argmax`, but returns a `matrix` object\n        where `ndarray.argmax` would return an `ndarray`.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.argmax()\n        11\n        >>> x.argmax(0)\n        matrix([[2, 2, 2, 2]])\n        >>> x.argmax(1)\n        matrix([[3],\n                [3],\n                [3]])\n\n        '),
                                                              ('min',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Return the minimum value along an axis.\n\n        Parameters\n        ----------\n        See `amin` for complete descriptions.\n\n        See Also\n        --------\n        amin, ndarray.min\n\n        Notes\n        -----\n        This is the same as `ndarray.min`, but returns a `matrix` object\n        where `ndarray.min` would return an ndarray.\n\n        Examples\n        --------\n        >>> x = -np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[  0,  -1,  -2,  -3],\n                [ -4,  -5,  -6,  -7],\n                [ -8,  -9, -10, -11]])\n        >>> x.min()\n        -11\n        >>> x.min(0)\n        matrix([[ -8,  -9, -10, -11]])\n        >>> x.min(1)\n        matrix([[ -3],\n                [ -7],\n                [-11]])\n\n        '),
                                                              ('argmin',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Return the indices of the minimum values along an axis.\n\n        Parameters\n        ----------\n        See `numpy.argmin` for complete descriptions.\n\n        See Also\n        --------\n        numpy.argmin\n\n        Notes\n        -----\n        This is the same as `ndarray.argmin`, but returns a `matrix` object\n        where `ndarray.argmin` would return an `ndarray`.\n\n        Examples\n        --------\n        >>> x = -np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[  0,  -1,  -2,  -3],\n                [ -4,  -5,  -6,  -7],\n                [ -8,  -9, -10, -11]])\n        >>> x.argmin()\n        11\n        >>> x.argmin(0)\n        matrix([[2, 2, 2, 2]])\n        >>> x.argmin(1)\n        matrix([[3],\n                [3],\n                [3]])\n\n        '),
                                                              ('ptp',
                                                               ['axis=None', 'out=None'],
                                                               '\n        Peak-to-peak (maximum - minimum) value along the given axis.\n\n        Refer to `numpy.ptp` for full documentation.\n\n        See Also\n        --------\n        numpy.ptp\n\n        Notes\n        -----\n        Same as `ndarray.ptp`, except, where that would return an `ndarray` object,\n        this returns a `matrix` object.\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.ptp()\n        11\n        >>> x.ptp(0)\n        matrix([[8, 8, 8, 8]])\n        >>> x.ptp(1)\n        matrix([[3],\n                [3],\n                [3]])\n\n        '),
                                                              ('getI',
                                                               [],
                                                               "\n        Returns the (multiplicative) inverse of invertible `self`.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        ret : matrix object\n            If `self` is non-singular, `ret` is such that ``ret * self`` ==\n            ``self * ret`` == ``np.matrix(np.eye(self[0,:].size)`` all return\n            ``True``.\n\n        Raises\n        ------\n        numpy.linalg.linalg.LinAlgError: Singular matrix\n            If `self` is singular.\n\n        See Also\n        --------\n        linalg.inv\n\n        Examples\n        --------\n        >>> m = np.matrix('[1, 2; 3, 4]'); m\n        matrix([[1, 2],\n                [3, 4]])\n        >>> m.getI()\n        matrix([[-2. ,  1. ],\n                [ 1.5, -0.5]])\n        >>> m.getI() * m\n        matrix([[ 1.,  0.],\n                [ 0.,  1.]])\n\n        "),
                                                              ('getA',
                                                               [],
                                                               '\n        Return `self` as an `ndarray` object.\n\n        Equivalent to ``np.asarray(self)``.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        ret : ndarray\n            `self` as an `ndarray`\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.getA()\n        array([[ 0,  1,  2,  3],\n               [ 4,  5,  6,  7],\n               [ 8,  9, 10, 11]])\n\n        '),
                                                              ('getA1',
                                                               [],
                                                               '\n        Return `self` as a flattened `ndarray`.\n\n        Equivalent to ``np.asarray(x).ravel()``\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        ret : ndarray\n            `self`, 1-D, as an `ndarray`\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4))); x\n        matrix([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11]])\n        >>> x.getA1()\n        array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n        '),
                                                              ('getT',
                                                               [],
                                                               "\n        Returns the transpose of the matrix.\n\n        Does *not* conjugate!  For the complex conjugate transpose, use `getH`.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        ret : matrix object\n            The (non-conjugated) transpose of the matrix.\n\n        See Also\n        --------\n        transpose, getH\n\n        Examples\n        --------\n        >>> m = np.matrix('[1, 2; 3, 4]')\n        >>> m\n        matrix([[1, 2],\n                [3, 4]])\n        >>> m.getT()\n        matrix([[1, 3],\n                [2, 4]])\n\n        "),
                                                              ('getH',
                                                               [],
                                                               '\n        Returns the (complex) conjugate transpose of `self`.\n\n        Equivalent to ``np.transpose(self)`` if `self` is real-valued.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        ret : matrix object\n            complex conjugate transpose of `self`\n\n        Examples\n        --------\n        >>> x = np.matrix(np.arange(12).reshape((3,4)))\n        >>> z = x - 1j*x; z\n        matrix([[  0. +0.j,   1. -1.j,   2. -2.j,   3. -3.j],\n                [  4. -4.j,   5. -5.j,   6. -6.j,   7. -7.j],\n                [  8. -8.j,   9. -9.j,  10.-10.j,  11.-11.j]])\n        >>> z.getH()\n        matrix([[  0. +0.j,   4. +4.j,   8. +8.j],\n                [  1. +1.j,   5. +5.j,   9. +9.j],\n                [  2. +2.j,   6. +6.j,  10.+10.j],\n                [  3. +3.j,   7. +7.j,  11.+11.j]])\n\n        ')],
                                                  'properties': ['__array_priority__',
                                                                 '_getitem',
                                                                 'shape',
                                                                 'T',
                                                                 'A',
                                                                 'A1',
                                                                 'H',
                                                                 'I']},
             'numpy.numarray.functions.EarlyEOFError': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': 'Raised in fromfile() if EOF unexpectedly occurs.',
                                                        'methods': [],
                                                        'properties': []},
             'numpy.numarray.functions.FileSeekWarning': {'bases': ['Warning'],
                                                          'constructor': [],
                                                          'docstring': 'Issued in fromfile() if there is unused data and seek() fails',
                                                          'methods': [],
                                                          'properties': []},
             'numpy.numarray.functions.SizeMismatchError': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': 'Raised in fromfile() if file size does not match shape.',
                                                            'methods': [],
                                                            'properties': []},
             'numpy.numarray.functions.SizeMismatchWarning': {'bases': ['Warning'],
                                                              'constructor': [],
                                                              'docstring': 'Issued in fromfile() if file size does not match shape.',
                                                              'methods': [],
                                                              'properties': []},
             'numpy.numarray.numerictypes.AnyType': {'bases': ['numpy.numarray.numerictypes.NumericType'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'numpy.numarray.numerictypes.BooleanType': {'bases': ['numpy.numarray.numerictypes.NumericType'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'numpy.numarray.numerictypes.ComplexType': {'bases': ['numpy.numarray.numerictypes.NumericType'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'numpy.numarray.numerictypes.FloatingType': {'bases': ['numpy.numarray.numerictypes.NumericType'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'numpy.numarray.numerictypes.IntegralType': {'bases': ['numpy.numarray.numerictypes.NumericType'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'numpy.numarray.numerictypes.NumericType': {'bases': ['object'],
                                                         'constructor': ['name',
                                                                         'bytes',
                                                                         'default',
                                                                         'typeno'],
                                                         'docstring': 'Numeric type class\n\n    Used both as a type identification and the repository of\n    characteristics and conversion functions.\n    ',
                                                         'methods': [('__new__',
                                                                      ['name',
                                                                       'bytes',
                                                                       'default',
                                                                       'typeno'],
                                                                      '__new__() implements a \'quasi-singleton pattern because attempts\n        to create duplicate types return the first created instance of that\n        particular type parameterization,  i.e. the second time you try to\n        create "Int32",  you get the original Int32, not a new one.\n        '),
                                                                     ('__getnewargs__',
                                                                      [],
                                                                      'support the pickling protocol.'),
                                                                     ('__getstate__',
                                                                      [],
                                                                      'support pickling protocol... no __setstate__ required.')],
                                                         'properties': ['name',
                                                                        'bytes',
                                                                        'default',
                                                                        'typeno',
                                                                        '_conv']},
             'numpy.numarray.numerictypes.ObjectType': {'bases': ['numpy.numarray.numerictypes.NumericType'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'numpy.numarray.numerictypes.SignedIntegralType': {'bases': ['numpy.numarray.numerictypes.IntegralType',
                                                                          'numpy.numarray.numerictypes.SignedType'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'numpy.numarray.numerictypes.SignedType': {'bases': [],
                                                        'constructor': [],
                                                        'docstring': 'Marker class used for signed type check',
                                                        'methods': [],
                                                        'properties': []},
             'numpy.numarray.numerictypes.UnsignedIntegralType': {'bases': ['numpy.numarray.numerictypes.IntegralType',
                                                                            'numpy.numarray.numerictypes.UnsignedType'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'numpy.numarray.numerictypes.UnsignedType': {'bases': [],
                                                          'constructor': [],
                                                          'docstring': 'Marker class used for unsigned type check',
                                                          'methods': [],
                                                          'properties': []},
             'numpy.numarray.session.ObjectNotFound': {'bases': ['RuntimeError'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': []},
             'numpy.numarray.session._ModuleProxy': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': 'Proxy object which fakes pickling a module',
                                                     'methods': [('__new__',
                                                                  ['name', 'save=False'],
                                                                  ''),
                                                                 ('__getnewargs__', [], ''),
                                                                 ('__getstate__', [], '')],
                                                     'properties': ['name']},
             'numpy.numarray.session._ObjectProxy': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': 'Proxy object which fakes pickling an arbitrary object.  Only global\n    constants can really be proxied.',
                                                     'methods': [('__new__',
                                                                  ['module',
                                                                   'name',
                                                                   '_type2',
                                                                   'save=False'],
                                                                  ''),
                                                                 ('__getnewargs__', [], ''),
                                                                 ('__getstate__', [], '')],
                                                     'properties': ['module', 'name', 'type']},
             'numpy.numarray.session._ProxyingFailure': {'bases': [],
                                                         'constructor': ['module',
                                                                         'name',
                                                                         'type=None'],
                                                         'docstring': 'Object which is bound to a variable for a proxy pickle which failed to reload',
                                                         'methods': [('__repr__', [], '')],
                                                         'properties': ['module',
                                                                        'name',
                                                                        'type']},
             'numpy.numarray.session._SaveSession': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': 'Tag object which marks the end of a save session and holds the\n    saved session variable names as a list of strings in the same\n    order as the session pickles.',
                                                     'methods': [('__new__',
                                                                  ['keys', 'save=False'],
                                                                  ''),
                                                                 ('__getnewargs__', [], ''),
                                                                 ('__getstate__', [], '')],
                                                     'properties': ['keys']},
             'numpy.numarray.util.MathDomainError': {'bases': ['ArithmeticError'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'numpy.numarray.util.NumOverflowError': {'bases': ['OverflowError',
                                                                'ArithmeticError'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'numpy.numarray.util.UnderflowError': {'bases': ['ArithmeticError'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'numpy.oldnumeric.arrayfns.error': {'bases': ['Exception'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'numpy.oldnumeric.compat.Pickler': {'bases': ['pickle.Pickler'],
                                                 'constructor': ['*args', '**kwds'],
                                                 'docstring': '',
                                                 'methods': [('save_array', ['object'], '')],
                                                 'properties': []},
             'numpy.oldnumeric.compat.Unpickler': {'bases': ['pickle.Unpickler'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('load_array', [], '')],
                                                   'properties': ['dispatch']},
             'numpy.oldnumeric.ma.MAError': {'bases': ['Exception'],
                                             'constructor': ['args=None'],
                                             'docstring': '',
                                             'methods': [('__str__',
                                                          [],
                                                          'Calculate the string representation')],
                                             'properties': ['args', '__repr__']},
             'numpy.oldnumeric.ma.MaskedArray': {'bases': ['object'],
                                                 'constructor': ['data',
                                                                 'dtype=None',
                                                                 'copy=True',
                                                                 'order=False',
                                                                 'mask=nomask',
                                                                 'fill_value=None'],
                                                 'docstring': 'Arrays with possibly masked values.\n       Masked values of 1 exclude the corresponding element from\n       any computation.\n\n       Construction:\n           x = array(data, dtype=None, copy=True, order=False,\n                     mask = nomask, fill_value=None)\n\n       If copy=False, every effort is made not to copy the data:\n           If data is a MaskedArray, and argument mask=nomask,\n           then the candidate data is data.data and the\n           mask used is data.mask. If data is a numeric array,\n           it is used as the candidate raw data.\n           If dtype is not None and\n           is != data.dtype.char then a data copy is required.\n           Otherwise, the candidate is used.\n\n       If a data copy is required, raw data stored is the result of:\n       numeric.array(data, dtype=dtype.char, copy=copy)\n\n       If mask is nomask there are no masked values. Otherwise mask must\n       be convertible to an array of booleans with the same shape as x.\n\n       fill_value is used to fill in masked values when necessary,\n       such as when printing and in method/function filled().\n       The fill_value is not used for computation within this module.\n    ',
                                                 'methods': [('__array__',
                                                              ['t=None', 'context=None'],
                                                              'Special hook for numeric. Converts to numeric if possible.'),
                                                             ('__array_wrap__',
                                                              ['array', 'context=None'],
                                                              'Special hook for ufuncs.\n\n        Wraps the numpy array and sets the mask according to\n        context.\n        '),
                                                             ('_get_shape',
                                                              [],
                                                              'Return the current shape.'),
                                                             ('_set_shape',
                                                              ['newshape'],
                                                              "Set the array's shape."),
                                                             ('_get_flat',
                                                              [],
                                                              'Calculate the flat value.\n        '),
                                                             ('_set_flat',
                                                              ['value'],
                                                              'x.flat = value'),
                                                             ('_get_real',
                                                              [],
                                                              'Get the real part of a complex array.'),
                                                             ('_set_real',
                                                              ['value'],
                                                              'x.real = value'),
                                                             ('_get_imaginary',
                                                              [],
                                                              'Get the imaginary part of a complex array.'),
                                                             ('_set_imaginary',
                                                              ['value'],
                                                              'x.imaginary = value'),
                                                             ('__str__',
                                                              [],
                                                              'Calculate the str representation, using masked for fill if\n           it is enabled. Otherwise fill with fill value.\n        '),
                                                             ('__repr__',
                                                              [],
                                                              'Calculate the repr representation, using masked for fill if\n           it is enabled. Otherwise fill with fill value.\n        '),
                                                             ('__float__',
                                                              [],
                                                              'Convert self to float.'),
                                                             ('__int__',
                                                              [],
                                                              'Convert self to int.'),
                                                             ('__getitem__',
                                                              ['i'],
                                                              'Get item described by i. Not a copy as in previous versions.'),
                                                             ('__setitem__',
                                                              ['index', 'value'],
                                                              'Set item described by index. If value is masked, mask those locations.'),
                                                             ('__nonzero__',
                                                              [],
                                                              'returns true if any element is non-zero or masked\n\n        '),
                                                             ('__len__',
                                                              [],
                                                              "Return length of first dimension. This is weird but Python's\n         slicing behavior depends on it."),
                                                             ('__and__',
                                                              ['other'],
                                                              'Return bitwise_and'),
                                                             ('__or__',
                                                              ['other'],
                                                              'Return bitwise_or'),
                                                             ('__xor__',
                                                              ['other'],
                                                              'Return bitwise_xor'),
                                                             ('__abs__',
                                                              [],
                                                              'Return absolute(self)'),
                                                             ('__neg__',
                                                              [],
                                                              'Return negative(self)'),
                                                             ('__pos__',
                                                              [],
                                                              'Return array(self)'),
                                                             ('__add__',
                                                              ['other'],
                                                              'Return add(self, other)'),
                                                             ('__mod__',
                                                              ['other'],
                                                              'Return remainder(self, other)'),
                                                             ('__rmod__',
                                                              ['other'],
                                                              'Return remainder(other, self)'),
                                                             ('__lshift__', ['n'], ''),
                                                             ('__rshift__', ['n'], ''),
                                                             ('__sub__',
                                                              ['other'],
                                                              'Return subtract(self, other)'),
                                                             ('__rsub__',
                                                              ['other'],
                                                              'Return subtract(other, self)'),
                                                             ('__mul__',
                                                              ['other'],
                                                              'Return multiply(self, other)'),
                                                             ('__div__',
                                                              ['other'],
                                                              'Return divide(self, other)'),
                                                             ('__rdiv__',
                                                              ['other'],
                                                              'Return divide(other, self)'),
                                                             ('__truediv__',
                                                              ['other'],
                                                              'Return divide(self, other)'),
                                                             ('__rtruediv__',
                                                              ['other'],
                                                              'Return divide(other, self)'),
                                                             ('__floordiv__',
                                                              ['other'],
                                                              'Return divide(self, other)'),
                                                             ('__rfloordiv__',
                                                              ['other'],
                                                              'Return divide(other, self)'),
                                                             ('__pow__',
                                                              ['other', 'third=None'],
                                                              'Return power(self, other, third)'),
                                                             ('__sqrt__',
                                                              [],
                                                              'Return sqrt(self)'),
                                                             ('__iadd__',
                                                              ['other'],
                                                              'Add other to self in place.'),
                                                             ('__imul__',
                                                              ['other'],
                                                              'Add other to self in place.'),
                                                             ('__isub__',
                                                              ['other'],
                                                              'Subtract other from self in place.'),
                                                             ('__idiv__',
                                                              ['other'],
                                                              'Divide self by other in place.'),
                                                             ('__eq__', ['other'], ''),
                                                             ('__ne__', ['other'], ''),
                                                             ('__lt__', ['other'], ''),
                                                             ('__le__', ['other'], ''),
                                                             ('__gt__', ['other'], ''),
                                                             ('__ge__', ['other'], ''),
                                                             ('astype',
                                                              ['tc'],
                                                              'return self as array of given type.'),
                                                             ('byte_swapped',
                                                              [],
                                                              "Returns the raw data field, byte_swapped. Included for consistency\n         with numeric but doesn't make sense in this context.\n        "),
                                                             ('compressed',
                                                              [],
                                                              'A 1-D array of all the non-masked data.'),
                                                             ('count',
                                                              ['axis=None'],
                                                              'Count of the non-masked elements in a, or along a certain axis.'),
                                                             ('dot',
                                                              ['other'],
                                                              's.dot(other) = innerproduct(s, other)'),
                                                             ('fill_value',
                                                              [],
                                                              'Get the current fill value.'),
                                                             ('filled',
                                                              ['fill_value=None'],
                                                              'A numeric array with masked values filled. If fill_value is None,\n           use self.fill_value().\n\n           If mask is nomask, copy data only if not contiguous.\n           Result is always a contiguous, numeric array.\n# Is contiguous really necessary now?\n        '),
                                                             ('ids',
                                                              [],
                                                              'Return the ids of the data and mask areas'),
                                                             ('iscontiguous',
                                                              [],
                                                              'Is the data contiguous?'),
                                                             ('itemsize',
                                                              [],
                                                              'Item size of each data item.'),
                                                             ('outer',
                                                              ['other'],
                                                              's.outer(other) = outerproduct(s, other)'),
                                                             ('put',
                                                              ['values'],
                                                              'Set the non-masked entries of self to filled(values).\n           No change to mask\n        '),
                                                             ('putmask',
                                                              ['values'],
                                                              'Set the masked entries of self to filled(values).\n           Mask changed to nomask.\n        '),
                                                             ('ravel',
                                                              [],
                                                              'Return a 1-D view of self.'),
                                                             ('raw_data',
                                                              [],
                                                              ' Obsolete; use data property instead.\n            The raw data; portions may be meaningless.\n            May be noncontiguous. Expert use only.'),
                                                             ('raw_mask',
                                                              [],
                                                              ' Obsolete; use mask property instead.\n            May be noncontiguous. Expert use only.\n        '),
                                                             ('reshape',
                                                              ['*s'],
                                                              'This array reshaped to shape s'),
                                                             ('set_fill_value',
                                                              ['v=None'],
                                                              'Set the fill value to v. Omit v to restore default.'),
                                                             ('_get_ndim', [], ''),
                                                             ('_get_size', [], ''),
                                                             ('_get_dtype', [], ''),
                                                             ('item',
                                                              ['*args'],
                                                              'Return Python scalar if possible'),
                                                             ('itemset',
                                                              ['*args'],
                                                              'Set Python scalar into array'),
                                                             ('tolist',
                                                              ['fill_value=None'],
                                                              'Convert to list'),
                                                             ('tostring',
                                                              ['fill_value=None'],
                                                              'Convert to string'),
                                                             ('unmask',
                                                              [],
                                                              'Replace the mask by nomask if possible.'),
                                                             ('unshare_mask',
                                                              [],
                                                              'If currently sharing mask, make a copy.'),
                                                             ('_get_ctypes', [], ''),
                                                             ('_get_T', [], '')],
                                                 'properties': ['__array_priority__',
                                                                '_data',
                                                                '_mask',
                                                                '_shared_mask',
                                                                '__rand__',
                                                                '__ror__',
                                                                '__rxor__',
                                                                '__radd__',
                                                                '__rmul__',
                                                                'data',
                                                                'mask',
                                                                '_fill_value',
                                                                'ndim',
                                                                'size',
                                                                'dtype',
                                                                'shape',
                                                                'flat',
                                                                'real',
                                                                'imaginary',
                                                                'imag',
                                                                'ctypes',
                                                                'T']},
             'numpy.oldnumeric.ma._MaskedPrintOption': {'bases': [],
                                                        'constructor': ['display'],
                                                        'docstring': 'One instance of this class, masked_print_option, is created.',
                                                        'methods': [('display',
                                                                     [],
                                                                     'Show what prints for masked values.'),
                                                                    ('set_display',
                                                                     ['s'],
                                                                     'set_display(s) sets what prints for masked values.'),
                                                                    ('enabled',
                                                                     [],
                                                                     'Is the use of the display value enabled?'),
                                                                    ('enable',
                                                                     ['flag=1'],
                                                                     'Set the enabling flag to flag.'),
                                                                    ('__str__', [], '')],
                                                        'properties': ['_enabled',
                                                                       '_display',
                                                                       '__repr__']},
             'numpy.oldnumeric.ma._maximum_operation': {'bases': [],
                                                        'constructor': [],
                                                        'docstring': 'Object to calculate maxima',
                                                        'methods': [('__call__',
                                                                     ['a', 'b=None'],
                                                                     'Execute the call behavior.'),
                                                                    ('reduce',
                                                                     ['target', 'axis=0'],
                                                                     'Reduce target along the given axis.'),
                                                                    ('outer',
                                                                     ['a', 'b'],
                                                                     'Return the function applied to the outer product of a and b.')],
                                                        'properties': []},
             'numpy.oldnumeric.ma._minimum_operation': {'bases': [],
                                                        'constructor': [],
                                                        'docstring': 'Object to calculate minima',
                                                        'methods': [('__call__',
                                                                     ['a', 'b=None'],
                                                                     'Execute the call behavior.'),
                                                                    ('reduce',
                                                                     ['target', 'axis=0'],
                                                                     'Reduce target along the given axis.'),
                                                                    ('outer',
                                                                     ['a', 'b'],
                                                                     'Return the function applied to the outer product of a and b.')],
                                                        'properties': []},
             'numpy.oldnumeric.ma.domain_check_interval': {'bases': [],
                                                           'constructor': ['y1', 'y2'],
                                                           'docstring': 'domain_check_interval(a,b)(x) = true where x < a or y > b',
                                                           'methods': [('__call__',
                                                                        ['x'],
                                                                        'Execute the call behavior.')],
                                                           'properties': ['y1', 'y2']},
             'numpy.oldnumeric.ma.domain_greater': {'bases': [],
                                                    'constructor': ['critical_value'],
                                                    'docstring': 'domain_greater(v)(x) = true where x <= v',
                                                    'methods': [('__call__',
                                                                 ['x'],
                                                                 'Execute the call behavior.')],
                                                    'properties': ['critical_value']},
             'numpy.oldnumeric.ma.domain_greater_equal': {'bases': [],
                                                          'constructor': ['critical_value'],
                                                          'docstring': 'domain_greater_equal(v)(x) = true where x < v',
                                                          'methods': [('__call__',
                                                                       ['x'],
                                                                       'Execute the call behavior.')],
                                                          'properties': ['critical_value']},
             'numpy.oldnumeric.ma.domain_safe_divide': {'bases': [],
                                                        'constructor': ['tolerance=divide_tolerance'],
                                                        'docstring': '',
                                                        'methods': [('__call__',
                                                                     ['a', 'b'],
                                                                     '')],
                                                        'properties': ['tolerance']},
             'numpy.oldnumeric.ma.domain_tan': {'bases': [],
                                                'constructor': ['eps'],
                                                'docstring': 'domain_tan(eps) = true where abs(cos(x)) < eps)',
                                                'methods': [('__call__',
                                                             ['x'],
                                                             'Execute the call behavior.')],
                                                'properties': ['eps']},
             'numpy.oldnumeric.ma.domained_binary_operation': {'bases': [],
                                                               'constructor': ['abfunc',
                                                                               'domain',
                                                                               'fillx=0',
                                                                               'filly=0'],
                                                               'docstring': 'Binary operations that have a domain, like divide. These are complicated\n       so they are a separate class. They have no reduce, outer or accumulate.\n    ',
                                                               'methods': [('__call__',
                                                                            ['a', 'b'],
                                                                            'Execute the call behavior.'),
                                                                           ('__str__', [], '')],
                                                               'properties': ['f',
                                                                              'domain',
                                                                              'fillx',
                                                                              'filly',
                                                                              '__doc__',
                                                                              '__name__']},
             'numpy.oldnumeric.ma.masked_binary_operation': {'bases': [],
                                                             'constructor': ['abfunc',
                                                                             'fillx=0',
                                                                             'filly=0'],
                                                             'docstring': '',
                                                             'methods': [('__call__',
                                                                          ['a',
                                                                           'b',
                                                                           '*args',
                                                                           '**kwargs'],
                                                                          'Execute the call behavior.'),
                                                                         ('reduce',
                                                                          ['target',
                                                                           'axis=0',
                                                                           'dtype=None'],
                                                                          'Reduce target along the given axis with this function.'),
                                                                         ('outer',
                                                                          ['a', 'b'],
                                                                          'Return the function applied to the outer product of a and b.'),
                                                                         ('accumulate',
                                                                          ['target', 'axis=0'],
                                                                          'Accumulate target along axis after filling with y fill value.'),
                                                                         ('__str__', [], '')],
                                                             'properties': ['f',
                                                                            'fillx',
                                                                            'filly',
                                                                            '__doc__']},
             'numpy.oldnumeric.ma.masked_unary_operation': {'bases': [],
                                                            'constructor': ['aufunc',
                                                                            'fill=0',
                                                                            'domain=None'],
                                                            'docstring': '',
                                                            'methods': [('__call__',
                                                                         ['a',
                                                                          '*args',
                                                                          '**kwargs'],
                                                                         'Execute the call behavior.'),
                                                                        ('__str__', [], '')],
                                                            'properties': ['f',
                                                                           'fill',
                                                                           'domain',
                                                                           '__doc__',
                                                                           '__name__']},
             'numpy.oldnumeric.precision.PrecisionError': {'bases': ['Exception'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'numpy.oldnumeric.rng.CreateGenerator': {'bases': ['object'],
                                                      'constructor': ['seed', 'dist=None'],
                                                      'docstring': '',
                                                      'methods': [('ranf', [], ''),
                                                                  ('sample', ['n'], '')],
                                                      'properties': ['_rng', '_dist']},
             'numpy.oldnumeric.rng.Distribution': {'bases': ['object'],
                                                   'constructor': ['meth', '*args'],
                                                   'docstring': '',
                                                   'methods': [('density', ['x'], ''),
                                                               ('__call__', ['x'], ''),
                                                               ('_onesample', ['rng'], ''),
                                                               ('_sample', ['rng', 'n'], '')],
                                                   'properties': ['_meth', '_args']},
             'numpy.oldnumeric.rng.ExponentialDistribution': {'bases': ['numpy.oldnumeric.rng.Distribution'],
                                                              'constructor': ['lambda_'],
                                                              'docstring': '',
                                                              'methods': [('density', [], '')],
                                                              'properties': []},
             'numpy.oldnumeric.rng.LogNormalDistribution': {'bases': ['numpy.oldnumeric.rng.Distribution'],
                                                            'constructor': ['m', 's'],
                                                            'docstring': '',
                                                            'methods': [('density', [], '')],
                                                            'properties': ['_mn', '_sn', '_fac']},
             'numpy.oldnumeric.rng.NormalDistribution': {'bases': ['numpy.oldnumeric.rng.Distribution'],
                                                         'constructor': ['m', 's'],
                                                         'docstring': '',
                                                         'methods': [('density', [], '')],
                                                         'properties': ['_fac']},
             'numpy.oldnumeric.rng.UniformDistribution': {'bases': ['numpy.oldnumeric.rng.Distribution'],
                                                          'constructor': ['a', 'b'],
                                                          'docstring': '',
                                                          'methods': [('density', [], '')],
                                                          'properties': ['_fac']},
             'numpy.oldnumeric.rng.error': {'bases': ['Exception'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'numpy.oldnumeric.typeconv._oldtypecodes': {'bases': ['dict'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('__getitem__',
                                                                      ['obj'],
                                                                      '')],
                                                         'properties': []},
             'numpy.polynomial.polyutils.PolyBase': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'numpy.polynomial.polyutils.PolyDomainError': {'bases': ['numpy.polynomial.polyutils.PolyError'],
                                                            'constructor': [],
                                                            'docstring': "Issued by the generic Poly class when two domains don't match.\n\n    This is raised when an binary operation is passed Poly objects with\n    different domains.\n\n    ",
                                                            'methods': [],
                                                            'properties': []},
             'numpy.polynomial.polyutils.PolyError': {'bases': ['Exception'],
                                                      'constructor': [],
                                                      'docstring': 'Base class for errors in this module.',
                                                      'methods': [],
                                                      'properties': []},
             'numpy.polynomial.polyutils.RankWarning': {'bases': ['UserWarning'],
                                                        'constructor': [],
                                                        'docstring': 'Issued by chebfit when the design matrix is rank deficient.',
                                                        'methods': [],
                                                        'properties': []},
             'numpy.testing.noseclasses.KnownFailure': {'bases': ['nose.plugins.errorclass.ErrorClassPlugin'],
                                                        'constructor': [],
                                                        'docstring': "Plugin that installs a KNOWNFAIL error class for the\n    KnownFailureClass exception.  When KnownFailureTest is raised,\n    the exception will be logged in the knownfail attribute of the\n    result, 'K' or 'KNOWNFAIL' (verbose) will be output, and the\n    exception will not be counted as an error or failure.",
                                                        'methods': [('options',
                                                                     ['parser',
                                                                      'env=os.environ'],
                                                                     ''),
                                                                    ('configure',
                                                                     ['options', 'conf'],
                                                                     '')],
                                                        'properties': ['enabled',
                                                                       'knownfail',
                                                                       'conf']},
             'numpy.testing.noseclasses.KnownFailureTest': {'bases': ['Exception'],
                                                            'constructor': [],
                                                            'docstring': 'Raise this exception to mark a test as a known failing test.',
                                                            'methods': [],
                                                            'properties': []},
             'numpy.testing.noseclasses.NpConfig': {'bases': ['nose.core.Config'],
                                                    'constructor': ['config'],
                                                    'docstring': " Class to pull out nose doctest plugin after configuration\n\n    This allows the user to set doctest related settings in their\n    configuration.  For example, without this fix, a setting of\n    'with-doctest=1' in the user's .noserc file would cause an error, if\n    we remove the doctest extension before this stage.  Our configure\n    uses the plugin to parse any settings, but then removed the doctest\n    plugin because the numpy doctester should be used for doctests\n    instead.\n    ",
                                                    'methods': [('configure',
                                                                 ['*args', '**kwargs'],
                                                                 '')],
                                                    'properties': ['__dict__']},
             'numpy.testing.noseclasses.NumpyDocTestCase': {'bases': ['nose.plugins.doctests.DocTestCase'],
                                                            'constructor': ['test',
                                                                            'optionflags=0',
                                                                            'setUp=None',
                                                                            'tearDown=None',
                                                                            'checker=None',
                                                                            'obj=None',
                                                                            "result_var='_'"],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['_result_var',
                                                                           '_nose_obj']},
             'numpy.testing.noseclasses.NumpyDocTestFinder': {'bases': ['doctest.DocTestFinder'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('_from_module',
                                                                           ['module',
                                                                            'object'],
                                                                           '\n        Return true if the given object is defined in the given\n        module.\n        '),
                                                                          ('_find',
                                                                           ['tests',
                                                                            'obj',
                                                                            'name',
                                                                            'module',
                                                                            'source_lines',
                                                                            'globs',
                                                                            'seen'],
                                                                           '\n        Find tests for the given object and any contained objects, and\n        add them to `tests`.\n        ')],
                                                              'properties': []},
             'numpy.testing.noseclasses.NumpyDoctest': {'bases': ['nose.plugins.doctests.Doctest'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('options',
                                                                     ['parser',
                                                                      'env=os.environ'],
                                                                     ''),
                                                                    ('configure',
                                                                     ['options', 'config'],
                                                                     ''),
                                                                    ('loadTestsFromModule',
                                                                     ['module'],
                                                                     ''),
                                                                    ('afterContext', [], ''),
                                                                    ('wantFile', ['file'], '')],
                                                        'properties': ['name',
                                                                       'enabled',
                                                                       'doctest_tests',
                                                                       'finder',
                                                                       'parser']},
             'numpy.testing.noseclasses.NumpyOutputChecker': {'bases': ['doctest.OutputChecker'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('check_output',
                                                                           ['want',
                                                                            'got',
                                                                            'optionflags'],
                                                                           '')],
                                                              'properties': []},
             'numpy.testing.noseclasses.NumpyTestProgram': {'bases': ['nose.core.TestProgram'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('makeConfig',
                                                                         ['*args', '**kwargs'],
                                                                         'Load a Config, pre-filled with user config files if any are\n        found.\n\n        We override this method only to allow us to return a NpConfig\n        object instead of a Config object. \n        '),
                                                                        ('runTests',
                                                                         [],
                                                                         'Run Tests. Returns true on success, false on failure, and\n        sets self.success to the same value.\n\n        Because nose currently discards the test result object, but we need\n        to return it to the user, override TestProgram.runTests to retain\n        the result\n        ')],
                                                            'properties': ['testRunner',
                                                                           'result',
                                                                           'success']},
             'numpy.testing.nosetester.NoseTester': {'bases': ['object'],
                                                     'constructor': ['package=None'],
                                                     'docstring': "\n    Nose test runner.\n\n    This class is made available as numpy.testing.Tester, and a test function\n    is typically added to a package's __init__.py like so::\n\n      from numpy.testing import Tester\n      test = Tester().test\n\n    Calling this test function finds and runs all tests associated with the\n    package and all its sub-packages.\n\n    Attributes\n    ----------\n    package_path : str\n        Full path to the package to test.\n    package_name : str\n        Name of the package to test.\n\n    Parameters\n    ----------\n    package : module, str or None\n        The package to test. If a string, this should be the full path to\n        the package. If None (default), `package` is set to the module from\n        which `NoseTester` is initialized.\n\n    ",
                                                     'methods': [('_test_argv',
                                                                  ['label',
                                                                   'verbose',
                                                                   'extra_argv'],
                                                                  ' Generate argv for nosetest command\n\n        %(test_header)s\n        '),
                                                                 ('_show_system_info', [], ''),
                                                                 ('prepare_test_args',
                                                                  ["label='fast'",
                                                                   'verbose=1',
                                                                   'extra_argv=None',
                                                                   'doctests=False',
                                                                   'coverage=False'],
                                                                  '\n        Run tests for module using nose.\n\n        This method does the heavy lifting for the `test` method. It takes all\n        the same arguments, for details see `test`.\n\n        See Also\n        --------\n        test\n\n        '),
                                                                 ('test',
                                                                  ["label='fast'",
                                                                   'verbose=1',
                                                                   'extra_argv=None',
                                                                   'doctests=False',
                                                                   'coverage=False'],
                                                                  "\n        Run tests for module using nose.\n\n        Parameters\n        ----------\n        label : {'fast', 'full', '', attribute identifier}, optional\n            Identifies the tests to run. This can be a string to pass to the\n            nosetests executable with the '-A' option, or one of\n            several special values.\n            Special values are:\n                'fast' - the default - which corresponds to the ``nosetests -A``\n                         option of 'not slow'.\n                'full' - fast (as above) and slow tests as in the\n                         'no -A' option to nosetests - this is the same as ''.\n            None or '' - run all tests.\n            attribute_identifier - string passed directly to nosetests as '-A'.\n        verbose : int, optional\n            Verbosity value for test outputs, in the range 1-10. Default is 1.\n        extra_argv : list, optional\n            List with any extra arguments to pass to nosetests.\n        doctests : bool, optional\n            If True, run doctests in module. Default is False.\n        coverage : bool, optional\n            If True, report coverage of NumPy code. Default is False.\n            (This requires the `coverage module:\n             <http://nedbatchelder.com/code/modules/coverage.html>`_).\n\n        Returns\n        -------\n        result : object\n            Returns the result of running the tests as a\n            ``nose.result.TextTestResult`` object.\n\n        Notes\n        -----\n        Each NumPy module exposes `test` in its namespace to run all tests for it.\n        For example, to run all tests for numpy.lib::\n\n          >>> np.lib.test()\n\n        Examples\n        --------\n        >>> result = np.lib.test()\n        Running unit tests for numpy.lib\n        ...\n        Ran 976 tests in 3.933s\n\n        OK\n\n        >>> result.errors\n        []\n        >>> result.knownfail\n        []\n\n        "),
                                                                 ('bench',
                                                                  ["label='fast'",
                                                                   'verbose=1',
                                                                   'extra_argv=None'],
                                                                  '\n        Run benchmarks for module using nose.\n\n        Parameters\n        ----------\n        label : {\'fast\', \'full\', \'\', attribute identifier}, optional\n            Identifies the tests to run. This can be a string to pass to the\n            nosetests executable with the \'-A\' option, or one of\n            several special values.\n            Special values are:\n                \'fast\' - the default - which corresponds to the ``nosetests -A``\n                         option of \'not slow\'.\n                \'full\' - fast (as above) and slow tests as in the\n                         \'no -A\' option to nosetests - this is the same as \'\'.\n            None or \'\' - run all tests.\n            attribute_identifier - string passed directly to nosetests as \'-A\'.\n        verbose : int, optional\n            Verbosity value for test outputs, in the range 1-10. Default is 1.\n        extra_argv : list, optional\n            List with any extra arguments to pass to nosetests.\n\n        Returns\n        -------\n        success : bool\n            Returns True if running the benchmarks works, False if an error\n            occurred.\n\n        Notes\n        -----\n        Benchmarks are like tests, but have names starting with "bench" instead\n        of "test", and can be found under the "benchmarks" sub-directory of the\n        module.\n\n        Each NumPy module exposes `bench` in its namespace to run all benchmarks\n        for it.\n\n        Examples\n        --------\n        >>> success = np.lib.bench()\n        Running benchmarks for numpy.lib\n        ...\n        using 562341 items:\n        unique:\n        0.11\n        unique1d:\n        0.11\n        ratio: 1.0\n        nUnique: 56230 == 56230\n        ...\n        OK\n\n        >>> success\n        True\n\n        ')],
                                                     'properties': ['package_path',
                                                                    'package_name']},
             'numpy.testing.nulltester.NullTester': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test',
                                                                  ['labels=None',
                                                                   '*args',
                                                                   '**kwargs'],
                                                                  '')],
                                                     'properties': ['bench']},
             'numpy.testing.numpytest.IgnoreException': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': 'Ignoring this exception due to disabled feature',
                                                         'methods': [],
                                                         'properties': []},
             'numpy.testing.print_coercion_tables.GenericObject': {'bases': [],
                                                                   'constructor': ['v'],
                                                                   'docstring': '',
                                                                   'methods': [('__add__',
                                                                                ['other'],
                                                                                ''),
                                                                               ('__radd__',
                                                                                ['other'],
                                                                                '')],
                                                                   'properties': ['v', 'dtype']},
             'numpy.testing.utils.WarningManager': {'bases': [],
                                                    'constructor': ['record=False',
                                                                    'module=None'],
                                                    'docstring': "\n    A context manager that copies and restores the warnings filter upon\n    exiting the context.\n\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of ``warnings.showwarning()`` and be appended to a\n    list returned by the context manager. Otherwise None is returned by the\n    context manager. The objects appended to the list are arguments whose\n    attributes mirror the arguments to ``showwarning()``.\n\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful\n    when testing the warnings module itself.\n\n    Notes\n    -----\n    `WarningManager` is a copy of the ``catch_warnings`` context manager\n    from the Python 2.6 warnings module, with slight modifications.\n    It is copied so it can be used in NumPy with older Python versions.\n\n    ",
                                                    'methods': [('__enter__', [], ''),
                                                                ('__exit__', [], '')],
                                                    'properties': ['_record',
                                                                   '_module',
                                                                   '_entered',
                                                                   '_filters',
                                                                   '_showwarning']},
             'numpy.testing.utils.WarningMessage': {'bases': ['object'],
                                                    'constructor': ['message',
                                                                    'category',
                                                                    'filename',
                                                                    'lineno',
                                                                    'file=None',
                                                                    'line=None'],
                                                    'docstring': '\n    Holds the result of a single showwarning() call.\n\n    Notes\n    -----\n    `WarningMessage` is copied from the Python 2.6 warnings module,\n    so it can be used in NumPy with older Python versions.\n\n    ',
                                                    'methods': [('__str__', [], '')],
                                                    'properties': ['_WARNING_DETAILS',
                                                                   '_category_name']},
             'paramiko.agent.Agent': {'bases': ['paramiko.agent.AgentSSH'],
                                      'constructor': [],
                                      'docstring': "\n    Client interface for using private keys from an SSH agent running on the\n    local machine.  If an SSH agent is running, this class can be used to\n    connect to it and retreive L{PKey} objects which can be used when\n    attempting to authenticate to remote SSH servers.\n\n    Because the SSH agent protocol uses environment variables and unix-domain\n    sockets, this probably doesn't work on Windows.  It does work on most\n    posix platforms though (Linux and MacOS X, for example).\n    ",
                                      'methods': [('close',
                                                   [],
                                                   '\n        Close the SSH agent connection.\n        ')],
                                      'properties': []},
             'paramiko.agent.AgentClientProxy': {'bases': ['object'],
                                                 'constructor': ['chanRemote'],
                                                 'docstring': '\n    Class proxying request as a client:\n       -> client ask for a request_forward_agent()\n       -> server creates a proxy and a fake SSH Agent\n       -> server ask for establishing a connection when needed,\n       calling the forward_agent_handler at client side.\n       -> the forward_agent_handler launch a thread for connecting\n       the remote fake agent and the local agent\n       -> Communication occurs ...\n    ',
                                                 'methods': [('__del__', [], ''),
                                                             ('connect',
                                                              [],
                                                              '\n        Method automatically called by the run() method of the AgentProxyThread\n        '),
                                                             ('close',
                                                              [],
                                                              '\n        Close the current connection and terminate the agent\n        Should be called manually\n        ')],
                                                 'properties': ['_conn', '__chanR', 'thread']},
             'paramiko.agent.AgentKey': {'bases': ['paramiko.pkey.PKey'],
                                         'constructor': ['agent', 'blob'],
                                         'docstring': '\n    Private key held in a local SSH agent.  This type of key can be used for\n    authenticating to a remote server (signing).  Most other key operations\n    work as expected.\n    ',
                                         'methods': [('__str__', [], ''),
                                                     ('get_name', [], ''),
                                                     ('sign_ssh_data', ['rng', 'data'], '')],
                                         'properties': ['agent', 'blob', 'name']},
             'paramiko.agent.AgentLocalProxy': {'bases': ['paramiko.agent.AgentProxyThread'],
                                                'constructor': ['agent'],
                                                'docstring': '\n    Class to be used when wanting to ask a local SSH Agent being\n    asked from a remote fake agent (so use a unix socket for ex.)\n    ',
                                                'methods': [('get_connection',
                                                             [],
                                                             ' Return a pair of socket object and string address\n        May Block !\n        ')],
                                                'properties': []},
             'paramiko.agent.AgentProxyThread': {'bases': ['threading.Thread'],
                                                 'constructor': ['agent'],
                                                 'docstring': ' Class in charge of communication between two chan ',
                                                 'methods': [('run', [], ''),
                                                             ('_communicate', [], '')],
                                                 'properties': ['_agent',
                                                                '_exit',
                                                                '__inr',
                                                                '__addr']},
             'paramiko.agent.AgentRemoteProxy': {'bases': ['paramiko.agent.AgentProxyThread'],
                                                 'constructor': ['agent', 'chan'],
                                                 'docstring': '\n    Class to be used when wanting to ask a remote SSH Agent\n    ',
                                                 'methods': [('get_connection',
                                                              [],
                                                              '\n        Class to be used when wanting to ask a local SSH Agent being\n        asked from a remote fake agent (so use a unix socket for ex.)\n        ')],
                                                 'properties': ['__chan']},
             'paramiko.agent.AgentRequestHandler': {'bases': ['object'],
                                                    'constructor': ['chanClient'],
                                                    'docstring': '',
                                                    'methods': [('_forward_agent_handler',
                                                                 ['chanRemote'],
                                                                 ''),
                                                                ('__del__', [], ''),
                                                                ('close', [], '')],
                                                    'properties': ['_conn',
                                                                   '__chanC',
                                                                   '__clientProxys']},
             'paramiko.agent.AgentSSH': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': "\n    Client interface for using private keys from an SSH agent running on the\n    local machine.  If an SSH agent is running, this class can be used to\n    connect to it and retreive L{PKey} objects which can be used when\n    attempting to authenticate to remote SSH servers.\n\n    Because the SSH agent protocol uses environment variables and unix-domain\n    sockets, this probably doesn't work on Windows.  It does work on most\n    posix platforms though (Linux and MacOS X, for example).\n    ",
                                         'methods': [('get_keys',
                                                      [],
                                                      "\n        Return the list of keys available through the SSH agent, if any.  If\n        no SSH agent was running (or it couldn't be contacted), an empty list\n        will be returned.\n\n        @return: a list of keys available on the SSH agent\n        @rtype: tuple of L{AgentKey}\n        "),
                                                     ('_connect', ['conn'], ''),
                                                     ('_close', [], ''),
                                                     ('_send_message', ['msg'], ''),
                                                     ('_read_all', ['wanted'], '')],
                                         'properties': ['_conn', '_keys']},
             'paramiko.agent.AgentServerProxy': {'bases': ['paramiko.agent.AgentSSH'],
                                                 'constructor': ['t'],
                                                 'docstring': '\n    @param t : transport used for the Forward for SSH Agent communication\n\n    @raise SSHException: mostly if we lost the agent\n    ',
                                                 'methods': [('__del__', [], ''),
                                                             ('connect', [], ''),
                                                             ('close',
                                                              [],
                                                              '\n        Terminate the agent, clean the files, close connections\n        Should be called manually\n        '),
                                                             ('get_env',
                                                              [],
                                                              '\n        Helper for the environnement under unix\n\n        @return: the SSH_AUTH_SOCK Environnement variables\n        @rtype: dict\n        '),
                                                             ('_get_filename', [], '')],
                                                 'properties': ['__t',
                                                                '_dir',
                                                                '_file',
                                                                'thread']},
             'paramiko.auth_handler.AuthHandler': {'bases': ['object'],
                                                   'constructor': ['transport'],
                                                   'docstring': '\n    Internal class to handle the mechanics of authentication.\n    ',
                                                   'methods': [('is_authenticated', [], ''),
                                                               ('get_username', [], ''),
                                                               ('auth_none',
                                                                ['username', 'event'],
                                                                ''),
                                                               ('auth_publickey',
                                                                ['username', 'key', 'event'],
                                                                ''),
                                                               ('auth_password',
                                                                ['username',
                                                                 'password',
                                                                 'event'],
                                                                ''),
                                                               ('auth_interactive',
                                                                ['username',
                                                                 'handler',
                                                                 'event',
                                                                 "submethods=''"],
                                                                '\n        response_list = handler(title, instructions, prompt_list)\n        '),
                                                               ('abort', [], ''),
                                                               ('_request_auth', [], ''),
                                                               ('_disconnect_service_not_available',
                                                                [],
                                                                ''),
                                                               ('_disconnect_no_more_auth',
                                                                [],
                                                                ''),
                                                               ('_get_session_blob',
                                                                ['key', 'service', 'username'],
                                                                ''),
                                                               ('wait_for_response',
                                                                ['event'],
                                                                ''),
                                                               ('_parse_service_request',
                                                                ['m'],
                                                                ''),
                                                               ('_parse_service_accept',
                                                                ['m'],
                                                                ''),
                                                               ('_send_auth_result',
                                                                ['username',
                                                                 'method',
                                                                 'result'],
                                                                ''),
                                                               ('_interactive_query',
                                                                ['q'],
                                                                ''),
                                                               ('_parse_userauth_request',
                                                                ['m'],
                                                                ''),
                                                               ('_parse_userauth_success',
                                                                ['m'],
                                                                ''),
                                                               ('_parse_userauth_failure',
                                                                ['m'],
                                                                ''),
                                                               ('_parse_userauth_banner',
                                                                ['m'],
                                                                ''),
                                                               ('_parse_userauth_info_request',
                                                                ['m'],
                                                                ''),
                                                               ('_parse_userauth_info_response',
                                                                ['m'],
                                                                '')],
                                                   'properties': ['transport',
                                                                  'username',
                                                                  'authenticated',
                                                                  'auth_event',
                                                                  'auth_method',
                                                                  'password',
                                                                  'private_key',
                                                                  'interactive_handler',
                                                                  'submethods',
                                                                  'auth_username',
                                                                  'auth_fail_count',
                                                                  '_handler_table']},
             'paramiko.ber.BER': {'bases': ['object'],
                                  'constructor': ["content=''"],
                                  'docstring': "\n    Robey's tiny little attempt at a BER decoder.\n    ",
                                  'methods': [('__str__', [], ''),
                                              ('__repr__', [], ''),
                                              ('decode', [], ''),
                                              ('decode_next', [], ''),
                                              ('decode_sequence', [], ''),
                                              ('encode_tlv', ['ident', 'val'], ''),
                                              ('encode', ['x'], ''),
                                              ('encode_sequence', [], '')],
                                  'properties': ['content',
                                                 'idx',
                                                 'decode_sequence',
                                                 'encode_sequence']},
             'paramiko.ber.BERException': {'bases': ['Exception'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'paramiko.buffered_pipe.BufferedPipe': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': '\n    A buffer that obeys normal read (with timeout) & close semantics for a\n    file or socket, but is fed data from another thread.  This is used by\n    L{Channel}.\n    ',
                                                     'methods': [('set_event',
                                                                  ['event'],
                                                                  '\n        Set an event on this buffer.  When data is ready to be read (or the\n        buffer has been closed), the event will be set.  When no data is\n        ready, the event will be cleared.\n        \n        @param event: the event to set/clear\n        @type event: Event\n        '),
                                                                 ('feed',
                                                                  ['data'],
                                                                  '\n        Feed new data into this pipe.  This method is assumed to be called\n        from a separate thread, so synchronization is done.\n        \n        @param data: the data to add\n        @type data: str\n        '),
                                                                 ('read_ready',
                                                                  [],
                                                                  '\n        Returns true if data is buffered and ready to be read from this\n        feeder.  A C{False} result does not mean that the feeder has closed;\n        it means you may need to wait before more data arrives.\n        \n        @return: C{True} if a L{read} call would immediately return at least\n            one byte; C{False} otherwise.\n        @rtype: bool\n        '),
                                                                 ('read',
                                                                  ['nbytes', 'timeout=None'],
                                                                  '\n        Read data from the pipe.  The return value is a string representing\n        the data received.  The maximum amount of data to be received at once\n        is specified by C{nbytes}.  If a string of length zero is returned,\n        the pipe has been closed.\n\n        The optional C{timeout} argument can be a nonnegative float expressing\n        seconds, or C{None} for no timeout.  If a float is given, a\n        C{PipeTimeout} will be raised if the timeout period value has\n        elapsed before any data arrives.\n\n        @param nbytes: maximum number of bytes to read\n        @type nbytes: int\n        @param timeout: maximum seconds to wait (or C{None}, the default, to\n            wait forever)\n        @type timeout: float\n        @return: data\n        @rtype: str\n        \n        @raise PipeTimeout: if a timeout was specified and no data was ready\n            before that timeout\n        '),
                                                                 ('empty',
                                                                  [],
                                                                  '\n        Clear out the buffer and return all data that was in it.\n        \n        @return: any data that was in the buffer prior to clearing it out\n        @rtype: str\n        '),
                                                                 ('close',
                                                                  [],
                                                                  '\n        Close this pipe object.  Future calls to L{read} after the buffer\n        has been emptied will return immediately with an empty string.\n        '),
                                                                 ('__len__',
                                                                  [],
                                                                  '\n        Return the number of bytes buffered.\n        \n        @return: number of bytes bufferes\n        @rtype: int\n        ')],
                                                     'properties': ['_lock',
                                                                    '_cv',
                                                                    '_event',
                                                                    '_buffer',
                                                                    '_closed']},
             'paramiko.buffered_pipe.PipeTimeout': {'bases': ['IOError'],
                                                    'constructor': [],
                                                    'docstring': '\n    Indicates that a timeout was reached on a read from a L{BufferedPipe}.\n    ',
                                                    'methods': [],
                                                    'properties': []},
             'paramiko.channel.Channel': {'bases': ['object'],
                                          'constructor': ['chanid'],
                                          'docstring': "\n    A secure tunnel across an SSH L{Transport}.  A Channel is meant to behave\n    like a socket, and has an API that should be indistinguishable from the\n    python socket API.\n\n    Because SSH2 has a windowing kind of flow control, if you stop reading data\n    from a Channel and its buffer fills up, the server will be unable to send\n    you any more data until you read some of it.  (This won't affect other\n    channels on the same transport -- all channels on a single transport are\n    flow-controlled independently.)  Similarly, if the server isn't reading\n    data you send, calls to L{send} may block, unless you set a timeout.  This\n    is exactly like a normal network socket, so it shouldn't be too surprising.\n    ",
                                          'methods': [('__del__', [], ''),
                                                      ('__repr__',
                                                       [],
                                                       '\n        Return a string representation of this object, for debugging.\n\n        @rtype: str\n        '),
                                                      ('get_pty',
                                                       ["term='vt100'",
                                                        'width=80',
                                                        'height=24'],
                                                       "\n        Request a pseudo-terminal from the server.  This is usually used right\n        after creating a client channel, to ask the server to provide some\n        basic terminal semantics for a shell invoked with L{invoke_shell}.\n        It isn't necessary (or desirable) to call this method if you're going\n        to exectue a single command with L{exec_command}.\n\n        @param term: the terminal type to emulate (for example, C{'vt100'})\n        @type term: str\n        @param width: width (in characters) of the terminal screen\n        @type width: int\n        @param height: height (in characters) of the terminal screen\n        @type height: int\n        \n        @raise SSHException: if the request was rejected or the channel was\n            closed\n        "),
                                                      ('invoke_shell',
                                                       [],
                                                       "\n        Request an interactive shell session on this channel.  If the server\n        allows it, the channel will then be directly connected to the stdin,\n        stdout, and stderr of the shell.\n        \n        Normally you would call L{get_pty} before this, in which case the\n        shell will operate through the pty, and the channel will be connected\n        to the stdin and stdout of the pty.\n        \n        When the shell exits, the channel will be closed and can't be reused.\n        You must open a new channel if you wish to open another shell.\n        \n        @raise SSHException: if the request was rejected or the channel was\n            closed\n        "),
                                                      ('exec_command',
                                                       ['command'],
                                                       "\n        Execute a command on the server.  If the server allows it, the channel\n        will then be directly connected to the stdin, stdout, and stderr of\n        the command being executed.\n        \n        When the command finishes executing, the channel will be closed and\n        can't be reused.  You must open a new channel if you wish to execute\n        another command.\n\n        @param command: a shell command to execute.\n        @type command: str\n\n        @raise SSHException: if the request was rejected or the channel was\n            closed\n        "),
                                                      ('invoke_subsystem',
                                                       ['subsystem'],
                                                       "\n        Request a subsystem on the server (for example, C{sftp}).  If the\n        server allows it, the channel will then be directly connected to the\n        requested subsystem.\n        \n        When the subsystem finishes, the channel will be closed and can't be\n        reused.\n\n        @param subsystem: name of the subsystem being requested.\n        @type subsystem: str\n\n        @raise SSHException: if the request was rejected or the channel was\n            closed\n        "),
                                                      ('resize_pty',
                                                       ['width=80', 'height=24'],
                                                       '\n        Resize the pseudo-terminal.  This can be used to change the width and\n        height of the terminal emulation created in a previous L{get_pty} call.\n\n        @param width: new width (in characters) of the terminal screen\n        @type width: int\n        @param height: new height (in characters) of the terminal screen\n        @type height: int\n\n        @raise SSHException: if the request was rejected or the channel was\n            closed\n        '),
                                                      ('exit_status_ready',
                                                       [],
                                                       "\n        Return true if the remote process has exited and returned an exit\n        status. You may use this to poll the process status if you don't\n        want to block in L{recv_exit_status}. Note that the server may not\n        return an exit status in some cases (like bad servers).\n        \n        @return: True if L{recv_exit_status} will return immediately\n        @rtype: bool\n        @since: 1.7.3\n        "),
                                                      ('recv_exit_status',
                                                       [],
                                                       "\n        Return the exit status from the process on the server.  This is\n        mostly useful for retrieving the reults of an L{exec_command}.\n        If the command hasn't finished yet, this method will wait until\n        it does, or until the channel is closed.  If no exit status is\n        provided by the server, -1 is returned.\n        \n        @return: the exit code of the process on the server.\n        @rtype: int\n        \n        @since: 1.2\n        "),
                                                      ('send_exit_status',
                                                       ['status'],
                                                       '\n        Send the exit status of an executed command to the client.  (This\n        really only makes sense in server mode.)  Many clients expect to\n        get some sort of status code back from an executed command after\n        it completes.\n        \n        @param status: the exit code of the process\n        @type status: int\n        \n        @since: 1.2\n        '),
                                                      ('request_x11',
                                                       ['screen_number=0',
                                                        'auth_protocol=None',
                                                        'auth_cookie=None',
                                                        'single_connection=False',
                                                        'handler=None'],
                                                       '\n        Request an x11 session on this channel.  If the server allows it,\n        further x11 requests can be made from the server to the client,\n        when an x11 application is run in a shell session.\n        \n        From RFC4254::\n\n            It is RECOMMENDED that the \'x11 authentication cookie\' that is\n            sent be a fake, random cookie, and that the cookie be checked and\n            replaced by the real cookie when a connection request is received.\n        \n        If you omit the auth_cookie, a new secure random 128-bit value will be\n        generated, used, and returned.  You will need to use this value to\n        verify incoming x11 requests and replace them with the actual local\n        x11 cookie (which requires some knoweldge of the x11 protocol).\n        \n        If a handler is passed in, the handler is called from another thread\n        whenever a new x11 connection arrives.  The default handler queues up\n        incoming x11 connections, which may be retrieved using\n        L{Transport.accept}.  The handler\'s calling signature is::\n        \n            handler(channel: Channel, (address: str, port: int))\n        \n        @param screen_number: the x11 screen number (0, 10, etc)\n        @type screen_number: int\n        @param auth_protocol: the name of the X11 authentication method used;\n            if none is given, C{"MIT-MAGIC-COOKIE-1"} is used\n        @type auth_protocol: str\n        @param auth_cookie: hexadecimal string containing the x11 auth cookie;\n            if none is given, a secure random 128-bit value is generated\n        @type auth_cookie: str\n        @param single_connection: if True, only a single x11 connection will be\n            forwarded (by default, any number of x11 connections can arrive\n            over this session)\n        @type single_connection: bool\n        @param handler: an optional handler to use for incoming X11 connections\n        @type handler: function\n        @return: the auth_cookie used\n        '),
                                                      ('request_forward_agent',
                                                       ['handler'],
                                                       '\n        Request for a forward SSH Agent on this channel.\n        This is only valid for an ssh-agent from openssh !!!\n\n        @param handler: a required handler to use for incoming SSH Agent connections\n        @type handler: function\n\n        @return: if we are ok or not (at that time we always return ok)\n        @rtype: boolean\n\n        @raise: SSHException in case of channel problem.\n        '),
                                                      ('get_transport',
                                                       [],
                                                       '\n        Return the L{Transport} associated with this channel.\n\n        @return: the L{Transport} that was used to create this channel.\n        @rtype: L{Transport}\n        '),
                                                      ('set_name',
                                                       ['name'],
                                                       "\n        Set a name for this channel.  Currently it's only used to set the name\n        of the channel in logfile entries.  The name can be fetched with the\n        L{get_name} method.\n\n        @param name: new channel name\n        @type name: str\n        "),
                                                      ('get_name',
                                                       [],
                                                       '\n        Get the name of this channel that was previously set by L{set_name}.\n\n        @return: the name of this channel.\n        @rtype: str\n        '),
                                                      ('get_id',
                                                       [],
                                                       "\n        Return the ID # for this channel.  The channel ID is unique across\n        a L{Transport} and usually a small number.  It's also the number\n        passed to L{ServerInterface.check_channel_request} when determining\n        whether to accept a channel request in server mode.\n\n        @return: the ID of this channel.\n        @rtype: int\n        "),
                                                      ('set_combine_stderr',
                                                       ['combine'],
                                                       '\n        Set whether stderr should be combined into stdout on this channel.\n        The default is C{False}, but in some cases it may be convenient to\n        have both streams combined.\n        \n        If this is C{False}, and L{exec_command} is called (or C{invoke_shell}\n        with no pty), output to stderr will not show up through the L{recv}\n        and L{recv_ready} calls.  You will have to use L{recv_stderr} and\n        L{recv_stderr_ready} to get stderr output.\n        \n        If this is C{True}, data will never show up via L{recv_stderr} or\n        L{recv_stderr_ready}.\n        \n        @param combine: C{True} if stderr output should be combined into\n            stdout on this channel.\n        @type combine: bool\n        @return: previous setting.\n        @rtype: bool\n        \n        @since: 1.1\n        '),
                                                      ('settimeout',
                                                       ['timeout'],
                                                       '\n        Set a timeout on blocking read/write operations.  The C{timeout}\n        argument can be a nonnegative float expressing seconds, or C{None}.  If\n        a float is given, subsequent channel read/write operations will raise\n        a timeout exception if the timeout period value has elapsed before the\n        operation has completed.  Setting a timeout of C{None} disables\n        timeouts on socket operations.\n\n        C{chan.settimeout(0.0)} is equivalent to C{chan.setblocking(0)};\n        C{chan.settimeout(None)} is equivalent to C{chan.setblocking(1)}.\n\n        @param timeout: seconds to wait for a pending read/write operation\n            before raising C{socket.timeout}, or C{None} for no timeout.\n        @type timeout: float\n        '),
                                                      ('gettimeout',
                                                       [],
                                                       '\n        Returns the timeout in seconds (as a float) associated with socket\n        operations, or C{None} if no timeout is set.  This reflects the last\n        call to L{setblocking} or L{settimeout}.\n\n        @return: timeout in seconds, or C{None}.\n        @rtype: float\n        '),
                                                      ('setblocking',
                                                       ['blocking'],
                                                       '\n        Set blocking or non-blocking mode of the channel: if C{blocking} is 0,\n        the channel is set to non-blocking mode; otherwise it\'s set to blocking\n        mode. Initially all channels are in blocking mode.\n\n        In non-blocking mode, if a L{recv} call doesn\'t find any data, or if a\n        L{send} call can\'t immediately dispose of the data, an error exception\n        is raised. In blocking mode, the calls block until they can proceed. An\n        EOF condition is considered "immediate data" for L{recv}, so if the\n        channel is closed in the read direction, it will never block.\n\n        C{chan.setblocking(0)} is equivalent to C{chan.settimeout(0)};\n        C{chan.setblocking(1)} is equivalent to C{chan.settimeout(None)}.\n\n        @param blocking: 0 to set non-blocking mode; non-0 to set blocking\n            mode.\n        @type blocking: int\n        '),
                                                      ('getpeername',
                                                       [],
                                                       "\n        Return the address of the remote side of this Channel, if possible.\n        This is just a wrapper around C{'getpeername'} on the Transport, used\n        to provide enough of a socket-like interface to allow asyncore to work.\n        (asyncore likes to call C{'getpeername'}.)\n\n        @return: the address if the remote host, if known\n        @rtype: tuple(str, int)\n        "),
                                                      ('close',
                                                       [],
                                                       '\n        Close the channel.  All future read/write operations on the channel\n        will fail.  The remote end will receive no more data (after queued data\n        is flushed).  Channels are automatically closed when their L{Transport}\n        is closed or when they are garbage collected.\n        '),
                                                      ('recv_ready',
                                                       [],
                                                       '\n        Returns true if data is buffered and ready to be read from this\n        channel.  A C{False} result does not mean that the channel has closed;\n        it means you may need to wait before more data arrives.\n        \n        @return: C{True} if a L{recv} call on this channel would immediately\n            return at least one byte; C{False} otherwise.\n        @rtype: boolean\n        '),
                                                      ('recv',
                                                       ['nbytes'],
                                                       '\n        Receive data from the channel.  The return value is a string\n        representing the data received.  The maximum amount of data to be\n        received at once is specified by C{nbytes}.  If a string of length zero\n        is returned, the channel stream has closed.\n\n        @param nbytes: maximum number of bytes to read.\n        @type nbytes: int\n        @return: data.\n        @rtype: str\n        \n        @raise socket.timeout: if no data is ready before the timeout set by\n            L{settimeout}.\n        '),
                                                      ('recv_stderr_ready',
                                                       [],
                                                       "\n        Returns true if data is buffered and ready to be read from this\n        channel's stderr stream.  Only channels using L{exec_command} or\n        L{invoke_shell} without a pty will ever have data on the stderr\n        stream.\n        \n        @return: C{True} if a L{recv_stderr} call on this channel would\n            immediately return at least one byte; C{False} otherwise.\n        @rtype: boolean\n        \n        @since: 1.1\n        "),
                                                      ('recv_stderr',
                                                       ['nbytes'],
                                                       "\n        Receive data from the channel's stderr stream.  Only channels using\n        L{exec_command} or L{invoke_shell} without a pty will ever have data\n        on the stderr stream.  The return value is a string representing the\n        data received.  The maximum amount of data to be received at once is\n        specified by C{nbytes}.  If a string of length zero is returned, the\n        channel stream has closed.\n\n        @param nbytes: maximum number of bytes to read.\n        @type nbytes: int\n        @return: data.\n        @rtype: str\n        \n        @raise socket.timeout: if no data is ready before the timeout set by\n            L{settimeout}.\n        \n        @since: 1.1\n        "),
                                                      ('send_ready',
                                                       [],
                                                       '\n        Returns true if data can be written to this channel without blocking.\n        This means the channel is either closed (so any write attempt would\n        return immediately) or there is at least one byte of space in the \n        outbound buffer. If there is at least one byte of space in the\n        outbound buffer, a L{send} call will succeed immediately and return\n        the number of bytes actually written.\n        \n        @return: C{True} if a L{send} call on this channel would immediately\n            succeed or fail\n        @rtype: boolean\n        '),
                                                      ('send',
                                                       ['s'],
                                                       '\n        Send data to the channel.  Returns the number of bytes sent, or 0 if\n        the channel stream is closed.  Applications are responsible for\n        checking that all data has been sent: if only some of the data was\n        transmitted, the application needs to attempt delivery of the remaining\n        data.\n\n        @param s: data to send\n        @type s: str\n        @return: number of bytes actually sent\n        @rtype: int\n\n        @raise socket.timeout: if no data could be sent before the timeout set\n            by L{settimeout}.\n        '),
                                                      ('send_stderr',
                                                       ['s'],
                                                       '\n        Send data to the channel on the "stderr" stream.  This is normally\n        only used by servers to send output from shell commands -- clients\n        won\'t use this.  Returns the number of bytes sent, or 0 if the channel\n        stream is closed.  Applications are responsible for checking that all\n        data has been sent: if only some of the data was transmitted, the\n        application needs to attempt delivery of the remaining data.\n        \n        @param s: data to send.\n        @type s: str\n        @return: number of bytes actually sent.\n        @rtype: int\n        \n        @raise socket.timeout: if no data could be sent before the timeout set\n            by L{settimeout}.\n        \n        @since: 1.1\n        '),
                                                      ('sendall',
                                                       ['s'],
                                                       "\n        Send data to the channel, without allowing partial results.  Unlike\n        L{send}, this method continues to send data from the given string until\n        either all data has been sent or an error occurs.  Nothing is returned.\n\n        @param s: data to send.\n        @type s: str\n\n        @raise socket.timeout: if sending stalled for longer than the timeout\n            set by L{settimeout}.\n        @raise socket.error: if an error occured before the entire string was\n            sent.\n        \n        @note: If the channel is closed while only part of the data hase been\n            sent, there is no way to determine how much data (if any) was sent.\n            This is irritating, but identically follows python's API.\n        "),
                                                      ('sendall_stderr',
                                                       ['s'],
                                                       '\n        Send data to the channel\'s "stderr" stream, without allowing partial\n        results.  Unlike L{send_stderr}, this method continues to send data\n        from the given string until all data has been sent or an error occurs.\n        Nothing is returned.\n        \n        @param s: data to send to the client as "stderr" output.\n        @type s: str\n        \n        @raise socket.timeout: if sending stalled for longer than the timeout\n            set by L{settimeout}.\n        @raise socket.error: if an error occured before the entire string was\n            sent.\n            \n        @since: 1.1\n        '),
                                                      ('makefile',
                                                       ['*params'],
                                                       '\n        Return a file-like object associated with this channel.  The optional\n        C{mode} and C{bufsize} arguments are interpreted the same way as by\n        the built-in C{file()} function in python.\n\n        @return: object which can be used for python file I/O.\n        @rtype: L{ChannelFile}\n        '),
                                                      ('makefile_stderr',
                                                       ['*params'],
                                                       "\n        Return a file-like object associated with this channel's stderr\n        stream.   Only channels using L{exec_command} or L{invoke_shell}\n        without a pty will ever have data on the stderr stream.\n        \n        The optional C{mode} and C{bufsize} arguments are interpreted the\n        same way as by the built-in C{file()} function in python.  For a\n        client, it only makes sense to open this file for reading.  For a\n        server, it only makes sense to open this file for writing.\n        \n        @return: object which can be used for python file I/O.\n        @rtype: L{ChannelFile}\n\n        @since: 1.1\n        "),
                                                      ('fileno',
                                                       [],
                                                       "\n        Returns an OS-level file descriptor which can be used for polling, but\n        but I{not} for reading or writing.  This is primaily to allow python's\n        C{select} module to work.\n\n        The first time C{fileno} is called on a channel, a pipe is created to\n        simulate real OS-level file descriptor (FD) behavior.  Because of this,\n        two OS-level FDs are created, which will use up FDs faster than normal.\n        (You won't notice this effect unless you have hundreds of channels\n        open at the same time.)\n\n        @return: an OS-level file descriptor\n        @rtype: int\n        \n        @warning: This method causes channel reads to be slightly less\n            efficient.\n        "),
                                                      ('shutdown',
                                                       ['how'],
                                                       '\n        Shut down one or both halves of the connection.  If C{how} is 0,\n        further receives are disallowed.  If C{how} is 1, further sends\n        are disallowed.  If C{how} is 2, further sends and receives are\n        disallowed.  This closes the stream in one or both directions.\n\n        @param how: 0 (stop receiving), 1 (stop sending), or 2 (stop\n            receiving and sending).\n        @type how: int\n        '),
                                                      ('shutdown_read',
                                                       [],
                                                       "\n        Shutdown the receiving side of this socket, closing the stream in\n        the incoming direction.  After this call, future reads on this\n        channel will fail instantly.  This is a convenience method, equivalent\n        to C{shutdown(0)}, for people who don't make it a habit to\n        memorize unix constants from the 1970s.\n        \n        @since: 1.2\n        "),
                                                      ('shutdown_write',
                                                       [],
                                                       "\n        Shutdown the sending side of this socket, closing the stream in\n        the outgoing direction.  After this call, future writes on this\n        channel will fail instantly.  This is a convenience method, equivalent\n        to C{shutdown(1)}, for people who don't make it a habit to\n        memorize unix constants from the 1970s.\n        \n        @since: 1.2\n        "),
                                                      ('_set_transport', ['transport'], ''),
                                                      ('_set_window',
                                                       ['window_size', 'max_packet_size'],
                                                       ''),
                                                      ('_set_remote_channel',
                                                       ['chanid',
                                                        'window_size',
                                                        'max_packet_size'],
                                                       ''),
                                                      ('_request_success', ['m'], ''),
                                                      ('_request_failed', ['m'], ''),
                                                      ('_feed', ['m'], ''),
                                                      ('_feed_extended', ['m'], ''),
                                                      ('_window_adjust', ['m'], ''),
                                                      ('_handle_request', ['m'], ''),
                                                      ('_handle_eof', ['m'], ''),
                                                      ('_handle_close', ['m'], ''),
                                                      ('_log', ['level', 'msg', '*args'], ''),
                                                      ('_event_pending', [], ''),
                                                      ('_wait_for_event', [], ''),
                                                      ('_set_closed', [], ''),
                                                      ('_send_eof', [], ''),
                                                      ('_close_internal', [], ''),
                                                      ('_unlink', [], ''),
                                                      ('_check_add_window', ['n'], ''),
                                                      ('_wait_for_send_window',
                                                       ['size'],
                                                       '\n        (You are already holding the lock.)\n        Wait for the send window to open up, and allocate up to C{size} bytes\n        for transmission.  If no space opens up before the timeout, a timeout\n        exception is raised.  Returns the number of bytes available to send\n        (may be less than requested).\n        ')],
                                          'properties': ['chanid',
                                                         'remote_chanid',
                                                         'transport',
                                                         'active',
                                                         'eof_received',
                                                         'eof_sent',
                                                         'in_buffer',
                                                         'in_stderr_buffer',
                                                         'timeout',
                                                         'closed',
                                                         'ultra_debug',
                                                         'lock',
                                                         'out_buffer_cv',
                                                         'in_window_size',
                                                         'out_window_size',
                                                         'in_max_packet_size',
                                                         'out_max_packet_size',
                                                         'in_window_threshold',
                                                         'in_window_sofar',
                                                         'status_event',
                                                         '_name',
                                                         'logger',
                                                         '_pipe',
                                                         'event',
                                                         'event_ready',
                                                         'combine_stderr',
                                                         'exit_status',
                                                         'origin_addr']},
             'paramiko.channel.ChannelFile': {'bases': ['paramiko.file.BufferedFile'],
                                              'constructor': ['channel',
                                                              "mode='r'",
                                                              'bufsize=-1'],
                                              'docstring': "\n    A file-like wrapper around L{Channel}.  A ChannelFile is created by calling\n    L{Channel.makefile}.\n\n    @bug: To correctly emulate the file object created from a socket's\n        C{makefile} method, a L{Channel} and its C{ChannelFile} should be able\n        to be closed or garbage-collected independently.  Currently, closing\n        the C{ChannelFile} does nothing but flush the buffer.\n    ",
                                              'methods': [('__repr__',
                                                           [],
                                                           '\n        Returns a string representation of this object, for debugging.\n\n        @rtype: str\n        '),
                                                          ('_read', ['size'], ''),
                                                          ('_write', ['data'], '')],
                                              'properties': ['channel']},
             'paramiko.channel.ChannelStderrFile': {'bases': ['paramiko.channel.ChannelFile'],
                                                    'constructor': ['channel',
                                                                    "mode='r'",
                                                                    'bufsize=-1'],
                                                    'docstring': '',
                                                    'methods': [('_read', ['size'], ''),
                                                                ('_write', ['data'], '')],
                                                    'properties': []},
             'paramiko.client.AutoAddPolicy': {'bases': ['paramiko.client.MissingHostKeyPolicy'],
                                               'constructor': [],
                                               'docstring': '\n    Policy for automatically adding the hostname and new host key to the\n    local L{HostKeys} object, and saving it.  This is used by L{SSHClient}.\n    ',
                                               'methods': [('missing_host_key',
                                                            ['client', 'hostname', 'key'],
                                                            '')],
                                               'properties': []},
             'paramiko.client.MissingHostKeyPolicy': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': "\n    Interface for defining the policy that L{SSHClient} should use when the\n    SSH server's hostname is not in either the system host keys or the\n    application's keys.  Pre-made classes implement policies for automatically\n    adding the key to the application's L{HostKeys} object (L{AutoAddPolicy}),\n    and for automatically rejecting the key (L{RejectPolicy}).\n\n    This function may be used to ask the user to verify the key, for example.\n    ",
                                                      'methods': [('missing_host_key',
                                                                   ['client',
                                                                    'hostname',
                                                                    'key'],
                                                                   "\n        Called when an L{SSHClient} receives a server key for a server that\n        isn't in either the system or local L{HostKeys} object.  To accept\n        the key, simply return.  To reject, raised an exception (which will\n        be passed to the calling application).\n        ")],
                                                      'properties': []},
             'paramiko.client.RejectPolicy': {'bases': ['paramiko.client.MissingHostKeyPolicy'],
                                              'constructor': [],
                                              'docstring': '\n    Policy for automatically rejecting the unknown hostname & key.  This is\n    used by L{SSHClient}.\n    ',
                                              'methods': [('missing_host_key',
                                                           ['client', 'hostname', 'key'],
                                                           '')],
                                              'properties': []},
             'paramiko.client.SSHClient': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': "\n    A high-level representation of a session with an SSH server.  This class\n    wraps L{Transport}, L{Channel}, and L{SFTPClient} to take care of most\n    aspects of authenticating and opening channels.  A typical use case is::\n\n        client = SSHClient()\n        client.load_system_host_keys()\n        client.connect('ssh.example.com')\n        stdin, stdout, stderr = client.exec_command('ls -l')\n\n    You may pass in explicit overrides for authentication and server host key\n    checking.  The default mechanism is to try to use local key files or an\n    SSH agent (if one is running).\n\n    @since: 1.6\n    ",
                                           'methods': [('load_system_host_keys',
                                                        ['filename=None'],
                                                        '\n        Load host keys from a system (read-only) file.  Host keys read with\n        this method will not be saved back by L{save_host_keys}.\n\n        This method can be called multiple times.  Each new set of host keys\n        will be merged with the existing set (new replacing old if there are\n        conflicts).\n\n        If C{filename} is left as C{None}, an attempt will be made to read\n        keys from the user\'s local "known hosts" file, as used by OpenSSH,\n        and no exception will be raised if the file can\'t be read.  This is\n        probably only useful on posix.\n\n        @param filename: the filename to read, or C{None}\n        @type filename: str\n\n        @raise IOError: if a filename was provided and the file could not be\n            read\n        '),
                                                       ('load_host_keys',
                                                        ['filename'],
                                                        '\n        Load host keys from a local host-key file.  Host keys read with this\n        method will be checked I{after} keys loaded via L{load_system_host_keys},\n        but will be saved back by L{save_host_keys} (so they can be modified).\n        The missing host key policy L{AutoAddPolicy} adds keys to this set and\n        saves them, when connecting to a previously-unknown server.\n\n        This method can be called multiple times.  Each new set of host keys\n        will be merged with the existing set (new replacing old if there are\n        conflicts).  When automatically saving, the last hostname is used.\n\n        @param filename: the filename to read\n        @type filename: str\n\n        @raise IOError: if the filename could not be read\n        '),
                                                       ('save_host_keys',
                                                        ['filename'],
                                                        '\n        Save the host keys back to a file.  Only the host keys loaded with\n        L{load_host_keys} (plus any added directly) will be saved -- not any\n        host keys loaded with L{load_system_host_keys}.\n\n        @param filename: the filename to save to\n        @type filename: str\n\n        @raise IOError: if the file could not be written\n        '),
                                                       ('get_host_keys',
                                                        [],
                                                        '\n        Get the local L{HostKeys} object.  This can be used to examine the\n        local host keys or change them.\n\n        @return: the local host keys\n        @rtype: L{HostKeys}\n        '),
                                                       ('set_log_channel',
                                                        ['name'],
                                                        '\n        Set the channel for logging.  The default is C{"paramiko.transport"}\n        but it can be set to anything you want.\n\n        @param name: new channel name for logging\n        @type name: str\n        '),
                                                       ('set_missing_host_key_policy',
                                                        ['policy'],
                                                        "\n        Set the policy to use when connecting to a server that doesn't have a\n        host key in either the system or local L{HostKeys} objects.  The\n        default policy is to reject all unknown servers (using L{RejectPolicy}).\n        You may substitute L{AutoAddPolicy} or write your own policy class.\n\n        @param policy: the policy to use when receiving a host key from a\n            previously-unknown server\n        @type policy: L{MissingHostKeyPolicy}\n        "),
                                                       ('connect',
                                                        ['hostname',
                                                         'port=SSH_PORT',
                                                         'username=None',
                                                         'password=None',
                                                         'pkey=None',
                                                         'key_filename=None',
                                                         'timeout=None',
                                                         'allow_agent=True',
                                                         'look_for_keys=True',
                                                         'compress=False',
                                                         'sock=None'],
                                                        '\n        Connect to an SSH server and authenticate to it.  The server\'s host key\n        is checked against the system host keys (see L{load_system_host_keys})\n        and any local host keys (L{load_host_keys}).  If the server\'s hostname\n        is not found in either set of host keys, the missing host key policy\n        is used (see L{set_missing_host_key_policy}).  The default policy is\n        to reject the key and raise an L{SSHException}.\n\n        Authentication is attempted in the following order of priority:\n\n            - The C{pkey} or C{key_filename} passed in (if any)\n            - Any key we can find through an SSH agent\n            - Any "id_rsa" or "id_dsa" key discoverable in C{~/.ssh/}\n            - Plain username/password auth, if a password was given\n\n        If a private key requires a password to unlock it, and a password is\n        passed in, that password will be used to attempt to unlock the key.\n\n        @param hostname: the server to connect to\n        @type hostname: str\n        @param port: the server port to connect to\n        @type port: int\n        @param username: the username to authenticate as (defaults to the\n            current local username)\n        @type username: str\n        @param password: a password to use for authentication or for unlocking\n            a private key\n        @type password: str\n        @param pkey: an optional private key to use for authentication\n        @type pkey: L{PKey}\n        @param key_filename: the filename, or list of filenames, of optional\n            private key(s) to try for authentication\n        @type key_filename: str or list(str)\n        @param timeout: an optional timeout (in seconds) for the TCP connect\n        @type timeout: float\n        @param allow_agent: set to False to disable connecting to the SSH agent\n        @type allow_agent: bool\n        @param look_for_keys: set to False to disable searching for discoverable\n            private key files in C{~/.ssh/}\n        @type look_for_keys: bool\n        @param compress: set to True to turn on compression\n        @type compress: bool\n        @param sock: an open socket or socket-like object (such as a\n            L{Channel}) to use for communication to the target host\n        @type sock: socket\n\n        @raise BadHostKeyException: if the server\'s host key could not be\n            verified\n        @raise AuthenticationException: if authentication failed\n        @raise SSHException: if there was any other error connecting or\n            establishing an SSH session\n        @raise socket.error: if a socket error occurred while connecting\n        '),
                                                       ('close',
                                                        [],
                                                        '\n        Close this SSHClient and its underlying L{Transport}.\n        '),
                                                       ('exec_command',
                                                        ['command', 'bufsize=-1'],
                                                        "\n        Execute a command on the SSH server.  A new L{Channel} is opened and\n        the requested command is executed.  The command's input and output\n        streams are returned as python C{file}-like objects representing\n        stdin, stdout, and stderr.\n\n        @param command: the command to execute\n        @type command: str\n        @param bufsize: interpreted the same way as by the built-in C{file()} function in python\n        @type bufsize: int\n        @return: the stdin, stdout, and stderr of the executing command\n        @rtype: tuple(L{ChannelFile}, L{ChannelFile}, L{ChannelFile})\n\n        @raise SSHException: if the server fails to execute the command\n        "),
                                                       ('invoke_shell',
                                                        ["term='vt100'",
                                                         'width=80',
                                                         'height=24'],
                                                        '\n        Start an interactive shell session on the SSH server.  A new L{Channel}\n        is opened and connected to a pseudo-terminal using the requested\n        terminal type and size.\n\n        @param term: the terminal type to emulate (for example, C{"vt100"})\n        @type term: str\n        @param width: the width (in characters) of the terminal window\n        @type width: int\n        @param height: the height (in characters) of the terminal window\n        @type height: int\n        @return: a new channel connected to the remote shell\n        @rtype: L{Channel}\n\n        @raise SSHException: if the server fails to invoke a shell\n        '),
                                                       ('open_sftp',
                                                        [],
                                                        '\n        Open an SFTP session on the SSH server.\n\n        @return: a new SFTP session object\n        @rtype: L{SFTPClient}\n        '),
                                                       ('get_transport',
                                                        [],
                                                        '\n        Return the underlying L{Transport} object for this SSH connection.\n        This can be used to perform lower-level tasks, like opening specific\n        kinds of channels.\n\n        @return: the Transport for this connection\n        @rtype: L{Transport}\n        '),
                                                       ('_auth',
                                                        ['username',
                                                         'password',
                                                         'pkey',
                                                         'key_filenames',
                                                         'allow_agent',
                                                         'look_for_keys'],
                                                        '\n        Try, in order:\n\n            - The key passed in, if one was passed in.\n            - Any key we can find through an SSH agent (if allowed).\n            - Any "id_rsa" or "id_dsa" key discoverable in ~/.ssh/ (if allowed).\n            - Plain username/password auth, if a password was given.\n\n        (The password might be needed to unlock a private key, or for\n        two-factor authentication [for which it is required].)\n        '),
                                                       ('_log', ['level', 'msg'], '')],
                                           'properties': ['_system_host_keys',
                                                          '_host_keys',
                                                          '_host_keys_filename',
                                                          '_log_channel',
                                                          '_policy',
                                                          '_transport',
                                                          '_agent']},
             'paramiko.client.WarningPolicy': {'bases': ['paramiko.client.MissingHostKeyPolicy'],
                                               'constructor': [],
                                               'docstring': '\n    Policy for logging a python-style warning for an unknown host key, but\n    accepting it. This is used by L{SSHClient}.\n    ',
                                               'methods': [('missing_host_key',
                                                            ['client', 'hostname', 'key'],
                                                            '')],
                                               'properties': []},
             'paramiko.common.timeout': {'bases': ['socket.error'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'paramiko.compress.ZlibCompressor': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('__call__', ['data'], '')],
                                                  'properties': ['z']},
             'paramiko.compress.ZlibDecompressor': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('__call__', ['data'], '')],
                                                    'properties': ['z']},
             'paramiko.config.SSHConfig': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': "\n    Representation of config information as stored in the format used by\n    OpenSSH. Queries can be made via L{lookup}. The format is described in\n    OpenSSH's C{ssh_config} man page. This class is provided primarily as a\n    convenience to posix users (since the OpenSSH format is a de-facto\n    standard on posix) but should work fine on Windows too.\n\n    @since: 1.6\n    ",
                                           'methods': [('parse',
                                                        ['file_obj'],
                                                        '\n        Read an OpenSSH config from the given file object.\n\n        @param file_obj: a file-like object to read the config file from\n        @type file_obj: file\n        '),
                                                       ('lookup',
                                                        ['hostname'],
                                                        '\n        Return a dict of config options for a given hostname.\n\n        The host-matching rules of OpenSSH\'s C{ssh_config} man page are used,\n        which means that all configuration options from matching host\n        specifications are merged, with more specific hostmasks taking\n        precedence. In other words, if C{"Port"} is set under C{"Host *"}\n        and also C{"Host *.example.com"}, and the lookup is for\n        C{"ssh.example.com"}, then the port entry for C{"Host *.example.com"}\n        will win out.\n\n        The keys in the returned dict are all normalized to lowercase (look for\n        C{"port"}, not C{"Port"}. No other processing is done to the keys or\n        values.\n\n        @param hostname: the hostname to lookup\n        @type hostname: str\n        '),
                                                       ('_expand_variables',
                                                        ['config', 'hostname'],
                                                        '\n        Return a dict of config options with expanded substitutions\n        for a given hostname.\n\n        Please refer to man ssh_config(5) for the parameters that\n        are replaced.\n\n        @param config: the config for the hostname\n        @type hostname: dict\n        @param hostname: the hostname that the config belongs to\n        @type hostname: str\n        ')],
                                           'properties': ['_config']},
             'paramiko.file.BufferedFile': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': '\n    Reusable base class to implement python-style file buffering around a\n    simpler stream.\n    ',
                                            'methods': [('__del__', [], ''),
                                                        ('__iter__',
                                                         [],
                                                         '\n        Returns an iterator that can be used to iterate over the lines in this\n        file.  This iterator happens to return the file itself, since a file is\n        its own iterator.\n\n        @raise ValueError: if the file is closed.\n        \n        @return: an interator.\n        @rtype: iterator\n        '),
                                                        ('close',
                                                         [],
                                                         '\n        Close the file.  Future read and write operations will fail.\n        '),
                                                        ('flush',
                                                         [],
                                                         '\n        Write out any data in the write buffer.  This may do nothing if write\n        buffering is not turned on.\n        '),
                                                        ('next',
                                                         [],
                                                         "\n        Returns the next line from the input, or raises L{StopIteration} when\n        EOF is hit.  Unlike python file objects, it's okay to mix calls to\n        C{next} and L{readline}.\n\n        @raise StopIteration: when the end of the file is reached.\n\n        @return: a line read from the file.\n        @rtype: str\n        "),
                                                        ('read',
                                                         ['size=None'],
                                                         '\n        Read at most C{size} bytes from the file (less if we hit the end of the\n        file first).  If the C{size} argument is negative or omitted, read all\n        the remaining data in the file.\n\n        @param size: maximum number of bytes to read\n        @type size: int\n        @return: data read from the file, or an empty string if EOF was\n            encountered immediately\n        @rtype: str\n        '),
                                                        ('readline',
                                                         ['size=None'],
                                                         "\n        Read one entire line from the file.  A trailing newline character is\n        kept in the string (but may be absent when a file ends with an\n        incomplete line).  If the size argument is present and non-negative, it\n        is a maximum byte count (including the trailing newline) and an\n        incomplete line may be returned.  An empty string is returned only when\n        EOF is encountered immediately.\n\n        @note: Unlike stdio's C{fgets()}, the returned string contains null\n        characters (C{'\\0'}) if they occurred in the input.\n\n        @param size: maximum length of returned string.\n        @type size: int\n        @return: next line of the file, or an empty string if the end of the\n            file has been reached.\n        @rtype: str\n        "),
                                                        ('readlines',
                                                         ['sizehint=None'],
                                                         '\n        Read all remaining lines using L{readline} and return them as a list.\n        If the optional C{sizehint} argument is present, instead of reading up\n        to EOF, whole lines totalling approximately sizehint bytes (possibly\n        after rounding up to an internal buffer size) are read.\n\n        @param sizehint: desired maximum number of bytes to read.\n        @type sizehint: int\n        @return: list of lines read from the file.\n        @rtype: list\n        '),
                                                        ('seek',
                                                         ['offset', 'whence=0'],
                                                         "\n        Set the file's current position, like stdio's C{fseek}.  Not all file\n        objects support seeking.\n\n        @note: If a file is opened in append mode (C{'a'} or C{'a+'}), any seek\n            operations will be undone at the next write (as the file position\n            will move back to the end of the file).\n        \n        @param offset: position to move to within the file, relative to\n            C{whence}.\n        @type offset: int\n        @param whence: type of movement: 0 = absolute; 1 = relative to the\n            current position; 2 = relative to the end of the file.\n        @type whence: int\n\n        @raise IOError: if the file doesn't support random access.\n        "),
                                                        ('tell',
                                                         [],
                                                         "\n        Return the file's current position.  This may not be accurate or\n        useful if the underlying file doesn't support random access, or was\n        opened in append mode.\n\n        @return: file position (in bytes).\n        @rtype: int\n        "),
                                                        ('write',
                                                         ['data'],
                                                         '\n        Write data to the file.  If write buffering is on (C{bufsize} was\n        specified and non-zero), some or all of the data may not actually be\n        written yet.  (Use L{flush} or L{close} to force buffered data to be\n        written out.)\n\n        @param data: data to write.\n        @type data: str\n        '),
                                                        ('writelines',
                                                         ['sequence'],
                                                         '\n        Write a sequence of strings to the file.  The sequence can be any\n        iterable object producing strings, typically a list of strings.  (The\n        name is intended to match L{readlines}; C{writelines} does not add line\n        separators.)\n\n        @param sequence: an iterable sequence of strings.\n        @type sequence: sequence\n        '),
                                                        ('xreadlines',
                                                         [],
                                                         '\n        Identical to C{iter(f)}.  This is a deprecated file interface that\n        predates python iterator support.\n\n        @return: an iterator.\n        @rtype: iterator\n        '),
                                                        ('_read',
                                                         ['size'],
                                                         '\n        I{(subclass override)}\n        Read data from the stream.  Return C{None} or raise C{EOFError} to\n        indicate EOF.\n        '),
                                                        ('_write',
                                                         ['data'],
                                                         '\n        I{(subclass override)}\n        Write data into the stream.\n        '),
                                                        ('_get_size',
                                                         [],
                                                         "\n        I{(subclass override)}\n        Return the size of the file.  This is called from within L{_set_mode}\n        if the file is opened in append mode, so the file position can be\n        tracked and L{seek} and L{tell} will work correctly.  If the file is\n        a stream that can't be randomly accessed, you don't need to override\n        this method,\n        "),
                                                        ('_set_mode',
                                                         ["mode='r'", 'bufsize=-1'],
                                                         '\n        Subclasses call this method to initialize the BufferedFile.\n        '),
                                                        ('_write_all', ['data'], ''),
                                                        ('_record_newline', ['newline'], '')],
                                            'properties': ['_DEFAULT_BUFSIZE',
                                                           'SEEK_SET',
                                                           'SEEK_CUR',
                                                           'SEEK_END',
                                                           'FLAG_READ',
                                                           'FLAG_WRITE',
                                                           'FLAG_APPEND',
                                                           'FLAG_BINARY',
                                                           'FLAG_BUFFERED',
                                                           'FLAG_LINE_BUFFERED',
                                                           'FLAG_UNIVERSAL_NEWLINE',
                                                           'newlines',
                                                           '_flags',
                                                           '_bufsize',
                                                           '_wbuffer',
                                                           '_rbuffer',
                                                           '_at_trailing_cr',
                                                           '_closed',
                                                           '_pos',
                                                           '_realpos',
                                                           '_size']},
             'paramiko.hostkeys.HostKeyEntry': {'bases': [],
                                                'constructor': ['hostnames=None', 'key=None'],
                                                'docstring': '\n    Representation of a line in an OpenSSH-style "known hosts" file.\n    ',
                                                'methods': [('from_line',
                                                             ['line'],
                                                             "\n        Parses the given line of text to find the names for the host,\n        the type of key, and the key data. The line is expected to be in the\n        format used by the openssh known_hosts file.\n\n        Lines are expected to not have leading or trailing whitespace.\n        We don't bother to check for comments or empty lines.  All of\n        that should be taken care of before sending the line to us.\n\n        @param line: a line from an OpenSSH known_hosts file\n        @type line: str\n        "),
                                                            ('to_line',
                                                             [],
                                                             '\n        Returns a string in OpenSSH known_hosts file format, or None if\n        the object is not in a valid state.  A trailing newline is\n        included.\n        '),
                                                            ('__repr__', [], '')],
                                                'properties': ['valid',
                                                               'hostnames',
                                                               'key',
                                                               'from_line']},
             'paramiko.hostkeys.HostKeys': {'bases': ['UserDict.DictMixin'],
                                            'constructor': ['filename=None'],
                                            'docstring': '\n    Representation of an openssh-style "known hosts" file.  Host keys can be\n    read from one or more files, and then individual hosts can be looked up to\n    verify server keys during SSH negotiation.\n\n    A HostKeys object can be treated like a dict; any dict lookup is equivalent\n    to calling L{lookup}.\n\n    @since: 1.5.3\n    ',
                                            'methods': [('add',
                                                         ['hostname', 'keytype', 'key'],
                                                         '\n        Add a host key entry to the table.  Any existing entry for a\n        C{(hostname, keytype)} pair will be replaced.\n\n        @param hostname: the hostname (or IP) to add\n        @type hostname: str\n        @param keytype: key type (C{"ssh-rsa"} or C{"ssh-dss"})\n        @type keytype: str\n        @param key: the key to add\n        @type key: L{PKey}\n        '),
                                                        ('load',
                                                         ['filename'],
                                                         '\n        Read a file of known SSH host keys, in the format used by openssh.\n        This type of file unfortunately doesn\'t exist on Windows, but on\n        posix, it will usually be stored in\n        C{os.path.expanduser("~/.ssh/known_hosts")}.\n\n        If this method is called multiple times, the host keys are merged,\n        not cleared.  So multiple calls to C{load} will just call L{add},\n        replacing any existing entries and adding new ones.\n\n        @param filename: name of the file to read host keys from\n        @type filename: str\n\n        @raise IOError: if there was an error reading the file\n        '),
                                                        ('save',
                                                         ['filename'],
                                                         '\n        Save host keys into a file, in the format used by openssh.  The order of\n        keys in the file will be preserved when possible (if these keys were\n        loaded from a file originally).  The single exception is that combined\n        lines will be split into individual key lines, which is arguably a bug.\n\n        @param filename: name of the file to write\n        @type filename: str\n\n        @raise IOError: if there was an error writing the file\n\n        @since: 1.6.1\n        '),
                                                        ('lookup',
                                                         ['hostname'],
                                                         '\n        Find a hostkey entry for a given hostname or IP.  If no entry is found,\n        C{None} is returned.  Otherwise a dictionary of keytype to key is\n        returned.  The keytype will be either C{"ssh-rsa"} or C{"ssh-dss"}.\n\n        @param hostname: the hostname (or IP) to lookup\n        @type hostname: str\n        @return: keys associated with this host (or C{None})\n        @rtype: dict(str, L{PKey})\n        '),
                                                        ('check',
                                                         ['hostname', 'key'],
                                                         '\n        Return True if the given key is associated with the given hostname\n        in this dictionary.\n\n        @param hostname: hostname (or IP) of the SSH server\n        @type hostname: str\n        @param key: the key to check\n        @type key: L{PKey}\n        @return: C{True} if the key is associated with the hostname; C{False}\n            if not\n        @rtype: bool\n        '),
                                                        ('clear',
                                                         [],
                                                         '\n        Remove all host keys from the dictionary.\n        '),
                                                        ('__getitem__', ['key'], ''),
                                                        ('__setitem__',
                                                         ['hostname', 'entry'],
                                                         ''),
                                                        ('keys', [], ''),
                                                        ('values', [], ''),
                                                        ('hash_host',
                                                         ['salt=None'],
                                                         '\n        Return a "hashed" form of the hostname, as used by openssh when storing\n        hashed hostnames in the known_hosts file.\n\n        @param hostname: the hostname to hash\n        @type hostname: str\n        @param salt: optional salt to use when hashing (must be 20 bytes long)\n        @type salt: str\n        @return: the hashed hostname\n        @rtype: str\n        ')],
                                            'properties': ['_entries', 'hash_host']},
             'paramiko.hostkeys.InvalidHostKey': {'bases': ['Exception'],
                                                  'constructor': ['line', 'exc'],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['line', 'exc', 'args']},
             'paramiko.kex_gex.KexGex': {'bases': ['object'],
                                         'constructor': ['transport'],
                                         'docstring': '',
                                         'methods': [('start_kex',
                                                      ['_test_old_style=False'],
                                                      ''),
                                                     ('parse_next', ['ptype', 'm'], ''),
                                                     ('_generate_x', [], ''),
                                                     ('_parse_kexdh_gex_request', ['m'], ''),
                                                     ('_parse_kexdh_gex_request_old',
                                                      ['m'],
                                                      ''),
                                                     ('_parse_kexdh_gex_group', ['m'], ''),
                                                     ('_parse_kexdh_gex_init', ['m'], ''),
                                                     ('_parse_kexdh_gex_reply', ['m'], '')],
                                         'properties': ['name',
                                                        'min_bits',
                                                        'max_bits',
                                                        'preferred_bits',
                                                        'transport',
                                                        'p',
                                                        'q',
                                                        'g',
                                                        'x',
                                                        'e',
                                                        'f',
                                                        'old_style']},
             'paramiko.kex_group1.KexGroup1': {'bases': ['object'],
                                               'constructor': ['transport'],
                                               'docstring': '',
                                               'methods': [('start_kex', [], ''),
                                                           ('parse_next', ['ptype', 'm'], ''),
                                                           ('_generate_x', [], ''),
                                                           ('_parse_kexdh_reply', ['m'], ''),
                                                           ('_parse_kexdh_init', ['m'], '')],
                                               'properties': ['name',
                                                              'transport',
                                                              'x',
                                                              'e',
                                                              'f']},
             'paramiko.logging22.Formatter': {'bases': ['object'],
                                              'constructor': ['x', 'y'],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'paramiko.logging22.StreamHandler': {'bases': ['object'],
                                                  'constructor': ['f'],
                                                  'docstring': '',
                                                  'methods': [('setFormatter', ['f'], '')],
                                                  'properties': ['f']},
             'paramiko.logging22.logger': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('setLevel', ['level'], ''),
                                                       ('addHandler', ['h'], ''),
                                                       ('addFilter', ['filter'], ''),
                                                       ('log', ['level', 'text'], '')],
                                           'properties': ['handlers', 'level']},
             'paramiko.message.Message': {'bases': ['object'],
                                          'constructor': ['content=None'],
                                          'docstring': "\n    An SSH2 I{Message} is a stream of bytes that encodes some combination of\n    strings, integers, bools, and infinite-precision integers (known in python\n    as I{long}s).  This class builds or breaks down such a byte stream.\n    \n    Normally you don't need to deal with anything this low-level, but it's\n    exposed for people implementing custom extensions, or features that\n    paramiko doesn't support yet.\n    ",
                                          'methods': [('__str__',
                                                       [],
                                                       '\n        Return the byte stream content of this Message, as a string.\n\n        @return: the contents of this Message.\n        @rtype: string\n        '),
                                                      ('__repr__',
                                                       [],
                                                       '\n        Returns a string representation of this object, for debugging.\n\n        @rtype: string\n        '),
                                                      ('rewind',
                                                       [],
                                                       '\n        Rewind the message to the beginning as if no items had been parsed\n        out of it yet.\n        '),
                                                      ('get_remainder',
                                                       [],
                                                       "\n        Return the bytes of this Message that haven't already been parsed and\n        returned.\n\n        @return: a string of the bytes not parsed yet.\n        @rtype: string\n        "),
                                                      ('get_so_far',
                                                       [],
                                                       "\n        Returns the bytes of this Message that have been parsed and returned.\n        The string passed into a Message's constructor can be regenerated by\n        concatenating C{get_so_far} and L{get_remainder}.\n\n        @return: a string of the bytes parsed so far.\n        @rtype: string\n        "),
                                                      ('get_bytes',
                                                       ['n'],
                                                       "\n        Return the next C{n} bytes of the Message, without decomposing into\n        an int, string, etc.  Just the raw bytes are returned.\n\n        @return: a string of the next C{n} bytes of the Message, or a string\n            of C{n} zero bytes, if there aren't C{n} bytes remaining.\n        @rtype: string\n        "),
                                                      ('get_byte',
                                                       [],
                                                       "\n        Return the next byte of the Message, without decomposing it.  This\n        is equivalent to L{get_bytes(1)<get_bytes>}.\n\n        @return: the next byte of the Message, or C{'\x00'} if there aren't\n            any bytes remaining.\n        @rtype: string\n        "),
                                                      ('get_boolean',
                                                       [],
                                                       '\n        Fetch a boolean from the stream.\n\n        @return: C{True} or C{False} (from the Message).\n        @rtype: bool\n        '),
                                                      ('get_int',
                                                       [],
                                                       '\n        Fetch an int from the stream.\n\n        @return: a 32-bit unsigned integer.\n        @rtype: int\n        '),
                                                      ('get_int64',
                                                       [],
                                                       '\n        Fetch a 64-bit int from the stream.\n\n        @return: a 64-bit unsigned integer.\n        @rtype: long\n        '),
                                                      ('get_mpint',
                                                       [],
                                                       '\n        Fetch a long int (mpint) from the stream.\n\n        @return: an arbitrary-length integer.\n        @rtype: long\n        '),
                                                      ('get_string',
                                                       [],
                                                       "\n        Fetch a string from the stream.  This could be a byte string and may\n        contain unprintable characters.  (It's not unheard of for a string to\n        contain another byte-stream Message.)\n\n        @return: a string.\n        @rtype: string\n        "),
                                                      ('get_list',
                                                       [],
                                                       '\n        Fetch a list of strings from the stream.  These are trivially encoded\n        as comma-separated values in a string.\n\n        @return: a list of strings.\n        @rtype: list of strings\n        '),
                                                      ('add_bytes',
                                                       ['b'],
                                                       '\n        Write bytes to the stream, without any formatting.\n        \n        @param b: bytes to add\n        @type b: str\n        '),
                                                      ('add_byte',
                                                       ['b'],
                                                       '\n        Write a single byte to the stream, without any formatting.\n        \n        @param b: byte to add\n        @type b: str\n        '),
                                                      ('add_boolean',
                                                       ['b'],
                                                       '\n        Add a boolean value to the stream.\n        \n        @param b: boolean value to add\n        @type b: bool\n        '),
                                                      ('add_int',
                                                       ['n'],
                                                       '\n        Add an integer to the stream.\n        \n        @param n: integer to add\n        @type n: int\n        '),
                                                      ('add_int64',
                                                       ['n'],
                                                       '\n        Add a 64-bit int to the stream.\n\n        @param n: long int to add\n        @type n: long\n        '),
                                                      ('add_mpint',
                                                       ['z'],
                                                       '\n        Add a long int to the stream, encoded as an infinite-precision\n        integer.  This method only works on positive numbers.\n        \n        @param z: long int to add\n        @type z: long\n        '),
                                                      ('add_string',
                                                       ['s'],
                                                       '\n        Add a string to the stream.\n        \n        @param s: string to add\n        @type s: str\n        '),
                                                      ('add_list',
                                                       ['l'],
                                                       "\n        Add a list of strings to the stream.  They are encoded identically to\n        a single string of values separated by commas.  (Yes, really, that's\n        how SSH2 does it.)\n        \n        @param l: list of strings to add\n        @type l: list(str)\n        "),
                                                      ('_add', ['i'], ''),
                                                      ('add',
                                                       ['*seq'],
                                                       "\n        Add a sequence of items to the stream.  The values are encoded based\n        on their type: str, int, bool, list, or long.\n        \n        @param seq: the sequence of items\n        @type seq: sequence\n        \n        @bug: longs are encoded non-deterministically.  Don't use this method.\n        ")],
                                          'properties': ['packet']},
             'paramiko.packet.NeedRekeyException': {'bases': ['Exception'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'paramiko.packet.Packetizer': {'bases': ['object'],
                                            'constructor': ['socket'],
                                            'docstring': '\n    Implementation of the base SSH packet protocol.\n    ',
                                            'methods': [('set_log',
                                                         ['log'],
                                                         '\n        Set the python log object to use for logging.\n        '),
                                                        ('set_outbound_cipher',
                                                         ['block_engine',
                                                          'block_size',
                                                          'mac_engine',
                                                          'mac_size',
                                                          'mac_key'],
                                                         '\n        Switch outbound data cipher.\n        '),
                                                        ('set_inbound_cipher',
                                                         ['block_engine',
                                                          'block_size',
                                                          'mac_engine',
                                                          'mac_size',
                                                          'mac_key'],
                                                         '\n        Switch inbound data cipher.\n        '),
                                                        ('set_outbound_compressor',
                                                         ['compressor'],
                                                         ''),
                                                        ('set_inbound_compressor',
                                                         ['compressor'],
                                                         ''),
                                                        ('close', [], ''),
                                                        ('set_hexdump', ['hexdump'], ''),
                                                        ('get_hexdump', [], ''),
                                                        ('get_mac_size_in', [], ''),
                                                        ('get_mac_size_out', [], ''),
                                                        ('need_rekey',
                                                         [],
                                                         '\n        Returns C{True} if a new set of keys needs to be negotiated.  This\n        will be triggered during a packet read or write, so it should be\n        checked after every read or write, or at least after every few.\n\n        @return: C{True} if a new set of keys needs to be negotiated\n        '),
                                                        ('set_keepalive',
                                                         ['interval', 'callback'],
                                                         '\n        Turn on/off the callback keepalive.  If C{interval} seconds pass with\n        no data read from or written to the socket, the callback will be\n        executed and the timer will be reset.\n        '),
                                                        ('read_all',
                                                         ['n', 'check_rekey=False'],
                                                         '\n        Read as close to N bytes as possible, blocking as long as necessary.\n\n        @param n: number of bytes to read\n        @type n: int\n        @return: the data read\n        @rtype: str\n        @raise EOFError: if the socket was closed before all the bytes could\n            be read\n        '),
                                                        ('write_all', ['out'], ''),
                                                        ('readline',
                                                         ['timeout'],
                                                         "\n        Read a line from the socket.  We assume no data is pending after the\n        line, so it's okay to attempt large reads.\n        "),
                                                        ('send_message',
                                                         ['data'],
                                                         '\n        Write a block of data using the current cipher, as an SSH block.\n        '),
                                                        ('read_message',
                                                         [],
                                                         '\n        Only one thread should ever be in this function (no other locking is\n        done).\n\n        @raise SSHException: if the packet is mangled\n        @raise NeedRekeyException: if the transport should rekey\n        '),
                                                        ('_log', ['level', 'msg'], ''),
                                                        ('_check_keepalive', [], ''),
                                                        ('_py22_read_all', ['n', 'out'], ''),
                                                        ('_py22_read_timeout', ['timeout'], ''),
                                                        ('_read_timeout', ['timeout'], ''),
                                                        ('_build_packet', ['payload'], ''),
                                                        ('_trigger_rekey', [], '')],
                                            'properties': ['REKEY_PACKETS',
                                                           'REKEY_BYTES',
                                                           'REKEY_PACKETS_OVERFLOW_MAX',
                                                           'REKEY_BYTES_OVERFLOW_MAX',
                                                           '__socket',
                                                           '__logger',
                                                           '__closed',
                                                           '__dump_packets',
                                                           '__need_rekey',
                                                           '__init_count',
                                                           '__remainder',
                                                           '__sent_bytes',
                                                           '__sent_packets',
                                                           '__received_bytes',
                                                           '__received_packets',
                                                           '__received_bytes_overflow',
                                                           '__received_packets_overflow',
                                                           '__block_size_out',
                                                           '__block_size_in',
                                                           '__mac_size_out',
                                                           '__mac_size_in',
                                                           '__block_engine_out',
                                                           '__block_engine_in',
                                                           '__mac_engine_out',
                                                           '__mac_engine_in',
                                                           '__mac_key_out',
                                                           '__mac_key_in',
                                                           '__compress_engine_out',
                                                           '__compress_engine_in',
                                                           '__sequence_number_out',
                                                           '__sequence_number_in',
                                                           '__write_lock',
                                                           '__keepalive_interval',
                                                           '__keepalive_last',
                                                           '__keepalive_callback']},
             'paramiko.pipe.OrPipe': {'bases': ['object'],
                                      'constructor': ['pipe'],
                                      'docstring': '',
                                      'methods': [('set', [], ''), ('clear', [], '')],
                                      'properties': ['_set', '_partner', '_pipe']},
             'paramiko.pipe.PosixPipe': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('close', [], ''),
                                                     ('fileno', [], ''),
                                                     ('clear', [], ''),
                                                     ('set', [], ''),
                                                     ('set_forever', [], '')],
                                         'properties': ['_rfd',
                                                        '_wfd',
                                                        '_set',
                                                        '_forever',
                                                        '_closed']},
             'paramiko.pipe.WindowsPipe': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': '\n    On Windows, only an OS-level "WinSock" may be used in select(), but reads\n    and writes must be to the actual socket object.\n    ',
                                           'methods': [('close', [], ''),
                                                       ('fileno', [], ''),
                                                       ('clear', [], ''),
                                                       ('set', [], ''),
                                                       ('set_forever', [], '')],
                                           'properties': ['_rsock',
                                                          '_wsock',
                                                          '_set',
                                                          '_forever',
                                                          '_closed']},
             'paramiko.pkey.PKey': {'bases': ['object'],
                                    'constructor': ['msg=None', 'data=None'],
                                    'docstring': '\n    Base class for public keys.\n    ',
                                    'methods': [('__str__',
                                                 [],
                                                 '\n        Return a string of an SSH L{Message} made up of the public part(s) of\n        this key.  This string is suitable for passing to L{__init__} to\n        re-create the key object later.\n\n        @return: string representation of an SSH key message.\n        @rtype: str\n        '),
                                                ('__cmp__',
                                                 ['other'],
                                                 '\n        Compare this key to another.  Returns 0 if this key is equivalent to\n        the given key, or non-0 if they are different.  Only the public parts\n        of the key are compared, so a public key will compare equal to its\n        corresponding private key.\n\n        @param other: key to compare to.\n        @type other: L{PKey}\n        @return: 0 if the two keys are equivalent, non-0 otherwise.\n        @rtype: int\n        '),
                                                ('get_name',
                                                 [],
                                                 '\n        Return the name of this private key implementation.\n\n        @return: name of this private key type, in SSH terminology (for\n        example, C{"ssh-rsa"}).\n        @rtype: str\n        '),
                                                ('get_bits',
                                                 [],
                                                 '\n        Return the number of significant bits in this key.  This is useful\n        for judging the relative security of a key.\n\n        @return: bits in the key.\n        @rtype: int\n        '),
                                                ('can_sign',
                                                 [],
                                                 '\n        Return C{True} if this key has the private part necessary for signing\n        data.\n\n        @return: C{True} if this is a private key.\n        @rtype: bool\n        '),
                                                ('get_fingerprint',
                                                 [],
                                                 '\n        Return an MD5 fingerprint of the public part of this key.  Nothing\n        secret is revealed.\n\n        @return: a 16-byte string (binary) of the MD5 fingerprint, in SSH\n            format.\n        @rtype: str\n        '),
                                                ('get_base64',
                                                 [],
                                                 '\n        Return a base64 string containing the public part of this key.  Nothing\n        secret is revealed.  This format is compatible with that used to store\n        public key files or recognized host keys.\n\n        @return: a base64 string containing the public part of the key.\n        @rtype: str\n        '),
                                                ('sign_ssh_data',
                                                 ['rng', 'data'],
                                                 '\n        Sign a blob of data with this private key, and return a L{Message}\n        representing an SSH signature message.\n\n        @param rng: a secure random number generator.\n        @type rng: L{Crypto.Util.rng.RandomPool}\n        @param data: the data to sign.\n        @type data: str\n        @return: an SSH signature message.\n        @rtype: L{Message}\n        '),
                                                ('verify_ssh_sig',
                                                 ['data', 'msg'],
                                                 '\n        Given a blob of data, and an SSH message representing a signature of\n        that data, verify that it was signed with this key.\n\n        @param data: the data that was signed.\n        @type data: str\n        @param msg: an SSH signature message\n        @type msg: L{Message}\n        @return: C{True} if the signature verifies correctly; C{False}\n            otherwise.\n        @rtype: boolean\n        '),
                                                ('from_private_key_file',
                                                 ['filename', 'password=None'],
                                                 "\n        Create a key object by reading a private key file.  If the private\n        key is encrypted and C{password} is not C{None}, the given password\n        will be used to decrypt the key (otherwise L{PasswordRequiredException}\n        is thrown).  Through the magic of python, this factory method will\n        exist in all subclasses of PKey (such as L{RSAKey} or L{DSSKey}), but\n        is useless on the abstract PKey class.\n\n        @param filename: name of the file to read\n        @type filename: str\n        @param password: an optional password to use to decrypt the key file,\n            if it's encrypted\n        @type password: str\n        @return: a new key object based on the given private key\n        @rtype: L{PKey}\n\n        @raise IOError: if there was an error reading the file\n        @raise PasswordRequiredException: if the private key file is\n            encrypted, and C{password} is C{None}\n        @raise SSHException: if the key file is invalid\n        "),
                                                ('from_private_key',
                                                 ['file_obj', 'password=None'],
                                                 "\n        Create a key object by reading a private key from a file (or file-like)\n        object.  If the private key is encrypted and C{password} is not C{None},\n        the given password will be used to decrypt the key (otherwise\n        L{PasswordRequiredException} is thrown).\n\n        @param file_obj: the file to read from\n        @type file_obj: file\n        @param password: an optional password to use to decrypt the key, if it's\n            encrypted\n        @type password: str\n        @return: a new key object based on the given private key\n        @rtype: L{PKey}\n\n        @raise IOError: if there was an error reading the key\n        @raise PasswordRequiredException: if the private key file is encrypted,\n            and C{password} is C{None}\n        @raise SSHException: if the key file is invalid\n        "),
                                                ('write_private_key_file',
                                                 ['filename', 'password=None'],
                                                 '\n        Write private key contents into a file.  If the password is not\n        C{None}, the key is encrypted before writing.\n\n        @param filename: name of the file to write\n        @type filename: str\n        @param password: an optional password to use to encrypt the key file\n        @type password: str\n\n        @raise IOError: if there was an error writing the file\n        @raise SSHException: if the key is invalid\n        '),
                                                ('write_private_key',
                                                 ['file_obj', 'password=None'],
                                                 '\n        Write private key contents into a file (or file-like) object.  If the\n        password is not C{None}, the key is encrypted before writing.\n\n        @param file_obj: the file object to write into\n        @type file_obj: file\n        @param password: an optional password to use to encrypt the key\n        @type password: str\n\n        @raise IOError: if there was an error writing to the file\n        @raise SSHException: if the key is invalid\n        '),
                                                ('_read_private_key_file',
                                                 ['tag', 'filename', 'password=None'],
                                                 '\n        Read an SSH2-format private key file, looking for a string of the type\n        C{"BEGIN xxx PRIVATE KEY"} for some C{xxx}, base64-decode the text we\n        find, and return it as a string.  If the private key is encrypted and\n        C{password} is not C{None}, the given password will be used to decrypt\n        the key (otherwise L{PasswordRequiredException} is thrown).\n\n        @param tag: C{"RSA"} or C{"DSA"}, the tag used to mark the data block.\n        @type tag: str\n        @param filename: name of the file to read.\n        @type filename: str\n        @param password: an optional password to use to decrypt the key file,\n            if it\'s encrypted.\n        @type password: str\n        @return: data blob that makes up the private key.\n        @rtype: str\n\n        @raise IOError: if there was an error reading the file.\n        @raise PasswordRequiredException: if the private key file is\n            encrypted, and C{password} is C{None}.\n        @raise SSHException: if the key file is invalid.\n        '),
                                                ('_read_private_key',
                                                 ['tag', 'f', 'password=None'],
                                                 ''),
                                                ('_write_private_key_file',
                                                 ['tag', 'filename', 'data', 'password=None'],
                                                 '\n        Write an SSH2-format private key file in a form that can be read by\n        paramiko or openssh.  If no password is given, the key is written in\n        a trivially-encoded format (base64) which is completely insecure.  If\n        a password is given, DES-EDE3-CBC is used.\n\n        @param tag: C{"RSA"} or C{"DSA"}, the tag used to mark the data block.\n        @type tag: str\n        @param filename: name of the file to write.\n        @type filename: str\n        @param data: data blob that makes up the private key.\n        @type data: str\n        @param password: an optional password to use to encrypt the file.\n        @type password: str\n\n        @raise IOError: if there was an error writing the file.\n        '),
                                                ('_write_private_key',
                                                 ['tag', 'f', 'data', 'password=None'],
                                                 '')],
                                    'properties': ['_CIPHER_TABLE',
                                                   'from_private_key_file',
                                                   'from_private_key']},
             'paramiko.primes.ModulusPack': {'bases': ['object'],
                                             'constructor': ['rpool'],
                                             'docstring': '\n    convenience object for holding the contents of the /etc/ssh/moduli file,\n    on systems that have such a file.\n    ',
                                             'methods': [('_parse_modulus', ['line'], ''),
                                                         ('read_file',
                                                          ['filename'],
                                                          '\n        @raise IOError: passed from any file operations that fail.\n        '),
                                                         ('get_modulus',
                                                          ['min', 'prefer', 'max'],
                                                          '')],
                                             'properties': ['pack', 'discarded', 'rng']},
             'paramiko.proxy.ProxyCommand': {'bases': ['object'],
                                             'constructor': ['command_line'],
                                             'docstring': "\n    Wraps a subprocess running ProxyCommand-driven programs.\n\n    This class implements a the socket-like interface needed by the\n    L{Transport} and L{Packetizer} classes. Using this class instead of a\n    regular socket makes it possible to talk with a Popen'd command that will\n    proxy traffic between the client and a server hosted in another machine.\n    ",
                                             'methods': [('send',
                                                          ['content'],
                                                          '\n        Write the content received from the SSH client to the standard\n        input of the forked command.\n\n        @param content: string to be sent to the forked command\n        @type content: str\n        '),
                                                         ('recv',
                                                          ['size'],
                                                          '\n        Read from the standard output of the forked program.\n\n        @param size: how many chars should be read\n        @type size: int\n\n        @return: the length of the read content\n        @rtype: int\n        '),
                                                         ('close', [], ''),
                                                         ('settimeout', ['timeout'], '')],
                                             'properties': ['cmd', 'process']},
             'paramiko.resource.ResourceManager': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': "\n    A registry of objects and resources that should be closed when those\n    objects are deleted.\n    \n    This is meant to be a safer alternative to python's C{__del__} method,\n    which can cause reference cycles to never be collected.  Objects registered\n    with the ResourceManager can be collected but still free resources when\n    they die.\n    \n    Resources are registered using L{register}, and when an object is garbage\n    collected, each registered resource is closed by having its C{close()}\n    method called.  Multiple resources may be registered per object, but a\n    resource will only be closed once, even if multiple objects register it.\n    (The last object to register it wins.)\n    ",
                                                   'methods': [('register',
                                                                ['obj', 'resource'],
                                                                '\n        Register a resource to be closed with an object is collected.\n        \n        When the given C{obj} is garbage-collected by the python interpreter,\n        the C{resource} will be closed by having its C{close()} method called.\n        Any exceptions are ignored.\n        \n        @param obj: the object to track\n        @type obj: object\n        @param resource: the resource to close when the object is collected\n        @type resource: object\n        ')],
                                                   'properties': ['_table']},
             'paramiko.rsakey.RSAKey': {'bases': ['paramiko.pkey.PKey'],
                                        'constructor': ['msg=None',
                                                        'data=None',
                                                        'filename=None',
                                                        'password=None',
                                                        'vals=None',
                                                        'file_obj=None'],
                                        'docstring': '\n    Representation of an RSA key which can be used to sign and verify SSH2\n    data.\n    ',
                                        'methods': [('__str__', [], ''),
                                                    ('__hash__', [], ''),
                                                    ('get_name', [], ''),
                                                    ('get_bits', [], ''),
                                                    ('can_sign', [], ''),
                                                    ('sign_ssh_data', ['rpool', 'data'], ''),
                                                    ('verify_ssh_sig', ['data', 'msg'], ''),
                                                    ('_encode_key', [], ''),
                                                    ('write_private_key_file',
                                                     ['filename', 'password=None'],
                                                     ''),
                                                    ('write_private_key',
                                                     ['file_obj', 'password=None'],
                                                     ''),
                                                    ('generate',
                                                     ['progress_func=None'],
                                                     '\n        Generate a new private RSA key.  This factory function can be used to\n        generate a new host key or authentication key.\n\n        @param bits: number of bits the generated key should be.\n        @type bits: int\n        @param progress_func: an optional function to call at key points in\n            key generation (used by C{pyCrypto.PublicKey}).\n        @type progress_func: function\n        @return: new private key\n        @rtype: L{RSAKey}\n        '),
                                                    ('_pkcs1imify',
                                                     ['data'],
                                                     '\n        turn a 20-byte SHA1 hash into a blob of data as large as the key\'s N,\n        using PKCS1\'s "emsa-pkcs1-v1_5" encoding.  totally bizarre.\n        '),
                                                    ('_from_private_key_file',
                                                     ['filename', 'password'],
                                                     ''),
                                                    ('_from_private_key',
                                                     ['file_obj', 'password'],
                                                     ''),
                                                    ('_decode_key', ['data'], '')],
                                        'properties': ['n',
                                                       'e',
                                                       'd',
                                                       'p',
                                                       'q',
                                                       'size',
                                                       'generate']},
             'paramiko.server.InteractiveQuery': {'bases': ['object'],
                                                  'constructor': ["name=''",
                                                                  "instructions=''",
                                                                  '*prompts'],
                                                  'docstring': '\n    A query (set of prompts) for a user during interactive authentication.\n    ',
                                                  'methods': [('add_prompt',
                                                               ['prompt', 'echo=True'],
                                                               "\n        Add a prompt to this query.  The prompt should be a (reasonably short)\n        string.  Multiple prompts can be added to the same query.\n        \n        @param prompt: the user prompt\n        @type prompt: str\n        @param echo: C{True} (default) if the user's response should be echoed;\n            C{False} if not (for a password or similar)\n        @type echo: bool\n        ")],
                                                  'properties': ['name',
                                                                 'instructions',
                                                                 'prompts']},
             'paramiko.server.ServerInterface': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': "\n    This class defines an interface for controlling the behavior of paramiko\n    in server mode.\n\n    Methods on this class are called from paramiko's primary thread, so you\n    shouldn't do too much work in them.  (Certainly nothing that blocks or\n    sleeps.)\n    ",
                                                 'methods': [('check_channel_request',
                                                              ['kind', 'chanid'],
                                                              '\n        Determine if a channel request of a given type will be granted, and\n        return C{OPEN_SUCCEEDED} or an error code.  This method is\n        called in server mode when the client requests a channel, after\n        authentication is complete.\n\n        If you allow channel requests (and an ssh server that didn\'t would be\n        useless), you should also override some of the channel request methods\n        below, which are used to determine which services will be allowed on\n        a given channel:\n            - L{check_channel_pty_request}\n            - L{check_channel_shell_request}\n            - L{check_channel_subsystem_request}\n            - L{check_channel_window_change_request}\n            - L{check_channel_x11_request}\n            - L{check_channel_forward_agent_request}\n\n        The C{chanid} parameter is a small number that uniquely identifies the\n        channel within a L{Transport}.  A L{Channel} object is not created\n        unless this method returns C{OPEN_SUCCEEDED} -- once a\n        L{Channel} object is created, you can call L{Channel.get_id} to\n        retrieve the channel ID.\n\n        The return value should either be C{OPEN_SUCCEEDED} (or\n        C{0}) to allow the channel request, or one of the following error\n        codes to reject it:\n            - C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}\n            - C{OPEN_FAILED_CONNECT_FAILED}\n            - C{OPEN_FAILED_UNKNOWN_CHANNEL_TYPE}\n            - C{OPEN_FAILED_RESOURCE_SHORTAGE}\n        \n        The default implementation always returns\n        C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}.\n\n        @param kind: the kind of channel the client would like to open\n            (usually C{"session"}).\n        @type kind: str\n        @param chanid: ID of the channel\n        @type chanid: int\n        @return: a success or failure code (listed above)\n        @rtype: int\n        '),
                                                             ('get_allowed_auths',
                                                              ['username'],
                                                              '\n        Return a list of authentication methods supported by the server.\n        This list is sent to clients attempting to authenticate, to inform them\n        of authentication methods that might be successful.\n\n        The "list" is actually a string of comma-separated names of types of\n        authentication.  Possible values are C{"password"}, C{"publickey"},\n        and C{"none"}.\n\n        The default implementation always returns C{"password"}.\n\n        @param username: the username requesting authentication.\n        @type username: str\n        @return: a comma-separated list of authentication types\n        @rtype: str\n        '),
                                                             ('check_auth_none',
                                                              ['username'],
                                                              "\n        Determine if a client may open channels with no (further)\n        authentication.\n\n        Return L{AUTH_FAILED} if the client must authenticate, or\n        L{AUTH_SUCCESSFUL} if it's okay for the client to not\n        authenticate.\n\n        The default implementation always returns L{AUTH_FAILED}.\n\n        @param username: the username of the client.\n        @type username: str\n        @return: L{AUTH_FAILED} if the authentication fails;\n            L{AUTH_SUCCESSFUL} if it succeeds.\n        @rtype: int\n        "),
                                                             ('check_auth_password',
                                                              ['username', 'password'],
                                                              '\n        Determine if a given username and password supplied by the client is\n        acceptable for use in authentication.\n\n        Return L{AUTH_FAILED} if the password is not accepted,\n        L{AUTH_SUCCESSFUL} if the password is accepted and completes\n        the authentication, or L{AUTH_PARTIALLY_SUCCESSFUL} if your\n        authentication is stateful, and this key is accepted for\n        authentication, but more authentication is required.  (In this latter\n        case, L{get_allowed_auths} will be called to report to the client what\n        options it has for continuing the authentication.)\n\n        The default implementation always returns L{AUTH_FAILED}.\n\n        @param username: the username of the authenticating client.\n        @type username: str\n        @param password: the password given by the client.\n        @type password: str\n        @return: L{AUTH_FAILED} if the authentication fails;\n            L{AUTH_SUCCESSFUL} if it succeeds;\n            L{AUTH_PARTIALLY_SUCCESSFUL} if the password auth is\n            successful, but authentication must continue.\n        @rtype: int\n        '),
                                                             ('check_auth_publickey',
                                                              ['username', 'key'],
                                                              "\n        Determine if a given key supplied by the client is acceptable for use\n        in authentication.  You should override this method in server mode to\n        check the username and key and decide if you would accept a signature\n        made using this key.\n\n        Return L{AUTH_FAILED} if the key is not accepted,\n        L{AUTH_SUCCESSFUL} if the key is accepted and completes the\n        authentication, or L{AUTH_PARTIALLY_SUCCESSFUL} if your\n        authentication is stateful, and this password is accepted for\n        authentication, but more authentication is required.  (In this latter\n        case, L{get_allowed_auths} will be called to report to the client what\n        options it has for continuing the authentication.)\n\n        Note that you don't have to actually verify any key signtature here.\n        If you're willing to accept the key, paramiko will do the work of\n        verifying the client's signature.\n        \n        The default implementation always returns L{AUTH_FAILED}.\n\n        @param username: the username of the authenticating client\n        @type username: str\n        @param key: the key object provided by the client\n        @type key: L{PKey <pkey.PKey>}\n        @return: L{AUTH_FAILED} if the client can't authenticate\n            with this key; L{AUTH_SUCCESSFUL} if it can;\n            L{AUTH_PARTIALLY_SUCCESSFUL} if it can authenticate with\n            this key but must continue with authentication\n        @rtype: int\n        "),
                                                             ('check_auth_interactive',
                                                              ['username', 'submethods'],
                                                              '\n        Begin an interactive authentication challenge, if supported.  You\n        should override this method in server mode if you want to support the\n        C{"keyboard-interactive"} auth type, which requires you to send a\n        series of questions for the client to answer.\n        \n        Return L{AUTH_FAILED} if this auth method isn\'t supported.  Otherwise,\n        you should return an L{InteractiveQuery} object containing the prompts\n        and instructions for the user.  The response will be sent via a call\n        to L{check_auth_interactive_response}.\n        \n        The default implementation always returns L{AUTH_FAILED}.\n        \n        @param username: the username of the authenticating client\n        @type username: str\n        @param submethods: a comma-separated list of methods preferred by the\n            client (usually empty)\n        @type submethods: str\n        @return: L{AUTH_FAILED} if this auth method isn\'t supported; otherwise\n            an object containing queries for the user\n        @rtype: int or L{InteractiveQuery}\n        '),
                                                             ('check_auth_interactive_response',
                                                              ['responses'],
                                                              '\n        Continue or finish an interactive authentication challenge, if\n        supported.  You should override this method in server mode if you want\n        to support the C{"keyboard-interactive"} auth type.\n        \n        Return L{AUTH_FAILED} if the responses are not accepted,\n        L{AUTH_SUCCESSFUL} if the responses are accepted and complete\n        the authentication, or L{AUTH_PARTIALLY_SUCCESSFUL} if your\n        authentication is stateful, and this set of responses is accepted for\n        authentication, but more authentication is required.  (In this latter\n        case, L{get_allowed_auths} will be called to report to the client what\n        options it has for continuing the authentication.)\n\n        If you wish to continue interactive authentication with more questions,\n        you may return an L{InteractiveQuery} object, which should cause the\n        client to respond with more answers, calling this method again.  This\n        cycle can continue indefinitely.\n\n        The default implementation always returns L{AUTH_FAILED}.\n\n        @param responses: list of responses from the client\n        @type responses: list(str)\n        @return: L{AUTH_FAILED} if the authentication fails;\n            L{AUTH_SUCCESSFUL} if it succeeds;\n            L{AUTH_PARTIALLY_SUCCESSFUL} if the interactive auth is\n            successful, but authentication must continue; otherwise an object\n            containing queries for the user\n        @rtype: int or L{InteractiveQuery}\n        '),
                                                             ('check_port_forward_request',
                                                              ['address', 'port'],
                                                              '\n        Handle a request for port forwarding.  The client is asking that\n        connections to the given address and port be forwarded back across\n        this ssh connection.  An address of C{"0.0.0.0"} indicates a global\n        address (any address associated with this server) and a port of C{0}\n        indicates that no specific port is requested (usually the OS will pick\n        a port).\n        \n        The default implementation always returns C{False}, rejecting the\n        port forwarding request.  If the request is accepted, you should return\n        the port opened for listening.\n        \n        @param address: the requested address\n        @type address: str\n        @param port: the requested port\n        @type port: int\n        @return: the port number that was opened for listening, or C{False} to\n            reject\n        @rtype: int\n        '),
                                                             ('cancel_port_forward_request',
                                                              ['address', 'port'],
                                                              '\n        The client would like to cancel a previous port-forwarding request.\n        If the given address and port is being forwarded across this ssh\n        connection, the port should be closed.\n        \n        @param address: the forwarded address\n        @type address: str\n        @param port: the forwarded port\n        @type port: int\n        '),
                                                             ('check_global_request',
                                                              ['kind', 'msg'],
                                                              "\n        Handle a global request of the given C{kind}.  This method is called\n        in server mode and client mode, whenever the remote host makes a global\n        request.  If there are any arguments to the request, they will be in\n        C{msg}.\n\n        There aren't any useful global requests defined, aside from port\n        forwarding, so usually this type of request is an extension to the\n        protocol.\n\n        If the request was successful and you would like to return contextual\n        data to the remote host, return a tuple.  Items in the tuple will be\n        sent back with the successful result.  (Note that the items in the\n        tuple can only be strings, ints, longs, or bools.)\n\n        The default implementation always returns C{False}, indicating that it\n        does not support any global requests.\n        \n        @note: Port forwarding requests are handled separately, in\n            L{check_port_forward_request}.\n\n        @param kind: the kind of global request being made.\n        @type kind: str\n        @param msg: any extra arguments to the request.\n        @type msg: L{Message}\n        @return: C{True} or a tuple of data if the request was granted;\n            C{False} otherwise.\n        @rtype: bool\n        "),
                                                             ('check_channel_pty_request',
                                                              ['channel',
                                                               'term',
                                                               'width',
                                                               'height',
                                                               'pixelwidth',
                                                               'pixelheight',
                                                               'modes'],
                                                              '\n        Determine if a pseudo-terminal of the given dimensions (usually\n        requested for shell access) can be provided on the given channel.\n\n        The default implementation always returns C{False}.\n\n        @param channel: the L{Channel} the pty request arrived on.\n        @type channel: L{Channel}\n        @param term: type of terminal requested (for example, C{"vt100"}).\n        @type term: str\n        @param width: width of screen in characters.\n        @type width: int\n        @param height: height of screen in characters.\n        @type height: int\n        @param pixelwidth: width of screen in pixels, if known (may be C{0} if\n            unknown).\n        @type pixelwidth: int\n        @param pixelheight: height of screen in pixels, if known (may be C{0}\n            if unknown).\n        @type pixelheight: int\n        @return: C{True} if the psuedo-terminal has been allocated; C{False}\n            otherwise.\n        @rtype: bool\n        '),
                                                             ('check_channel_shell_request',
                                                              ['channel'],
                                                              "\n        Determine if a shell will be provided to the client on the given\n        channel.  If this method returns C{True}, the channel should be\n        connected to the stdin/stdout of a shell (or something that acts like\n        a shell).\n\n        The default implementation always returns C{False}.\n\n        @param channel: the L{Channel} the request arrived on.\n        @type channel: L{Channel}\n        @return: C{True} if this channel is now hooked up to a shell; C{False}\n            if a shell can't or won't be provided.\n        @rtype: bool\n        "),
                                                             ('check_channel_exec_request',
                                                              ['channel', 'command'],
                                                              '\n        Determine if a shell command will be executed for the client.  If this\n        method returns C{True}, the channel should be connected to the stdin,\n        stdout, and stderr of the shell command.\n        \n        The default implementation always returns C{False}.\n        \n        @param channel: the L{Channel} the request arrived on.\n        @type channel: L{Channel}\n        @param command: the command to execute.\n        @type command: str\n        @return: C{True} if this channel is now hooked up to the stdin,\n            stdout, and stderr of the executing command; C{False} if the\n            command will not be executed.\n        @rtype: bool\n        \n        @since: 1.1\n        '),
                                                             ('check_channel_subsystem_request',
                                                              ['channel', 'name'],
                                                              "\n        Determine if a requested subsystem will be provided to the client on\n        the given channel.  If this method returns C{True}, all future I/O\n        through this channel will be assumed to be connected to the requested\n        subsystem.  An example of a subsystem is C{sftp}.\n\n        The default implementation checks for a subsystem handler assigned via\n        L{Transport.set_subsystem_handler}.\n        If one has been set, the handler is invoked and this method returns\n        C{True}.  Otherwise it returns C{False}.\n\n        @note: Because the default implementation uses the L{Transport} to\n            identify valid subsystems, you probably won't need to override this\n            method.\n\n        @param channel: the L{Channel} the pty request arrived on.\n        @type channel: L{Channel}\n        @param name: name of the requested subsystem.\n        @type name: str\n        @return: C{True} if this channel is now hooked up to the requested\n            subsystem; C{False} if that subsystem can't or won't be provided.\n        @rtype: bool\n        "),
                                                             ('check_channel_window_change_request',
                                                              ['channel',
                                                               'width',
                                                               'height',
                                                               'pixelwidth',
                                                               'pixelheight'],
                                                              '\n        Determine if the pseudo-terminal on the given channel can be resized.\n        This only makes sense if a pty was previously allocated on it.\n\n        The default implementation always returns C{False}.\n\n        @param channel: the L{Channel} the pty request arrived on.\n        @type channel: L{Channel}\n        @param width: width of screen in characters.\n        @type width: int\n        @param height: height of screen in characters.\n        @type height: int\n        @param pixelwidth: width of screen in pixels, if known (may be C{0} if\n            unknown).\n        @type pixelwidth: int\n        @param pixelheight: height of screen in pixels, if known (may be C{0}\n            if unknown).\n        @type pixelheight: int\n        @return: C{True} if the terminal was resized; C{False} if not.\n        @rtype: bool\n        '),
                                                             ('check_channel_x11_request',
                                                              ['channel',
                                                               'single_connection',
                                                               'auth_protocol',
                                                               'auth_cookie',
                                                               'screen_number'],
                                                              '\n        Determine if the client will be provided with an X11 session.  If this\n        method returns C{True}, X11 applications should be routed through new\n        SSH channels, using L{Transport.open_x11_channel}.\n        \n        The default implementation always returns C{False}.\n        \n        @param channel: the L{Channel} the X11 request arrived on\n        @type channel: L{Channel}\n        @param single_connection: C{True} if only a single X11 channel should\n            be opened\n        @type single_connection: bool\n        @param auth_protocol: the protocol used for X11 authentication\n        @type auth_protocol: str\n        @param auth_cookie: the cookie used to authenticate to X11\n        @type auth_cookie: str\n        @param screen_number: the number of the X11 screen to connect to\n        @type screen_number: int\n        @return: C{True} if the X11 session was opened; C{False} if not\n        @rtype: bool\n        '),
                                                             ('check_channel_forward_agent_request',
                                                              ['channel'],
                                                              '\n        Determine if the client will be provided with an forward agent session.\n        If this method returns C{True}, the server will allow SSH Agent\n        forwarding.\n\n        The default implementation always returns C{False}.\n\n        @param channel: the L{Channel} the request arrived on\n        @type channel: L{Channel}\n        @return: C{True} if the AgentForward was loaded; C{False} if not\n        @rtype: bool\n        '),
                                                             ('check_channel_direct_tcpip_request',
                                                              ['chanid',
                                                               'origin',
                                                               'destination'],
                                                              '\n        Determine if a local port forwarding channel will be granted, and\n        return C{OPEN_SUCCEEDED} or an error code.  This method is\n        called in server mode when the client requests a channel, after\n        authentication is complete.\n\n        The C{chanid} parameter is a small number that uniquely identifies the\n        channel within a L{Transport}.  A L{Channel} object is not created\n        unless this method returns C{OPEN_SUCCEEDED} -- once a\n        L{Channel} object is created, you can call L{Channel.get_id} to\n        retrieve the channel ID.\n\n        The origin and destination parameters are (ip_address, port) tuples\n        that correspond to both ends of the TCP connection in the forwarding\n        tunnel.\n\n        The return value should either be C{OPEN_SUCCEEDED} (or\n        C{0}) to allow the channel request, or one of the following error\n        codes to reject it:\n            - C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}\n            - C{OPEN_FAILED_CONNECT_FAILED}\n            - C{OPEN_FAILED_UNKNOWN_CHANNEL_TYPE}\n            - C{OPEN_FAILED_RESOURCE_SHORTAGE}\n        \n        The default implementation always returns\n        C{OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED}.\n\n        @param chanid: ID of the channel\n        @type chanid: int\n        @param origin: 2-tuple containing the IP address and port of the\n            originator (client side)\n        @type origin: tuple\n        @param destination: 2-tuple containing the IP address and port of the\n            destination (server side)\n        @type destination: tuple\n        @return: a success or failure code (listed above)\n        @rtype: int\n        ')],
                                                 'properties': []},
             'paramiko.server.SubsystemHandler': {'bases': ['threading.Thread'],
                                                  'constructor': ['channel', 'name', 'server'],
                                                  'docstring': '\n    Handler for a subsytem in server mode.  If you create a subclass of this\n    class and pass it to\n    L{Transport.set_subsystem_handler},\n    an object of this\n    class will be created for each request for this subsystem.  Each new object\n    will be executed within its own new thread by calling L{start_subsystem}.\n    When that method completes, the channel is closed.\n\n    For example, if you made a subclass C{MP3Handler} and registered it as the\n    handler for subsystem C{"mp3"}, then whenever a client has successfully\n    authenticated and requests subsytem C{"mp3"}, an object of class\n    C{MP3Handler} will be created, and L{start_subsystem} will be called on\n    it from a new thread.\n    ',
                                                  'methods': [('get_server',
                                                               [],
                                                               '\n        Return the L{ServerInterface} object associated with this channel and\n        subsystem.\n        \n        @rtype: L{ServerInterface}\n        '),
                                                              ('_run', [], ''),
                                                              ('start_subsystem',
                                                               ['name',
                                                                'transport',
                                                                'channel'],
                                                               '\n        Process an ssh subsystem in server mode.  This method is called on a\n        new object (and in a new thread) for each subsystem request.  It is\n        assumed that all subsystem logic will take place here, and when the\n        subsystem is finished, this method will return.  After this method\n        returns, the channel is closed.\n\n        The combination of C{transport} and C{channel} are unique; this handler\n        corresponds to exactly one L{Channel} on one L{Transport}.\n\n        @note: It is the responsibility of this method to exit if the\n            underlying L{Transport} is closed.  This can be done by checking\n            L{Transport.is_active} or noticing an EOF\n            on the L{Channel}.  If this method loops forever without checking\n            for this case, your python interpreter may refuse to exit because\n            this thread will still be running.\n\n        @param name: name of the requested subsystem.\n        @type name: str\n        @param transport: the server-mode L{Transport}.\n        @type transport: L{Transport}\n        @param channel: the channel associated with this subsystem request.\n        @type channel: L{Channel}\n        '),
                                                              ('finish_subsystem',
                                                               [],
                                                               '\n        Perform any cleanup at the end of a subsystem.  The default\n        implementation just closes the channel.\n\n        @since: 1.1\n        ')],
                                                  'properties': ['__channel',
                                                                 '__transport',
                                                                 '__name',
                                                                 '__server']},
             'paramiko.sftp.BaseSFTP': {'bases': ['object'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('_send_version', [], ''),
                                                    ('_send_server_version', [], ''),
                                                    ('_log', ['level', 'msg', '*args'], ''),
                                                    ('_write_all', ['out'], ''),
                                                    ('_read_all', ['n'], ''),
                                                    ('_send_packet', ['t', 'packet'], ''),
                                                    ('_read_packet', [], '')],
                                        'properties': ['logger', 'sock', 'ultra_debug']},
             'paramiko.sftp.SFTPError': {'bases': ['Exception'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'paramiko.sftp_attr.SFTPAttributes': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '\n    Representation of the attributes of a file (or proxied file) for SFTP in\n    client or server mode.  It attemps to mirror the object returned by\n    C{os.stat} as closely as possible, so it may have the following fields,\n    with the same meanings as those returned by an C{os.stat} object:\n        - st_size\n        - st_uid\n        - st_gid\n        - st_mode\n        - st_atime\n        - st_mtime\n\n    Because SFTP allows flags to have other arbitrary named attributes, these\n    are stored in a dict named C{attr}.  Occasionally, the filename is also\n    stored, in C{filename}.\n    ',
                                                   'methods': [('from_stat',
                                                                ['obj', 'filename=None'],
                                                                '\n        Create an SFTPAttributes object from an existing C{stat} object (an\n        object returned by C{os.stat}).\n\n        @param obj: an object returned by C{os.stat} (or equivalent).\n        @type obj: object\n        @param filename: the filename associated with this file.\n        @type filename: str\n        @return: new L{SFTPAttributes} object with the same attribute fields.\n        @rtype: L{SFTPAttributes}\n        '),
                                                               ('__repr__', [], ''),
                                                               ('_from_msg',
                                                                ['msg',
                                                                 'filename=None',
                                                                 'longname=None'],
                                                                ''),
                                                               ('_unpack', ['msg'], ''),
                                                               ('_pack', ['msg'], ''),
                                                               ('_debug_str', [], ''),
                                                               ('_rwx',
                                                                ['suid', 'sticky=False'],
                                                                ''),
                                                               ('__str__',
                                                                [],
                                                                'create a unix-style long description of the file (like ls -l)')],
                                                   'properties': ['FLAG_SIZE',
                                                                  'FLAG_UIDGID',
                                                                  'FLAG_PERMISSIONS',
                                                                  'FLAG_AMTIME',
                                                                  'FLAG_EXTENDED',
                                                                  '_flags',
                                                                  'st_size',
                                                                  'st_uid',
                                                                  'st_gid',
                                                                  'st_mode',
                                                                  'st_atime',
                                                                  'st_mtime',
                                                                  'attr',
                                                                  'from_stat',
                                                                  '_from_msg',
                                                                  '_rwx']},
             'paramiko.sftp_client.SFTP': {'bases': ['paramiko.sftp_client.SFTPClient'],
                                           'constructor': [],
                                           'docstring': 'an alias for L{SFTPClient} for backwards compatability',
                                           'methods': [],
                                           'properties': []},
             'paramiko.sftp_client.SFTPClient': {'bases': ['paramiko.sftp_client.BaseSFTP'],
                                                 'constructor': ['sock'],
                                                 'docstring': '\n    SFTP client object.  C{SFTPClient} is used to open an sftp session across\n    an open ssh L{Transport} and do remote file operations.\n    ',
                                                 'methods': [('from_transport',
                                                              ['t'],
                                                              '\n        Create an SFTP client channel from an open L{Transport}.\n\n        @param t: an open L{Transport} which is already authenticated\n        @type t: L{Transport}\n        @return: a new L{SFTPClient} object, referring to an sftp session\n            (channel) across the transport\n        @rtype: L{SFTPClient}\n        '),
                                                             ('_log',
                                                              ['level', 'msg', '*args'],
                                                              ''),
                                                             ('close',
                                                              [],
                                                              '\n        Close the SFTP session and its underlying channel.\n\n        @since: 1.4\n        '),
                                                             ('get_channel',
                                                              [],
                                                              '\n        Return the underlying L{Channel} object for this SFTP session.  This\n        might be useful for doing things like setting a timeout on the channel.\n\n        @return: the SSH channel\n        @rtype: L{Channel}\n\n        @since: 1.7.1\n        '),
                                                             ('listdir',
                                                              ["path='.'"],
                                                              "\n        Return a list containing the names of the entries in the given C{path}.\n        The list is in arbitrary order.  It does not include the special\n        entries C{'.'} and C{'..'} even if they are present in the folder.\n        This method is meant to mirror C{os.listdir} as closely as possible.\n        For a list of full L{SFTPAttributes} objects, see L{listdir_attr}.\n\n        @param path: path to list (defaults to C{'.'})\n        @type path: str\n        @return: list of filenames\n        @rtype: list of str\n        "),
                                                             ('listdir_attr',
                                                              ["path='.'"],
                                                              "\n        Return a list containing L{SFTPAttributes} objects corresponding to\n        files in the given C{path}.  The list is in arbitrary order.  It does\n        not include the special entries C{'.'} and C{'..'} even if they are\n        present in the folder.\n\n        The returned L{SFTPAttributes} objects will each have an additional\n        field: C{longname}, which may contain a formatted string of the file's\n        attributes, in unix format.  The content of this string will probably\n        depend on the SFTP server implementation.\n\n        @param path: path to list (defaults to C{'.'})\n        @type path: str\n        @return: list of attributes\n        @rtype: list of L{SFTPAttributes}\n\n        @since: 1.2\n        "),
                                                             ('open',
                                                              ['filename',
                                                               "mode='r'",
                                                               'bufsize=-1'],
                                                              "\n        Open a file on the remote server.  The arguments are the same as for\n        python's built-in C{file} (aka C{open}).  A file-like object is\n        returned, which closely mimics the behavior of a normal python file\n        object.\n\n        The mode indicates how the file is to be opened: C{'r'} for reading,\n        C{'w'} for writing (truncating an existing file), C{'a'} for appending,\n        C{'r+'} for reading/writing, C{'w+'} for reading/writing (truncating an\n        existing file), C{'a+'} for reading/appending.  The python C{'b'} flag\n        is ignored, since SSH treats all files as binary.  The C{'U'} flag is\n        supported in a compatible way.\n\n        Since 1.5.2, an C{'x'} flag indicates that the operation should only\n        succeed if the file was created and did not previously exist.  This has\n        no direct mapping to python's file flags, but is commonly known as the\n        C{O_EXCL} flag in posix.\n\n        The file will be buffered in standard python style by default, but\n        can be altered with the C{bufsize} parameter.  C{0} turns off\n        buffering, C{1} uses line buffering, and any number greater than 1\n        (C{>1}) uses that specific buffer size.\n\n        @param filename: name of the file to open\n        @type filename: str\n        @param mode: mode (python-style) to open in\n        @type mode: str\n        @param bufsize: desired buffering (-1 = default buffer size)\n        @type bufsize: int\n        @return: a file object representing the open file\n        @rtype: SFTPFile\n\n        @raise IOError: if the file could not be opened.\n        "),
                                                             ('remove',
                                                              ['path'],
                                                              '\n        Remove the file at the given path.  This only works on files; for\n        removing folders (directories), use L{rmdir}.\n\n        @param path: path (absolute or relative) of the file to remove\n        @type path: str\n\n        @raise IOError: if the path refers to a folder (directory)\n        '),
                                                             ('rename',
                                                              ['oldpath', 'newpath'],
                                                              '\n        Rename a file or folder from C{oldpath} to C{newpath}.\n\n        @param oldpath: existing name of the file or folder\n        @type oldpath: str\n        @param newpath: new name for the file or folder\n        @type newpath: str\n\n        @raise IOError: if C{newpath} is a folder, or something else goes\n            wrong\n        '),
                                                             ('mkdir',
                                                              ['path', 'mode=511'],
                                                              '\n        Create a folder (directory) named C{path} with numeric mode C{mode}.\n        The default mode is 0777 (octal).  On some systems, mode is ignored.\n        Where it is used, the current umask value is first masked out.\n\n        @param path: name of the folder to create\n        @type path: str\n        @param mode: permissions (posix-style) for the newly-created folder\n        @type mode: int\n        '),
                                                             ('rmdir',
                                                              ['path'],
                                                              '\n        Remove the folder named C{path}.\n\n        @param path: name of the folder to remove\n        @type path: str\n        '),
                                                             ('stat',
                                                              ['path'],
                                                              "\n        Retrieve information about a file on the remote system.  The return\n        value is an object whose attributes correspond to the attributes of\n        python's C{stat} structure as returned by C{os.stat}, except that it\n        contains fewer fields.  An SFTP server may return as much or as little\n        info as it wants, so the results may vary from server to server.\n\n        Unlike a python C{stat} object, the result may not be accessed as a\n        tuple.  This is mostly due to the author's slack factor.\n\n        The fields supported are: C{st_mode}, C{st_size}, C{st_uid}, C{st_gid},\n        C{st_atime}, and C{st_mtime}.\n\n        @param path: the filename to stat\n        @type path: str\n        @return: an object containing attributes about the given file\n        @rtype: SFTPAttributes\n        "),
                                                             ('lstat',
                                                              ['path'],
                                                              '\n        Retrieve information about a file on the remote system, without\n        following symbolic links (shortcuts).  This otherwise behaves exactly\n        the same as L{stat}.\n\n        @param path: the filename to stat\n        @type path: str\n        @return: an object containing attributes about the given file\n        @rtype: SFTPAttributes\n        '),
                                                             ('symlink',
                                                              ['source', 'dest'],
                                                              '\n        Create a symbolic link (shortcut) of the C{source} path at\n        C{destination}.\n\n        @param source: path of the original file\n        @type source: str\n        @param dest: path of the newly created symlink\n        @type dest: str\n        '),
                                                             ('chmod',
                                                              ['path', 'mode'],
                                                              "\n        Change the mode (permissions) of a file.  The permissions are\n        unix-style and identical to those used by python's C{os.chmod}\n        function.\n\n        @param path: path of the file to change the permissions of\n        @type path: str\n        @param mode: new permissions\n        @type mode: int\n        "),
                                                             ('chown',
                                                              ['path', 'uid', 'gid'],
                                                              "\n        Change the owner (C{uid}) and group (C{gid}) of a file.  As with\n        python's C{os.chown} function, you must pass both arguments, so if you\n        only want to change one, use L{stat} first to retrieve the current\n        owner and group.\n\n        @param path: path of the file to change the owner and group of\n        @type path: str\n        @param uid: new owner's uid\n        @type uid: int\n        @param gid: new group id\n        @type gid: int\n        "),
                                                             ('utime',
                                                              ['path', 'times'],
                                                              "\n        Set the access and modified times of the file specified by C{path}.  If\n        C{times} is C{None}, then the file's access and modified times are set\n        to the current time.  Otherwise, C{times} must be a 2-tuple of numbers,\n        of the form C{(atime, mtime)}, which is used to set the access and\n        modified times, respectively.  This bizarre API is mimicked from python\n        for the sake of consistency -- I apologize.\n\n        @param path: path of the file to modify\n        @type path: str\n        @param times: C{None} or a tuple of (access time, modified time) in\n            standard internet epoch time (seconds since 01 January 1970 GMT)\n        @type times: tuple(int)\n        "),
                                                             ('truncate',
                                                              ['path', 'size'],
                                                              '\n        Change the size of the file specified by C{path}.  This usually extends\n        or shrinks the size of the file, just like the C{truncate()} method on\n        python file objects.\n\n        @param path: path of the file to modify\n        @type path: str\n        @param size: the new size of the file\n        @type size: int or long\n        '),
                                                             ('readlink',
                                                              ['path'],
                                                              '\n        Return the target of a symbolic link (shortcut).  You can use\n        L{symlink} to create these.  The result may be either an absolute or\n        relative pathname.\n\n        @param path: path of the symbolic link file\n        @type path: str\n        @return: target path\n        @rtype: str\n        '),
                                                             ('normalize',
                                                              ['path'],
                                                              '\n        Return the normalized path (on the server) of a given path.  This\n        can be used to quickly resolve symbolic links or determine what the\n        server is considering to be the "current folder" (by passing C{\'.\'}\n        as C{path}).\n\n        @param path: path to be normalized\n        @type path: str\n        @return: normalized form of the given path\n        @rtype: str\n\n        @raise IOError: if the path can\'t be resolved on the server\n        '),
                                                             ('chdir',
                                                              ['path'],
                                                              '\n        Change the "current directory" of this SFTP session.  Since SFTP\n        doesn\'t really have the concept of a current working directory, this\n        is emulated by paramiko.  Once you use this method to set a working\n        directory, all operations on this SFTPClient object will be relative\n        to that path. You can pass in C{None} to stop using a current working\n        directory.\n\n        @param path: new current working directory\n        @type path: str\n\n        @raise IOError: if the requested path doesn\'t exist on the server\n\n        @since: 1.4\n        '),
                                                             ('getcwd',
                                                              [],
                                                              '\n        Return the "current working directory" for this SFTP session, as\n        emulated by paramiko.  If no directory has been set with L{chdir},\n        this method will return C{None}.\n\n        @return: the current working directory on the server, or C{None}\n        @rtype: str\n\n        @since: 1.4\n        '),
                                                             ('put',
                                                              ['localpath',
                                                               'remotepath',
                                                               'callback=None',
                                                               'confirm=True'],
                                                              '\n        Copy a local file (C{localpath}) to the SFTP server as C{remotepath}.\n        Any exception raised by operations will be passed through.  This\n        method is primarily provided as a convenience.\n\n        The SFTP operations use pipelining for speed.\n\n        @param localpath: the local file to copy\n        @type localpath: str\n        @param remotepath: the destination path on the SFTP server\n        @type remotepath: str\n        @param callback: optional callback function that accepts the bytes\n            transferred so far and the total bytes to be transferred\n            (since 1.7.4)\n        @type callback: function(int, int)\n        @param confirm: whether to do a stat() on the file afterwards to\n            confirm the file size (since 1.7.7)\n        @type confirm: bool\n\n        @return: an object containing attributes about the given file\n            (since 1.7.4)\n        @rtype: SFTPAttributes\n\n        @since: 1.4\n        '),
                                                             ('get',
                                                              ['remotepath',
                                                               'localpath',
                                                               'callback=None'],
                                                              '\n        Copy a remote file (C{remotepath}) from the SFTP server to the local\n        host as C{localpath}.  Any exception raised by operations will be\n        passed through.  This method is primarily provided as a convenience.\n\n        @param remotepath: the remote file to copy\n        @type remotepath: str\n        @param localpath: the destination path on the local host\n        @type localpath: str\n        @param callback: optional callback function that accepts the bytes\n            transferred so far and the total bytes to be transferred\n            (since 1.7.4)\n        @type callback: function(int, int)\n\n        @since: 1.4\n        '),
                                                             ('_request', ['t', '*arg'], ''),
                                                             ('_async_request',
                                                              ['fileobj', 't', '*arg'],
                                                              ''),
                                                             ('_read_response',
                                                              ['waitfor=None'],
                                                              ''),
                                                             ('_finish_responses',
                                                              ['fileobj'],
                                                              ''),
                                                             ('_convert_status',
                                                              ['msg'],
                                                              '\n        Raises EOFError or IOError on error status; otherwise does nothing.\n        '),
                                                             ('_adjust_cwd',
                                                              ['path'],
                                                              '\n        Return an adjusted path if we\'re emulating a "current working\n        directory" for the server.\n        ')],
                                                 'properties': ['sock',
                                                                'ultra_debug',
                                                                'request_number',
                                                                '_lock',
                                                                '_cwd',
                                                                '_expecting',
                                                                'logger',
                                                                'from_transport',
                                                                'file',
                                                                'unlink']},
             'paramiko.sftp_file.SFTPFile': {'bases': ['paramiko.file.BufferedFile'],
                                             'constructor': ['sftp',
                                                             'handle',
                                                             "mode='r'",
                                                             'bufsize=-1'],
                                             'docstring': '\n    Proxy object for a file on the remote server, in client mode SFTP.\n    ',
                                             'methods': [('__del__', [], ''),
                                                         ('close', [], ''),
                                                         ('_close', ['async=False'], ''),
                                                         ('_data_in_prefetch_requests',
                                                          ['offset', 'size'],
                                                          ''),
                                                         ('_data_in_prefetch_buffers',
                                                          ['offset'],
                                                          '\n        if a block of data is present in the prefetch buffers, at the given\n        offset, return the offset of the relevant prefetch buffer.  otherwise,\n        return None.  this guarantees nothing about the number of bytes\n        collected in the prefetch buffer so far.\n        '),
                                                         ('_read_prefetch',
                                                          ['size'],
                                                          "\n        read data out of the prefetch buffer, if possible.  if the data isn't\n        in the buffer, return None.  otherwise, behaves like a normal read.\n        "),
                                                         ('_read', ['size'], ''),
                                                         ('_write', ['data'], ''),
                                                         ('settimeout',
                                                          ['timeout'],
                                                          '\n        Set a timeout on read/write operations on the underlying socket or\n        ssh L{Channel}.\n\n        @see: L{Channel.settimeout}\n        @param timeout: seconds to wait for a pending read/write operation\n            before raising C{socket.timeout}, or C{None} for no timeout\n        @type timeout: float\n        '),
                                                         ('gettimeout',
                                                          [],
                                                          '\n        Returns the timeout in seconds (as a float) associated with the socket\n        or ssh L{Channel} used for this file.\n\n        @see: L{Channel.gettimeout}\n        @rtype: float\n        '),
                                                         ('setblocking',
                                                          ['blocking'],
                                                          '\n        Set blocking or non-blocking mode on the underiying socket or ssh\n        L{Channel}.\n\n        @see: L{Channel.setblocking}\n        @param blocking: 0 to set non-blocking mode; non-0 to set blocking\n            mode.\n        @type blocking: int\n        '),
                                                         ('seek', ['offset', 'whence=0'], ''),
                                                         ('stat',
                                                          [],
                                                          '\n        Retrieve information about this file from the remote system.  This is\n        exactly like L{SFTP.stat}, except that it operates on an already-open\n        file.\n\n        @return: an object containing attributes about this file.\n        @rtype: SFTPAttributes\n        '),
                                                         ('chmod',
                                                          ['mode'],
                                                          "\n        Change the mode (permissions) of this file.  The permissions are\n        unix-style and identical to those used by python's C{os.chmod}\n        function.\n\n        @param mode: new permissions\n        @type mode: int\n        "),
                                                         ('chown',
                                                          ['uid', 'gid'],
                                                          "\n        Change the owner (C{uid}) and group (C{gid}) of this file.  As with\n        python's C{os.chown} function, you must pass both arguments, so if you\n        only want to change one, use L{stat} first to retrieve the current\n        owner and group.\n\n        @param uid: new owner's uid\n        @type uid: int\n        @param gid: new group id\n        @type gid: int\n        "),
                                                         ('utime',
                                                          ['times'],
                                                          "\n        Set the access and modified times of this file.  If\n        C{times} is C{None}, then the file's access and modified times are set\n        to the current time.  Otherwise, C{times} must be a 2-tuple of numbers,\n        of the form C{(atime, mtime)}, which is used to set the access and\n        modified times, respectively.  This bizarre API is mimicked from python\n        for the sake of consistency -- I apologize.\n\n        @param times: C{None} or a tuple of (access time, modified time) in\n            standard internet epoch time (seconds since 01 January 1970 GMT)\n        @type times: tuple(int)\n        "),
                                                         ('truncate',
                                                          ['size'],
                                                          '\n        Change the size of this file.  This usually extends\n        or shrinks the size of the file, just like the C{truncate()} method on\n        python file objects.\n        \n        @param size: the new size of the file\n        @type size: int or long\n        '),
                                                         ('check',
                                                          ['hash_algorithm',
                                                           'offset=0',
                                                           'length=0',
                                                           'block_size=0'],
                                                          '\n        Ask the server for a hash of a section of this file.  This can be used\n        to verify a successful upload or download, or for various rsync-like\n        operations.\n        \n        The file is hashed from C{offset}, for C{length} bytes.  If C{length}\n        is 0, the remainder of the file is hashed.  Thus, if both C{offset}\n        and C{length} are zero, the entire file is hashed.\n        \n        Normally, C{block_size} will be 0 (the default), and this method will\n        return a byte string representing the requested hash (for example, a\n        string of length 16 for MD5, or 20 for SHA-1).  If a non-zero\n        C{block_size} is given, each chunk of the file (from C{offset} to\n        C{offset + length}) of C{block_size} bytes is computed as a separate\n        hash.  The hash results are all concatenated and returned as a single\n        string.\n        \n        For example, C{check(\'sha1\', 0, 1024, 512)} will return a string of\n        length 40.  The first 20 bytes will be the SHA-1 of the first 512 bytes\n        of the file, and the last 20 bytes will be the SHA-1 of the next 512\n        bytes.\n        \n        @param hash_algorithm: the name of the hash algorithm to use (normally\n            C{"sha1"} or C{"md5"})\n        @type hash_algorithm: str\n        @param offset: offset into the file to begin hashing (0 means to start\n            from the beginning)\n        @type offset: int or long\n        @param length: number of bytes to hash (0 means continue to the end of\n            the file)\n        @type length: int or long\n        @param block_size: number of bytes to hash per result (must not be less\n            than 256; 0 means to compute only one hash of the entire segment)\n        @type block_size: int\n        @return: string of bytes representing the hash of each block,\n            concatenated together\n        @rtype: str\n        \n        @note: Many (most?) servers don\'t support this extension yet.\n        \n        @raise IOError: if the server doesn\'t support the "check-file"\n            extension, or possibly doesn\'t support the hash algorithm\n            requested\n            \n        @since: 1.4\n        '),
                                                         ('set_pipelined',
                                                          ['pipelined=True'],
                                                          "\n        Turn on/off the pipelining of write operations to this file.  When\n        pipelining is on, paramiko won't wait for the server response after\n        each write operation.  Instead, they're collected as they come in.\n        At the first non-write operation (including L{close}), all remaining\n        server responses are collected.  This means that if there was an error\n        with one of your later writes, an exception might be thrown from\n        within L{close} instead of L{write}.\n        \n        By default, files are I{not} pipelined.\n        \n        @param pipelined: C{True} if pipelining should be turned on for this\n            file; C{False} otherwise\n        @type pipelined: bool\n        \n        @since: 1.5\n        "),
                                                         ('prefetch',
                                                          [],
                                                          "\n        Pre-fetch the remaining contents of this file in anticipation of\n        future L{read} calls.  If reading the entire file, pre-fetching can\n        dramatically improve the download speed by avoiding roundtrip latency.\n        The file's contents are incrementally buffered in a background thread.\n        \n        The prefetched data is stored in a buffer until read via the L{read}\n        method.  Once data has been read, it's removed from the buffer.  The\n        data may be read in a random order (using L{seek}); chunks of the\n        buffer that haven't been read will continue to be buffered.\n\n        @since: 1.5.1\n        "),
                                                         ('readv',
                                                          ['chunks'],
                                                          '\n        Read a set of blocks from the file by (offset, length).  This is more\n        efficient than doing a series of L{seek} and L{read} calls, since the\n        prefetch machinery is used to retrieve all the requested blocks at\n        once.\n        \n        @param chunks: a list of (offset, length) tuples indicating which\n            sections of the file to read\n        @type chunks: list(tuple(long, int))\n        @return: a list of blocks read, in the same order as in C{chunks}\n        @rtype: list(str)\n        \n        @since: 1.5.4\n        '),
                                                         ('_get_size', [], ''),
                                                         ('_start_prefetch', ['chunks'], ''),
                                                         ('_prefetch_thread', ['chunks'], ''),
                                                         ('_async_response', ['t', 'msg'], ''),
                                                         ('_check_exception',
                                                          [],
                                                          "if there's a saved exception, raise & clear it")],
                                             'properties': ['MAX_REQUEST_SIZE',
                                                            'sftp',
                                                            'handle',
                                                            'pipelined',
                                                            '_prefetching',
                                                            '_prefetch_done',
                                                            '_prefetch_data',
                                                            '_prefetch_reads',
                                                            '_saved_exception',
                                                            '_realpos',
                                                            '_pos',
                                                            '_rbuffer']},
             'paramiko.sftp_handle.SFTPHandle': {'bases': ['object'],
                                                 'constructor': ['flags=0'],
                                                 'docstring': '\n    Abstract object representing a handle to an open file (or folder) in an\n    SFTP server implementation.  Each handle has a string representation used\n    by the client to refer to the underlying file.\n    \n    Server implementations can (and should) subclass SFTPHandle to implement\n    features of a file handle, like L{stat} or L{chattr}.\n    ',
                                                 'methods': [('close',
                                                              [],
                                                              "\n        When a client closes a file, this method is called on the handle.\n        Normally you would use this method to close the underlying OS level\n        file object(s).\n        \n        The default implementation checks for attributes on C{self} named\n        C{readfile} and/or C{writefile}, and if either or both are present,\n        their C{close()} methods are called.  This means that if you are\n        using the default implementations of L{read} and L{write}, this\n        method's default implementation should be fine also.\n        "),
                                                             ('read',
                                                              ['offset', 'length'],
                                                              '\n        Read up to C{length} bytes from this file, starting at position\n        C{offset}.  The offset may be a python long, since SFTP allows it\n        to be 64 bits.\n\n        If the end of the file has been reached, this method may return an\n        empty string to signify EOF, or it may also return L{SFTP_EOF}.\n\n        The default implementation checks for an attribute on C{self} named\n        C{readfile}, and if present, performs the read operation on the python\n        file-like object found there.  (This is meant as a time saver for the\n        common case where you are wrapping a python file object.)\n\n        @param offset: position in the file to start reading from.\n        @type offset: int or long\n        @param length: number of bytes to attempt to read.\n        @type length: int\n        @return: data read from the file, or an SFTP error code.\n        @rtype: str\n        '),
                                                             ('write',
                                                              ['offset', 'data'],
                                                              "\n        Write C{data} into this file at position C{offset}.  Extending the\n        file past its original end is expected.  Unlike python's normal\n        C{write()} methods, this method cannot do a partial write: it must\n        write all of C{data} or else return an error.\n\n        The default implementation checks for an attribute on C{self} named\n        C{writefile}, and if present, performs the write operation on the\n        python file-like object found there.  The attribute is named\n        differently from C{readfile} to make it easy to implement read-only\n        (or write-only) files, but if both attributes are present, they should\n        refer to the same file.\n        \n        @param offset: position in the file to start reading from.\n        @type offset: int or long\n        @param data: data to write into the file.\n        @type data: str\n        @return: an SFTP error code like L{SFTP_OK}.\n        "),
                                                             ('stat',
                                                              [],
                                                              "\n        Return an L{SFTPAttributes} object referring to this open file, or an\n        error code.  This is equivalent to L{SFTPServerInterface.stat}, except\n        it's called on an open file instead of a path.\n\n        @return: an attributes object for the given file, or an SFTP error\n            code (like L{SFTP_PERMISSION_DENIED}).\n        @rtype: L{SFTPAttributes} I{or error code}\n        "),
                                                             ('chattr',
                                                              ['attr'],
                                                              '\n        Change the attributes of this file.  The C{attr} object will contain\n        only those fields provided by the client in its request, so you should\n        check for the presence of fields before using them.\n\n        @param attr: the attributes to change on this file.\n        @type attr: L{SFTPAttributes}\n        @return: an error code like L{SFTP_OK}.\n        @rtype: int\n        '),
                                                             ('_set_files',
                                                              ['files'],
                                                              '\n        Used by the SFTP server code to cache a directory listing.  (In\n        the SFTP protocol, listing a directory is a multi-stage process\n        requiring a temporary handle.)\n        '),
                                                             ('_get_next_files',
                                                              [],
                                                              '\n        Used by the SFTP server code to retreive a cached directory\n        listing.\n        '),
                                                             ('_get_name', [], ''),
                                                             ('_set_name', ['name'], '')],
                                                 'properties': ['__flags',
                                                                '__name',
                                                                '__files',
                                                                '__tell']},
             'paramiko.sftp_server.SFTPServer': {'bases': ['paramiko.sftp_server.BaseSFTP',
                                                           'paramiko.server.SubsystemHandler'],
                                                 'constructor': ['channel',
                                                                 'name',
                                                                 'server',
                                                                 'sftp_si=SFTPServerInterface',
                                                                 '*largs',
                                                                 '**kwargs'],
                                                 'docstring': '\n    Server-side SFTP subsystem support.  Since this is a L{SubsystemHandler},\n    it can be (and is meant to be) set as the handler for C{"sftp"} requests.\n    Use L{Transport.set_subsystem_handler} to activate this class.\n    ',
                                                 'methods': [('_log', ['level', 'msg'], ''),
                                                             ('start_subsystem',
                                                              ['name', 'transport', 'channel'],
                                                              ''),
                                                             ('finish_subsystem', [], ''),
                                                             ('convert_errno',
                                                              [],
                                                              '\n        Convert an errno value (as from an C{OSError} or C{IOError}) into a\n        standard SFTP result code.  This is a convenience function for trapping\n        exceptions in server code and returning an appropriate result.\n\n        @param e: an errno code, as from C{OSError.errno}.\n        @type e: int\n        @return: an SFTP error code like L{SFTP_NO_SUCH_FILE}.\n        @rtype: int\n        '),
                                                             ('set_file_attr',
                                                              ['attr'],
                                                              "\n        Change a file's attributes on the local filesystem.  The contents of\n        C{attr} are used to change the permissions, owner, group ownership,\n        and/or modification & access time of the file, depending on which\n        attributes are present in C{attr}.\n\n        This is meant to be a handy helper function for translating SFTP file\n        requests into local file operations.\n        \n        @param filename: name of the file to alter (should usually be an\n            absolute path).\n        @type filename: str\n        @param attr: attributes to change.\n        @type attr: L{SFTPAttributes}\n        "),
                                                             ('_response',
                                                              ['request_number', 't', '*arg'],
                                                              ''),
                                                             ('_send_handle_response',
                                                              ['request_number',
                                                               'handle',
                                                               'folder=False'],
                                                              ''),
                                                             ('_send_status',
                                                              ['request_number',
                                                               'code',
                                                               'desc=None'],
                                                              ''),
                                                             ('_open_folder',
                                                              ['request_number', 'path'],
                                                              ''),
                                                             ('_read_folder',
                                                              ['request_number', 'folder'],
                                                              ''),
                                                             ('_check_file',
                                                              ['request_number', 'msg'],
                                                              ''),
                                                             ('_convert_pflags',
                                                              ['pflags'],
                                                              "convert SFTP-style open() flags to python's os.open() flags"),
                                                             ('_process',
                                                              ['t', 'request_number', 'msg'],
                                                              '')],
                                                 'properties': ['logger',
                                                                'ultra_debug',
                                                                'next_handle',
                                                                'file_table',
                                                                'folder_table',
                                                                'server',
                                                                'sock',
                                                                'convert_errno',
                                                                'set_file_attr']},
             'paramiko.sftp_si.SFTPServerInterface': {'bases': ['object'],
                                                      'constructor': ['server',
                                                                      '*largs',
                                                                      '**kwargs'],
                                                      'docstring': "\n    This class defines an interface for controlling the behavior of paramiko\n    when using the L{SFTPServer} subsystem to provide an SFTP server.\n\n    Methods on this class are called from the SFTP session's thread, so you can\n    block as long as necessary without affecting other sessions (even other\n    SFTP sessions).  However, raising an exception will usually cause the SFTP\n    session to abruptly end, so you will usually want to catch exceptions and\n    return an appropriate error code.\n    \n    All paths are in string form instead of unicode because not all SFTP\n    clients & servers obey the requirement that paths be encoded in UTF-8.\n    ",
                                                      'methods': [('session_started',
                                                                   [],
                                                                   '\n        The SFTP server session has just started.  This method is meant to be\n        overridden to perform any necessary setup before handling callbacks\n        from SFTP operations.\n        '),
                                                                  ('session_ended',
                                                                   [],
                                                                   '\n        The SFTP server session has just ended, either cleanly or via an\n        exception.  This method is meant to be overridden to perform any\n        necessary cleanup before this C{SFTPServerInterface} object is\n        destroyed.\n        '),
                                                                  ('open',
                                                                   ['path', 'flags', 'attr'],
                                                                   '\n        Open a file on the server and create a handle for future operations\n        on that file.  On success, a new object subclassed from L{SFTPHandle}\n        should be returned.  This handle will be used for future operations\n        on the file (read, write, etc).  On failure, an error code such as\n        L{SFTP_PERMISSION_DENIED} should be returned.\n\n        C{flags} contains the requested mode for opening (read-only,\n        write-append, etc) as a bitset of flags from the C{os} module:\n            - C{os.O_RDONLY}\n            - C{os.O_WRONLY}\n            - C{os.O_RDWR}\n            - C{os.O_APPEND}\n            - C{os.O_CREAT}\n            - C{os.O_TRUNC}\n            - C{os.O_EXCL}\n        (One of C{os.O_RDONLY}, C{os.O_WRONLY}, or C{os.O_RDWR} will always\n        be set.)\n\n        The C{attr} object contains requested attributes of the file if it\n        has to be created.  Some or all attribute fields may be missing if\n        the client didn\'t specify them.\n        \n        @note: The SFTP protocol defines all files to be in "binary" mode.\n            There is no equivalent to python\'s "text" mode.\n\n        @param path: the requested path (relative or absolute) of the file\n            to be opened.\n        @type path: str\n        @param flags: flags or\'d together from the C{os} module indicating the\n            requested mode for opening the file.\n        @type flags: int\n        @param attr: requested attributes of the file if it is newly created.\n        @type attr: L{SFTPAttributes}\n        @return: a new L{SFTPHandle} I{or error code}.\n        @rtype L{SFTPHandle}\n        '),
                                                                  ('list_folder',
                                                                   ['path'],
                                                                   '\n        Return a list of files within a given folder.  The C{path} will use\n        posix notation (C{"/"} separates folder names) and may be an absolute\n        or relative path.\n\n        The list of files is expected to be a list of L{SFTPAttributes}\n        objects, which are similar in structure to the objects returned by\n        C{os.stat}.  In addition, each object should have its C{filename}\n        field filled in, since this is important to a directory listing and\n        not normally present in C{os.stat} results.  The method\n        L{SFTPAttributes.from_stat} will usually do what you want.\n\n        In case of an error, you should return one of the C{SFTP_*} error\n        codes, such as L{SFTP_PERMISSION_DENIED}.\n\n        @param path: the requested path (relative or absolute) to be listed.\n        @type path: str\n        @return: a list of the files in the given folder, using\n            L{SFTPAttributes} objects.\n        @rtype: list of L{SFTPAttributes} I{or error code}\n        \n        @note: You should normalize the given C{path} first (see the\n        C{os.path} module) and check appropriate permissions before returning\n        the list of files.  Be careful of malicious clients attempting to use\n        relative paths to escape restricted folders, if you\'re doing a direct\n        translation from the SFTP server path to your local filesystem.\n        '),
                                                                  ('stat',
                                                                   ['path'],
                                                                   '\n        Return an L{SFTPAttributes} object for a path on the server, or an\n        error code.  If your server supports symbolic links (also known as\n        "aliases"), you should follow them.  (L{lstat} is the corresponding\n        call that doesn\'t follow symlinks/aliases.)\n\n        @param path: the requested path (relative or absolute) to fetch\n            file statistics for.\n        @type path: str\n        @return: an attributes object for the given file, or an SFTP error\n            code (like L{SFTP_PERMISSION_DENIED}).\n        @rtype: L{SFTPAttributes} I{or error code}\n        '),
                                                                  ('lstat',
                                                                   ['path'],
                                                                   '\n        Return an L{SFTPAttributes} object for a path on the server, or an\n        error code.  If your server supports symbolic links (also known as\n        "aliases"), you should I{not} follow them -- instead, you should\n        return data on the symlink or alias itself.  (L{stat} is the\n        corresponding call that follows symlinks/aliases.)\n\n        @param path: the requested path (relative or absolute) to fetch\n            file statistics for.\n        @type path: str\n        @return: an attributes object for the given file, or an SFTP error\n            code (like L{SFTP_PERMISSION_DENIED}).\n        @rtype: L{SFTPAttributes} I{or error code}\n        '),
                                                                  ('remove',
                                                                   ['path'],
                                                                   '\n        Delete a file, if possible.\n\n        @param path: the requested path (relative or absolute) of the file\n            to delete.\n        @type path: str\n        @return: an SFTP error code like L{SFTP_OK}.\n        @rtype: int\n        '),
                                                                  ('rename',
                                                                   ['oldpath', 'newpath'],
                                                                   '\n        Rename (or move) a file.  The SFTP specification implies that this\n        method can be used to move an existing file into a different folder,\n        and since there\'s no other (easy) way to move files via SFTP, it\'s\n        probably a good idea to implement "move" in this method too, even for\n        files that cross disk partition boundaries, if at all possible.\n        \n        @note: You should return an error if a file with the same name as\n            C{newpath} already exists.  (The rename operation should be\n            non-desctructive.)\n\n        @param oldpath: the requested path (relative or absolute) of the\n            existing file.\n        @type oldpath: str\n        @param newpath: the requested new path of the file.\n        @type newpath: str\n        @return: an SFTP error code like L{SFTP_OK}.\n        @rtype: int\n        '),
                                                                  ('mkdir',
                                                                   ['path', 'attr'],
                                                                   '\n        Create a new directory with the given attributes.  The C{attr}\n        object may be considered a "hint" and ignored.\n\n        The C{attr} object will contain only those fields provided by the\n        client in its request, so you should use C{hasattr} to check for\n        the presense of fields before using them.  In some cases, the C{attr}\n        object may be completely empty.\n\n        @param path: requested path (relative or absolute) of the new\n            folder.\n        @type path: str\n        @param attr: requested attributes of the new folder.\n        @type attr: L{SFTPAttributes}\n        @return: an SFTP error code like L{SFTP_OK}.\n        @rtype: int\n        '),
                                                                  ('rmdir',
                                                                   ['path'],
                                                                   '\n        Remove a directory if it exists.  The C{path} should refer to an\n        existing, empty folder -- otherwise this method should return an\n        error.\n\n        @param path: requested path (relative or absolute) of the folder\n            to remove.\n        @type path: str\n        @return: an SFTP error code like L{SFTP_OK}.\n        @rtype: int\n        '),
                                                                  ('chattr',
                                                                   ['path', 'attr'],
                                                                   '\n        Change the attributes of a file.  The C{attr} object will contain\n        only those fields provided by the client in its request, so you\n        should check for the presence of fields before using them.\n\n        @param path: requested path (relative or absolute) of the file to\n            change.\n        @type path: str\n        @param attr: requested attributes to change on the file.\n        @type attr: L{SFTPAttributes}\n        @return: an error code like L{SFTP_OK}.\n        @rtype: int\n        '),
                                                                  ('canonicalize',
                                                                   ['path'],
                                                                   '\n        Return the canonical form of a path on the server.  For example,\n        if the server\'s home folder is C{/home/foo}, the path\n        C{"../betty"} would be canonicalized to C{"/home/betty"}.  Note\n        the obvious security issues: if you\'re serving files only from a\n        specific folder, you probably don\'t want this method to reveal path\n        names outside that folder.\n\n        You may find the python methods in C{os.path} useful, especially\n        C{os.path.normpath} and C{os.path.realpath}.\n\n        The default implementation returns C{os.path.normpath(\'/\' + path)}.\n        '),
                                                                  ('readlink',
                                                                   ['path'],
                                                                   "\n        Return the target of a symbolic link (or shortcut) on the server.\n        If the specified path doesn't refer to a symbolic link, an error\n        should be returned.\n        \n        @param path: path (relative or absolute) of the symbolic link.\n        @type path: str\n        @return: the target path of the symbolic link, or an error code like\n            L{SFTP_NO_SUCH_FILE}.\n        @rtype: str I{or error code}\n        "),
                                                                  ('symlink',
                                                                   ['target_path', 'path'],
                                                                   '\n        Create a symbolic link on the server, as new pathname C{path},\n        with C{target_path} as the target of the link.\n        \n        @param target_path: path (relative or absolute) of the target for\n            this new symbolic link.\n        @type target_path: str\n        @param path: path (relative or absolute) of the symbolic link to\n            create.\n        @type path: str\n        @return: an error code like C{SFTP_OK}.\n        @rtype: int\n        ')],
                                                      'properties': []},
             'paramiko.ssh_exception.AuthenticationException': {'bases': ['paramiko.ssh_exception.SSHException'],
                                                                'constructor': [],
                                                                'docstring': '\n    Exception raised when authentication failed for some reason.  It may be\n    possible to retry with different credentials.  (Other classes specify more\n    specific reasons.)\n    \n    @since: 1.6\n    ',
                                                                'methods': [],
                                                                'properties': []},
             'paramiko.ssh_exception.BadAuthenticationType': {'bases': ['paramiko.ssh_exception.AuthenticationException'],
                                                              'constructor': ['explanation',
                                                                              'types'],
                                                              'docstring': '\n    Exception raised when an authentication type (like password) is used, but\n    the server isn\'t allowing that type.  (It may only allow public-key, for\n    example.)\n    \n    @ivar allowed_types: list of allowed authentication types provided by the\n        server (possible values are: C{"none"}, C{"password"}, and\n        C{"publickey"}).\n    @type allowed_types: list\n    \n    @since: 1.1\n    ',
                                                              'methods': [('__str__', [], '')],
                                                              'properties': ['allowed_types']},
             'paramiko.ssh_exception.BadHostKeyException': {'bases': ['paramiko.ssh_exception.SSHException'],
                                                            'constructor': ['hostname',
                                                                            'got_key',
                                                                            'expected_key'],
                                                            'docstring': '\n    The host key given by the SSH server did not match what we were expecting.\n    \n    @ivar hostname: the hostname of the SSH server\n    @type hostname: str\n    @ivar key: the host key presented by the server\n    @type key: L{PKey}\n    @ivar expected_key: the host key expected\n    @type expected_key: L{PKey}\n    \n    @since: 1.6\n    ',
                                                            'methods': [],
                                                            'properties': ['hostname',
                                                                           'key',
                                                                           'expected_key']},
             'paramiko.ssh_exception.ChannelException': {'bases': ['paramiko.ssh_exception.SSHException'],
                                                         'constructor': ['code', 'text'],
                                                         'docstring': '\n    Exception raised when an attempt to open a new L{Channel} fails.\n    \n    @ivar code: the error code returned by the server\n    @type code: int\n    \n    @since: 1.6\n    ',
                                                         'methods': [],
                                                         'properties': ['code']},
             'paramiko.ssh_exception.PartialAuthentication': {'bases': ['paramiko.ssh_exception.AuthenticationException'],
                                                              'constructor': ['types'],
                                                              'docstring': '\n    An internal exception thrown in the case of partial authentication.\n    ',
                                                              'methods': [],
                                                              'properties': ['allowed_types']},
             'paramiko.ssh_exception.PasswordRequiredException': {'bases': ['paramiko.ssh_exception.AuthenticationException'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    Exception raised when a password is needed to unlock a private key file.\n    ',
                                                                  'methods': [],
                                                                  'properties': []},
             'paramiko.ssh_exception.ProxyCommandFailure': {'bases': ['paramiko.ssh_exception.SSHException'],
                                                            'constructor': ['command', 'error'],
                                                            'docstring': '\n    The "ProxyCommand" found in the .ssh/config file returned an error.\n\n    @ivar command: The command line that is generating this exception.\n    @type command: str\n    @ivar error: The error captured from the proxy command output.\n    @type error: str\n    ',
                                                            'methods': [],
                                                            'properties': ['error']},
             'paramiko.ssh_exception.SSHException': {'bases': ['Exception'],
                                                     'constructor': [],
                                                     'docstring': '\n    Exception raised by failures in SSH2 protocol negotiation or logic errors.\n    ',
                                                     'methods': [],
                                                     'properties': []},
             'paramiko.util.Counter': {'bases': ['object'],
                                       'constructor': ['nbits',
                                                       'initial_value=1L',
                                                       'overflow=0L'],
                                       'docstring': 'Stateful counter for CTR mode crypto',
                                       'methods': [('__call__',
                                                    [],
                                                    'Increament the counter and return the new value'),
                                                   ('new',
                                                    ['nbits',
                                                     'initial_value=1L',
                                                     'overflow=0L'],
                                                    '')],
                                       'properties': ['blocksize', 'overflow', 'value', 'new']},
             'paramiko.util.PFilter': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('filter', ['record'], '')],
                                       'properties': []},
             'paramiko.util.enumerate': {'bases': [],
                                         'constructor': ['sequence'],
                                         'docstring': '',
                                         'methods': [('__iter__', [], '')],
                                         'properties': ['sequence']},
             'paramiko.win_pageant.COPYDATASTRUCT': {'bases': ['ctypes.Structure'],
                                                     'constructor': [],
                                                     'docstring': '\n    ctypes implementation of\n    http://msdn.microsoft.com/en-us/library/windows/desktop/ms649010%28v=vs.85%29.aspx\n    ',
                                                     'methods': [],
                                                     'properties': ['_fields_']},
             'paramiko.win_pageant.PageantConnection': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '\n    Mock "connection" to an agent which roughly approximates the behavior of\n    a unix local-domain socket (as used by Agent).  Requests are sent to the\n    pageant daemon via special Windows magick, and responses are buffered back\n    for subsequent reads.\n    ',
                                                        'methods': [('send', ['data'], ''),
                                                                    ('recv', ['n'], ''),
                                                                    ('close', [], '')],
                                                        'properties': ['_response']},
             'serial.rfc2217.PortManager': {'bases': ['object'],
                                            'constructor': ['serial_port',
                                                            'connection',
                                                            'logger=None'],
                                            'docstring': 'This class manages the state of Telnet and RFC 2217. It needs a serial\n    instance and a connection to work with. Connection is expected to implement\n    a (thread safe) write function, that writes the string to the network.',
                                            'methods': [('_client_ok',
                                                         [],
                                                         'callback of telnet option. it gets called when option is activated.\n        this one here is used to detect when the client agrees on RFC 2217. a\n        flag is set so that other functions like check_modem_lines know if the\n        client is ok.'),
                                                        ('telnetSendOption',
                                                         ['action', 'option'],
                                                         'Send DO, DONT, WILL, WONT.'),
                                                        ('rfc2217SendSubnegotiation',
                                                         ['option', "value=''"],
                                                         'Subnegotiation of RFC 2217 parameters.'),
                                                        ('check_modem_lines',
                                                         ['force_notification=False'],
                                                         ''),
                                                        ('escape',
                                                         ['data'],
                                                         'this generator function is for the user. all outgoing data has to be\n        properly escaped, so that no IAC character in the data stream messes up\n        the Telnet state machine in the server.\n\n        socket.sendall(escape(data))\n        '),
                                                        ('filter',
                                                         ['data'],
                                                         'handle a bunch of incoming bytes. this is a generator. it will yield\n        all characters not of interest for Telnet/RFC 2217.\n\n        The idea is that the reader thread pushes data from the socket through\n        this filter:\n\n        for byte in filter(socket.recv(1024)):\n            # do things like CR/LF conversion/whatever\n            # and write data to the serial port\n            serial.write(byte)\n\n        (socket error handling code left as exercise for the reader)\n        '),
                                                        ('_telnetProcessCommand',
                                                         ['command'],
                                                         'Process commands other than DO, DONT, WILL, WONT.'),
                                                        ('_telnetNegotiateOption',
                                                         ['command', 'option'],
                                                         'Process incoming DO, DONT, WILL, WONT.'),
                                                        ('_telnetProcessSubnegotiation',
                                                         ['suboption'],
                                                         'Process subnegotiation, the data between IAC SB and IAC SE.')],
                                            'properties': ['serial',
                                                           'connection',
                                                           'logger',
                                                           '_client_is_rfc2217',
                                                           'mode',
                                                           'suboption',
                                                           'telnet_command',
                                                           'modemstate_mask',
                                                           'last_modemstate',
                                                           'linstate_mask',
                                                           '_telnet_options',
                                                           '_remote_suspend_flow']},
             'serial.rfc2217.RFC2217Serial': {'bases': ['serial.rfc2217.SerialBase'],
                                              'constructor': [],
                                              'docstring': 'Serial port implementation for RFC 2217 remote serial ports.',
                                              'methods': [('open',
                                                           [],
                                                           'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                          ('_reconfigurePort',
                                                           [],
                                                           'Set communication parameters on opened port.'),
                                                          ('close', [], 'Close port'),
                                                          ('makeDeviceName', ['port'], ''),
                                                          ('fromURL',
                                                           ['url'],
                                                           'extract host and port from an URL string'),
                                                          ('inWaiting',
                                                           [],
                                                           'Return the number of characters currently in the input buffer.'),
                                                          ('read',
                                                           ['size=1'],
                                                           'Read size bytes from the serial port. If a timeout is set it may\n        return less characters as requested. With no timeout it will block\n        until the requested number of bytes is read.'),
                                                          ('write',
                                                           ['data'],
                                                           'Output the given string over the serial port. Can block if the\n        connection is blocked. May raise SerialException if the connection is\n        closed.'),
                                                          ('flushInput',
                                                           [],
                                                           'Clear input buffer, discarding all that is in the buffer.'),
                                                          ('flushOutput',
                                                           [],
                                                           'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                          ('sendBreak',
                                                           ['duration=0.25'],
                                                           'Send break condition. Timed, returns to idle state after given\n        duration.'),
                                                          ('setBreak',
                                                           ['level=True'],
                                                           'Set break: Controls TXD. When active, to transmitting is\n        possible.'),
                                                          ('setRTS',
                                                           ['level=True'],
                                                           'Set terminal status line: Request To Send.'),
                                                          ('setDTR',
                                                           ['level=True'],
                                                           'Set terminal status line: Data Terminal Ready.'),
                                                          ('getCTS',
                                                           [],
                                                           'Read terminal status line: Clear To Send.'),
                                                          ('getDSR',
                                                           [],
                                                           'Read terminal status line: Data Set Ready.'),
                                                          ('getRI',
                                                           [],
                                                           'Read terminal status line: Ring Indicator.'),
                                                          ('getCD',
                                                           [],
                                                           'Read terminal status line: Carrier Detect.'),
                                                          ('_telnetReadLoop',
                                                           [],
                                                           'read loop for the socket.'),
                                                          ('_telnetProcessCommand',
                                                           ['command'],
                                                           'Process commands other than DO, DONT, WILL, WONT.'),
                                                          ('_telnetNegotiateOption',
                                                           ['command', 'option'],
                                                           'Process incoming DO, DONT, WILL, WONT.'),
                                                          ('_telnetProcessSubnegotiation',
                                                           ['suboption'],
                                                           'Process subnegotiation, the data between IAC SB and IAC SE.'),
                                                          ('_internal_raw_write',
                                                           ['data'],
                                                           'internal socket write with no data escaping. used to send telnet stuff.'),
                                                          ('telnetSendOption',
                                                           ['action', 'option'],
                                                           'Send DO, DONT, WILL, WONT.'),
                                                          ('rfc2217SendSubnegotiation',
                                                           ['option', "value=''"],
                                                           'Subnegotiation of RFC2217 parameters.'),
                                                          ('rfc2217SendPurge', ['value'], ''),
                                                          ('rfc2217SetControl', ['value'], ''),
                                                          ('rfc2217FlowServerReady',
                                                           [],
                                                           'check if server is ready to receive data. block for some time when\n        not.'),
                                                          ('getModemState',
                                                           [],
                                                           'get last modem state (cached value. if value is "old", request a new\n        one. this cache helps that we don\'t issue to many requests when e.g. all\n        status lines, one after the other is queried by te user (getCTS, getDSR\n        etc.)')],
                                              'properties': ['BAUDRATES',
                                                             'logger',
                                                             '_ignore_set_control_answer',
                                                             '_poll_modem_state',
                                                             '_network_timeout',
                                                             '_socket',
                                                             '_read_buffer',
                                                             '_write_lock',
                                                             '_telnet_options',
                                                             '_rfc2217_port_settings',
                                                             '_rfc2217_options',
                                                             '_linestate',
                                                             '_modemstate',
                                                             '_modemstate_expires',
                                                             '_remote_suspend_flow',
                                                             '_thread',
                                                             '_isOpen']},
             'serial.rfc2217.Serial': {'bases': ['serial.rfc2217.RFC2217Serial', 'io.RawIOBase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'serial.rfc2217.TelnetOption': {'bases': ['object'],
                                             'constructor': ['connection',
                                                             'name',
                                                             'option',
                                                             'send_yes',
                                                             'send_no',
                                                             'ack_yes',
                                                             'ack_no',
                                                             'initial_state',
                                                             'activation_callback=None'],
                                             'docstring': 'Manage a single telnet option, keeps track of DO/DONT WILL/WONT.',
                                             'methods': [('__repr__',
                                                          [],
                                                          'String for debug outputs'),
                                                         ('process_incoming',
                                                          ['command'],
                                                          'A DO/DONT/WILL/WONT was received for this option, update state and\n        answer when needed.')],
                                             'properties': ['connection',
                                                            'name',
                                                            'option',
                                                            'send_yes',
                                                            'send_no',
                                                            'ack_yes',
                                                            'ack_no',
                                                            'state',
                                                            'active',
                                                            'activation_callback']},
             'serial.rfc2217.TelnetSubnegotiation': {'bases': ['object'],
                                                     'constructor': ['connection',
                                                                     'name',
                                                                     'option',
                                                                     'ack_option=None'],
                                                     'docstring': 'A object to handle subnegotiation of options. In this case actually\n    sub-sub options for RFC 2217. It is used to track com port options.',
                                                     'methods': [('__repr__',
                                                                  [],
                                                                  'String for debug outputs.'),
                                                                 ('set',
                                                                  ['value'],
                                                                  'request a change of the value. a request is sent to the server. if\n        the client needs to know if the change is performed he has to check the\n        state of this object.'),
                                                                 ('isReady',
                                                                  [],
                                                                  'check if answer from server has been received. when server rejects\n        the change, raise a ValueError.'),
                                                                 ('wait',
                                                                  ['timeout=3'],
                                                                  'wait until the subnegotiation has been acknowledged or timeout. It\n        can also throw a value error when the answer from the server does not\n        match the value sent.'),
                                                                 ('checkAnswer',
                                                                  ['suboption'],
                                                                  'check an incoming subnegotiation block. the parameter already has\n        cut off the header like sub option number and com port option value.')],
                                                     'properties': ['connection',
                                                                    'name',
                                                                    'option',
                                                                    'value',
                                                                    'ack_option',
                                                                    'state',
                                                                    'active']},
             'serial.serialcli.IronSerial': {'bases': ['serial.serialcli.SerialBase'],
                                             'constructor': [],
                                             'docstring': 'Serial port implemenation for .NET/Mono.',
                                             'methods': [('open',
                                                          [],
                                                          'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                         ('_reconfigurePort',
                                                          [],
                                                          'Set communication parameters on opened port.'),
                                                         ('close', [], 'Close port'),
                                                         ('makeDeviceName', ['port'], ''),
                                                         ('inWaiting',
                                                          [],
                                                          'Return the number of characters currently in the input buffer.'),
                                                         ('read',
                                                          ['size=1'],
                                                          'Read size bytes from the serial port. If a timeout is set it may\n           return less characters as requested. With no timeout it will block\n           until the requested number of bytes is read.'),
                                                         ('write',
                                                          ['data'],
                                                          'Output the given string over the serial port.'),
                                                         ('flushInput',
                                                          [],
                                                          'Clear input buffer, discarding all that is in the buffer.'),
                                                         ('flushOutput',
                                                          [],
                                                          'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                         ('sendBreak',
                                                          ['duration=0.25'],
                                                          'Send break condition. Timed, returns to idle state after given duration.'),
                                                         ('setBreak',
                                                          ['level=True'],
                                                          'Set break: Controls TXD. When active, to transmitting is possible.'),
                                                         ('setRTS',
                                                          ['level=True'],
                                                          'Set terminal status line: Request To Send'),
                                                         ('setDTR',
                                                          ['level=True'],
                                                          'Set terminal status line: Data Terminal Ready'),
                                                         ('getCTS',
                                                          [],
                                                          'Read terminal status line: Clear To Send'),
                                                         ('getDSR',
                                                          [],
                                                          'Read terminal status line: Data Set Ready'),
                                                         ('getRI',
                                                          [],
                                                          'Read terminal status line: Ring Indicator'),
                                                         ('getCD',
                                                          [],
                                                          'Read terminal status line: Carrier Detect')],
                                             'properties': ['BAUDRATES',
                                                            '_port_handle',
                                                            '_isOpen']},
             'serial.serialcli.Serial': {'bases': ['serial.serialcli.IronSerial',
                                                   'io.RawIOBase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'serial.serialjava.JavaSerial': {'bases': ['serial.serialjava.SerialBase'],
                                              'constructor': [],
                                              'docstring': 'Serial port class, implemented with Java Communications API and\n       thus usable with jython and the appropriate java extension.',
                                              'methods': [('open',
                                                           [],
                                                           'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                          ('_reconfigurePort',
                                                           [],
                                                           'Set communication parameters on opened port.'),
                                                          ('close', [], 'Close port'),
                                                          ('makeDeviceName', ['port'], ''),
                                                          ('inWaiting',
                                                           [],
                                                           'Return the number of characters currently in the input buffer.'),
                                                          ('read',
                                                           ['size=1'],
                                                           'Read size bytes from the serial port. If a timeout is set it may\n           return less characters as requested. With no timeout it will block\n           until the requested number of bytes is read.'),
                                                          ('write',
                                                           ['data'],
                                                           'Output the given string over the serial port.'),
                                                          ('flushInput',
                                                           [],
                                                           'Clear input buffer, discarding all that is in the buffer.'),
                                                          ('flushOutput',
                                                           [],
                                                           'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                          ('sendBreak',
                                                           ['duration=0.25'],
                                                           'Send break condition. Timed, returns to idle state after given duration.'),
                                                          ('setBreak',
                                                           ['level=1'],
                                                           'Set break: Controls TXD. When active, to transmitting is possible.'),
                                                          ('setRTS',
                                                           ['level=1'],
                                                           'Set terminal status line: Request To Send'),
                                                          ('setDTR',
                                                           ['level=1'],
                                                           'Set terminal status line: Data Terminal Ready'),
                                                          ('getCTS',
                                                           [],
                                                           'Read terminal status line: Clear To Send'),
                                                          ('getDSR',
                                                           [],
                                                           'Read terminal status line: Data Set Ready'),
                                                          ('getRI',
                                                           [],
                                                           'Read terminal status line: Ring Indicator'),
                                                          ('getCD',
                                                           [],
                                                           'Read terminal status line: Carrier Detect')],
                                              'properties': ['sPort',
                                                             '_instream',
                                                             '_outstream',
                                                             '_isOpen',
                                                             '_jstopbits']},
             'serial.serialjava.Serial': {'bases': ['serial.serialjava.JavaSerial',
                                                    'io.RawIOBase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'serial.serialposix.PosixPollSerial': {'bases': ['serial.serialposix.Serial'],
                                                    'constructor': [],
                                                    'docstring': "poll based read implementation. not all systems support poll properly.\n    however this one has better handling of errors, such as a device\n    disconnecting while it's in use (e.g. USB-serial unplugged)",
                                                    'methods': [('read',
                                                                 ['size=1'],
                                                                 'Read size bytes from the serial port. If a timeout is set it may\n           return less characters as requested. With no timeout it will block\n           until the requested number of bytes is read.')],
                                                    'properties': []},
             'serial.serialposix.PosixSerial': {'bases': ['serial.serialposix.SerialBase'],
                                                'constructor': [],
                                                'docstring': 'Serial port class POSIX implementation. Serial port configuration is \n    done with termios and fcntl. Runs on Linux and many other Un*x like\n    systems.',
                                                'methods': [('open',
                                                             [],
                                                             'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                            ('_reconfigurePort',
                                                             [],
                                                             'Set communication parameters on opened port.'),
                                                            ('close', [], 'Close port'),
                                                            ('makeDeviceName', ['port'], ''),
                                                            ('inWaiting',
                                                             [],
                                                             'Return the number of characters currently in the input buffer.'),
                                                            ('read',
                                                             ['size=1'],
                                                             'Read size bytes from the serial port. If a timeout is set it may\n           return less characters as requested. With no timeout it will block\n           until the requested number of bytes is read.'),
                                                            ('write',
                                                             ['data'],
                                                             'Output the given string over the serial port.'),
                                                            ('flush',
                                                             [],
                                                             'Flush of file like objects. In this case, wait until all data\n           is written.'),
                                                            ('flushInput',
                                                             [],
                                                             'Clear input buffer, discarding all that is in the buffer.'),
                                                            ('flushOutput',
                                                             [],
                                                             'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                            ('sendBreak',
                                                             ['duration=0.25'],
                                                             'Send break condition. Timed, returns to idle state after given duration.'),
                                                            ('setBreak',
                                                             ['level=1'],
                                                             'Set break: Controls TXD. When active, no transmitting is possible.'),
                                                            ('setRTS',
                                                             ['level=1'],
                                                             'Set terminal status line: Request To Send'),
                                                            ('setDTR',
                                                             ['level=1'],
                                                             'Set terminal status line: Data Terminal Ready'),
                                                            ('getCTS',
                                                             [],
                                                             'Read terminal status line: Clear To Send'),
                                                            ('getDSR',
                                                             [],
                                                             'Read terminal status line: Data Set Ready'),
                                                            ('getRI',
                                                             [],
                                                             'Read terminal status line: Ring Indicator'),
                                                            ('getCD',
                                                             [],
                                                             'Read terminal status line: Carrier Detect'),
                                                            ('drainOutput',
                                                             [],
                                                             'internal - not portable!'),
                                                            ('nonblocking',
                                                             [],
                                                             'internal - not portable!'),
                                                            ('fileno',
                                                             [],
                                                             'For easier use of the serial port instance with select.\n           WARNING: this function is not portable to different platforms!'),
                                                            ('flowControl',
                                                             ['enable'],
                                                             'manually control flow - when hardware or software flow control is\n        enabled')],
                                                'properties': ['fd', '_isOpen']},
             'serial.serialposix.Serial': {'bases': ['serial.serialposix.PosixSerial',
                                                     'io.RawIOBase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'serial.serialutil.FileLike': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': 'An abstract file like class.\n\n    This class implements readline and readlines based on read and\n    writelines based on write.\n    This class is used to provide the above functions for to Serial\n    port objects.\n\n    Note that when the serial port was opened with _NO_ timeout that\n    readline blocks until it sees a newline (or the specified size is\n    reached) and that readlines would never return and therefore\n    refuses to work (it raises an exception in this case)!\n    ',
                                            'methods': [('close', [], ''),
                                                        ('__del__',
                                                         [],
                                                         'Destructor.  Calls close().'),
                                                        ('writelines', ['sequence'], ''),
                                                        ('flush',
                                                         [],
                                                         'flush of file like objects'),
                                                        ('next', [], ''),
                                                        ('__iter__', [], ''),
                                                        ('readline',
                                                         ['size=None', 'eol=LF'],
                                                         "read a line which is terminated with end-of-line (eol) character\n        ('\n' by default) or until timeout."),
                                                        ('readlines',
                                                         ['sizehint=None', 'eol=LF'],
                                                         'read a list of lines, until timeout.\n        sizehint is ignored.'),
                                                        ('xreadlines',
                                                         ['sizehint=None'],
                                                         'Read lines, implemented as generator. It will raise StopIteration on\n        timeout (empty read). sizehint is ignored.'),
                                                        ('seek', ['pos', 'whence=0'], ''),
                                                        ('tell', [], ''),
                                                        ('truncate', ['n=None'], ''),
                                                        ('isatty', [], '')],
                                            'properties': ['closed']},
             'serial.serialutil.SerialBase': {'bases': ['object'],
                                              'constructor': ['port=None',
                                                              'baudrate=9600',
                                                              'bytesize=EIGHTBITS',
                                                              'parity=PARITY_NONE',
                                                              'stopbits=STOPBITS_ONE',
                                                              'timeout=None',
                                                              'xonxoff=False',
                                                              'rtscts=False',
                                                              'writeTimeout=None',
                                                              'dsrdtr=False',
                                                              'interCharTimeout=None'],
                                              'docstring': 'Serial port base class. Provides __init__ function and properties to\n       get/set port settings.',
                                              'methods': [('isOpen',
                                                           [],
                                                           'Check if the port is opened.'),
                                                          ('getSupportedBaudrates', [], ''),
                                                          ('getSupportedByteSizes', [], ''),
                                                          ('getSupportedStopbits', [], ''),
                                                          ('getSupportedParities', [], ''),
                                                          ('setPort',
                                                           ['port'],
                                                           'Change the port. The attribute portstr is set to a string that\n           contains the name of the port.'),
                                                          ('getPort',
                                                           [],
                                                           'Get the current port setting. The value that was passed on init or using\n           setPort() is passed back. See also the attribute portstr which contains\n           the name of the port as a string.'),
                                                          ('setBaudrate',
                                                           ['baudrate'],
                                                           'Change baud rate. It raises a ValueError if the port is open and the\n        baud rate is not possible. If the port is closed, then the value is\n        accepted and the exception is raised when the port is opened.'),
                                                          ('getBaudrate',
                                                           [],
                                                           'Get the current baud rate setting.'),
                                                          ('setByteSize',
                                                           ['bytesize'],
                                                           'Change byte size.'),
                                                          ('getByteSize',
                                                           [],
                                                           'Get the current byte size setting.'),
                                                          ('setParity',
                                                           ['parity'],
                                                           'Change parity setting.'),
                                                          ('getParity',
                                                           [],
                                                           'Get the current parity setting.'),
                                                          ('setStopbits',
                                                           ['stopbits'],
                                                           'Change stop bits size.'),
                                                          ('getStopbits',
                                                           [],
                                                           'Get the current stop bits setting.'),
                                                          ('setTimeout',
                                                           ['timeout'],
                                                           'Change timeout setting.'),
                                                          ('getTimeout',
                                                           [],
                                                           'Get the current timeout setting.'),
                                                          ('setWriteTimeout',
                                                           ['timeout'],
                                                           'Change timeout setting.'),
                                                          ('getWriteTimeout',
                                                           [],
                                                           'Get the current timeout setting.'),
                                                          ('setXonXoff',
                                                           ['xonxoff'],
                                                           'Change XON/XOFF setting.'),
                                                          ('getXonXoff',
                                                           [],
                                                           'Get the current XON/XOFF setting.'),
                                                          ('setRtsCts',
                                                           ['rtscts'],
                                                           'Change RTS/CTS flow control setting.'),
                                                          ('getRtsCts',
                                                           [],
                                                           'Get the current RTS/CTS flow control setting.'),
                                                          ('setDsrDtr',
                                                           ['dsrdtr=None'],
                                                           'Change DsrDtr flow control setting.'),
                                                          ('getDsrDtr',
                                                           [],
                                                           'Get the current DSR/DTR flow control setting.'),
                                                          ('setInterCharTimeout',
                                                           ['interCharTimeout'],
                                                           'Change inter-character timeout setting.'),
                                                          ('getInterCharTimeout',
                                                           [],
                                                           'Get the current inter-character timeout setting.'),
                                                          ('getSettingsDict',
                                                           [],
                                                           'Get current port settings as a dictionary. For use with\n        applySettingsDict'),
                                                          ('applySettingsDict',
                                                           ['d'],
                                                           "apply stored settings from a dictionary returned from\n        getSettingsDict. it's allowed to delete keys from the dictionary. these\n        values will simply left unchanged."),
                                                          ('__repr__',
                                                           [],
                                                           'String representation of the current port settings and its state.'),
                                                          ('readable', [], ''),
                                                          ('writable', [], ''),
                                                          ('seekable', [], ''),
                                                          ('readinto', ['b'], '')],
                                              'properties': ['BAUDRATES',
                                                             'BYTESIZES',
                                                             'PARITIES',
                                                             'STOPBITS',
                                                             '_isOpen',
                                                             '_port',
                                                             '_baudrate',
                                                             '_bytesize',
                                                             '_parity',
                                                             '_stopbits',
                                                             '_timeout',
                                                             '_writeTimeout',
                                                             '_xonxoff',
                                                             '_rtscts',
                                                             '_dsrdtr',
                                                             '_interCharTimeout',
                                                             'port',
                                                             'baudrate',
                                                             'bytesize',
                                                             'parity',
                                                             'stopbits',
                                                             'timeout',
                                                             'writeTimeout',
                                                             'xonxoff',
                                                             'rtscts',
                                                             'dsrdtr',
                                                             'interCharTimeout',
                                                             'portstr',
                                                             'name',
                                                             '_SETTINGS']},
             'serial.serialutil.SerialException': {'bases': ['IOError'],
                                                   'constructor': [],
                                                   'docstring': 'Base class for serial port related exceptions.',
                                                   'methods': [],
                                                   'properties': []},
             'serial.serialutil.SerialTimeoutException': {'bases': ['serial.serialutil.SerialException'],
                                                          'constructor': [],
                                                          'docstring': 'Write timeouts give an exception',
                                                          'methods': [],
                                                          'properties': []},
             'serial.serialutil.bytearray': {'bases': ['list'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('__str__', [], ''),
                                                         ('__repr__', [], ''),
                                                         ('append', ['item'], ''),
                                                         ('__iadd__', ['other'], ''),
                                                         ('__getslice__', ['i', 'j'], ''),
                                                         ('__getitem__', ['item'], ''),
                                                         ('__eq__', ['other'], '')],
                                             'properties': []},
             'serial.serialwin32.Serial': {'bases': ['serial.serialwin32.Win32Serial',
                                                     'io.RawIOBase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'serial.serialwin32.Win32Serial': {'bases': ['serial.serialwin32.SerialBase'],
                                                'constructor': ['*args', '**kwargs'],
                                                'docstring': 'Serial port implementation for Win32 based on ctypes.',
                                                'methods': [('open',
                                                             [],
                                                             'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                            ('_reconfigurePort',
                                                             [],
                                                             'Set communication parameters on opened port.'),
                                                            ('close', [], 'Close port'),
                                                            ('makeDeviceName', ['port'], ''),
                                                            ('inWaiting',
                                                             [],
                                                             'Return the number of characters currently in the input buffer.'),
                                                            ('read',
                                                             ['size=1'],
                                                             'Read size bytes from the serial port. If a timeout is set it may\n           return less characters as requested. With no timeout it will block\n           until the requested number of bytes is read.'),
                                                            ('write',
                                                             ['data'],
                                                             'Output the given string over the serial port.'),
                                                            ('flushInput',
                                                             [],
                                                             'Clear input buffer, discarding all that is in the buffer.'),
                                                            ('flushOutput',
                                                             [],
                                                             'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                            ('sendBreak',
                                                             ['duration=0.25'],
                                                             'Send break condition. Timed, returns to idle state after given duration.'),
                                                            ('setBreak',
                                                             ['level=1'],
                                                             'Set break: Controls TXD. When active, to transmitting is possible.'),
                                                            ('setRTS',
                                                             ['level=1'],
                                                             'Set terminal status line: Request To Send'),
                                                            ('setDTR',
                                                             ['level=1'],
                                                             'Set terminal status line: Data Terminal Ready'),
                                                            ('_GetCommModemStatus', [], ''),
                                                            ('getCTS',
                                                             [],
                                                             'Read terminal status line: Clear To Send'),
                                                            ('getDSR',
                                                             [],
                                                             'Read terminal status line: Data Set Ready'),
                                                            ('getRI',
                                                             [],
                                                             'Read terminal status line: Ring Indicator'),
                                                            ('getCD',
                                                             [],
                                                             'Read terminal status line: Carrier Detect'),
                                                            ('setXON',
                                                             ['level=True'],
                                                             'Platform specific - set flow state.'),
                                                            ('outWaiting',
                                                             [],
                                                             'return how many characters the in the outgoing buffer'),
                                                            ('setRtsToggle',
                                                             ['rtsToggle'],
                                                             'Change RTS toggle control setting.'),
                                                            ('getRtsToggle',
                                                             [],
                                                             'Get the current RTS toggle control setting.')],
                                                'properties': ['BAUDRATES',
                                                               'hComPort',
                                                               '_rtsToggle',
                                                               '_orgTimeouts',
                                                               '_rtsState',
                                                               '_dtrState',
                                                               '_overlappedRead',
                                                               '_overlappedWrite',
                                                               '_isOpen',
                                                               'rtsToggle']},
             'serial.sermsdos.Serial': {'bases': ['serial.sermsdos.serialutil.FileLike'],
                                        'constructor': ['port',
                                                        'baudrate=9600',
                                                        'bytesize=EIGHTBITS',
                                                        'parity=PARITY_NONE',
                                                        'stopbits=STOPBITS_ONE',
                                                        'timeout=None',
                                                        'xonxoff=0',
                                                        'rtscts=0',
                                                        'retry=RETURN_RETRY'],
                                        'docstring': "\n       port: number of device; numbering starts at\n            zero. if everything fails, the user can\n            specify a device string, note that this\n            isn't portable any more\n       baudrate: baud rate\n       bytesize: number of databits\n       parity: enable parity checking\n       stopbits: number of stopbits\n       timeout: set a timeout (None for waiting forever)\n       xonxoff: enable software flow control\n       rtscts: enable RTS/CTS flow control\n       retry: DOS retry mode\n    ",
                                        'methods': [('__del__', [], ''),
                                                    ('close', [], ''),
                                                    ('_config',
                                                     ['port',
                                                      'baud',
                                                      'parity',
                                                      'data',
                                                      'stop',
                                                      'retry',
                                                      'filename'],
                                                     ''),
                                                    ('setBaudrate', ['baudrate'], ''),
                                                    ('inWaiting',
                                                     [],
                                                     'returns the number of bytes waiting to be read'),
                                                    ('read',
                                                     ['num=1'],
                                                     'Read num bytes from serial port'),
                                                    ('write',
                                                     ['s'],
                                                     'Write string to serial port'),
                                                    ('flushInput', [], ''),
                                                    ('flushOutput', [], ''),
                                                    ('sendBreak', [], ''),
                                                    ('setRTS',
                                                     ['level=1'],
                                                     'Set terminal status line'),
                                                    ('setDTR',
                                                     ['level=1'],
                                                     'Set terminal status line'),
                                                    ('getCTS', [], 'Eead terminal status line'),
                                                    ('getDSR', [], 'Eead terminal status line'),
                                                    ('getRI', [], 'Eead terminal status line'),
                                                    ('getCD', [], 'Eead terminal status line'),
                                                    ('__repr__', [], '')],
                                        'properties': ['portstr',
                                                       'baud',
                                                       'bytesize',
                                                       'parity',
                                                       'stop',
                                                       'retry',
                                                       'filename']},
             'serial.tools.list_ports_windows.GUID': {'bases': ['ctypes.Structure'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('__str__', [], '')],
                                                      'properties': ['_fields_']},
             'serial.tools.list_ports_windows.SP_DEVICE_INTERFACE_DATA': {'bases': ['ctypes.Structure'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [('__str__',
                                                                                       [],
                                                                                       '')],
                                                                          'properties': ['_fields_']},
             'serial.tools.list_ports_windows.SP_DEVINFO_DATA': {'bases': ['ctypes.Structure'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__str__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['_fields_']},
             'serial.tools.miniterm.Console': {'bases': ['object'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('setup', [], ''),
                                                           ('getkey', [], ''),
                                                           ('cleanup', [], '')],
                                               'properties': ['fd', 'old']},
             'serial.tools.miniterm.Miniterm': {'bases': ['object'],
                                                'constructor': ['port',
                                                                'baudrate',
                                                                'parity',
                                                                'rtscts',
                                                                'xonxoff',
                                                                'echo=False',
                                                                'convert_outgoing=CONVERT_CRLF',
                                                                'repr_mode=0'],
                                                'docstring': '',
                                                'methods': [('_start_reader',
                                                             [],
                                                             'Start reader thread'),
                                                            ('_stop_reader',
                                                             [],
                                                             'Stop reader thread only, wait for clean exit of thread'),
                                                            ('start', [], ''),
                                                            ('stop', [], ''),
                                                            ('join',
                                                             ['transmit_only=False'],
                                                             ''),
                                                            ('dump_port_settings', [], ''),
                                                            ('reader',
                                                             [],
                                                             'loop and copy serial->console'),
                                                            ('writer',
                                                             [],
                                                             '        Loop and copy console->serial until EXITCHARCTER character is\n        found. When MENUCHARACTER is found, interpret the next key\n        locally.\n        ')],
                                                'properties': ['serial',
                                                               'echo',
                                                               'repr_mode',
                                                               'convert_outgoing',
                                                               'newline',
                                                               'dtr_state',
                                                               'rts_state',
                                                               'break_state',
                                                               '_reader_alive',
                                                               'receiver_thread',
                                                               'alive',
                                                               'transmitter_thread']},
             'serial.urlhandler.protocol_hwgrep.Serial': {'bases': ['serial.Serial'],
                                                          'constructor': [],
                                                          'docstring': 'Just inherit the native Serial port implementation and patch the open function.',
                                                          'methods': [('setPort',
                                                                       ['value'],
                                                                       'translate port name before storing it'),
                                                                      ('fromURL',
                                                                       ['url'],
                                                                       'extract host and port from an URL string')],
                                                          'properties': ['port']},
             'serial.urlhandler.protocol_loop.LoopbackSerial': {'bases': ['serial.urlhandler.protocol_loop.SerialBase'],
                                                                'constructor': [],
                                                                'docstring': 'Serial port implementation that simulates a loop back connection in plain software.',
                                                                'methods': [('open',
                                                                             [],
                                                                             'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                                            ('_reconfigurePort',
                                                                             [],
                                                                             'Set communication parameters on opened port. for the loop://\n        protocol all settings are ignored!'),
                                                                            ('close',
                                                                             [],
                                                                             'Close port'),
                                                                            ('makeDeviceName',
                                                                             ['port'],
                                                                             ''),
                                                                            ('fromURL',
                                                                             ['url'],
                                                                             'extract host and port from an URL string'),
                                                                            ('inWaiting',
                                                                             [],
                                                                             'Return the number of characters currently in the input buffer.'),
                                                                            ('read',
                                                                             ['size=1'],
                                                                             'Read size bytes from the serial port. If a timeout is set it may\n        return less characters as requested. With no timeout it will block\n        until the requested number of bytes is read.'),
                                                                            ('write',
                                                                             ['data'],
                                                                             'Output the given string over the serial port. Can block if the\n        connection is blocked. May raise SerialException if the connection is\n        closed.'),
                                                                            ('flushInput',
                                                                             [],
                                                                             'Clear input buffer, discarding all that is in the buffer.'),
                                                                            ('flushOutput',
                                                                             [],
                                                                             'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                                            ('sendBreak',
                                                                             ['duration=0.25'],
                                                                             'Send break condition. Timed, returns to idle state after given\n        duration.'),
                                                                            ('setBreak',
                                                                             ['level=True'],
                                                                             'Set break: Controls TXD. When active, to transmitting is\n        possible.'),
                                                                            ('setRTS',
                                                                             ['level=True'],
                                                                             'Set terminal status line: Request To Send'),
                                                                            ('setDTR',
                                                                             ['level=True'],
                                                                             'Set terminal status line: Data Terminal Ready'),
                                                                            ('getCTS',
                                                                             [],
                                                                             'Read terminal status line: Clear To Send'),
                                                                            ('getDSR',
                                                                             [],
                                                                             'Read terminal status line: Data Set Ready'),
                                                                            ('getRI',
                                                                             [],
                                                                             'Read terminal status line: Ring Indicator'),
                                                                            ('getCD',
                                                                             [],
                                                                             'Read terminal status line: Carrier Detect')],
                                                                'properties': ['BAUDRATES',
                                                                               'logger',
                                                                               'buffer_lock',
                                                                               'loop_buffer',
                                                                               'cts',
                                                                               'dsr',
                                                                               '_isOpen']},
             'serial.urlhandler.protocol_loop.Serial': {'bases': ['serial.urlhandler.protocol_loop.LoopbackSerial',
                                                                  'io.RawIOBase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'serial.urlhandler.protocol_socket.Serial': {'bases': ['serial.urlhandler.protocol_socket.SocketSerial',
                                                                    'io.RawIOBase'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'serial.urlhandler.protocol_socket.SocketSerial': {'bases': ['serial.urlhandler.protocol_socket.SerialBase'],
                                                                'constructor': [],
                                                                'docstring': 'Serial port implementation for plain sockets.',
                                                                'methods': [('open',
                                                                             [],
                                                                             'Open port with current settings. This may throw a SerialException\n           if the port cannot be opened.'),
                                                                            ('_reconfigurePort',
                                                                             [],
                                                                             'Set communication parameters on opened port. for the socket://\n        protocol all settings are ignored!'),
                                                                            ('close',
                                                                             [],
                                                                             'Close port'),
                                                                            ('makeDeviceName',
                                                                             ['port'],
                                                                             ''),
                                                                            ('fromURL',
                                                                             ['url'],
                                                                             'extract host and port from an URL string'),
                                                                            ('inWaiting',
                                                                             [],
                                                                             'Return the number of characters currently in the input buffer.'),
                                                                            ('read',
                                                                             ['size=1'],
                                                                             'Read size bytes from the serial port. If a timeout is set it may\n        return less characters as requested. With no timeout it will block\n        until the requested number of bytes is read.'),
                                                                            ('write',
                                                                             ['data'],
                                                                             'Output the given string over the serial port. Can block if the\n        connection is blocked. May raise SerialException if the connection is\n        closed.'),
                                                                            ('flushInput',
                                                                             [],
                                                                             'Clear input buffer, discarding all that is in the buffer.'),
                                                                            ('flushOutput',
                                                                             [],
                                                                             'Clear output buffer, aborting the current output and\n        discarding all that is in the buffer.'),
                                                                            ('sendBreak',
                                                                             ['duration=0.25'],
                                                                             'Send break condition. Timed, returns to idle state after given\n        duration.'),
                                                                            ('setBreak',
                                                                             ['level=True'],
                                                                             'Set break: Controls TXD. When active, to transmitting is\n        possible.'),
                                                                            ('setRTS',
                                                                             ['level=True'],
                                                                             'Set terminal status line: Request To Send'),
                                                                            ('setDTR',
                                                                             ['level=True'],
                                                                             'Set terminal status line: Data Terminal Ready'),
                                                                            ('getCTS',
                                                                             [],
                                                                             'Read terminal status line: Clear To Send'),
                                                                            ('getDSR',
                                                                             [],
                                                                             'Read terminal status line: Data Set Ready'),
                                                                            ('getRI',
                                                                             [],
                                                                             'Read terminal status line: Ring Indicator'),
                                                                            ('getCD',
                                                                             [],
                                                                             'Read terminal status line: Carrier Detect')],
                                                                'properties': ['BAUDRATES',
                                                                               'logger',
                                                                               '_socket',
                                                                               '_isOpen']},
             'serial.win32.N11_OVERLAPPED4DOLLAR_484DOLLAR_49E': {'bases': ['serial.win32.Structure'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': []},
             'serial.win32.N11_OVERLAPPED4DOLLAR_48E': {'bases': ['serial.win32.Union'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'serial.win32._COMMTIMEOUTS': {'bases': ['serial.win32.Structure'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'serial.win32._COMSTAT': {'bases': ['serial.win32.Structure'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'serial.win32._DCB': {'bases': ['serial.win32.Structure'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'serial.win32._OVERLAPPED': {'bases': ['serial.win32.Structure'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'serial.win32._SECURITY_ATTRIBUTES': {'bases': ['serial.win32.Structure'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'test__datasource.TestDataSourceAbspath': {'bases': ['test__datasource.TestCase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('setUp', [], ''),
                                                                    ('tearDown', [], ''),
                                                                    ('test_ValidHTTP', [], ''),
                                                                    ('test_ValidFile', [], ''),
                                                                    ('test_InvalidHTTP',
                                                                     [],
                                                                     ''),
                                                                    ('test_InvalidFile',
                                                                     [],
                                                                     ''),
                                                                    ('test_sandboxing', [], ''),
                                                                    ('test_windows_os_sep',
                                                                     [],
                                                                     '')],
                                                        'properties': ['tmpdir', 'ds']},
             'test__datasource.TestDataSourceExists': {'bases': ['test__datasource.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setUp', [], ''),
                                                                   ('tearDown', [], ''),
                                                                   ('test_ValidHTTP', [], ''),
                                                                   ('test_InvalidHTTP', [], ''),
                                                                   ('test_ValidFile', [], ''),
                                                                   ('test_InvalidFile', [], '')],
                                                       'properties': ['tmpdir', 'ds']},
             'test__datasource.TestDataSourceOpen': {'bases': ['test__datasource.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('setUp', [], ''),
                                                                 ('tearDown', [], ''),
                                                                 ('test_ValidHTTP', [], ''),
                                                                 ('test_InvalidHTTP', [], ''),
                                                                 ('test_InvalidHTTPCacheURLError',
                                                                  [],
                                                                  ''),
                                                                 ('test_ValidFile', [], ''),
                                                                 ('test_InvalidFile', [], ''),
                                                                 ('test_ValidGzipFile', [], ''),
                                                                 ('test_ValidBz2File', [], '')],
                                                     'properties': ['tmpdir', 'ds']},
             'test__datasource.TestOpenFunc': {'bases': ['test__datasource.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('setUp', [], ''),
                                                           ('tearDown', [], ''),
                                                           ('test_DataSourceOpen', [], '')],
                                               'properties': ['tmpdir']},
             'test__datasource.TestRepositoryAbspath': {'bases': ['test__datasource.TestCase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('setUp', [], ''),
                                                                    ('tearDown', [], ''),
                                                                    ('test_ValidHTTP', [], ''),
                                                                    ('test_sandboxing', [], ''),
                                                                    ('test_windows_os_sep',
                                                                     [],
                                                                     '')],
                                                        'properties': ['tmpdir', 'repos']},
             'test__datasource.TestRepositoryExists': {'bases': ['test__datasource.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setUp', [], ''),
                                                                   ('tearDown', [], ''),
                                                                   ('test_ValidFile', [], ''),
                                                                   ('test_InvalidFile', [], ''),
                                                                   ('test_RemoveHTTPFile',
                                                                    [],
                                                                    ''),
                                                                   ('test_CachedHTTPFile',
                                                                    [],
                                                                    '')],
                                                       'properties': ['tmpdir', 'repos']},
             'test__iotools.TestLineSplitter': {'bases': ['test__iotools.TestCase'],
                                                'constructor': [],
                                                'docstring': 'Tests the LineSplitter class.',
                                                'methods': [('test_no_delimiter',
                                                             [],
                                                             'Test LineSplitter w/o delimiter'),
                                                            ('test_space_delimiter',
                                                             [],
                                                             'Test space delimiter'),
                                                            ('test_tab_delimiter',
                                                             [],
                                                             'Test tab delimiter'),
                                                            ('test_other_delimiter',
                                                             [],
                                                             'Test LineSplitter on delimiter'),
                                                            ('test_constant_fixed_width',
                                                             [],
                                                             'Test LineSplitter w/ fixed-width fields'),
                                                            ('test_variable_fixed_width',
                                                             [],
                                                             '')],
                                                'properties': []},
             'test__iotools.TestMiscFunctions': {'bases': ['test__iotools.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_has_nested_dtype',
                                                              [],
                                                              'Test has_nested_dtype'),
                                                             ('test_easy_dtype',
                                                              [],
                                                              'Test ndtype on dtypes'),
                                                             ('test_flatten_dtype',
                                                              [],
                                                              'Testing flatten_dtype')],
                                                 'properties': []},
             'test__iotools.TestNameValidator': {'bases': ['test__iotools.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_case_sensitivity',
                                                              [],
                                                              'Test case sensitivity'),
                                                             ('test_excludelist',
                                                              [],
                                                              'Test excludelist'),
                                                             ('test_missing_names',
                                                              [],
                                                              'Test validate missing names'),
                                                             ('test_validate_nb_names',
                                                              [],
                                                              'Test validate nb names'),
                                                             ('test_validate_wo_names',
                                                              [],
                                                              'Test validate no names')],
                                                 'properties': []},
             'test__iotools.TestStringConverter': {'bases': ['test__iotools.TestCase'],
                                                   'constructor': [],
                                                   'docstring': 'Test StringConverter',
                                                   'methods': [('test_creation',
                                                                [],
                                                                'Test creation of a StringConverter'),
                                                               ('test_upgrade',
                                                                [],
                                                                'Tests the upgrade method.'),
                                                               ('test_missing',
                                                                [],
                                                                'Tests the use of missing values.'),
                                                               ('test_upgrademapper',
                                                                [],
                                                                'Tests updatemapper'),
                                                               ('test_string_to_object',
                                                                [],
                                                                'Make sure that string-to-object functions are properly recognized'),
                                                               ('test_keep_default',
                                                                [],
                                                                "Make sure we don't lose an explicit default"),
                                                               ('test_keep_default_zero',
                                                                [],
                                                                "Check that we don't lose a default of 0"),
                                                               ('test_keep_missing_values',
                                                                [],
                                                                "Check that we're not losing missing values"),
                                                               ('test_int64_dtype',
                                                                [],
                                                                'Check that int64 integer types can be specified'),
                                                               ('test_uint64_dtype',
                                                                [],
                                                                'Check that uint64 integer types can be specified')],
                                                   'properties': []},
             'test_array_from_pyobj.Array': {'bases': [],
                                             'constructor': ['typ', 'dims', 'intent', 'obj'],
                                             'docstring': '',
                                             'methods': [('arr_equal', ['arr1', 'arr2'], ''),
                                                         ('__str__', [], ''),
                                                         ('has_shared_memory',
                                                          [],
                                                          'Check that created array shares data with input array.\n        ')],
                                             'properties': ['type',
                                                            'dims',
                                                            'intent',
                                                            'obj_copy',
                                                            'obj',
                                                            'arr',
                                                            'arr_attr',
                                                            'pyarr',
                                                            'pyarr_attr']},
             'test_array_from_pyobj.Intent': {'bases': [],
                                              'constructor': ['intent_list=[]'],
                                              'docstring': '',
                                              'methods': [('__getattr__', ['name'], ''),
                                                          ('__str__', [], ''),
                                                          ('__repr__', [], ''),
                                                          ('is_intent', ['*names'], ''),
                                                          ('is_intent_exact', ['*names'], '')],
                                              'properties': ['intent_list', 'flags']},
             'test_array_from_pyobj.Type': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('__new__', ['name'], ''),
                                                        ('_init', ['name'], ''),
                                                        ('cast_types', [], ''),
                                                        ('all_types', [], ''),
                                                        ('smaller_types', [], ''),
                                                        ('equal_types', [], ''),
                                                        ('larger_types', [], '')],
                                            'properties': ['_type_names',
                                                           '_type_cache',
                                                           '_cast_dict',
                                                           'NAME',
                                                           'type_num',
                                                           'dtype',
                                                           'elsize',
                                                           'dtypechar']},
             'test_array_from_pyobj._test_shared_memory': {'bases': [],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('test_in_from_2seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_in_from_2casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_inout_2seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_f_inout_23seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_c_inout_23seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_in_copy_from_2casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_c_in_from_23seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_in_from_23casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_f_in_from_23casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_c_in_from_23casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_f_copy_in_from_23casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_c_copy_in_from_23casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_in_cache_from_2casttype',
                                                                        [],
                                                                        ''),
                                                                       ('test_in_cache_from_2casttype_failure',
                                                                        [],
                                                                        ''),
                                                                       ('test_cache_hidden',
                                                                        [],
                                                                        ''),
                                                                       ('test_hidden', [], ''),
                                                                       ('test_optional_none',
                                                                        [],
                                                                        ''),
                                                                       ('test_optional_from_2seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_optional_from_23seq',
                                                                        [],
                                                                        ''),
                                                                       ('test_inplace', [], ''),
                                                                       ('test_inplace_from_casttype',
                                                                        [],
                                                                        '')],
                                                           'properties': ['num2seq', 'num23seq']},
             'test_array_from_pyobj.test_intent': {'bases': ['unittest.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_in_out', [], '')],
                                                   'properties': []},
             'test_arrayprint.TestArrayRepr': {'bases': ['object'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_nan_inf', [], '')],
                                               'properties': []},
             'test_arrayprint.TestComplexArray': {'bases': ['test_arrayprint.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_str', [], '')],
                                                  'properties': []},
             'test_arraysetops.TestAso': {'bases': ['test_arraysetops.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_unique', [], ''),
                                                      ('test_intersect1d', [], ''),
                                                      ('test_setxor1d', [], ''),
                                                      ('test_ediff1d', [], ''),
                                                      ('test_in1d', [], ''),
                                                      ('test_in1d_char_array', [], ''),
                                                      ('test_union1d', [], ''),
                                                      ('test_setdiff1d', [], ''),
                                                      ('test_setdiff1d_char_array', [], ''),
                                                      ('test_manyways', [], '')],
                                          'properties': []},
             'test_assumed_shape.TestAssumedShapeSumExample': {'bases': ['util.F2PyTest'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('test_all', [], '')],
                                                               'properties': ['sources']},
             'test_blasdot.TestInner': {'bases': ['numpy.testing.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_vecself', [], 'Ticket 844.')],
                                        'properties': []},
             'test_build.FindDependenciesLdd': {'bases': [],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('get_dependencies', ['file'], ''),
                                                            ('grep_dependencies',
                                                             ['file', 'deps'],
                                                             '')],
                                                'properties': ['cmd']},
             'test_build.TestF77Mismatch': {'bases': ['numpy.testing.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_lapack', [], '')],
                                            'properties': []},
             'test_callback.TestF77Callback': {'bases': ['util.F2PyTest'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_all', [], ''),
                                                           ('check_function', ['name'], '')],
                                               'properties': ['code']},
             'test_chebyshev.TestArithmetic': {'bases': ['test_chebyshev.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_chebadd', [], ''),
                                                           ('test_chebsub', [], ''),
                                                           ('test_chebmulx', [], ''),
                                                           ('test_chebmul', [], ''),
                                                           ('test_chebdiv', [], ''),
                                                           ('test_chebval', [], '')],
                                               'properties': []},
             'test_chebyshev.TestCalculus': {'bases': ['test_chebyshev.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_chebint', [], ''),
                                                         ('test_chebder', [], '')],
                                             'properties': []},
             'test_chebyshev.TestChebyshevClass': {'bases': ['test_chebyshev.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_equal', [], ''),
                                                               ('test_not_equal', [], ''),
                                                               ('test_add', [], ''),
                                                               ('test_sub', [], ''),
                                                               ('test_mul', [], ''),
                                                               ('test_floordiv', [], ''),
                                                               ('test_mod', [], ''),
                                                               ('test_divmod', [], ''),
                                                               ('test_pow', [], ''),
                                                               ('test_call', [], ''),
                                                               ('test_degree', [], ''),
                                                               ('test_cutdeg', [], ''),
                                                               ('test_convert', [], ''),
                                                               ('test_mapparms', [], ''),
                                                               ('test_trim', [], ''),
                                                               ('test_truncate', [], ''),
                                                               ('test_copy', [], ''),
                                                               ('test_integ', [], ''),
                                                               ('test_deriv', [], ''),
                                                               ('test_roots', [], ''),
                                                               ('test_linspace', [], ''),
                                                               ('test_fromroots', [], ''),
                                                               ('test_fit', [], ''),
                                                               ('test_identity', [], '')],
                                                   'properties': ['p1', 'p2', 'p3', 'p4', 'p5']},
             'test_chebyshev.TestConstants': {'bases': ['test_chebyshev.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_chebdomain', [], ''),
                                                          ('test_chebzero', [], ''),
                                                          ('test_chebone', [], ''),
                                                          ('test_chebx', [], '')],
                                              'properties': []},
             'test_chebyshev.TestMisc': {'bases': ['test_chebyshev.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_chebfromroots', [], ''),
                                                     ('test_chebroots', [], ''),
                                                     ('test_chebvander', [], ''),
                                                     ('test_chebfit', [], ''),
                                                     ('test_chebtrim', [], ''),
                                                     ('test_chebline', [], ''),
                                                     ('test_cheb2poly', [], ''),
                                                     ('test_poly2cheb', [], ''),
                                                     ('test_chebpts1', [], ''),
                                                     ('test_chebpts2', [], '')],
                                         'properties': []},
             'test_chebyshev.TestPrivate': {'bases': ['test_chebyshev.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test__cseries_to_zseries', [], ''),
                                                        ('test__zseries_to_cseries', [], '')],
                                            'properties': []},
             'test_core.TestFillingValues': {'bases': ['test_core.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_check_on_scalar',
                                                          [],
                                                          'Test _check_fill_value'),
                                                         ('test_check_on_fields',
                                                          [],
                                                          'Tests _check_fill_value with records'),
                                                         ('test_fillvalue_conversion',
                                                          [],
                                                          'Tests the behavior of fill_value during conversion'),
                                                         ('test_fillvalue',
                                                          [],
                                                          'Yet more fun with the fill_value'),
                                                         ('test_fillvalue_exotic_dtype',
                                                          [],
                                                          'Tests yet more exotic flexible dtypes'),
                                                         ('test_extremum_fill_value',
                                                          [],
                                                          'Tests extremum fill values for flexible type.'),
                                                         ('test_fillvalue_individual_fields',
                                                          [],
                                                          'Test setting fill_value on individual fields'),
                                                         ('test_fillvalue_implicit_structured_array',
                                                          [],
                                                          'Check that fill_value is always defined for structured arrays'),
                                                         ('test_fillvalue_as_arguments',
                                                          [],
                                                          'Test adding a fill_value parameter to empty/ones/zeros')],
                                             'properties': []},
             'test_core.TestMaskedArray': {'bases': ['test_core.TestCase'],
                                           'constructor': [],
                                           'docstring': 'Base test class for MaskedArrays.',
                                           'methods': [('setUp', [], 'Base data definition.'),
                                                       ('test_basicattributes',
                                                        [],
                                                        'Tests some basic array attributes.'),
                                                       ('test_basic0d',
                                                        [],
                                                        'Checks masking a scalar'),
                                                       ('test_basic1d',
                                                        [],
                                                        'Test of basic array creation and properties in 1 dimension.'),
                                                       ('test_basic2d',
                                                        [],
                                                        'Test of basic array creation and properties in 2 dimensions.'),
                                                       ('test_concatenate_basic',
                                                        [],
                                                        'Tests concatenations.'),
                                                       ('test_concatenate_alongaxis',
                                                        [],
                                                        'Tests concatenations.'),
                                                       ('test_concatenate_flexible',
                                                        [],
                                                        'Tests the concatenation on flexible arrays.'),
                                                       ('test_creation_ndmin',
                                                        [],
                                                        'Check the use of ndmin'),
                                                       ('test_creation_ndmin_from_maskedarray',
                                                        [],
                                                        "Make sure we're not losing the original mask w/ ndmin"),
                                                       ('test_creation_maskcreation',
                                                        [],
                                                        'Tests how masks are initialized at the creation of Maskedarrays.'),
                                                       ('test_creation_with_list_of_maskedarrays',
                                                        [],
                                                        'Tests creaating a masked array from alist of masked arrays.'),
                                                       ('test_asarray', [], ''),
                                                       ('test_fix_invalid',
                                                        [],
                                                        'Checks fix_invalid.'),
                                                       ('test_maskedelement',
                                                        [],
                                                        'Test of masked element'),
                                                       ('test_set_element_as_object',
                                                        [],
                                                        'Tests setting elements with object'),
                                                       ('test_indexing',
                                                        [],
                                                        'Tests conversions and indexing'),
                                                       ('test_copy',
                                                        [],
                                                        'Tests of some subtle points of copying and sizing.'),
                                                       ('test_deepcopy', [], ''),
                                                       ('test_pickling', [], 'Tests pickling'),
                                                       ('test_pickling_subbaseclass',
                                                        [],
                                                        'Test pickling w/ a subclass of ndarray'),
                                                       ('test_pickling_wstructured',
                                                        [],
                                                        'Tests pickling w/ structured array'),
                                                       ('test_pickling_keepalignment',
                                                        [],
                                                        'Tests pickling w/ F_CONTIGUOUS arrays'),
                                                       ('test_single_element_subscript',
                                                        [],
                                                        'Tests single element subscripts of Maskedarrays.'),
                                                       ('test_topython',
                                                        [],
                                                        'Tests some communication issues with Python.'),
                                                       ('test_oddfeatures_1',
                                                        [],
                                                        'Test of other odd features'),
                                                       ('test_oddfeatures_2',
                                                        [],
                                                        'Tests some more features.'),
                                                       ('test_oddfeatures_3',
                                                        [],
                                                        'Tests some generic features.'),
                                                       ('test_filled_w_flexible_dtype',
                                                        [],
                                                        'Test filled w/ flexible dtype'),
                                                       ('test_filled_w_mvoid',
                                                        [],
                                                        'Test filled w/ mvoid'),
                                                       ('test_filled_w_nested_dtype',
                                                        [],
                                                        'Test filled w/ nested dtype'),
                                                       ('test_optinfo_propagation',
                                                        [],
                                                        "Checks that _optinfo dictionary isn't back-propagated"),
                                                       ('test_fancy_printoptions',
                                                        [],
                                                        'Test printing a masked array w/ fancy dtype.'),
                                                       ('test_flatten_structured_array',
                                                        [],
                                                        'Test flatten_structured_array on arrays'),
                                                       ('test_void0d',
                                                        [],
                                                        'Test creating a mvoid object'),
                                                       ('test_mvoid_getitem',
                                                        [],
                                                        'Test mvoid.__getitem__'),
                                                       ('test_mvoid_iter',
                                                        [],
                                                        'Test iteration on __getitem__'),
                                                       ('test_mvoid_print',
                                                        [],
                                                        'Test printing a mvoid')],
                                           'properties': ['d']},
             'test_core.TestMaskedArrayArithmetic': {'bases': ['test_core.TestCase'],
                                                     'constructor': [],
                                                     'docstring': 'Base test class for MaskedArrays.',
                                                     'methods': [('setUp',
                                                                  [],
                                                                  'Base data definition.'),
                                                                 ('tearDown', [], ''),
                                                                 ('test_basic_arithmetic',
                                                                  [],
                                                                  'Test of basic arithmetic.'),
                                                                 ('test_divide_on_different_shapes',
                                                                  [],
                                                                  ''),
                                                                 ('test_mixed_arithmetic',
                                                                  [],
                                                                  'Tests mixed arithmetics.'),
                                                                 ('test_limits_arithmetic',
                                                                  [],
                                                                  ''),
                                                                 ('test_masked_singleton_arithmetic',
                                                                  [],
                                                                  'Tests some scalar arithmetics on MaskedArrays.'),
                                                                 ('test_masked_singleton_equality',
                                                                  [],
                                                                  'Tests (in)equality on masked snigleton'),
                                                                 ('test_arithmetic_with_masked_singleton',
                                                                  [],
                                                                  "Checks that there's no collapsing to masked"),
                                                                 ('test_arithmetic_with_masked_singleton_on_1d_singleton',
                                                                  [],
                                                                  "Check that we're not losing the shape of a singleton"),
                                                                 ('test_scalar_arithmetic',
                                                                  [],
                                                                  ''),
                                                                 ('test_basic_ufuncs',
                                                                  [],
                                                                  'Test various functions such as sin, cos.'),
                                                                 ('test_count_func',
                                                                  [],
                                                                  'Tests count'),
                                                                 ('test_minmax_func',
                                                                  [],
                                                                  'Tests minimum and maximum.'),
                                                                 ('test_minimummaximum_func',
                                                                  [],
                                                                  ''),
                                                                 ('test_minmax_reduce',
                                                                  [],
                                                                  'Test np.min/maximum.reduce on array w/ full False mask'),
                                                                 ('test_minmax_funcs_with_output',
                                                                  [],
                                                                  'Tests the min/max functions with explicit outputs'),
                                                                 ('test_minmax_methods',
                                                                  [],
                                                                  'Additional tests on max/min'),
                                                                 ('test_addsumprod',
                                                                  [],
                                                                  'Tests add, sum, product.'),
                                                                 ('test_binops_d2D',
                                                                  [],
                                                                  'Test binary operations on 2D data'),
                                                                 ('test_domained_binops_d2D',
                                                                  [],
                                                                  'Test domained binary operations on 2D data'),
                                                                 ('test_noshrinking',
                                                                  [],
                                                                  "Check that we don't shrink a mask when not wanted"),
                                                                 ('test_mod', [], 'Tests mod'),
                                                                 ('test_TakeTransposeInnerOuter',
                                                                  [],
                                                                  'Test of take, transpose, inner, outer products'),
                                                                 ('test_imag_real',
                                                                  [],
                                                                  'Check complex'),
                                                                 ('test_methods_with_output',
                                                                  [],
                                                                  ''),
                                                                 ('test_eq_on_structured',
                                                                  [],
                                                                  'Test the equality of structured arrays'),
                                                                 ('test_ne_on_structured',
                                                                  [],
                                                                  'Test the equality of structured arrays'),
                                                                 ('test_eq_w_None', [], ''),
                                                                 ('test_eq_w_scalar', [], ''),
                                                                 ('test_numpyarithmetics',
                                                                  [],
                                                                  'Check that the mask is not back-propagated when using numpy functions')],
                                                     'properties': ['d', 'err_status']},
             'test_core.TestMaskedArrayAttributes': {'bases': ['test_core.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_keepmask',
                                                                  [],
                                                                  'Tests the keep mask flag'),
                                                                 ('test_hardmask',
                                                                  [],
                                                                  'Test hard_mask'),
                                                                 ('test_hardmask_again',
                                                                  [],
                                                                  'Another test of hardmask'),
                                                                 ('test_hardmask_oncemore_yay',
                                                                  [],
                                                                  'OK, yet another test of hardmask'),
                                                                 ('test_smallmask',
                                                                  [],
                                                                  'Checks the behaviour of _smallmask'),
                                                                 ('test_shrink_mask',
                                                                  [],
                                                                  'Tests .shrink_mask()'),
                                                                 ('test_flat',
                                                                  [],
                                                                  'Test flat on masked_matrices')],
                                                     'properties': []},
             'test_core.TestMaskedArrayFunctions': {'bases': ['test_core.TestCase'],
                                                    'constructor': [],
                                                    'docstring': 'Test class for miscellaneous functions.',
                                                    'methods': [('setUp', [], ''),
                                                                ('test_masked_where_bool',
                                                                 [],
                                                                 ''),
                                                                ('test_masked_equal_wlist',
                                                                 [],
                                                                 ''),
                                                                ('test_masked_equal_fill_value',
                                                                 [],
                                                                 ''),
                                                                ('test_masked_where_condition',
                                                                 [],
                                                                 'Tests masking functions.'),
                                                                ('test_masked_where_oddities',
                                                                 [],
                                                                 'Tests some generic features.'),
                                                                ('test_masked_where_shape_constraint',
                                                                 [],
                                                                 ''),
                                                                ('test_masked_otherfunctions',
                                                                 [],
                                                                 ''),
                                                                ('test_round', [], ''),
                                                                ('test_round_with_output',
                                                                 [],
                                                                 'Testing round with an explicit output'),
                                                                ('test_identity', [], ''),
                                                                ('test_power', [], ''),
                                                                ('test_power_w_broadcasting',
                                                                 [],
                                                                 'Test power w/ broadcasting'),
                                                                ('test_where',
                                                                 [],
                                                                 'Test the where function'),
                                                                ('test_where_with_masked_choice',
                                                                 [],
                                                                 ''),
                                                                ('test_where_with_masked_condition',
                                                                 [],
                                                                 ''),
                                                                ('test_where_type',
                                                                 [],
                                                                 'Test the type conservation with where'),
                                                                ('test_choose',
                                                                 [],
                                                                 'Test choose'),
                                                                ('test_choose_with_out',
                                                                 [],
                                                                 'Test choose with an explicit out keyword'),
                                                                ('test_reshape', [], ''),
                                                                ('test_make_mask_descr',
                                                                 [],
                                                                 'Test make_mask_descr'),
                                                                ('test_make_mask',
                                                                 [],
                                                                 'Test make_mask'),
                                                                ('test_mask_or', [], ''),
                                                                ('test_flatten_mask',
                                                                 [],
                                                                 'Tests flatten mask'),
                                                                ('test_on_ndarray',
                                                                 [],
                                                                 'Test functions on ndarrays')],
                                                    'properties': ['info']},
             'test_core.TestMaskedArrayInPlaceArithmetics': {'bases': ['test_core.TestCase'],
                                                             'constructor': [],
                                                             'docstring': 'Test MaskedArray Arithmetics',
                                                             'methods': [('setUp', [], ''),
                                                                         ('test_inplace_addition_scalar',
                                                                          [],
                                                                          'Test of inplace additions'),
                                                                         ('test_inplace_addition_array',
                                                                          [],
                                                                          'Test of inplace additions'),
                                                                         ('test_inplace_subtraction_scalar',
                                                                          [],
                                                                          'Test of inplace subtractions'),
                                                                         ('test_inplace_subtraction_array',
                                                                          [],
                                                                          'Test of inplace subtractions'),
                                                                         ('test_inplace_multiplication_scalar',
                                                                          [],
                                                                          'Test of inplace multiplication'),
                                                                         ('test_inplace_multiplication_array',
                                                                          [],
                                                                          'Test of inplace multiplication'),
                                                                         ('test_inplace_division_scalar_int',
                                                                          [],
                                                                          'Test of inplace division'),
                                                                         ('test_inplace_division_scalar_float',
                                                                          [],
                                                                          'Test of inplace division'),
                                                                         ('test_inplace_division_array_float',
                                                                          [],
                                                                          'Test of inplace division'),
                                                                         ('test_inplace_division_misc',
                                                                          [],
                                                                          ''),
                                                                         ('test_datafriendly_add',
                                                                          [],
                                                                          'Test keeping data w/ (inplace) addition'),
                                                                         ('test_datafriendly_sub',
                                                                          [],
                                                                          'Test keeping data w/ (inplace) subtraction'),
                                                                         ('test_datafriendly_mul',
                                                                          [],
                                                                          'Test keeping data w/ (inplace) multiplication'),
                                                                         ('test_datafriendly_div',
                                                                          [],
                                                                          'Test keeping data w/ (inplace) division'),
                                                                         ('test_datafriendly_pow',
                                                                          [],
                                                                          'Test keeping data w/ (inplace) power'),
                                                                         ('test_datafriendly_add_arrays',
                                                                          [],
                                                                          ''),
                                                                         ('test_datafriendly_sub_arrays',
                                                                          [],
                                                                          ''),
                                                                         ('test_datafriendly_mul_arrays',
                                                                          [],
                                                                          '')],
                                                             'properties': ['intdata',
                                                                            'floatdata']},
             'test_core.TestMaskedArrayMathMethods': {'bases': ['test_core.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('setUp',
                                                                   [],
                                                                   'Base data definition.'),
                                                                  ('test_cumsumprod',
                                                                   [],
                                                                   'Tests cumsum & cumprod on MaskedArrays.'),
                                                                  ('test_cumsumprod_with_output',
                                                                   [],
                                                                   'Tests cumsum/cumprod w/ output'),
                                                                  ('test_ptp',
                                                                   [],
                                                                   'Tests ptp on MaskedArrays.'),
                                                                  ('test_sum_object',
                                                                   [],
                                                                   'Test sum on object dtype'),
                                                                  ('test_prod_object',
                                                                   [],
                                                                   'Test prod on object dtype'),
                                                                  ('test_meananom_object',
                                                                   [],
                                                                   'Test mean/anom on object dtype'),
                                                                  ('test_trace',
                                                                   [],
                                                                   'Tests trace on MaskedArrays.'),
                                                                  ('test_varstd',
                                                                   [],
                                                                   'Tests var & std on MaskedArrays.'),
                                                                  ('test_varstd_specialcases',
                                                                   [],
                                                                   'Test a special case for var'),
                                                                  ('test_varstd_ddof', [], ''),
                                                                  ('test_diag',
                                                                   [],
                                                                   'Test diag'),
                                                                  ('test_axis_methods_nomask',
                                                                   [],
                                                                   'Test the combination nomask & methods w/ axis')],
                                                      'properties': ['d']},
             'test_core.TestMaskedArrayMathMethodsComplex': {'bases': ['test_core.TestCase'],
                                                             'constructor': [],
                                                             'docstring': 'Test class for miscellaneous MaskedArrays methods.',
                                                             'methods': [('setUp',
                                                                          [],
                                                                          'Base data definition.'),
                                                                         ('test_varstd',
                                                                          [],
                                                                          'Tests var & std on MaskedArrays.')],
                                                             'properties': ['d']},
             'test_core.TestMaskedArrayMethods': {'bases': ['test_core.TestCase'],
                                                  'constructor': [],
                                                  'docstring': 'Test class for miscellaneous MaskedArrays methods.',
                                                  'methods': [('setUp',
                                                               [],
                                                               'Base data definition.'),
                                                              ('test_generic_methods',
                                                               [],
                                                               'Tests some MaskedArray methods.'),
                                                              ('test_allclose',
                                                               [],
                                                               'Tests allclose on arrays'),
                                                              ('test_allany',
                                                               [],
                                                               'Checks the any/all methods/functions.'),
                                                              ('test_allany_onmatrices',
                                                               [],
                                                               ''),
                                                              ('test_allany_oddities',
                                                               [],
                                                               'Some fun with all and any'),
                                                              ('test_argmax_argmin',
                                                               [],
                                                               'Tests argmin & argmax on MaskedArrays.'),
                                                              ('test_clip',
                                                               [],
                                                               'Tests clip on MaskedArrays.'),
                                                              ('test_compress',
                                                               [],
                                                               'test compress'),
                                                              ('test_compressed',
                                                               [],
                                                               'Tests compressed'),
                                                              ('test_empty',
                                                               [],
                                                               'Tests empty/like'),
                                                              ('test_put', [], 'Tests put.'),
                                                              ('test_put_hardmask',
                                                               [],
                                                               'Tests put on hardmask'),
                                                              ('test_putmask', [], ''),
                                                              ('test_ravel', [], 'Tests ravel'),
                                                              ('test_reshape',
                                                               [],
                                                               'Tests reshape'),
                                                              ('test_sort', [], 'Test sort'),
                                                              ('test_sort_2d',
                                                               [],
                                                               'Check sort of 2D array.'),
                                                              ('test_sort_flexible',
                                                               [],
                                                               'Test sort on flexible dtype.'),
                                                              ('test_argsort',
                                                               [],
                                                               'Test argsort'),
                                                              ('test_squeeze',
                                                               [],
                                                               'Check squeeze'),
                                                              ('test_swapaxes',
                                                               [],
                                                               'Tests swapaxes on MaskedArrays.'),
                                                              ('test_take', [], 'Tests take'),
                                                              ('test_take_masked_indices',
                                                               [],
                                                               'Test take w/ masked indices'),
                                                              ('test_tolist',
                                                               [],
                                                               'Tests to list'),
                                                              ('test_tolist_specialcase',
                                                               [],
                                                               'Test mvoid.tolist: make sure we return a standard Python object'),
                                                              ('test_toflex',
                                                               [],
                                                               'Test the conversion to records'),
                                                              ('test_fromflex',
                                                               [],
                                                               'Test the reconstruction of a masked_array from a record'),
                                                              ('test_arraymethod',
                                                               [],
                                                               'Test a _arraymethod w/ n argument')],
                                                  'properties': ['d']},
             'test_core.TestMaskedFields': {'bases': ['test_core.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''),
                                                        ('test_set_records_masks', [], ''),
                                                        ('test_set_record_element',
                                                         [],
                                                         'Check setting an element of a record)'),
                                                        ('test_set_record_slice', [], ''),
                                                        ('test_mask_element',
                                                         [],
                                                         'Check record access'),
                                                        ('test_getmaskarray',
                                                         [],
                                                         'Test getmaskarray on flexible dtype'),
                                                        ('test_view',
                                                         [],
                                                         'Test view w/ flexible dtype'),
                                                        ('test_getitem', [], '')],
                                            'properties': ['data']},
             'test_core.TestMaskedView': {'bases': ['test_core.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('setUp', [], ''),
                                                      ('test_view_to_nothing', [], ''),
                                                      ('test_view_to_type', [], ''),
                                                      ('test_view_to_simple_dtype', [], ''),
                                                      ('test_view_to_flexible_dtype', [], ''),
                                                      ('test_view_to_subdtype', [], ''),
                                                      ('test_view_to_dtype_and_type', [], '')],
                                          'properties': ['data']},
             'test_core.TestUfuncs': {'bases': ['test_core.TestCase'],
                                      'constructor': [],
                                      'docstring': 'Test class for the application of ufuncs on MaskedArrays.',
                                      'methods': [('setUp', [], 'Base data definition.'),
                                                  ('tearDown', [], ''),
                                                  ('test_testUfuncRegression',
                                                   [],
                                                   'Tests new ufuncs on MaskedArrays.'),
                                                  ('test_reduce',
                                                   [],
                                                   'Tests reduce on MaskedArrays.'),
                                                  ('test_minmax',
                                                   [],
                                                   'Tests extrema on MaskedArrays.'),
                                                  ('test_ndarray_mask',
                                                   [],
                                                   'Check that the mask of the result is a ndarray (not a MaskedArray...)')],
                                      'properties': ['d', 'err_status']},
             'test_ctypeslib.TestLoadLibrary': {'bases': ['test_ctypeslib.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_basic', [], ''),
                                                            ('test_basic2',
                                                             [],
                                                             'Regression for #801: load_library with a full library name\n        (including extension) does not work.')],
                                                'properties': []},
             'test_ctypeslib.TestNdpointer': {'bases': ['test_ctypeslib.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_dtype', [], ''),
                                                          ('test_ndim', [], ''),
                                                          ('test_shape', [], ''),
                                                          ('test_flags', [], '')],
                                              'properties': []},
             'test_datetime.TestDateTime': {'bases': ['test_datetime.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_creation', [], ''),
                                                        ('test_hours', [], ''),
                                                        ('test_divisor_conversion_year',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_month',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_week',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_bday',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_day', [], ''),
                                                        ('test_divisor_conversion_hour',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_minute',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_second',
                                                         [],
                                                         ''),
                                                        ('test_divisor_conversion_fs', [], ''),
                                                        ('test_divisor_conversion_as', [], ''),
                                                        ('test_creation_overflow', [], '')],
                                            'properties': []},
             'test_decorators.DidntSkipException': {'bases': ['Exception'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'test_defchararray.TestBasic': {'bases': ['test_defchararray.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_from_object_array', [], ''),
                                                         ('test_from_object_array_unicode',
                                                          [],
                                                          ''),
                                                         ('test_from_string_array', [], ''),
                                                         ('test_from_unicode_array', [], ''),
                                                         ('test_unicode_upconvert', [], ''),
                                                         ('test_from_string', [], ''),
                                                         ('test_from_unicode', [], '')],
                                             'properties': []},
             'test_defchararray.TestChar': {'bases': ['test_defchararray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''), ('test_it', [], '')],
                                            'properties': ['A']},
             'test_defchararray.TestComparisons': {'bases': ['test_defchararray.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], ''),
                                                               ('test_not_equal', [], ''),
                                                               ('test_equal', [], ''),
                                                               ('test_greater_equal', [], ''),
                                                               ('test_less_equal', [], ''),
                                                               ('test_greater', [], ''),
                                                               ('test_less', [], '')],
                                                   'properties': ['A', 'B']},
             'test_defchararray.TestComparisonsMixed1': {'bases': ['test_defchararray.TestComparisons'],
                                                         'constructor': [],
                                                         'docstring': 'Ticket #1276',
                                                         'methods': [('setUp', [], '')],
                                                         'properties': ['B']},
             'test_defchararray.TestComparisonsMixed2': {'bases': ['test_defchararray.TestComparisons'],
                                                         'constructor': [],
                                                         'docstring': 'Ticket #1276',
                                                         'methods': [('setUp', [], '')],
                                                         'properties': ['A']},
             'test_defchararray.TestInformation': {'bases': ['test_defchararray.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], ''),
                                                               ('test_len', [], ''),
                                                               ('test_count', [], ''),
                                                               ('test_endswith', [], ''),
                                                               ('test_find', [], ''),
                                                               ('test_index', [], ''),
                                                               ('test_isalnum', [], ''),
                                                               ('test_isalpha', [], ''),
                                                               ('test_isdigit', [], ''),
                                                               ('test_islower', [], ''),
                                                               ('test_isspace', [], ''),
                                                               ('test_istitle', [], ''),
                                                               ('test_isupper', [], ''),
                                                               ('test_rfind', [], ''),
                                                               ('test_rindex', [], ''),
                                                               ('test_startswith', [], '')],
                                                   'properties': ['A', 'B']},
             'test_defchararray.TestMethods': {'bases': ['test_defchararray.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('setUp', [], ''),
                                                           ('test_capitalize', [], ''),
                                                           ('test_center', [], ''),
                                                           ('test_decode', [], ''),
                                                           ('test_encode', [], ''),
                                                           ('test_expandtabs', [], ''),
                                                           ('test_join', [], ''),
                                                           ('test_ljust', [], ''),
                                                           ('test_lower', [], ''),
                                                           ('test_lstrip', [], ''),
                                                           ('test_partition', [], ''),
                                                           ('test_replace', [], ''),
                                                           ('test_rjust', [], ''),
                                                           ('test_rpartition', [], ''),
                                                           ('test_rsplit', [], ''),
                                                           ('test_rstrip', [], ''),
                                                           ('test_strip', [], ''),
                                                           ('test_split', [], ''),
                                                           ('test_splitlines', [], ''),
                                                           ('test_swapcase', [], ''),
                                                           ('test_title', [], ''),
                                                           ('test_upper', [], ''),
                                                           ('test_isnumeric', [], ''),
                                                           ('test_isdecimal', [], '')],
                                               'properties': ['A', 'B']},
             'test_defchararray.TestOperations': {'bases': ['test_defchararray.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('setUp', [], ''),
                                                              ('test_add', [], ''),
                                                              ('test_radd', [], ''),
                                                              ('test_mul', [], ''),
                                                              ('test_rmul', [], ''),
                                                              ('test_mod', [], 'Ticket #856'),
                                                              ('test_rmod', [], '')],
                                                  'properties': ['A', 'B']},
             'test_defchararray.TestVecString': {'bases': ['test_defchararray.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_non_existent_method',
                                                              [],
                                                              ''),
                                                             ('test_non_string_array', [], ''),
                                                             ('test_invalid_args_tuple',
                                                              [],
                                                              ''),
                                                             ('test_invalid_type_descr',
                                                              [],
                                                              ''),
                                                             ('test_invalid_function_args',
                                                              [],
                                                              ''),
                                                             ('test_invalid_result_type',
                                                              [],
                                                              ''),
                                                             ('test_broadcast_error', [], '')],
                                                 'properties': []},
             'test_defchararray.TestWhitespace': {'bases': ['test_defchararray.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('setUp', [], ''),
                                                              ('test1', [], '')],
                                                  'properties': ['A', 'B']},
             'test_defmatrix.TestAlgebra': {'bases': ['test_defmatrix.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_pow',
                                                         [],
                                                         'Test raising a matrix to an integer power works as expected.'),
                                                        ('test_notimplemented',
                                                         [],
                                                         "Check that 'not implemented' operations produce a failure.")],
                                            'properties': []},
             'test_defmatrix.TestCasting': {'bases': ['test_defmatrix.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], '')],
                                            'properties': []},
             'test_defmatrix.TestCtor': {'bases': ['test_defmatrix.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_basic', [], ''),
                                                     ('test_bmat_nondefault_str', [], '')],
                                         'properties': []},
             'test_defmatrix.TestIndexing': {'bases': ['test_defmatrix.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_defmatrix.TestMatrixReturn': {'bases': ['test_defmatrix.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_instance_methods', [], '')],
                                                 'properties': []},
             'test_defmatrix.TestNewScalarIndexing': {'bases': ['test_defmatrix.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('setUp', [], ''),
                                                                  ('test_dimesions', [], ''),
                                                                  ('test_array_from_matrix_list',
                                                                   [],
                                                                   ''),
                                                                  ('test_array_to_list',
                                                                   [],
                                                                   ''),
                                                                  ('test_fancy_indexing',
                                                                   [],
                                                                   ''),
                                                                  ('test_matrix_element',
                                                                   [],
                                                                   ''),
                                                                  ('test_scalar_indexing',
                                                                   [],
                                                                   ''),
                                                                  ('test_row_column_indexing',
                                                                   [],
                                                                   ''),
                                                                  ('test_boolean_indexing',
                                                                   [],
                                                                   ''),
                                                                  ('test_list_indexing',
                                                                   [],
                                                                   '')],
                                                      'properties': ['a']},
             'test_defmatrix.TestPower': {'bases': ['test_defmatrix.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_returntype', [], ''),
                                                      ('test_list', [], '')],
                                          'properties': []},
             'test_defmatrix.TestProperties': {'bases': ['test_defmatrix.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_sum',
                                                            [],
                                                            'Test whether matrix.sum(axis=1) preserves orientation.\n        Fails in NumPy <= 0.9.6.2127.\n        '),
                                                           ('test_prod', [], ''),
                                                           ('test_max', [], ''),
                                                           ('test_min', [], ''),
                                                           ('test_ptp', [], ''),
                                                           ('test_var', [], ''),
                                                           ('test_basic', [], ''),
                                                           ('test_pinv', [], ''),
                                                           ('test_comparisons', [], ''),
                                                           ('test_asmatrix', [], ''),
                                                           ('test_noaxis', [], ''),
                                                           ('test_repr', [], '')],
                                               'properties': []},
             'test_dtype.TestBuiltin': {'bases': ['test_dtype.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_run',
                                                     [],
                                                     'Only test hash runs at all.'),
                                                    ('test_dtype', [], ''),
                                                    ('test_equivalent_dtype_hashing', [], '')],
                                        'properties': []},
             'test_dtype.TestMetadata': {'bases': ['test_dtype.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_no_metadata', [], ''),
                                                     ('test_metadata_takes_dict', [], ''),
                                                     ('test_metadata_rejects_nondict', [], ''),
                                                     ('test_nested_metadata', [], '')],
                                         'properties': []},
             'test_dtype.TestMonsterType': {'bases': ['test_dtype.TestCase'],
                                            'constructor': [],
                                            'docstring': 'Test deeply nested subtypes.',
                                            'methods': [('test1', [], '')],
                                            'properties': []},
             'test_dtype.TestRecord': {'bases': ['test_dtype.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('test_equivalent_record',
                                                    [],
                                                    'Test whether equivalent record dtypes hash the same.'),
                                                   ('test_different_names', [], ''),
                                                   ('test_different_titles', [], ''),
                                                   ('test_not_lists',
                                                    [],
                                                    'Test if an appropriate exception is raised when passing bad values to\n        the dtype constructor.\n        ')],
                                       'properties': []},
             'test_dtype.TestSubarray': {'bases': ['test_dtype.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_single_subarray', [], ''),
                                                     ('test_equivalent_record',
                                                      [],
                                                      'Test whether equivalent subarray dtypes hash the same.'),
                                                     ('test_nonequivalent_record',
                                                      [],
                                                      'Test whether different subarray dtypes hash differently.'),
                                                     ('test_shape_equal',
                                                      [],
                                                      'Test some data types that are equal'),
                                                     ('test_shape_simple',
                                                      [],
                                                      "Test some simple cases that shouldn't be equal"),
                                                     ('test_shape_monster',
                                                      [],
                                                      "Test some more complicated cases that shouldn't be equal")],
                                         'properties': []},
             'test_einsum.TestEinSum': {'bases': ['test_einsum.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_einsum_errors', [], ''),
                                                    ('test_einsum_views', [], ''),
                                                    ('check_einsum_sums', ['dtype'], ''),
                                                    ('test_einsum_sums_int8', [], ''),
                                                    ('test_einsum_sums_uint8', [], ''),
                                                    ('test_einsum_sums_int16', [], ''),
                                                    ('test_einsum_sums_uint16', [], ''),
                                                    ('test_einsum_sums_int32', [], ''),
                                                    ('test_einsum_sums_uint32', [], ''),
                                                    ('test_einsum_sums_int64', [], ''),
                                                    ('test_einsum_sums_uint64', [], ''),
                                                    ('test_einsum_sums_float16', [], ''),
                                                    ('test_einsum_sums_float32', [], ''),
                                                    ('test_einsum_sums_float64', [], ''),
                                                    ('test_einsum_sums_longdouble', [], ''),
                                                    ('test_einsum_sums_cfloat64', [], ''),
                                                    ('test_einsum_sums_cfloat128', [], ''),
                                                    ('test_einsum_sums_clongdouble', [], ''),
                                                    ('test_einsum_misc', [], '')],
                                        'properties': []},
             'test_example.TestExample': {'bases': ['test_example.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_fact', [], ''),
                                                      ('test_cvar', [], '')],
                                          'properties': []},
             'test_example2.TestExample2': {'bases': ['test_example2.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_zoo', [], '')],
                                            'properties': []},
             'test_extras.Test2DFunctions': {'bases': ['numpy.testing.TestCase'],
                                             'constructor': [],
                                             'docstring': 'Tests 2D functions',
                                             'methods': [('test_compress2d',
                                                          [],
                                                          'Tests compress2d'),
                                                         ('test_mask_rowcols',
                                                          [],
                                                          'Tests mask_rowcols.'),
                                                         ('test_dot', [], 'Tests dot product')],
                                             'properties': []},
             'test_extras.TestApplyAlongAxis': {'bases': ['numpy.testing.TestCase'],
                                                'constructor': [],
                                                'docstring': 'Tests 2D functions',
                                                'methods': [('test_3d', [], '')],
                                                'properties': []},
             'test_extras.TestApplyOverAxes': {'bases': ['numpy.testing.TestCase'],
                                               'constructor': [],
                                               'docstring': 'Tests apply_over_axes',
                                               'methods': [('test_basic', [], '')],
                                               'properties': []},
             'test_extras.TestArraySetOps': {'bases': ['numpy.testing.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_unique_onlist',
                                                          [],
                                                          'Test unique on list'),
                                                         ('test_unique_onmaskedarray',
                                                          [],
                                                          'Test unique on masked data w/use_mask=True'),
                                                         ('test_unique_allmasked',
                                                          [],
                                                          'Test all masked'),
                                                         ('test_ediff1d', [], 'Tests mediff1d'),
                                                         ('test_ediff1d_tobegin',
                                                          [],
                                                          'Test ediff1d w/ to_begin'),
                                                         ('test_ediff1d_toend',
                                                          [],
                                                          'Test ediff1d w/ to_end'),
                                                         ('test_ediff1d_tobegin_toend',
                                                          [],
                                                          'Test ediff1d w/ to_begin and to_end'),
                                                         ('test_ediff1d_ndarray',
                                                          [],
                                                          'Test ediff1d w/ a ndarray'),
                                                         ('test_intersect1d',
                                                          [],
                                                          'Test intersect1d'),
                                                         ('test_setxor1d', [], 'Test setxor1d'),
                                                         ('test_in1d', [], 'Test in1d'),
                                                         ('test_union1d', [], 'Test union1d'),
                                                         ('test_setdiff1d',
                                                          [],
                                                          'Test setdiff1d'),
                                                         ('test_setdiff1d_char_array',
                                                          [],
                                                          'Test setdiff1d_charray')],
                                             'properties': []},
             'test_extras.TestAverage': {'bases': ['numpy.testing.TestCase'],
                                         'constructor': [],
                                         'docstring': 'Several tests of average. Why so many ? Good point...',
                                         'methods': [('test_testAverage1',
                                                      [],
                                                      'Test of average.'),
                                                     ('test_testAverage2',
                                                      [],
                                                      'More tests of average.'),
                                                     ('test_testAverage3',
                                                      [],
                                                      'Yet more tests of average!'),
                                                     ('test_onintegers_with_mask',
                                                      [],
                                                      'Test average on integers with mask')],
                                         'properties': []},
             'test_extras.TestConcatenator': {'bases': ['numpy.testing.TestCase'],
                                              'constructor': [],
                                              'docstring': '\n    Tests for mr_, the equivalent of r_ for masked arrays.\n    ',
                                              'methods': [('test_1d',
                                                           [],
                                                           'Tests mr_ on 1D arrays.'),
                                                          ('test_2d',
                                                           [],
                                                           'Tests mr_ on 2D arrays.')],
                                              'properties': []},
             'test_extras.TestCorrcoef': {'bases': ['numpy.testing.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('setUp', [], ''),
                                                      ('test_ddof', [], 'Test ddof keyword'),
                                                      ('test_1d_wo_missing',
                                                       [],
                                                       'Test cov on 1D variable w/o missing values'),
                                                      ('test_2d_wo_missing',
                                                       [],
                                                       'Test corrcoef on 1 2D variable w/o missing values'),
                                                      ('test_1d_w_missing',
                                                       [],
                                                       'Test corrcoef 1 1D variable w/missing values'),
                                                      ('test_2d_w_missing',
                                                       [],
                                                       'Test corrcoef on 2D variable w/ missing value')],
                                          'properties': ['data']},
             'test_extras.TestCov': {'bases': ['numpy.testing.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('setUp', [], ''),
                                                 ('test_1d_wo_missing',
                                                  [],
                                                  'Test cov on 1D variable w/o missing values'),
                                                 ('test_2d_wo_missing',
                                                  [],
                                                  'Test cov on 1 2D variable w/o missing values'),
                                                 ('test_1d_w_missing',
                                                  [],
                                                  'Test cov 1 1D variable w/missing values'),
                                                 ('test_2d_w_missing',
                                                  [],
                                                  'Test cov on 2D variable w/ missing value')],
                                     'properties': ['data']},
             'test_extras.TestGeneric': {'bases': ['numpy.testing.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_masked_all',
                                                      [],
                                                      'Tests masked_all'),
                                                     ('test_masked_all_like',
                                                      [],
                                                      'Tests masked_all'),
                                                     ('test_clump_masked',
                                                      [],
                                                      'Test clump_masked'),
                                                     ('test_clump_unmasked',
                                                      [],
                                                      'Test clump_unmasked'),
                                                     ('test_flatnotmasked_contiguous',
                                                      [],
                                                      'Test flatnotmasked_contiguous')],
                                         'properties': []},
             'test_extras.TestMedian': {'bases': ['numpy.testing.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_2d', [], 'Tests median w/ 2D'),
                                                    ('test_2d_waxis',
                                                     [],
                                                     'Tests median w/ 2D arrays and different axis.'),
                                                    ('test_3d', [], 'Tests median w/ 3D')],
                                        'properties': []},
             'test_extras.TestNotMasked': {'bases': ['numpy.testing.TestCase'],
                                           'constructor': [],
                                           'docstring': '\n    Tests notmasked_edges and notmasked_contiguous.\n    ',
                                           'methods': [('test_edges',
                                                        [],
                                                        'Tests unmasked_edges'),
                                                       ('test_contiguous',
                                                        [],
                                                        'Tests notmasked_contiguous')],
                                           'properties': []},
             'test_extras.TestPolynomial': {'bases': ['numpy.testing.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_polyfit', [], 'Tests polyfit')],
                                            'properties': []},
             'test_extras.TestShapeBase': {'bases': ['numpy.testing.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_atleast2d',
                                                        [],
                                                        'Test atleast_2d')],
                                           'properties': []},
             'test_fcompiler_gnu.TestG77Versions': {'bases': ['test_fcompiler_gnu.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_g77_version', [], ''),
                                                                ('test_not_g77', [], '')],
                                                    'properties': []},
             'test_fcompiler_gnu.TestGortranVersions': {'bases': ['test_fcompiler_gnu.TestCase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('test_gfortran_version',
                                                                     [],
                                                                     ''),
                                                                    ('test_not_gfortran',
                                                                     [],
                                                                     '')],
                                                        'properties': []},
             'test_fcompiler_intel.TestIntelEM64TFCompilerVersions': {'bases': ['test_fcompiler_intel.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('test_64bit_version',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': []},
             'test_fcompiler_intel.TestIntelFCompilerVersions': {'bases': ['test_fcompiler_intel.TestCase'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('test_32bit_version',
                                                                              [],
                                                                              '')],
                                                                 'properties': []},
             'test_fftpack.TestFFT1D': {'bases': ['test_fftpack.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_basic', [], '')],
                                        'properties': []},
             'test_fftpack.TestFFTShift': {'bases': ['test_fftpack.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_fft_n', [], '')],
                                           'properties': []},
             'test_fib2.TestFib2': {'bases': ['test_fib2.TestCase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('test_fib', [], '')],
                                    'properties': []},
             'test_fib3.TestFib3': {'bases': ['test_fib3.TestCase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('test_fib', [], '')],
                                    'properties': []},
             'test_financial.TestFinancial': {'bases': ['test_financial.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_rate', [], ''),
                                                          ('test_irr', [], ''),
                                                          ('test_pv', [], ''),
                                                          ('test_fv', [], ''),
                                                          ('test_pmt', [], ''),
                                                          ('test_nper', [], ''),
                                                          ('test_nper2', [], ''),
                                                          ('test_npv', [], ''),
                                                          ('test_mirr', [], '')],
                                              'properties': []},
             'test_foo.TestFoo': {'bases': ['test_foo.TestCase'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('test_foo_free', [], '')],
                                  'properties': []},
             'test_function_base.TestAll': {'bases': ['test_function_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_nd', [], '')],
                                            'properties': []},
             'test_function_base.TestAmax': {'bases': ['test_function_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_function_base.TestAmin': {'bases': ['test_function_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_function_base.TestAngle': {'bases': ['test_function_base.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_basic', [], '')],
                                              'properties': []},
             'test_function_base.TestAny': {'bases': ['test_function_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_nd', [], '')],
                                            'properties': []},
             'test_function_base.TestAverage': {'bases': ['test_function_base.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_basic', [], ''),
                                                            ('test_weights', [], ''),
                                                            ('test_returned', [], '')],
                                                'properties': []},
             'test_function_base.TestBincount': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_simple', [], ''),
                                                             ('test_simple2', [], ''),
                                                             ('test_simple_weight', [], ''),
                                                             ('test_simple_weight2', [], ''),
                                                             ('test_with_minlength', [], ''),
                                                             ('test_with_minlength_smaller_than_maxvalue',
                                                              [],
                                                              ''),
                                                             ('test_with_minlength_and_weights',
                                                              [],
                                                              ''),
                                                             ('test_empty', [], ''),
                                                             ('test_empty_with_minlength',
                                                              [],
                                                              '')],
                                                 'properties': []},
             'test_function_base.TestCheckFinite': {'bases': ['test_function_base.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_simple', [], '')],
                                                    'properties': []},
             'test_function_base.TestCorrCoef': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_simple', [], ''),
                                                             ('test_ddof', [], ''),
                                                             ('test_empty', [], '')],
                                                 'properties': ['A', 'B', 'res1', 'res2']},
             'test_function_base.TestCov': {'bases': ['test_function_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_empty', [], '')],
                                            'properties': []},
             'test_function_base.TestCumprod': {'bases': ['test_function_base.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_basic', [], '')],
                                                'properties': []},
             'test_function_base.TestCumsum': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_basic', [], '')],
                                               'properties': []},
             'test_function_base.TestDiff': {'bases': ['test_function_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], ''),
                                                         ('test_nd', [], '')],
                                             'properties': []},
             'test_function_base.TestDigitize': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_forward', [], ''),
                                                             ('test_reverse', [], ''),
                                                             ('test_random', [], '')],
                                                 'properties': []},
             'test_function_base.TestExtins': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_basic', [], ''),
                                                           ('test_place', [], ''),
                                                           ('test_both', [], '')],
                                               'properties': []},
             'test_function_base.TestFilterwindows': {'bases': ['test_function_base.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('test_hanning', [], ''),
                                                                  ('test_hamming', [], ''),
                                                                  ('test_bartlett', [], ''),
                                                                  ('test_blackman', [], '')],
                                                      'properties': []},
             'test_function_base.TestGradient': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_basic', [], ''),
                                                             ('test_badargs', [], ''),
                                                             ('test_masked', [], '')],
                                                 'properties': []},
             'test_function_base.TestHistogram': {'bases': ['test_function_base.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('setUp', [], ''),
                                                              ('tearDown', [], ''),
                                                              ('test_simple', [], ''),
                                                              ('test_one_bin', [], ''),
                                                              ('test_normed', [], ''),
                                                              ('test_density', [], ''),
                                                              ('test_outliers', [], ''),
                                                              ('test_type', [], ''),
                                                              ('test_weights', [], ''),
                                                              ('test_empty', [], '')],
                                                  'properties': []},
             'test_function_base.TestHistogramdd': {'bases': ['test_function_base.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_simple', [], ''),
                                                                ('test_shape_3d', [], ''),
                                                                ('test_shape_4d', [], ''),
                                                                ('test_weights', [], ''),
                                                                ('test_identical_samples',
                                                                 [],
                                                                 ''),
                                                                ('test_empty', [], ''),
                                                                ('test_bins_errors',
                                                                 [],
                                                                 'There are two ways to specify bins. Check for the right errors when\n        mixing those.'),
                                                                ('test_inf_edges',
                                                                 [],
                                                                 'Test using +/-inf bin edges works. See #1788.')],
                                                    'properties': []},
             'test_function_base.TestInsert': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_basic', [], '')],
                                               'properties': []},
             'test_function_base.TestInterp': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_exceptions', [], ''),
                                                           ('test_basic', [], ''),
                                                           ('test_right_left_behavior', [], ''),
                                                           ('test_scalar_interpolation_point',
                                                            [],
                                                            ''),
                                                           ('test_zero_dimensional_interpolation_point',
                                                            [],
                                                            '')],
                                               'properties': []},
             'test_function_base.TestKaiser': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_simple', [], ''),
                                                           ('test_int_beta', [], '')],
                                               'properties': []},
             'test_function_base.TestLinspace': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_basic', [], ''),
                                                             ('test_corner', [], ''),
                                                             ('test_type', [], '')],
                                                 'properties': []},
             'test_function_base.TestLogspace': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_basic', [], '')],
                                                 'properties': []},
             'test_function_base.TestMeshgrid': {'bases': ['test_function_base.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_simple', [], '')],
                                                 'properties': []},
             'test_function_base.TestMsort': {'bases': ['test_function_base.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_simple', [], '')],
                                              'properties': []},
             'test_function_base.TestNaNFuncts': {'bases': ['test_function_base.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('setUp', [], ''),
                                                              ('test_nansum', [], ''),
                                                              ('test_nanmin', [], ''),
                                                              ('test_nanargmin', [], ''),
                                                              ('test_nanmax', [], ''),
                                                              ('test_nanmin_allnan_on_axis',
                                                               [],
                                                               ''),
                                                              ('test_nanmin_masked', [], '')],
                                                  'properties': ['A']},
             'test_function_base.TestNanFunctsIntTypes': {'bases': ['test_function_base.TestCase'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('setUp',
                                                                       ['*args', '**kwargs'],
                                                                       ''),
                                                                      ('integer_arrays',
                                                                       [],
                                                                       ''),
                                                                      ('test_nanmin', [], ''),
                                                                      ('test_nanmax', [], ''),
                                                                      ('test_nanargmin',
                                                                       [],
                                                                       ''),
                                                                      ('test_nanargmax',
                                                                       [],
                                                                       '')],
                                                          'properties': ['int_types', 'A']},
             'test_function_base.TestPiecewise': {'bases': ['test_function_base.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_simple', [], ''),
                                                              ('test_default', [], ''),
                                                              ('test_0d', [], '')],
                                                  'properties': []},
             'test_function_base.TestProd': {'bases': ['test_function_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_function_base.TestPtp': {'bases': ['test_function_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], '')],
                                            'properties': []},
             'test_function_base.TestSelect': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('_select',
                                                            ['cond', 'values', 'default=0'],
                                                            ''),
                                                           ('test_basic', [], '')],
                                               'properties': []},
             'test_function_base.TestSinc': {'bases': ['test_function_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_simple', [], ''),
                                                         ('test_array_like', [], '')],
                                             'properties': []},
             'test_function_base.TestTrapz': {'bases': ['test_function_base.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_simple', [], ''),
                                                          ('test_ndim', [], ''),
                                                          ('test_masked', [], ''),
                                                          ('test_matrix', [], '')],
                                              'properties': []},
             'test_function_base.TestTrimZeros': {'bases': ['test_function_base.TestCase'],
                                                  'constructor': [],
                                                  'docstring': ' only testing for integer splits.\n    ',
                                                  'methods': [('test_basic', [], ''),
                                                              ('test_leading_skip', [], ''),
                                                              ('test_trailing_skip', [], '')],
                                                  'properties': []},
             'test_function_base.TestUnique': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_simple', [], '')],
                                               'properties': []},
             'test_function_base.TestUnwrap': {'bases': ['test_function_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_simple', [], '')],
                                               'properties': []},
             'test_function_base.TestVectorize': {'bases': ['test_function_base.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_simple', [], ''),
                                                              ('test_scalar', [], ''),
                                                              ('test_large', [], ''),
                                                              ('test_ufunc', [], ''),
                                                              ('test_keywords', [], ''),
                                                              ('test_keywords_no_func_code',
                                                               [],
                                                               '')],
                                                  'properties': []},
             'test_function_base.Test_i0': {'bases': ['test_function_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_simple', [], '')],
                                            'properties': []},
             'test_getlimits.TestDouble': {'bases': ['test_getlimits.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_singleton', [], '')],
                                           'properties': []},
             'test_getlimits.TestHalf': {'bases': ['test_getlimits.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_singleton', [], '')],
                                         'properties': []},
             'test_getlimits.TestIinfo': {'bases': ['test_getlimits.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_basic', [], ''),
                                                      ('test_unsigned_max', [], '')],
                                          'properties': []},
             'test_getlimits.TestLongdouble': {'bases': ['test_getlimits.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_singleton', ['level=2'], '')],
                                               'properties': []},
             'test_getlimits.TestPythonFloat': {'bases': ['test_getlimits.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_singleton', [], '')],
                                                'properties': []},
             'test_getlimits.TestSingle': {'bases': ['test_getlimits.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_singleton', [], '')],
                                           'properties': []},
             'test_half.TestHalf': {'bases': ['numpy.testing.TestCase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('setUp', [], ''),
                                                ('test_half_conversions',
                                                 [],
                                                 'Checks that all 16-bit values survive conversion\n           to/from 32-bit and 64-bit float'),
                                                ('test_nans_infs', [], ''),
                                                ('test_half_values',
                                                 [],
                                                 'Confirms a small number of known half values'),
                                                ('test_half_rounding',
                                                 [],
                                                 'Checks that rounding when converting to half is correct'),
                                                ('test_half_correctness',
                                                 [],
                                                 'Take every finite float16, and check the casting functions with\n           a manual conversion.'),
                                                ('test_half_ordering',
                                                 [],
                                                 'Make sure comparisons are working right'),
                                                ('test_half_funcs',
                                                 [],
                                                 'Test the various ArrFuncs'),
                                                ('test_spacing_nextafter',
                                                 [],
                                                 'Test np.spacing and np.nextafter'),
                                                ('test_half_ufuncs',
                                                 [],
                                                 'Test the various ufuncs'),
                                                ('test_half_coercion',
                                                 [],
                                                 'Test that half gets coerced properly with the other types'),
                                                ('test_half_fpe',
                                                 [],
                                                 'Test that half raises the correct underflows and overflows'),
                                                ('test_half_array_interface',
                                                 [],
                                                 'Test that half is compatible with __array_interface__')],
                                    'properties': ['all_f16',
                                                   'all_f32',
                                                   'all_f64',
                                                   'nonan_f16',
                                                   'nonan_f32',
                                                   'nonan_f64',
                                                   'finite_f16',
                                                   'finite_f32',
                                                   'finite_f64']},
             'test_helper.TestFFTFreq': {'bases': ['test_helper.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_definition', [], '')],
                                         'properties': []},
             'test_helper.TestFFTShift': {'bases': ['test_helper.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_definition', [], ''),
                                                      ('test_inverse', [], ''),
                                                      ('test_axes_keyword', [], '')],
                                          'properties': []},
             'test_hermite.TestArithmetic': {'bases': ['test_hermite.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_hermval', [], ''),
                                                         ('test_hermadd', [], ''),
                                                         ('test_hermsub', [], ''),
                                                         ('test_hermmulx', [], ''),
                                                         ('test_hermmul', [], ''),
                                                         ('test_hermdiv', [], '')],
                                             'properties': ['x',
                                                            'y0',
                                                            'y1',
                                                            'y2',
                                                            'y3',
                                                            'y4',
                                                            'y5',
                                                            'y6',
                                                            'y7',
                                                            'y8',
                                                            'y9',
                                                            'y']},
             'test_hermite.TestCalculus': {'bases': ['test_hermite.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_hermint', [], ''),
                                                       ('test_hermder', [], '')],
                                           'properties': []},
             'test_hermite.TestConstants': {'bases': ['test_hermite.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_hermdomain', [], ''),
                                                        ('test_hermzero', [], ''),
                                                        ('test_hermone', [], ''),
                                                        ('test_hermx', [], '')],
                                            'properties': []},
             'test_hermite.TestHermiteClass': {'bases': ['test_hermite.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_equal', [], ''),
                                                           ('test_not_equal', [], ''),
                                                           ('test_add', [], ''),
                                                           ('test_sub', [], ''),
                                                           ('test_mul', [], ''),
                                                           ('test_floordiv', [], ''),
                                                           ('test_mod', [], ''),
                                                           ('test_divmod', [], ''),
                                                           ('test_pow', [], ''),
                                                           ('test_call', [], ''),
                                                           ('test_degree', [], ''),
                                                           ('test_cutdeg', [], ''),
                                                           ('test_convert', [], ''),
                                                           ('test_mapparms', [], ''),
                                                           ('test_trim', [], ''),
                                                           ('test_truncate', [], ''),
                                                           ('test_copy', [], ''),
                                                           ('test_integ', [], ''),
                                                           ('test_deriv', [], ''),
                                                           ('test_roots', [], ''),
                                                           ('test_linspace', [], ''),
                                                           ('test_fromroots', [], ''),
                                                           ('test_fit', [], ''),
                                                           ('test_identity', [], '')],
                                               'properties': ['p1', 'p2', 'p3', 'p4', 'p5']},
             'test_hermite.TestMisc': {'bases': ['test_hermite.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('test_hermfromroots', [], ''),
                                                   ('test_hermroots', [], ''),
                                                   ('test_hermvander', [], ''),
                                                   ('test_hermfit', [], ''),
                                                   ('test_hermtrim', [], ''),
                                                   ('test_hermline', [], ''),
                                                   ('test_herm2poly', [], ''),
                                                   ('test_poly2herm', [], '')],
                                       'properties': []},
             'test_hermite_e.TestArithmetic': {'bases': ['test_hermite_e.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_hermeval', [], ''),
                                                           ('test_hermeadd', [], ''),
                                                           ('test_hermesub', [], ''),
                                                           ('test_hermemulx', [], ''),
                                                           ('test_hermemul', [], ''),
                                                           ('test_hermediv', [], '')],
                                               'properties': ['x',
                                                              'y0',
                                                              'y1',
                                                              'y2',
                                                              'y3',
                                                              'y4',
                                                              'y5',
                                                              'y6',
                                                              'y7',
                                                              'y8',
                                                              'y9',
                                                              'y']},
             'test_hermite_e.TestCalculus': {'bases': ['test_hermite_e.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_hermeint', [], ''),
                                                         ('test_hermeder', [], '')],
                                             'properties': []},
             'test_hermite_e.TestConstants': {'bases': ['test_hermite_e.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_hermedomain', [], ''),
                                                          ('test_hermezero', [], ''),
                                                          ('test_hermeone', [], ''),
                                                          ('test_hermex', [], '')],
                                              'properties': []},
             'test_hermite_e.TestHermiteEClass': {'bases': ['test_hermite_e.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_equal', [], ''),
                                                              ('test_not_equal', [], ''),
                                                              ('test_add', [], ''),
                                                              ('test_sub', [], ''),
                                                              ('test_mul', [], ''),
                                                              ('test_floordiv', [], ''),
                                                              ('test_mod', [], ''),
                                                              ('test_divmod', [], ''),
                                                              ('test_pow', [], ''),
                                                              ('test_call', [], ''),
                                                              ('test_degree', [], ''),
                                                              ('test_cutdeg', [], ''),
                                                              ('test_convert', [], ''),
                                                              ('test_mapparms', [], ''),
                                                              ('test_trim', [], ''),
                                                              ('test_truncate', [], ''),
                                                              ('test_copy', [], ''),
                                                              ('test_integ', [], ''),
                                                              ('test_deriv', [], ''),
                                                              ('test_roots', [], ''),
                                                              ('test_linspace', [], ''),
                                                              ('test_fromroots', [], ''),
                                                              ('test_fit', [], ''),
                                                              ('test_identity', [], '')],
                                                  'properties': ['p1', 'p2', 'p3', 'p4', 'p5']},
             'test_hermite_e.TestMisc': {'bases': ['test_hermite_e.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_hermefromroots', [], ''),
                                                     ('test_hermeroots', [], ''),
                                                     ('test_hermevander', [], ''),
                                                     ('test_hermefit', [], ''),
                                                     ('test_hermetrim', [], ''),
                                                     ('test_hermeline', [], ''),
                                                     ('test_herme2poly', [], ''),
                                                     ('test_poly2herme', [], '')],
                                         'properties': []},
             'test_index_tricks.TestConcatenator': {'bases': ['test_index_tricks.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_1d', [], ''),
                                                                ('test_mixed_type', [], ''),
                                                                ('test_more_mixed_type',
                                                                 [],
                                                                 ''),
                                                                ('test_2d', [], '')],
                                                    'properties': []},
             'test_index_tricks.TestGrid': {'bases': ['test_index_tricks.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_linspace_equivalence', [], ''),
                                                        ('test_nd', [], '')],
                                            'properties': []},
             'test_index_tricks.TestIndexExpression': {'bases': ['test_index_tricks.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('test_regression_1',
                                                                    [],
                                                                    ''),
                                                                   ('test_simple_1', [], '')],
                                                       'properties': []},
             'test_index_tricks.TestNdenumerate': {'bases': ['test_index_tricks.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_basic', [], '')],
                                                   'properties': []},
             'test_index_tricks.TestRavelUnravelIndex': {'bases': ['test_index_tricks.TestCase'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('test_basic', [], ''),
                                                                     ('test_dtypes', [], ''),
                                                                     ('test_clipmodes', [], '')],
                                                         'properties': []},
             'test_io.RoundtripTest': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('roundtrip',
                                                    ['save_func', '*args', '**kwargs'],
                                                    '\n        save_func : callable\n            Function used to save arrays to file.\n        file_on_disk : bool\n            If true, store the file on disk, instead of in a\n            string buffer.\n        save_kwds : dict\n            Parameters passed to `save_func`.\n        load_kwds : dict\n            Parameters passed to `numpy.load`.\n        args : tuple of arrays\n            Arrays stored to file.\n\n        '),
                                                   ('test_array', [], ''),
                                                   ('test_1D', [], ''),
                                                   ('test_mmap', [], ''),
                                                   ('test_record', [], '')],
                                       'properties': ['arr', 'arr_reloaded']},
             'test_io.TestFromTxt': {'bases': ['numpy.ma.testutils.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('test_record', [], 'Test w/ explicit dtype'),
                                                 ('test_array',
                                                  [],
                                                  'Test outputing a standard ndarray'),
                                                 ('test_1D', [], 'Test squeezing to 1D'),
                                                 ('test_comments',
                                                  [],
                                                  'Test the stripping of comments'),
                                                 ('test_skiprows', [], 'Test row skipping'),
                                                 ('test_skip_footer', [], ''),
                                                 ('test_skip_footer_with_invalid', [], ''),
                                                 ('test_header',
                                                  [],
                                                  'Test retrieving a header'),
                                                 ('test_auto_dtype',
                                                  [],
                                                  'Test the automatic definition of the output dtype'),
                                                 ('test_auto_dtype_uniform',
                                                  [],
                                                  'Tests whether the output dtype can be uniformized'),
                                                 ('test_fancy_dtype',
                                                  [],
                                                  "Check that a nested dtype isn't MIA"),
                                                 ('test_names_overwrite',
                                                  [],
                                                  'Test overwriting the names of the dtype'),
                                                 ('test_commented_header',
                                                  [],
                                                  'Check that names can be retrieved even if the line is commented out.'),
                                                 ('test_autonames_and_usecols',
                                                  [],
                                                  'Tests names and usecols'),
                                                 ('test_converters_with_usecols',
                                                  [],
                                                  'Test the combination user-defined converters and usecol'),
                                                 ('test_converters_with_usecols_and_names',
                                                  [],
                                                  'Tests names and usecols'),
                                                 ('test_converters_cornercases',
                                                  [],
                                                  'Test the conversion to datetime.'),
                                                 ('test_unused_converter',
                                                  [],
                                                  'Test whether unused converters are forgotten'),
                                                 ('test_invalid_converter', [], ''),
                                                 ('test_tricky_converter_bug1666',
                                                  [],
                                                  'Test some corner case'),
                                                 ('test_dtype_with_converters', [], ''),
                                                 ('test_dtype_with_object',
                                                  [],
                                                  'Test using an explicit dtype with an object'),
                                                 ('test_userconverters_with_explicit_dtype',
                                                  [],
                                                  'Test user_converters w/ explicit (standard) dtype'),
                                                 ('test_spacedelimiter',
                                                  [],
                                                  'Test space delimiter'),
                                                 ('test_integer_delimiter',
                                                  [],
                                                  'Test using an integer for delimiter'),
                                                 ('test_missing', [], ''),
                                                 ('test_missing_with_tabs',
                                                  [],
                                                  'Test w/ a delimiter tab'),
                                                 ('test_usecols',
                                                  [],
                                                  'Test the selection of columns'),
                                                 ('test_usecols_as_css',
                                                  [],
                                                  'Test giving usecols with a comma-separated string'),
                                                 ('test_usecols_with_structured_dtype',
                                                  [],
                                                  'Test usecols with an explicit structured dtype'),
                                                 ('test_usecols_with_integer',
                                                  [],
                                                  'Test usecols with an integer'),
                                                 ('test_usecols_with_named_columns',
                                                  [],
                                                  'Test usecols with named columns'),
                                                 ('test_empty_file',
                                                  [],
                                                  'Test that an empty file raises the proper warning.'),
                                                 ('test_fancy_dtype_alt',
                                                  [],
                                                  "Check that a nested dtype isn't MIA"),
                                                 ('test_shaped_dtype', [], ''),
                                                 ('test_withmissing', [], ''),
                                                 ('test_user_missing_values', [], ''),
                                                 ('test_user_filling_values',
                                                  [],
                                                  'Test with missing and filling values'),
                                                 ('test_withmissing_float', [], ''),
                                                 ('test_with_masked_column_uniform',
                                                  [],
                                                  'Test masked column'),
                                                 ('test_with_masked_column_various',
                                                  [],
                                                  'Test masked column'),
                                                 ('test_invalid_raise',
                                                  [],
                                                  'Test invalid raise'),
                                                 ('test_invalid_raise_with_usecols',
                                                  [],
                                                  'Test invalid_raise with usecols'),
                                                 ('test_inconsistent_dtype',
                                                  [],
                                                  'Test inconsistent dtype'),
                                                 ('test_default_field_format',
                                                  [],
                                                  'Test default format'),
                                                 ('test_single_dtype_wo_names',
                                                  [],
                                                  'Test single dtype w/o names'),
                                                 ('test_single_dtype_w_explicit_names',
                                                  [],
                                                  'Test single dtype w explicit names'),
                                                 ('test_single_dtype_w_implicit_names',
                                                  [],
                                                  'Test single dtype w implicit names'),
                                                 ('test_easy_structured_dtype',
                                                  [],
                                                  'Test easy structured dtype'),
                                                 ('test_autostrip', [], 'Test autostrip'),
                                                 ('test_replace_space',
                                                  [],
                                                  "Test the 'replace_space' option"),
                                                 ('test_incomplete_names',
                                                  [],
                                                  'Test w/ incomplete names'),
                                                 ('test_names_auto_completion',
                                                  [],
                                                  'Make sure that names are properly completed'),
                                                 ('test_names_with_usecols_bug1636',
                                                  [],
                                                  'Make sure we pick up the right names w/ usecols'),
                                                 ('test_fixed_width_names',
                                                  [],
                                                  'Test fix-width w/ names'),
                                                 ('test_filling_values',
                                                  [],
                                                  'Test missing values'),
                                                 ('test_recfromtxt', [], ''),
                                                 ('test_recfromcsv', [], ''),
                                                 ('test_gft_filename', [], ''),
                                                 ('test_gft_generator_source', [], '')],
                                     'properties': []},
             'test_io.TestLoadTxt': {'bases': ['numpy.ma.testutils.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('test_record', [], ''),
                                                 ('test_array', [], ''),
                                                 ('test_1D', [], ''),
                                                 ('test_missing', [], ''),
                                                 ('test_converters_with_usecols', [], ''),
                                                 ('test_comments', [], ''),
                                                 ('test_skiprows', [], ''),
                                                 ('test_usecols', [], ''),
                                                 ('test_fancy_dtype', [], ''),
                                                 ('test_shaped_dtype', [], ''),
                                                 ('test_3d_shaped_dtype', [], ''),
                                                 ('test_empty_file', [], ''),
                                                 ('test_unused_converter', [], ''),
                                                 ('test_dtype_with_object',
                                                  [],
                                                  'Test using an explicit dtype with an object'),
                                                 ('test_uint64_type', [], ''),
                                                 ('test_int64_type', [], ''),
                                                 ('test_universal_newline', [], ''),
                                                 ('test_empty_field_after_tab', [], ''),
                                                 ('test_structure_unpack', [], ''),
                                                 ('test_ndmin_keyword', [], ''),
                                                 ('test_generator_source', [], '')],
                                     'properties': []},
             'test_io.TestSaveLoad': {'bases': ['test_io.RoundtripTest',
                                                'numpy.ma.testutils.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('roundtrip', ['*args', '**kwargs'], '')],
                                      'properties': []},
             'test_io.TestSaveTxt': {'bases': ['numpy.ma.testutils.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('test_array', [], ''),
                                                 ('test_1D', [], ''),
                                                 ('test_record', [], ''),
                                                 ('test_delimiter', [], ''),
                                                 ('test_format', [], ''),
                                                 ('test_file_roundtrip', [], ''),
                                                 ('test_complex_arrays', [], '')],
                                     'properties': []},
             'test_io.TestSavezLoad': {'bases': ['test_io.RoundtripTest',
                                                 'numpy.ma.testutils.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('roundtrip', ['*args', '**kwargs'], ''),
                                                   ('test_multiple_arrays', [], ''),
                                                   ('test_named_arrays', [], ''),
                                                   ('test_savez_filename_clashes', [], '')],
                                       'properties': []},
             'test_io.Testfromregex': {'bases': ['numpy.ma.testutils.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('test_record', [], ''),
                                                   ('test_record_2', [], ''),
                                                   ('test_record_3', [], '')],
                                       'properties': []},
             'test_kind.TestKind': {'bases': ['util.F2PyTest'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('test_all', [], '')],
                                    'properties': ['sources']},
             'test_laguerre.TestArithmetic': {'bases': ['test_laguerre.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_lagval', [], ''),
                                                          ('test_lagadd', [], ''),
                                                          ('test_lagsub', [], ''),
                                                          ('test_lagmulx', [], ''),
                                                          ('test_lagmul', [], ''),
                                                          ('test_lagdiv', [], '')],
                                              'properties': ['x',
                                                             'y0',
                                                             'y1',
                                                             'y2',
                                                             'y3',
                                                             'y4',
                                                             'y5',
                                                             'y6',
                                                             'y']},
             'test_laguerre.TestCalculus': {'bases': ['test_laguerre.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_lagint', [], ''),
                                                        ('test_lagder', [], '')],
                                            'properties': []},
             'test_laguerre.TestConstants': {'bases': ['test_laguerre.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_lagdomain', [], ''),
                                                         ('test_lagzero', [], ''),
                                                         ('test_lagone', [], ''),
                                                         ('test_lagx', [], '')],
                                             'properties': []},
             'test_laguerre.TestLaguerreClass': {'bases': ['test_laguerre.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_equal', [], ''),
                                                             ('test_not_equal', [], ''),
                                                             ('test_add', [], ''),
                                                             ('test_sub', [], ''),
                                                             ('test_mul', [], ''),
                                                             ('test_floordiv', [], ''),
                                                             ('test_mod', [], ''),
                                                             ('test_divmod', [], ''),
                                                             ('test_pow', [], ''),
                                                             ('test_call', [], ''),
                                                             ('test_degree', [], ''),
                                                             ('test_cutdeg', [], ''),
                                                             ('test_convert', [], ''),
                                                             ('test_mapparms', [], ''),
                                                             ('test_trim', [], ''),
                                                             ('test_truncate', [], ''),
                                                             ('test_copy', [], ''),
                                                             ('test_integ', [], ''),
                                                             ('test_deriv', [], ''),
                                                             ('test_roots', [], ''),
                                                             ('test_linspace', [], ''),
                                                             ('test_fromroots', [], ''),
                                                             ('test_fit', [], ''),
                                                             ('test_identity', [], '')],
                                                 'properties': ['p1', 'p2', 'p3', 'p4', 'p5']},
             'test_laguerre.TestMisc': {'bases': ['test_laguerre.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_lagfromroots', [], ''),
                                                    ('test_lagroots', [], ''),
                                                    ('test_lagvander', [], ''),
                                                    ('test_lagfit', [], ''),
                                                    ('test_lagtrim', [], ''),
                                                    ('test_lagline', [], ''),
                                                    ('test_lag2poly', [], ''),
                                                    ('test_poly2lag', [], '')],
                                        'properties': []},
             'test_legendre.TestArithmetic': {'bases': ['test_legendre.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_legval', [], ''),
                                                          ('test_legadd', [], ''),
                                                          ('test_legsub', [], ''),
                                                          ('test_legmulx', [], ''),
                                                          ('test_legmul', [], ''),
                                                          ('test_legdiv', [], '')],
                                              'properties': ['x',
                                                             'y0',
                                                             'y1',
                                                             'y2',
                                                             'y3',
                                                             'y4',
                                                             'y5',
                                                             'y6',
                                                             'y7',
                                                             'y8',
                                                             'y9',
                                                             'y']},
             'test_legendre.TestCalculus': {'bases': ['test_legendre.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_legint', [], ''),
                                                        ('test_legder', [], '')],
                                            'properties': []},
             'test_legendre.TestConstants': {'bases': ['test_legendre.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_legdomain', [], ''),
                                                         ('test_legzero', [], ''),
                                                         ('test_legone', [], ''),
                                                         ('test_legx', [], '')],
                                             'properties': []},
             'test_legendre.TestLegendreClass': {'bases': ['test_legendre.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_equal', [], ''),
                                                             ('test_not_equal', [], ''),
                                                             ('test_add', [], ''),
                                                             ('test_sub', [], ''),
                                                             ('test_mul', [], ''),
                                                             ('test_floordiv', [], ''),
                                                             ('test_mod', [], ''),
                                                             ('test_divmod', [], ''),
                                                             ('test_pow', [], ''),
                                                             ('test_call', [], ''),
                                                             ('test_degree', [], ''),
                                                             ('test_cutdeg', [], ''),
                                                             ('test_convert', [], ''),
                                                             ('test_mapparms', [], ''),
                                                             ('test_trim', [], ''),
                                                             ('test_truncate', [], ''),
                                                             ('test_copy', [], ''),
                                                             ('test_integ', [], ''),
                                                             ('test_deriv', [], ''),
                                                             ('test_roots', [], ''),
                                                             ('test_linspace', [], ''),
                                                             ('test_fromroots', [], ''),
                                                             ('test_fit', [], ''),
                                                             ('test_identity', [], '')],
                                                 'properties': ['p1', 'p2', 'p3', 'p4', 'p5']},
             'test_legendre.TestMisc': {'bases': ['test_legendre.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_legfromroots', [], ''),
                                                    ('test_legroots', [], ''),
                                                    ('test_legvander', [], ''),
                                                    ('test_legfit', [], ''),
                                                    ('test_legtrim', [], ''),
                                                    ('test_legline', [], ''),
                                                    ('test_leg2poly', [], ''),
                                                    ('test_poly2leg', [], '')],
                                        'properties': []},
             'test_linalg.HermitianTestCase': {'bases': ['object'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_single', [], ''),
                                                           ('test_double', [], ''),
                                                           ('test_csingle', [], ''),
                                                           ('test_cdouble', [], ''),
                                                           ('test_empty', [], ''),
                                                           ('test_nonarray', [], ''),
                                                           ('test_matrix_b_only',
                                                            [],
                                                            'Check that matrix type is preserved.'),
                                                           ('test_matrix_a_and_b',
                                                            [],
                                                            'Check that matrix type is preserved.')],
                                               'properties': []},
             'test_linalg.LinalgNonsquareTestCase': {'bases': [],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_single_nsq_1', [], ''),
                                                                 ('test_single_nsq_2', [], ''),
                                                                 ('test_double_nsq_1', [], ''),
                                                                 ('test_double_nsq_2', [], ''),
                                                                 ('test_csingle_nsq_1', [], ''),
                                                                 ('test_csingle_nsq_2', [], ''),
                                                                 ('test_cdouble_nsq_1', [], ''),
                                                                 ('test_cdouble_nsq_2', [], ''),
                                                                 ('test_cdouble_nsq_1_2',
                                                                  [],
                                                                  ''),
                                                                 ('test_cdouble_nsq_2_2',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'test_linalg.LinalgTestCase': {'bases': [],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_single', [], ''),
                                                        ('test_double', [], ''),
                                                        ('test_double_2', [], ''),
                                                        ('test_csingle', [], ''),
                                                        ('test_cdouble', [], ''),
                                                        ('test_cdouble_2', [], ''),
                                                        ('test_empty', [], ''),
                                                        ('test_nonarray', [], ''),
                                                        ('test_matrix_b_only',
                                                         [],
                                                         'Check that matrix type is preserved.'),
                                                        ('test_matrix_a_and_b',
                                                         [],
                                                         'Check that matrix type is preserved.')],
                                            'properties': []},
             'test_linalg.TestBoolPower': {'bases': ['test_linalg.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_square', [], '')],
                                           'properties': []},
             'test_linalg.TestCond2': {'bases': ['test_linalg.LinalgTestCase',
                                                 'test_linalg.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('do', ['a', 'b'], '')],
                                       'properties': []},
             'test_linalg.TestCondInf': {'bases': ['test_linalg.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test', [], '')],
                                         'properties': []},
             'test_linalg.TestCondSVD': {'bases': ['test_linalg.LinalgTestCase',
                                                   'test_linalg.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('do', ['a', 'b'], '')],
                                         'properties': []},
             'test_linalg.TestDet': {'bases': ['test_linalg.LinalgTestCase',
                                               'test_linalg.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('do', ['a', 'b'], ''), ('test_zero', [], '')],
                                     'properties': []},
             'test_linalg.TestEig': {'bases': ['test_linalg.LinalgTestCase',
                                               'test_linalg.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('do', ['a', 'b'], '')],
                                     'properties': []},
             'test_linalg.TestEigh': {'bases': ['test_linalg.HermitianTestCase',
                                                'test_linalg.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('do', ['a'], '')],
                                      'properties': []},
             'test_linalg.TestEigvals': {'bases': ['test_linalg.LinalgTestCase',
                                                   'test_linalg.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('do', ['a', 'b'], '')],
                                         'properties': []},
             'test_linalg.TestEigvalsh': {'bases': ['test_linalg.HermitianTestCase',
                                                    'test_linalg.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('do', ['a'], '')],
                                          'properties': []},
             'test_linalg.TestInv': {'bases': ['test_linalg.LinalgTestCase',
                                               'test_linalg.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('do', ['a', 'b'], '')],
                                     'properties': []},
             'test_linalg.TestLstsq': {'bases': ['test_linalg.LinalgTestCase',
                                                 'test_linalg.LinalgNonsquareTestCase',
                                                 'test_linalg.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('do', ['a', 'b'], '')],
                                       'properties': []},
             'test_linalg.TestMatrixPower': {'bases': [],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_large_power', [], ''),
                                                         ('test_large_power_trailing_zero',
                                                          [],
                                                          ''),
                                                         ('testip_zero', [], ''),
                                                         ('testip_one', [], ''),
                                                         ('testip_two', [], ''),
                                                         ('testip_invert', [], ''),
                                                         ('test_invert_noninvertible', [], '')],
                                             'properties': ['R90',
                                                            'Arb22',
                                                            'noninv',
                                                            'arbfloat',
                                                            'large',
                                                            't']},
             'test_linalg.TestNormDouble': {'bases': ['test_linalg._TestNorm'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['dt', 'dec']},
             'test_linalg.TestNormSingle': {'bases': ['test_linalg._TestNorm'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['dt', 'dec']},
             'test_linalg.TestPinv': {'bases': ['test_linalg.LinalgTestCase',
                                                'test_linalg.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('do', ['a', 'b'], '')],
                                      'properties': []},
             'test_linalg.TestSVD': {'bases': ['test_linalg.LinalgTestCase',
                                               'test_linalg.TestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('do', ['a', 'b'], '')],
                                     'properties': []},
             'test_linalg.TestSolve': {'bases': ['test_linalg.LinalgTestCase',
                                                 'test_linalg.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('do', ['a', 'b'], '')],
                                       'properties': []},
             'test_linalg._TestNorm': {'bases': ['test_linalg.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('test_empty', [], ''),
                                                   ('test_vector', [], ''),
                                                   ('test_matrix', [], '')],
                                       'properties': ['dt', 'dec']},
             'test_machar.TestMachAr': {'bases': ['test_machar.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('_run_machar_highprec', [], ''),
                                                    ('test_underlow',
                                                     [],
                                                     'Regression testing for #759: instanciating MachAr for dtype =\n        np.float96 raises spurious warning.')],
                                        'properties': []},
             'test_memmap.TestMemmap': {'bases': ['numpy.testing.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('setUp', [], ''),
                                                    ('tearDown', [], ''),
                                                    ('test_roundtrip', [], ''),
                                                    ('test_open_with_filename', [], ''),
                                                    ('test_attributes', [], ''),
                                                    ('test_filename', [], ''),
                                                    ('test_filename_fileobj', [], ''),
                                                    ('test_flush', [], ''),
                                                    ('test_del', [], '')],
                                        'properties': ['tmpfp', 'shape', 'dtype', 'data']},
             'test_misc_util.TestAppendpath': {'bases': ['test_misc_util.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_1', [], ''),
                                                           ('test_2', [], ''),
                                                           ('test_3', [], '')],
                                               'properties': []},
             'test_misc_util.TestGpaths': {'bases': ['test_misc_util.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_gpaths', [], '')],
                                           'properties': []},
             'test_misc_util.TestMinrelpath': {'bases': ['test_misc_util.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_1', [], '')],
                                               'properties': []},
             'test_mixed.TestMixed': {'bases': ['util.F2PyTest'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('test_all', [], '')],
                                      'properties': ['sources']},
             'test_mrecords.TestMRecords': {'bases': ['test_mrecords.TestCase'],
                                            'constructor': ['*args', '**kwds'],
                                            'docstring': 'Base test class for MaskedArrays.',
                                            'methods': [('setup', [], 'Generic setup'),
                                                        ('test_byview',
                                                         [],
                                                         'Test creation by view'),
                                                        ('test_get',
                                                         [],
                                                         'Tests fields retrieval'),
                                                        ('test_set_fields',
                                                         [],
                                                         'Tests setting fields.'),
                                                        ('test_set_fields_mask',
                                                         [],
                                                         'Tests setting the mask of a field.'),
                                                        ('test_set_mask', [], ''),
                                                        ('test_set_mask_fromarray', [], ''),
                                                        ('test_set_mask_fromfields', [], ''),
                                                        ('test_set_elements', [], ''),
                                                        ('test_setslices_hardmask',
                                                         [],
                                                         'Tests setting slices w/ hardmask.'),
                                                        ('test_hardmask', [], 'Test hardmask'),
                                                        ('test_pickling', [], 'Test pickling'),
                                                        ('test_filled',
                                                         [],
                                                         'Test filling the array'),
                                                        ('test_tolist', [], 'Test tolist.'),
                                                        ('test_withnames',
                                                         [],
                                                         'Test the creation w/ format and names'),
                                                        ('test_exotic_formats',
                                                         [],
                                                         "Test that 'exotic' formats are processed properly")],
                                            'properties': ['base']},
             'test_mrecords.TestMRecordsImport': {'bases': ['test_mrecords.TestCase'],
                                                  'constructor': ['*args', '**kwds'],
                                                  'docstring': 'Base test class for MaskedArrays.',
                                                  'methods': [('setup', [], 'Generic setup'),
                                                              ('test_fromarrays', [], ''),
                                                              ('test_fromrecords',
                                                               [],
                                                               'Test construction from records.'),
                                                              ('test_fromrecords_wmask',
                                                               [],
                                                               'Tests construction from records w/ mask.'),
                                                              ('test_fromtextfile',
                                                               [],
                                                               'Tests reading from a text file.'),
                                                              ('test_addfield',
                                                               [],
                                                               'Tests addfield')],
                                                  'properties': ['data']},
             'test_mrecords.TestView': {'bases': ['test_mrecords.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('setUp', [], ''),
                                                    ('test_view_by_itself', [], ''),
                                                    ('test_view_simple_dtype', [], ''),
                                                    ('test_view_flexible_type', [], '')],
                                        'properties': ['data']},
             'test_multiarray.TestArgmax': {'bases': ['test_multiarray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_all', [], ''),
                                                        ('test_combinations', [], '')],
                                            'properties': ['nan_arr']},
             'test_multiarray.TestArgmin': {'bases': ['test_multiarray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_all', [], ''),
                                                        ('test_combinations', [], '')],
                                            'properties': ['nan_arr']},
             'test_multiarray.TestArrayAttributeDeletion': {'bases': ['object'],
                                                            'constructor': [],
                                                            'docstring': 'ticket #2046, should not seqfault, raise AttributeError',
                                                            'methods': [('test_attribute_deletion',
                                                                         [],
                                                                         '')],
                                                            'properties': []},
             'test_multiarray.TestAssignment': {'bases': ['test_multiarray.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_assignment_broadcasting',
                                                             [],
                                                             '')],
                                                'properties': []},
             'test_multiarray.TestAttributes': {'bases': ['test_multiarray.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('setUp', [], ''),
                                                            ('test_attributes', [], ''),
                                                            ('test_dtypeattr', [], ''),
                                                            ('test_stridesattr', [], ''),
                                                            ('test_set_stridesattr', [], ''),
                                                            ('test_fill', [], '')],
                                                'properties': ['one', 'two', 'three']},
             'test_multiarray.TestBool': {'bases': ['test_multiarray.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_test_interning', [], '')],
                                          'properties': []},
             'test_multiarray.TestChoose': {'bases': ['test_multiarray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''),
                                                        ('test_basic', [], ''),
                                                        ('test_broadcast1', [], ''),
                                                        ('test_broadcast2', [], '')],
                                            'properties': ['x', 'y', 'x2', 'y2', 'ind']},
             'test_multiarray.TestClip': {'bases': ['test_multiarray.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('_check_range',
                                                       ['x', 'cmin', 'cmax'],
                                                       ''),
                                                      ('_clip_type',
                                                       ['type_group',
                                                        'array_max',
                                                        'clip_min',
                                                        'clip_max',
                                                        'inplace=False',
                                                        'expected_min=None',
                                                        'expected_max=None'],
                                                       ''),
                                                      ('test_basic', [], ''),
                                                      ('test_record_array', [], ''),
                                                      ('test_max_or_min', [], '')],
                                          'properties': []},
             'test_multiarray.TestCreation': {'bases': ['test_multiarray.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_from_attribute', [], ''),
                                                          ('test_from_string', [], ''),
                                                          ('test_non_sequence_sequence',
                                                           [],
                                                           'Should not segfault.\n\n        Class Fail breaks the sequence protocol for new style classes, i.e.,\n        those derived from object. Class Map is a mapping type indicated by\n        raising a ValueError. At some point we may raise a warning instead\n        of an error in the Fail case.\n\n        ')],
                                              'properties': []},
             'test_multiarray.TestDot': {'bases': ['test_multiarray.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_dot_2args', [], ''),
                                                     ('test_dot_3args', [], ''),
                                                     ('test_dot_3args_errors', [], '')],
                                         'properties': []},
             'test_multiarray.TestDtypedescr': {'bases': ['test_multiarray.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_construction', [], '')],
                                                'properties': []},
             'test_multiarray.TestFancyIndexing': {'bases': ['test_multiarray.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_list', [], ''),
                                                               ('test_tuple', [], '')],
                                                   'properties': []},
             'test_multiarray.TestFlags': {'bases': ['test_multiarray.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('setUp', [], ''),
                                                       ('test_writeable', [], ''),
                                                       ('test_otherflags', [], '')],
                                           'properties': ['a']},
             'test_multiarray.TestFromBuffer': {'bases': [],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('tst_basic',
                                                             ['buffer', 'expected', 'kwargs'],
                                                             ''),
                                                            ('test_ip_basic', [], ''),
                                                            ('test_empty', [], '')],
                                                'properties': []},
             'test_multiarray.TestIO': {'bases': ['object'],
                                        'constructor': [],
                                        'docstring': 'Test tofile, fromfile, tostring, and fromstring',
                                        'methods': [('setUp', [], ''),
                                                    ('tearDown', [], ''),
                                                    ('test_bool_fromstring', [], ''),
                                                    ('test_empty_files_binary', [], ''),
                                                    ('test_empty_files_text', [], ''),
                                                    ('test_roundtrip_file', [], ''),
                                                    ('test_roundtrip_filename', [], ''),
                                                    ('test_roundtrip_binary_str', [], ''),
                                                    ('test_roundtrip_str', [], ''),
                                                    ('test_roundtrip_repr', [], ''),
                                                    ('_check_from', ['s', 'value', '**kw'], ''),
                                                    ('test_nan', [], ''),
                                                    ('test_inf', [], ''),
                                                    ('test_numbers', [], ''),
                                                    ('test_binary', [], ''),
                                                    ('test_big_binary',
                                                     [],
                                                     'Test workarounds for 32-bit limited fwrite, fseek, and ftell\n        calls in windows. These normally would hang doing something like this.\n        See http://projects.scipy.org/numpy/ticket/1660'),
                                                    ('test_string', [], ''),
                                                    ('test_counted_string', [], ''),
                                                    ('test_string_with_ws', [], ''),
                                                    ('test_counted_string_with_ws', [], ''),
                                                    ('test_ascii', [], ''),
                                                    ('test_malformed', [], ''),
                                                    ('test_long_sep', [], ''),
                                                    ('test_dtype', [], ''),
                                                    ('test_dtype_bool', [], ''),
                                                    ('test_tofile_sep', [], ''),
                                                    ('test_tofile_format', [], ''),
                                                    ('test_locale', [], '')],
                                        'properties': ['x', 'dtype', 'filename']},
             'test_multiarray.TestLexsort': {'bases': ['test_multiarray.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_multiarray.TestMethods': {'bases': ['test_multiarray.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_test_round', [], ''),
                                                         ('test_transpose', [], ''),
                                                         ('test_sort', [], ''),
                                                         ('test_sort_order', [], ''),
                                                         ('test_argsort', [], ''),
                                                         ('test_searchsorted', [], ''),
                                                         ('test_searchsorted_unicode', [], ''),
                                                         ('test_flatten', [], ''),
                                                         ('test_dot', [], ''),
                                                         ('test_ravel', [], ''),
                                                         ('test_setasflat', [], '')],
                                             'properties': []},
             'test_multiarray.TestMinMax': {'bases': ['test_multiarray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_scalar', [], ''),
                                                        ('test_axis', [], '')],
                                            'properties': []},
             'test_multiarray.TestNeighborhoodIter': {'bases': ['test_multiarray.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('_test_simple2d',
                                                                   ['dt'],
                                                                   ''),
                                                                  ('test_simple2d', [], ''),
                                                                  ('test_simple2d_object',
                                                                   [],
                                                                   ''),
                                                                  ('_test_mirror2d',
                                                                   ['dt'],
                                                                   ''),
                                                                  ('test_mirror2d', [], ''),
                                                                  ('test_mirror2d_object',
                                                                   [],
                                                                   ''),
                                                                  ('_test_simple', ['dt'], ''),
                                                                  ('test_simple_float', [], ''),
                                                                  ('test_simple_object',
                                                                   [],
                                                                   ''),
                                                                  ('_test_mirror', ['dt'], ''),
                                                                  ('test_mirror', [], ''),
                                                                  ('test_mirror_object',
                                                                   [],
                                                                   ''),
                                                                  ('_test_circular',
                                                                   ['dt'],
                                                                   ''),
                                                                  ('test_circular', [], ''),
                                                                  ('test_circular_object',
                                                                   [],
                                                                   '')],
                                                      'properties': []},
             'test_multiarray.TestNewBufferProtocol': {'bases': ['object'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('_check_roundtrip',
                                                                    ['obj'],
                                                                    ''),
                                                                   ('test_roundtrip', [], ''),
                                                                   ('test_roundtrip_half',
                                                                    [],
                                                                    ''),
                                                                   ('test_export_simple_1d',
                                                                    [],
                                                                    ''),
                                                                   ('test_export_simple_nd',
                                                                    [],
                                                                    ''),
                                                                   ('test_export_discontiguous',
                                                                    [],
                                                                    ''),
                                                                   ('test_export_record',
                                                                    [],
                                                                    ''),
                                                                   ('test_export_subarray',
                                                                    [],
                                                                    ''),
                                                                   ('test_export_endian',
                                                                    [],
                                                                    ''),
                                                                   ('test_padding', [], ''),
                                                                   ('test_reference_leak',
                                                                    [],
                                                                    ''),
                                                                   ('test_padded_struct_array',
                                                                    [],
                                                                    '')],
                                                       'properties': []},
             'test_multiarray.TestNewaxis': {'bases': ['test_multiarray.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_multiarray.TestPEP3118Dtype': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('_check',
                                                               ['spec', 'wanted'],
                                                               ''),
                                                              ('test_native_padding', [], ''),
                                                              ('test_native_padding_2', [], ''),
                                                              ('test_trailing_padding', [], ''),
                                                              ('test_native_padding_3', [], ''),
                                                              ('test_padding_with_array_inside_struct',
                                                               [],
                                                               ''),
                                                              ('test_byteorder_inside_struct',
                                                               [],
                                                               ''),
                                                              ('test_intra_padding', [], '')],
                                                  'properties': []},
             'test_multiarray.TestPickling': {'bases': ['test_multiarray.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_roundtrip', [], ''),
                                                          ('_loads', ['obj'], ''),
                                                          ('test_version0_int8', [], ''),
                                                          ('test_version0_float32', [], ''),
                                                          ('test_version0_object', [], ''),
                                                          ('test_version1_int8', [], ''),
                                                          ('test_version1_float32', [], ''),
                                                          ('test_version1_object', [], ''),
                                                          ('test_subarray_int_shape', [], '')],
                                              'properties': []},
             'test_multiarray.TestPutmask': {'bases': [],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('tst_basic',
                                                          ['x', 'T', 'mask', 'val'],
                                                          ''),
                                                         ('test_ip_types', [], ''),
                                                         ('test_mask_size', [], ''),
                                                         ('tst_byteorder', ['dtype'], ''),
                                                         ('test_ip_byteorder', [], ''),
                                                         ('test_record_array', [], ''),
                                                         ('test_masked_array', [], '')],
                                             'properties': []},
             'test_multiarray.TestRecord': {'bases': ['test_multiarray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_field_rename', [], ''),
                                                        ('test_bytes_fields', [], ''),
                                                        ('test_unicode_field_titles', [], ''),
                                                        ('test_unicode_field_names', [], '')],
                                            'properties': []},
             'test_multiarray.TestResize': {'bases': ['test_multiarray.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_check_reference', [], ''),
                                                        ('test_int_shape', [], ''),
                                                        ('test_none_shape', [], ''),
                                                        ('test_invalid_arguements', [], ''),
                                                        ('test_freeform_shape', [], ''),
                                                        ('test_zeros_appended', [], '')],
                                            'properties': []},
             'test_multiarray.TestScalarIndexing': {'bases': ['test_multiarray.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('setUp', [], ''),
                                                                ('test_ellipsis_subscript',
                                                                 [],
                                                                 ''),
                                                                ('test_empty_subscript',
                                                                 [],
                                                                 ''),
                                                                ('test_invalid_subscript',
                                                                 [],
                                                                 ''),
                                                                ('test_invalid_subscript_assignment',
                                                                 [],
                                                                 ''),
                                                                ('test_newaxis', [], ''),
                                                                ('test_invalid_newaxis',
                                                                 [],
                                                                 ''),
                                                                ('test_overlapping_assignment',
                                                                 [],
                                                                 '')],
                                                    'properties': ['d']},
             'test_multiarray.TestStackedNeighborhoodIter': {'bases': ['test_multiarray.TestCase'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('test_simple_const',
                                                                          [],
                                                                          ''),
                                                                         ('test_simple_mirror',
                                                                          [],
                                                                          ''),
                                                                         ('test_simple_circular',
                                                                          [],
                                                                          ''),
                                                                         ('test_simple_strict_within',
                                                                          [],
                                                                          '')],
                                                             'properties': []},
             'test_multiarray.TestStats': {'bases': ['test_multiarray.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_subclass', [], '')],
                                           'properties': []},
             'test_multiarray.TestStringCompare': {'bases': ['test_multiarray.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_string', [], ''),
                                                               ('test_mixed', [], ''),
                                                               ('test_unicode', [], '')],
                                                   'properties': []},
             'test_multiarray.TestStructured': {'bases': ['test_multiarray.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_subarray_field_access',
                                                             [],
                                                             ''),
                                                            ('test_subarray_comparison',
                                                             [],
                                                             '')],
                                                'properties': []},
             'test_multiarray.TestSubscripting': {'bases': ['test_multiarray.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_test_zero_rank', [], '')],
                                                  'properties': []},
             'test_multiarray.TestSummarization': {'bases': ['test_multiarray.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_1d', [], ''),
                                                               ('test_2d', [], '')],
                                                   'properties': []},
             'test_multiarray.TestTake': {'bases': [],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('tst_basic', ['x'], ''),
                                                      ('test_ip_types', [], ''),
                                                      ('test_raise', [], ''),
                                                      ('test_clip', [], ''),
                                                      ('test_wrap', [], ''),
                                                      ('tst_byteorder', ['dtype'], ''),
                                                      ('test_ip_byteorder', [], ''),
                                                      ('test_record_array', [], '')],
                                          'properties': []},
             'test_multiarray.TestView': {'bases': ['test_multiarray.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_type', [], ''),
                                                      ('test_keywords', [], '')],
                                          'properties': []},
             'test_multiarray.TestWarnings': {'bases': ['object'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_complex_warning', [], '')],
                                              'properties': []},
             'test_multiarray.TestZeroRank': {'bases': ['test_multiarray.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('setUp', [], ''),
                                                          ('test_ellipsis_subscript', [], ''),
                                                          ('test_empty_subscript', [], ''),
                                                          ('test_invalid_subscript', [], ''),
                                                          ('test_ellipsis_subscript_assignment',
                                                           [],
                                                           ''),
                                                          ('test_empty_subscript_assignment',
                                                           [],
                                                           ''),
                                                          ('test_invalid_subscript_assignment',
                                                           [],
                                                           ''),
                                                          ('test_newaxis', [], ''),
                                                          ('test_invalid_newaxis', [], ''),
                                                          ('test_constructor', [], ''),
                                                          ('test_output', [], '')],
                                              'properties': ['d']},
             'test_npy_pkg_config.TestLibraryInfo': {'bases': ['test_npy_pkg_config.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_simple', [], ''),
                                                                 ('test_simple_variable',
                                                                  [],
                                                                  '')],
                                                     'properties': []},
             'test_npy_pkg_config.TestParseFlags': {'bases': ['test_npy_pkg_config.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_simple_cflags', [], ''),
                                                                ('test_simple_lflags', [], '')],
                                                    'properties': []},
             'test_numeric.TestAllclose': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('tst_allclose', ['x', 'y'], ''),
                                                       ('tst_not_allclose', ['x', 'y'], ''),
                                                       ('test_ip_allclose',
                                                        [],
                                                        'Parametric test factory.'),
                                                       ('test_ip_not_allclose',
                                                        [],
                                                        'Parametric test factory.'),
                                                       ('test_no_parameter_modification',
                                                        [],
                                                        '')],
                                           'properties': ['rtol', 'atol']},
             'test_numeric.TestArgwhere': {'bases': [],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_2D', [], ''),
                                                       ('test_list', [], '')],
                                           'properties': []},
             'test_numeric.TestArrayComparisons': {'bases': ['test_numeric.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_array_equal', [], ''),
                                                               ('test_array_equiv', [], '')],
                                                   'properties': []},
             'test_numeric.TestBaseRepr': {'bases': ['test_numeric.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_base3', [], ''),
                                                       ('test_positive', [], ''),
                                                       ('test_negative', [], '')],
                                           'properties': []},
             'test_numeric.TestBinaryRepr': {'bases': ['test_numeric.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_zero', [], ''),
                                                         ('test_large', [], ''),
                                                         ('test_negative', [], '')],
                                             'properties': []},
             'test_numeric.TestBoolScalar': {'bases': ['test_numeric.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_logical', [], ''),
                                                         ('test_bitwise_or', [], ''),
                                                         ('test_bitwise_and', [], ''),
                                                         ('test_bitwise_xor', [], '')],
                                             'properties': []},
             'test_numeric.TestClip': {'bases': ['test_numeric.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('setUp', [], ''),
                                                   ('fastclip',
                                                    ['a', 'm', 'M', 'out=None'],
                                                    ''),
                                                   ('clip', ['a', 'm', 'M', 'out=None'], ''),
                                                   ('_generate_data', ['n', 'm'], ''),
                                                   ('_generate_data_complex', ['n', 'm'], ''),
                                                   ('_generate_flt_data', ['n', 'm'], ''),
                                                   ('_neg_byteorder', ['a'], ''),
                                                   ('_generate_non_native_data',
                                                    ['n', 'm'],
                                                    ''),
                                                   ('_generate_int_data', ['n', 'm'], ''),
                                                   ('_generate_int32_data', ['n', 'm'], ''),
                                                   ('test_simple_double',
                                                    [],
                                                    'Test native double input with scalar min/max.'),
                                                   ('test_simple_int',
                                                    [],
                                                    'Test native int input with scalar min/max.'),
                                                   ('test_array_double',
                                                    [],
                                                    'Test native double input with array min/max.'),
                                                   ('test_simple_nonnative',
                                                    [],
                                                    'Test non native double input with scalar min/max.\n        Test native double input with non native double scalar min/max.'),
                                                   ('test_simple_complex',
                                                    [],
                                                    'Test native complex input with native double scalar min/max.\n        Test native input with complex double scalar min/max.\n        '),
                                                   ('test_clip_non_contig',
                                                    [],
                                                    'Test clip for non contiguous native input and native scalar min/max.'),
                                                   ('test_simple_out',
                                                    [],
                                                    'Test native double input with scalar min/max.'),
                                                   ('test_simple_int32_inout',
                                                    [],
                                                    'Test native int32 input with double min/max and int32 out.'),
                                                   ('test_simple_int64_out',
                                                    [],
                                                    'Test native int32 input with int32 scalar min/max and int64 out.'),
                                                   ('test_simple_int64_inout',
                                                    [],
                                                    'Test native int32 input with double array min/max and int32 out.'),
                                                   ('test_simple_int32_out',
                                                    [],
                                                    'Test native double input with scalar min/max and int out.'),
                                                   ('test_simple_inplace_01',
                                                    [],
                                                    'Test native double input with array min/max in-place.'),
                                                   ('test_simple_inplace_02',
                                                    [],
                                                    'Test native double input with scalar min/max in-place.'),
                                                   ('test_noncontig_inplace',
                                                    [],
                                                    'Test non contiguous double input with double scalar min/max in-place.'),
                                                   ('test_type_cast_01',
                                                    [],
                                                    'Test native double input with scalar min/max.'),
                                                   ('test_type_cast_02',
                                                    [],
                                                    'Test native int32 input with int32 scalar min/max.'),
                                                   ('test_type_cast_03',
                                                    [],
                                                    'Test native int32 input with float64 scalar min/max.'),
                                                   ('test_type_cast_04',
                                                    [],
                                                    'Test native int32 input with float32 scalar min/max.'),
                                                   ('test_type_cast_05',
                                                    [],
                                                    'Test native int32 with double arrays min/max.'),
                                                   ('test_type_cast_06',
                                                    [],
                                                    'Test native with NON native scalar min/max.'),
                                                   ('test_type_cast_07',
                                                    [],
                                                    'Test NON native with native array min/max.'),
                                                   ('test_type_cast_08',
                                                    [],
                                                    'Test NON native with native scalar min/max.'),
                                                   ('test_type_cast_09',
                                                    [],
                                                    'Test native with NON native array min/max.'),
                                                   ('test_type_cast_10',
                                                    [],
                                                    'Test native int32 with float min/max and float out for output argument.'),
                                                   ('test_type_cast_11',
                                                    [],
                                                    'Test non native with native scalar, min/max, out non native'),
                                                   ('test_type_cast_12',
                                                    [],
                                                    'Test native int32 input and min/max and float out'),
                                                   ('test_clip_with_out_simple',
                                                    [],
                                                    'Test native double input with scalar min/max'),
                                                   ('test_clip_with_out_simple2',
                                                    [],
                                                    'Test native int32 input with double min/max and int32 out'),
                                                   ('test_clip_with_out_simple_int32',
                                                    [],
                                                    'Test native int32 input with int32 scalar min/max and int64 out'),
                                                   ('test_clip_with_out_array_int32',
                                                    [],
                                                    'Test native int32 input with double array min/max and int32 out'),
                                                   ('test_clip_with_out_array_outint32',
                                                    [],
                                                    'Test native double input with scalar min/max and int out'),
                                                   ('test_clip_inplace_array',
                                                    [],
                                                    'Test native double input with array min/max'),
                                                   ('test_clip_inplace_simple',
                                                    [],
                                                    'Test native double input with scalar min/max'),
                                                   ('test_clip_func_takes_out',
                                                    [],
                                                    ' Ensure that the clip() function takes an out= argument.\n        ')],
                                       'properties': ['nr', 'nc']},
             'test_numeric.TestCorrelate': {'bases': ['test_numeric._TestCorrelate'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('_setup', ['dt'], ''),
                                                        ('test_complex', [], ''),
                                                        ('test_float', [], ''),
                                                        ('test_object', [], '')],
                                            'properties': ['old_behavior', 'z2']},
             'test_numeric.TestCorrelateNew': {'bases': ['test_numeric._TestCorrelate'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_complex', [], '')],
                                               'properties': ['old_behavior']},
             'test_numeric.TestDot': {'bases': ['numpy.testing.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('test_matscalar', [], '')],
                                      'properties': []},
             'test_numeric.TestFloatExceptions': {'bases': ['test_numeric.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('assert_raises_fpe',
                                                               ['fpeerr', 'flop', 'x', 'y'],
                                                               ''),
                                                              ('assert_op_raises_fpe',
                                                               ['fpeerr',
                                                                'flop',
                                                                'sc1',
                                                                'sc2'],
                                                               'Check that fpe exception is raised.\n\n       Given a floating operation `flop` and two scalar values, check that\n       the operation raises the floating point exception specified by\n       `fpeerr`. Tests all variants with 0-d array scalars as well.\n\n        '),
                                                              ('test_floating_exceptions',
                                                               [],
                                                               'Test basic arithmetic function errors'),
                                                              ('test_floating_exceptions_power',
                                                               [],
                                                               'Test basic arithmetic function errors')],
                                                  'properties': []},
             'test_numeric.TestFromiter': {'bases': ['test_numeric.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('makegen', [], ''),
                                                       ('test_types', [], ''),
                                                       ('test_lengths', [], ''),
                                                       ('test_values', [], '')],
                                           'properties': []},
             'test_numeric.TestIndex': {'bases': ['test_numeric.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_boolean', [], '')],
                                        'properties': []},
             'test_numeric.TestLikeFuncs': {'bases': ['test_numeric.TestCase'],
                                            'constructor': [],
                                            'docstring': 'Test ones_like, zeros_like, and empty_like',
                                            'methods': [('setUp', [], ''),
                                                        ('check_like_function',
                                                         ['like_function', 'value'],
                                                         ''),
                                                        ('test_ones_like', [], ''),
                                                        ('test_zeros_like', [], ''),
                                                        ('test_empty_like', [], '')],
                                            'properties': ['data']},
             'test_numeric.TestNonarrayArgs': {'bases': ['test_numeric.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_squeeze', [], ''),
                                                           ('test_cumproduct', [], ''),
                                                           ('test_size', [], ''),
                                                           ('test_mean', [], ''),
                                                           ('test_std', [], ''),
                                                           ('test_var', [], '')],
                                               'properties': []},
             'test_numeric.TestNonzero': {'bases': ['test_numeric.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_nonzero_trivial', [], ''),
                                                      ('test_nonzero_onedim', [], ''),
                                                      ('test_nonzero_twodim', [], '')],
                                          'properties': []},
             'test_numeric.TestResize': {'bases': ['test_numeric.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_copies', [], ''),
                                                     ('test_zeroresize', [], '')],
                                         'properties': []},
             'test_numeric.TestSeterr': {'bases': ['test_numeric.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_default', [], ''),
                                                     ('test_set', [], ''),
                                                     ('test_divide_err', [], '')],
                                         'properties': []},
             'test_numeric.TestStdVar': {'bases': ['test_numeric.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('setUp', [], ''),
                                                     ('test_basic', [], ''),
                                                     ('test_ddof1', [], ''),
                                                     ('test_ddof2', [], '')],
                                         'properties': ['A', 'real_var']},
             'test_numeric.TestStdVarComplex': {'bases': ['test_numeric.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_basic', [], '')],
                                                'properties': []},
             'test_numeric.TestStringFunction': {'bases': [],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_set_string_function',
                                                              [],
                                                              '')],
                                                 'properties': []},
             'test_numeric.TestTypes': {'bases': ['test_numeric.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('check_promotion_cases',
                                                     ['promote_func'],
                                                     'Tests that the scalars get coerced correctly.'),
                                                    ('test_coercion', [], ''),
                                                    ('test_result_type', [], ''),
                                                    ('test_can_cast', [], '')],
                                        'properties': []},
             'test_numeric.Vec': {'bases': [],
                                  'constructor': ['sequence=None'],
                                  'docstring': '',
                                  'methods': [('__add__', ['other'], ''),
                                              ('__sub__', ['other'], ''),
                                              ('__mul__', ['other'], ''),
                                              ('__rmul__', ['other'], '')],
                                  'properties': ['array']},
             'test_numeric._TestCorrelate': {'bases': ['test_numeric.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('_setup', ['dt'], ''),
                                                         ('test_float', [], ''),
                                                         ('test_object', [], '')],
                                             'properties': ['x', 'y', 'z1', 'z2']},
             'test_numerictypes.TestCommonType': {'bases': ['test_numerictypes.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_scalar_loses1', [], ''),
                                                              ('test_scalar_loses2', [], ''),
                                                              ('test_scalar_wins', [], ''),
                                                              ('test_scalar_wins2', [], ''),
                                                              ('test_scalar_wins3', [], '')],
                                                  'properties': []},
             'test_numerictypes.TestEmptyField': {'bases': ['test_numerictypes.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_assign', [], '')],
                                                  'properties': []},
             'test_numerictypes.TestMultipleFields': {'bases': ['test_numerictypes.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('setUp', [], ''),
                                                                  ('_bad_call', [], ''),
                                                                  ('test_no_tuple', [], ''),
                                                                  ('test_return', [], '')],
                                                      'properties': ['ary']},
             'test_numerictypes.create_values': {'bases': ['object'],
                                                 'constructor': [],
                                                 'docstring': 'Check the creation of heterogeneous arrays with values',
                                                 'methods': [('test_tuple',
                                                              [],
                                                              'Check creation from tuples'),
                                                             ('test_list_of_tuple',
                                                              [],
                                                              'Check creation from list of tuples'),
                                                             ('test_list_of_list_of_tuple',
                                                              [],
                                                              'Check creation from list of list of tuples')],
                                                 'properties': []},
             'test_numerictypes.create_zeros': {'bases': ['object'],
                                                'constructor': [],
                                                'docstring': 'Check the creation of heterogeneous arrays zero-valued',
                                                'methods': [('test_zeros0D',
                                                             [],
                                                             'Check creation of 0-dimensional objects'),
                                                            ('test_zerosSD',
                                                             [],
                                                             'Check creation of single-dimensional objects'),
                                                            ('test_zerosMD',
                                                             [],
                                                             'Check creation of multi-dimensional objects')],
                                                'properties': []},
             'test_numerictypes.read_values_nested': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': 'Check the reading of values in heterogeneous arrays (nested)',
                                                      'methods': [('test_access_top_fields',
                                                                   [],
                                                                   'Check reading the top fields of a nested array'),
                                                                  ('test_nested1_acessors',
                                                                   [],
                                                                   'Check reading the nested fields of a nested array (1st level)'),
                                                                  ('test_nested2_acessors',
                                                                   [],
                                                                   'Check reading the nested fields of a nested array (2nd level)'),
                                                                  ('test_nested1_descriptor',
                                                                   [],
                                                                   'Check access nested descriptors of a nested array (1st level)'),
                                                                  ('test_nested2_descriptor',
                                                                   [],
                                                                   'Check access nested descriptors of a nested array (2nd level)')],
                                                      'properties': []},
             'test_numerictypes.read_values_plain': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': 'Check the reading of values in heterogeneous arrays (plain)',
                                                     'methods': [('test_access_fields', [], '')],
                                                     'properties': []},
             'test_numerictypes.test_create_values_nested_multiple': {'bases': ['test_numerictypes.create_values',
                                                                                'test_numerictypes.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': 'Check the creation of heterogeneous arrays (nested, multiple rows)',
                                                                      'methods': [],
                                                                      'properties': ['_descr',
                                                                                     'multiple_rows',
                                                                                     '_buffer']},
             'test_numerictypes.test_create_values_nested_single': {'bases': ['test_numerictypes.create_values',
                                                                              'test_numerictypes.TestCase'],
                                                                    'constructor': [],
                                                                    'docstring': 'Check the creation of heterogeneous arrays (nested, single row)',
                                                                    'methods': [],
                                                                    'properties': ['_descr',
                                                                                   'multiple_rows',
                                                                                   '_buffer']},
             'test_numerictypes.test_create_values_plain_multiple': {'bases': ['test_numerictypes.create_values',
                                                                               'test_numerictypes.TestCase'],
                                                                     'constructor': [],
                                                                     'docstring': 'Check the creation of heterogeneous arrays (plain, multiple rows)',
                                                                     'methods': [],
                                                                     'properties': ['_descr',
                                                                                    'multiple_rows',
                                                                                    '_buffer']},
             'test_numerictypes.test_create_values_plain_single': {'bases': ['test_numerictypes.create_values',
                                                                             'test_numerictypes.TestCase'],
                                                                   'constructor': [],
                                                                   'docstring': 'Check the creation of heterogeneous arrays (plain, single row)',
                                                                   'methods': [],
                                                                   'properties': ['_descr',
                                                                                  'multiple_rows',
                                                                                  '_buffer']},
             'test_numerictypes.test_create_zeros_nested': {'bases': ['test_numerictypes.create_zeros',
                                                                      'test_numerictypes.TestCase'],
                                                            'constructor': [],
                                                            'docstring': 'Check the creation of heterogeneous arrays zero-valued (nested)',
                                                            'methods': [],
                                                            'properties': ['_descr']},
             'test_numerictypes.test_create_zeros_plain': {'bases': ['test_numerictypes.create_zeros',
                                                                     'test_numerictypes.TestCase'],
                                                           'constructor': [],
                                                           'docstring': 'Check the creation of heterogeneous arrays zero-valued (plain)',
                                                           'methods': [],
                                                           'properties': ['_descr']},
             'test_numerictypes.test_read_values_nested_multiple': {'bases': ['test_numerictypes.read_values_nested',
                                                                              'test_numerictypes.TestCase'],
                                                                    'constructor': [],
                                                                    'docstring': 'Check the values of heterogeneous arrays (nested, multiple rows)',
                                                                    'methods': [],
                                                                    'properties': ['_descr',
                                                                                   'multiple_rows',
                                                                                   '_buffer']},
             'test_numerictypes.test_read_values_nested_single': {'bases': ['test_numerictypes.read_values_nested',
                                                                            'test_numerictypes.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': 'Check the values of heterogeneous arrays (nested, single row)',
                                                                  'methods': [],
                                                                  'properties': ['_descr',
                                                                                 'multiple_rows',
                                                                                 '_buffer']},
             'test_numerictypes.test_read_values_plain_multiple': {'bases': ['test_numerictypes.read_values_plain',
                                                                             'test_numerictypes.TestCase'],
                                                                   'constructor': [],
                                                                   'docstring': 'Check the values of heterogeneous arrays (plain, multiple rows)',
                                                                   'methods': [],
                                                                   'properties': ['_descr',
                                                                                  'multiple_rows',
                                                                                  '_buffer']},
             'test_numerictypes.test_read_values_plain_single': {'bases': ['test_numerictypes.read_values_plain',
                                                                           'test_numerictypes.TestCase'],
                                                                 'constructor': [],
                                                                 'docstring': 'Check the creation of heterogeneous arrays (plain, single row)',
                                                                 'methods': [],
                                                                 'properties': ['_descr',
                                                                                'multiple_rows',
                                                                                '_buffer']},
             'test_old_ma.TestArrayMethods': {'bases': ['test_old_ma.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('setUp', [], ''),
                                                          ('test_trace', [], ''),
                                                          ('test_clip', [], ''),
                                                          ('test_ptp', [], ''),
                                                          ('test_swapaxes', [], ''),
                                                          ('test_cumprod', [], ''),
                                                          ('test_cumsum', [], ''),
                                                          ('test_varstd', [], '')],
                                              'properties': ['d']},
             'test_old_ma.TestMa': {'bases': ['test_old_ma.TestCase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('setUp', [], ''),
                                                ('test_testBasic1d',
                                                 [],
                                                 'Test of basic array creation and properties in 1 dimension.'),
                                                ('test_testBasic2d',
                                                 [],
                                                 'Test of basic array creation and properties in 2 dimensions.'),
                                                ('test_testArithmetic',
                                                 [],
                                                 'Test of basic arithmetic.'),
                                                ('test_testMixedArithmetic', [], ''),
                                                ('test_testUfuncs1',
                                                 [],
                                                 'Test various functions such as sin, cos.'),
                                                ('test_xtestCount', [], 'Test count'),
                                                ('test_testMinMax',
                                                 [],
                                                 'Test minimum and maximum.'),
                                                ('test_testAddSumProd',
                                                 [],
                                                 'Test add, sum, product.'),
                                                ('test_testCI',
                                                 [],
                                                 'Test of conversions and indexing'),
                                                ('test_testCopySize',
                                                 [],
                                                 'Tests of some subtle points of copying and sizing.'),
                                                ('test_testPut', [], 'Test of put'),
                                                ('test_testMaPut', [], ''),
                                                ('test_testOddFeatures',
                                                 [],
                                                 'Test of other odd features'),
                                                ('test_testMinMax',
                                                 [],
                                                 'Test of minumum, maximum.'),
                                                ('test_testTakeTransposeInnerOuter',
                                                 [],
                                                 'Test of take, transpose, inner, outer products'),
                                                ('test_testInplace',
                                                 [],
                                                 'Test of inplace operations and rich comparisons'),
                                                ('test_testPickle', [], 'Test of pickling'),
                                                ('test_testMasked',
                                                 [],
                                                 'Test of masked element'),
                                                ('test_testAverage1', [], 'Test of average.'),
                                                ('test_testAverage2',
                                                 [],
                                                 'More tests of average.'),
                                                ('test_testToPython', [], ''),
                                                ('test_testScalarArithmetic', [], ''),
                                                ('test_testArrayMethods', [], ''),
                                                ('test_testArrayAttributes', [], ''),
                                                ('test_testAPI', [], ''),
                                                ('test_testSingleElementSubscript', [], '')],
                                    'properties': ['d']},
             'test_old_ma.TestUfuncs': {'bases': ['test_old_ma.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('setUp', [], ''),
                                                    ('test_testUfuncRegression', [], ''),
                                                    ('test_reduce', [], ''),
                                                    ('test_minmax', [], ''),
                                                    ('test_nonzero', [], '')],
                                        'properties': ['d']},
             'test_oldnumeric.test_oldtypes': {'bases': ['unittest.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_oldtypes', ['level=1'], '')],
                                               'properties': []},
             'test_polynomial.TestArithmetic': {'bases': ['test_polynomial.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_polyadd', [], ''),
                                                            ('test_polysub', [], ''),
                                                            ('test_polymulx', [], ''),
                                                            ('test_polymul', [], ''),
                                                            ('test_polydiv', [], ''),
                                                            ('test_polyval', [], '')],
                                                'properties': []},
             'test_polynomial.TestCalculus': {'bases': ['test_polynomial.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_polyint', [], ''),
                                                          ('test_polyder', [], '')],
                                              'properties': []},
             'test_polynomial.TestConstants': {'bases': ['test_polynomial.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_polydomain', [], ''),
                                                           ('test_polyzero', [], ''),
                                                           ('test_polyone', [], ''),
                                                           ('test_polyx', [], '')],
                                               'properties': []},
             'test_polynomial.TestDocs': {'bases': ['test_polynomial.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_doctests', [], ''),
                                                      ('test_roots', [], ''),
                                                      ('test_str_leading_zeros', [], ''),
                                                      ('test_polyfit', [], ''),
                                                      ('test_objects', [], ''),
                                                      ('test_complex', [], ''),
                                                      ('test_integ_coeffs', [], ''),
                                                      ('test_zero_dims', [], '')],
                                          'properties': []},
             'test_polynomial.TestMisc': {'bases': ['test_polynomial.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_polyfromroots', [], ''),
                                                      ('test_polyroots', [], ''),
                                                      ('test_polyvander', [], ''),
                                                      ('test_polyfit', [], ''),
                                                      ('test_polytrim', [], ''),
                                                      ('test_polyline', [], '')],
                                          'properties': []},
             'test_polynomial.TestPolynomialClass': {'bases': ['test_polynomial.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_equal', [], ''),
                                                                 ('test_not_equal', [], ''),
                                                                 ('test_add', [], ''),
                                                                 ('test_sub', [], ''),
                                                                 ('test_mul', [], ''),
                                                                 ('test_floordiv', [], ''),
                                                                 ('test_mod', [], ''),
                                                                 ('test_divmod', [], ''),
                                                                 ('test_pow', [], ''),
                                                                 ('test_call', [], ''),
                                                                 ('test_degree', [], ''),
                                                                 ('test_cutdeg', [], ''),
                                                                 ('test_convert', [], ''),
                                                                 ('test_mapparms', [], ''),
                                                                 ('test_trim', [], ''),
                                                                 ('test_truncate', [], ''),
                                                                 ('test_copy', [], ''),
                                                                 ('test_integ', [], ''),
                                                                 ('test_deriv', [], ''),
                                                                 ('test_roots', [], ''),
                                                                 ('test_linspace', [], ''),
                                                                 ('test_fromroots', [], ''),
                                                                 ('test_fit', [], ''),
                                                                 ('test_identity', [], '')],
                                                     'properties': ['p1',
                                                                    'p2',
                                                                    'p3',
                                                                    'p4',
                                                                    'p5']},
             'test_polyutils.TestDomain': {'bases': ['test_polyutils.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_getdomain', [], ''),
                                                       ('test_mapdomain', [], ''),
                                                       ('test_mapparms', [], '')],
                                           'properties': []},
             'test_polyutils.TestMisc': {'bases': ['test_polyutils.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_trimseq', [], ''),
                                                     ('test_as_series', [], ''),
                                                     ('test_trimcoef', [], '')],
                                         'properties': []},
             'test_primes.TestPrimes': {'bases': ['test_primes.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_simple', ['level=1'], '')],
                                        'properties': []},
             'test_printing.test_repr': {'bases': ['numpy.testing.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('test_polynomial_str', [], ''),
                                                     ('test_chebyshev_str', [], ''),
                                                     ('test_legendre_repr', [], ''),
                                                     ('test_hermite_repr', [], ''),
                                                     ('test_hermiteE_repr', [], ''),
                                                     ('test_laguerre_repr', [], '')],
                                         'properties': []},
             'test_printing.test_str': {'bases': ['numpy.testing.TestCase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('test_polynomial_str', [], ''),
                                                    ('test_chebyshev_str', [], ''),
                                                    ('test_legendre_str', [], ''),
                                                    ('test_hermite_str', [], ''),
                                                    ('test_hermiteE_str', [], ''),
                                                    ('test_laguerre_str', [], '')],
                                        'properties': []},
             'test_random.TestMultinomial': {'bases': ['numpy.testing.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], ''),
                                                         ('test_zero_probability', [], ''),
                                                         ('test_int_negative_interval', [], '')],
                                             'properties': []},
             'test_random.TestRandomDist': {'bases': ['numpy.testing.TestCase'],
                                            'constructor': [],
                                            'docstring': ' Make sure the random distrobution return the correct value for a\n    given seed\n    ',
                                            'methods': [('setUp', [], ''),
                                                        ('test_rand', [], ''),
                                                        ('test_randn', [], ''),
                                                        ('test_randint', [], ''),
                                                        ('test_random_integers', [], ''),
                                                        ('test_random_sample', [], ''),
                                                        ('test_bytes', [], ''),
                                                        ('test_shuffle', [], ''),
                                                        ('test_beta', [], ''),
                                                        ('test_binomial', [], ''),
                                                        ('test_chisquare', [], ''),
                                                        ('test_dirichlet', [], ''),
                                                        ('test_exponential', [], ''),
                                                        ('test_f', [], ''),
                                                        ('test_gamma', [], ''),
                                                        ('test_geometric', [], ''),
                                                        ('test_gumbel', [], ''),
                                                        ('test_hypergeometric', [], ''),
                                                        ('test_laplace', [], ''),
                                                        ('test_logistic', [], ''),
                                                        ('test_lognormal', [], ''),
                                                        ('test_logseries', [], ''),
                                                        ('test_multinomial', [], ''),
                                                        ('test_multivariate_normal', [], ''),
                                                        ('test_negative_binomial', [], ''),
                                                        ('test_noncentral_chisquare', [], ''),
                                                        ('test_noncentral_f', [], ''),
                                                        ('test_normal', [], ''),
                                                        ('test_pareto', [], ''),
                                                        ('test_poisson', [], ''),
                                                        ('test_poisson_exceptions', [], ''),
                                                        ('test_power', [], ''),
                                                        ('test_rayleigh', [], ''),
                                                        ('test_standard_cauchy', [], ''),
                                                        ('test_standard_exponential', [], ''),
                                                        ('test_standard_gamma', [], ''),
                                                        ('test_standard_normal', [], ''),
                                                        ('test_standard_t', [], ''),
                                                        ('test_triangular', [], ''),
                                                        ('test_uniform', [], ''),
                                                        ('test_vonmises', [], ''),
                                                        ('test_wald', [], ''),
                                                        ('test_weibull', [], ''),
                                                        ('test_zipf', [], '')],
                                            'properties': ['seed']},
             'test_random.TestSetState': {'bases': ['numpy.testing.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('setUp', [], ''),
                                                      ('test_basic', [], ''),
                                                      ('test_gaussian_reset',
                                                       [],
                                                       ' Make sure the cached every-other-Gaussian is reset.\n        '),
                                                      ('test_gaussian_reset_in_media_res',
                                                       [],
                                                       ' When the state is saved with a cached Gaussian, make sure the cached\n        Gaussian is restored.\n        '),
                                                      ('test_backwards_compatibility',
                                                       [],
                                                       ' Make sure we can accept old state tuples that do not have the cached\n        Gaussian value.\n        '),
                                                      ('test_negative_binomial',
                                                       [],
                                                       ' Ensure that the negative binomial results take floating point\n        arguments without truncation.\n        ')],
                                          'properties': ['seed', 'prng', 'state']},
             'test_recfunctions.TestAppendFields': {'bases': ['test_recfunctions.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '\n    Test append_fields\n    ',
                                                    'methods': [('setUp', [], ''),
                                                                ('test_append_single',
                                                                 [],
                                                                 'Test simple case'),
                                                                ('test_append_double',
                                                                 [],
                                                                 'Test simple case'),
                                                                ('test_append_on_flex',
                                                                 [],
                                                                 'Test append_fields on flexible type arrays'),
                                                                ('test_append_on_nested',
                                                                 [],
                                                                 'Test append_fields on nested fields')],
                                                    'properties': ['data']},
             'test_recfunctions.TestJoinBy': {'bases': ['test_recfunctions.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('setUp', [], ''),
                                                          ('test_inner_join',
                                                           [],
                                                           'Basic test of join_by'),
                                                          ('test_join', [], ''),
                                                          ('test_outer_join', [], ''),
                                                          ('test_leftouter_join', [], '')],
                                              'properties': ['a', 'b']},
             'test_recfunctions.TestMergeArrays': {'bases': ['test_recfunctions.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '\n    Test merge_arrays\n    ',
                                                   'methods': [('setUp', [], ''),
                                                               ('test_solo',
                                                                [],
                                                                'Test merge_arrays on a single array.'),
                                                               ('test_solo_w_flatten',
                                                                [],
                                                                'Test merge_arrays on a single array w & w/o flattening'),
                                                               ('test_standard',
                                                                [],
                                                                'Test standard & standard'),
                                                               ('test_flatten',
                                                                [],
                                                                'Test standard & flexible'),
                                                               ('test_flatten_wflexible',
                                                                [],
                                                                'Test flatten standard & nested'),
                                                               ('test_wmasked_arrays',
                                                                [],
                                                                'Test merge_arrays masked arrays'),
                                                               ('test_w_singlefield',
                                                                [],
                                                                'Test single field'),
                                                               ('test_w_shorter_flex',
                                                                [],
                                                                'Test merge_arrays w/ a shorter flexndarray.'),
                                                               ('test_singlerecord', [], '')],
                                                   'properties': ['data']},
             'test_recfunctions.TestRecFunctions': {'bases': ['test_recfunctions.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '\n    Misc tests\n    ',
                                                    'methods': [('setUp', [], ''),
                                                                ('test_zip_descr',
                                                                 [],
                                                                 'Test zip_descr'),
                                                                ('test_drop_fields',
                                                                 [],
                                                                 'Test drop_fields'),
                                                                ('test_rename_fields',
                                                                 [],
                                                                 'Tests rename fields'),
                                                                ('test_get_names',
                                                                 [],
                                                                 'Tests get_names'),
                                                                ('test_get_names_flat',
                                                                 [],
                                                                 'Test get_names_flat'),
                                                                ('test_get_fieldstructure',
                                                                 [],
                                                                 'Test get_fieldstructure'),
                                                                ('test_find_duplicates',
                                                                 [],
                                                                 'Test find_duplicates'),
                                                                ('test_find_duplicates_ignoremask',
                                                                 [],
                                                                 'Test the ignoremask option of find_duplicates')],
                                                    'properties': ['data']},
             'test_recfunctions.TestRecursiveFillFields': {'bases': ['test_recfunctions.TestCase'],
                                                           'constructor': [],
                                                           'docstring': '\n    Test recursive_fill_fields.\n    ',
                                                           'methods': [('test_simple_flexible',
                                                                        [],
                                                                        'Test recursive_fill_fields on flexible-array'),
                                                                       ('test_masked_flexible',
                                                                        [],
                                                                        'Test recursive_fill_fields on masked flexible-array')],
                                                           'properties': []},
             'test_recfunctions.TestStackArrays': {'bases': ['test_recfunctions.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '\n    Test stack_arrays\n    ',
                                                   'methods': [('setUp', [], ''),
                                                               ('test_solo',
                                                                [],
                                                                'Test stack_arrays on single arrays'),
                                                               ('test_unnamed_fields',
                                                                [],
                                                                'Tests combinations of arrays w/o named fields'),
                                                               ('test_unnamed_and_named_fields',
                                                                [],
                                                                'Test combination of arrays w/ & w/o named fields'),
                                                               ('test_matching_named_fields',
                                                                [],
                                                                'Test combination of arrays w/ matching field names'),
                                                               ('test_defaults',
                                                                [],
                                                                'Test defaults: no exception raised if keys of defaults are not fields.'),
                                                               ('test_autoconversion',
                                                                [],
                                                                'Tests autoconversion'),
                                                               ('test_checktitles',
                                                                [],
                                                                'Test using titles in the field names')],
                                                   'properties': ['data']},
             'test_records.TestFromrecords': {'bases': ['test_records.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_fromrecords', [], ''),
                                                          ('test_method_array', [], ''),
                                                          ('test_method_array2', [], ''),
                                                          ('test_recarray_slices', [], ''),
                                                          ('test_recarray_fromarrays', [], ''),
                                                          ('test_recarray_fromfile', [], ''),
                                                          ('test_recarray_from_obj', [], ''),
                                                          ('test_recarray_from_repr', [], ''),
                                                          ('test_recarray_from_names', [], ''),
                                                          ('test_recarray_conflict_fields',
                                                           [],
                                                           ''),
                                                          ('test_fromrecords_with_explicit_dtype',
                                                           [],
                                                           '')],
                                              'properties': []},
             'test_records.TestRecord': {'bases': ['test_records.TestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('setUp', [], ''),
                                                     ('test_assignment1', [], ''),
                                                     ('test_assignment2', [], ''),
                                                     ('test_invalid_assignment', [], ''),
                                                     ('test_out_of_order_fields',
                                                      [],
                                                      'Ticket #1431.')],
                                         'properties': ['data']},
             'test_regression.TestRegression': {'bases': ['numpy.testing.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_VonMises_range',
                                                             [],
                                                             'Make sure generated random variables are in [-pi, pi].\n\n        Regression test for ticket #986.\n        '),
                                                            ('test_hypergeometric_range',
                                                             [],
                                                             'Test for ticket #921'),
                                                            ('test_logseries_convergence',
                                                             [],
                                                             'Test for ticket #923'),
                                                            ('test_permutation_longs', [], ''),
                                                            ('test_hypergeometric_range',
                                                             [],
                                                             'Test for ticket #1690')],
                                                'properties': []},
             'test_return_character.TestF77ReturnCharacter': {'bases': ['test_return_character.TestReturnCharacter'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('test_all', [], '')],
                                                              'properties': ['code']},
             'test_return_character.TestF90ReturnCharacter': {'bases': ['test_return_character.TestReturnCharacter'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('test_all', [], '')],
                                                              'properties': ['suffix', 'code']},
             'test_return_character.TestReturnCharacter': {'bases': ['util.F2PyTest'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('check_function',
                                                                        ['t'],
                                                                        '')],
                                                           'properties': []},
             'test_return_complex.TestF77ReturnComplex': {'bases': ['test_return_complex.TestReturnComplex'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_all', [], '')],
                                                          'properties': ['code']},
             'test_return_complex.TestF90ReturnComplex': {'bases': ['test_return_complex.TestReturnComplex'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_all', [], '')],
                                                          'properties': ['suffix', 'code']},
             'test_return_complex.TestReturnComplex': {'bases': ['util.F2PyTest'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('check_function',
                                                                    ['t'],
                                                                    '')],
                                                       'properties': []},
             'test_return_integer.TestF77ReturnInteger': {'bases': ['test_return_integer.TestReturnInteger'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_all', [], '')],
                                                          'properties': ['code']},
             'test_return_integer.TestF90ReturnInteger': {'bases': ['test_return_integer.TestReturnInteger'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_all', [], '')],
                                                          'properties': ['suffix', 'code']},
             'test_return_integer.TestReturnInteger': {'bases': ['util.F2PyTest'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('check_function',
                                                                    ['t'],
                                                                    '')],
                                                       'properties': []},
             'test_return_logical.TestF77ReturnLogical': {'bases': ['test_return_logical.TestReturnLogical'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_all', [], '')],
                                                          'properties': ['code']},
             'test_return_logical.TestF90ReturnLogical': {'bases': ['test_return_logical.TestReturnLogical'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('test_all', [], '')],
                                                          'properties': ['suffix', 'code']},
             'test_return_logical.TestReturnLogical': {'bases': ['util.F2PyTest'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('check_function',
                                                                    ['t'],
                                                                    '')],
                                                       'properties': []},
             'test_return_real.TestCReturnReal': {'bases': ['test_return_real.TestReturnReal'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_all', [], '')],
                                                  'properties': ['suffix',
                                                                 'module_name',
                                                                 'code']},
             'test_return_real.TestF77ReturnReal': {'bases': ['test_return_real.TestReturnReal'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_all', [], '')],
                                                    'properties': ['code']},
             'test_return_real.TestF90ReturnReal': {'bases': ['test_return_real.TestReturnReal'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_all', [], '')],
                                                    'properties': ['suffix', 'code']},
             'test_return_real.TestReturnReal': {'bases': ['util.F2PyTest'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('check_function', ['t'], '')],
                                                 'properties': []},
             'test_scalarmath.TestComplexDivision': {'bases': ['test_scalarmath.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_zero_division', [], '')],
                                                     'properties': []},
             'test_scalarmath.TestConversion': {'bases': ['test_scalarmath.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_int_from_long', [], '')],
                                                'properties': []},
             'test_scalarmath.TestPower': {'bases': ['test_scalarmath.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_small_types', [], ''),
                                                       ('test_large_types', [], '')],
                                           'properties': []},
             'test_scalarmath.TestRepr': {'bases': [],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('_test_type_repr', ['t'], ''),
                                                      ('test_float_repr', [], '')],
                                          'properties': []},
             'test_scalarmath.TestTypes': {'bases': ['test_scalarmath.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_types', ['level=1'], ''),
                                                       ('test_type_add', ['level=1'], ''),
                                                       ('test_type_create', ['level=1'], '')],
                                           'properties': []},
             'test_shape_base.TestApplyAlongAxis': {'bases': ['test_shape_base.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('test_simple', [], ''),
                                                                ('test_simple101',
                                                                 ['level=11'],
                                                                 ''),
                                                                ('test_3d', [], '')],
                                                    'properties': []},
             'test_shape_base.TestApplyOverAxes': {'bases': ['test_shape_base.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('test_simple', [], '')],
                                                   'properties': []},
             'test_shape_base.TestArraySplit': {'bases': ['test_shape_base.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_integer_0_split', [], ''),
                                                            ('test_integer_split', [], ''),
                                                            ('test_integer_split_2D_rows',
                                                             [],
                                                             ''),
                                                            ('test_integer_split_2D_cols',
                                                             [],
                                                             ''),
                                                            ('test_integer_split_2D_default',
                                                             [],
                                                             ' This will fail if we change default axis\n        '),
                                                            ('test_index_split_simple', [], ''),
                                                            ('test_index_split_low_bound',
                                                             [],
                                                             ''),
                                                            ('test_index_split_high_bound',
                                                             [],
                                                             '')],
                                                'properties': []},
             'test_shape_base.TestAtleast1d': {'bases': ['test_shape_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_0D_array', [], ''),
                                                           ('test_1D_array', [], ''),
                                                           ('test_2D_array', [], ''),
                                                           ('test_3D_array', [], ''),
                                                           ('test_r1array',
                                                            [],
                                                            " Test to make sure equivalent Travis O's r1array function\n        ")],
                                               'properties': []},
             'test_shape_base.TestAtleast2d': {'bases': ['test_shape_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_0D_array', [], ''),
                                                           ('test_1D_array', [], ''),
                                                           ('test_2D_array', [], ''),
                                                           ('test_3D_array', [], ''),
                                                           ('test_r2array',
                                                            [],
                                                            " Test to make sure equivalent Travis O's r2array function\n        ")],
                                               'properties': []},
             'test_shape_base.TestAtleast3d': {'bases': ['test_shape_base.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_0D_array', [], ''),
                                                           ('test_1D_array', [], ''),
                                                           ('test_2D_array', [], ''),
                                                           ('test_3D_array', [], '')],
                                               'properties': []},
             'test_shape_base.TestDsplit': {'bases': ['test_shape_base.TestCase'],
                                            'constructor': [],
                                            'docstring': ' only testing for integer splits.\n    ',
                                            'methods': [('test_2D_array', [], ''),
                                                        ('test_3D_array', [], '')],
                                            'properties': []},
             'test_shape_base.TestDstack': {'bases': ['test_shape_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_0D_array', [], ''),
                                                        ('test_1D_array', [], ''),
                                                        ('test_2D_array', [], ''),
                                                        ('test_2D_array2', [], '')],
                                            'properties': []},
             'test_shape_base.TestHsplit': {'bases': ['test_shape_base.TestCase'],
                                            'constructor': [],
                                            'docstring': ' only testing for integer splits.\n    ',
                                            'methods': [('test_0D_array', [], ''),
                                                        ('test_1D_array', [], ''),
                                                        ('test_2D_array', [], '')],
                                            'properties': []},
             'test_shape_base.TestHstack': {'bases': ['test_shape_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_0D_array', [], ''),
                                                        ('test_1D_array', [], ''),
                                                        ('test_2D_array', [], '')],
                                            'properties': []},
             'test_shape_base.TestKron': {'bases': ['test_shape_base.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_return_type', [], '')],
                                          'properties': []},
             'test_shape_base.TestSplit': {'bases': ['test_shape_base.TestCase'],
                                           'constructor': [],
                                           'docstring': '* This function is essentially the same as array_split,\n         except that it test if splitting will result in an\n         equal split.  Only test for this case.\n    *',
                                           'methods': [('test_equal_split', [], ''),
                                                       ('test_unequal_split', [], '')],
                                           'properties': []},
             'test_shape_base.TestSqueeze': {'bases': ['test_shape_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_shape_base.TestTile': {'bases': ['test_shape_base.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_basic', [], ''),
                                                      ('test_empty', [], ''),
                                                      ('test_kroncompare', [], '')],
                                          'properties': []},
             'test_shape_base.TestVsplit': {'bases': ['test_shape_base.TestCase'],
                                            'constructor': [],
                                            'docstring': ' only testing for integer splits.\n    ',
                                            'methods': [('test_1D_array', [], ''),
                                                        ('test_2D_array', [], '')],
                                            'properties': []},
             'test_shape_base.TestVstack': {'bases': ['test_shape_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_0D_array', [], ''),
                                                        ('test_1D_array', [], ''),
                                                        ('test_2D_array', [], ''),
                                                        ('test_2D_array2', [], '')],
                                            'properties': []},
             'test_size.TestSizeSumExample': {'bases': ['util.F2PyTest'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_all', [], ''),
                                                          ('test_transpose', [], ''),
                                                          ('test_flatten', [], '')],
                                              'properties': ['sources']},
             'test_subclassing.MMatrix': {'bases': ['test_subclassing.MaskedArray',
                                                    'numpy.matrix'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('__new__', ['data', 'mask=nomask'], ''),
                                                      ('__array_finalize__', ['obj'], ''),
                                                      ('_get_series', [], '')],
                                          'properties': ['_series']},
             'test_subclassing.MSubArray': {'bases': ['test_subclassing.SubArray',
                                                      'test_subclassing.MaskedArray'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('__new__',
                                                         ['data', 'info={}', 'mask=nomask'],
                                                         ''),
                                                        ('__array_finalize__', ['obj'], ''),
                                                        ('_get_series', [], '')],
                                            'properties': ['_series']},
             'test_subclassing.SubArray': {'bases': ['numpy.ndarray'],
                                           'constructor': [],
                                           'docstring': 'Defines a generic np.ndarray subclass, that stores some metadata\n    in the  dictionary `info`.',
                                           'methods': [('__new__', ['arr', 'info={}'], ''),
                                                       ('__array_finalize__', ['obj'], ''),
                                                       ('__add__', ['other'], '')],
                                           'properties': ['info']},
             'test_subclassing.TestSubclassing': {'bases': ['test_subclassing.TestCase'],
                                                  'constructor': [],
                                                  'docstring': 'Test suite for masked subclasses of ndarray.',
                                                  'methods': [('setUp', [], ''),
                                                              ('test_data_subclassing',
                                                               [],
                                                               'Tests whether the subclass is kept.'),
                                                              ('test_maskedarray_subclassing',
                                                               [],
                                                               'Tests subclassing MaskedArray'),
                                                              ('test_masked_unary_operations',
                                                               [],
                                                               'Tests masked_unary_operation'),
                                                              ('test_masked_binary_operations',
                                                               [],
                                                               'Tests masked_binary_operation'),
                                                              ('test_masked_binary_operations',
                                                               [],
                                                               'Tests domained_masked_binary_operation'),
                                                              ('test_attributepropagation',
                                                               [],
                                                               ''),
                                                              ('test_subclasspreservation',
                                                               [],
                                                               'Checks that masked_array(...,subok=True) preserves the class.')],
                                                  'properties': ['data']},
             'test_twodim_base.TestDiag': {'bases': ['test_twodim_base.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_vector', [], ''),
                                                       ('test_matrix', ['vals=None'], ''),
                                                       ('test_fortran_order', [], ''),
                                                       ('test_diag_bounds', [], ''),
                                                       ('test_failure', [], '')],
                                           'properties': []},
             'test_twodim_base.TestEye': {'bases': ['test_twodim_base.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_basic', [], ''),
                                                      ('test_diag', [], ''),
                                                      ('test_2d', [], ''),
                                                      ('test_diag2d', [], ''),
                                                      ('test_eye_bounds', [], ''),
                                                      ('test_strings', [], ''),
                                                      ('test_bool', [], '')],
                                          'properties': []},
             'test_twodim_base.TestFliplr': {'bases': ['test_twodim_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_twodim_base.TestFlipud': {'bases': ['test_twodim_base.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_basic', [], '')],
                                             'properties': []},
             'test_twodim_base.TestHistogram2d': {'bases': ['test_twodim_base.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_simple', [], ''),
                                                              ('test_asym', [], ''),
                                                              ('test_norm', [], ''),
                                                              ('test_all_outliers', [], ''),
                                                              ('test_empty', [], '')],
                                                  'properties': []},
             'test_twodim_base.TestRot90': {'bases': ['test_twodim_base.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_basic', [], ''),
                                                        ('test_axes', [], '')],
                                            'properties': []},
             'test_twodim_base.TestTri': {'bases': ['test_twodim_base.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_dtype', [], '')],
                                          'properties': []},
             'test_twodim_base.TestTrilIndicesFrom': {'bases': [],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('test_exceptions', [], '')],
                                                      'properties': []},
             'test_twodim_base.TestTriuIndices': {'bases': [],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_triu_indices', [], '')],
                                                  'properties': []},
             'test_twodim_base.TestTriuIndicesFrom': {'bases': [],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('test_exceptions', [], '')],
                                                      'properties': []},
             'test_type_check.TestArrayConversion': {'bases': ['test_type_check.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_asfarray', [], '')],
                                                     'properties': []},
             'test_type_check.TestCommonType': {'bases': ['test_type_check.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('test_basic', [], '')],
                                                'properties': []},
             'test_type_check.TestDateTimeData': {'bases': [],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_basic', [], '')],
                                                  'properties': []},
             'test_type_check.TestImag': {'bases': ['test_type_check.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_real', [], ''),
                                                      ('test_cmplx', [], '')],
                                          'properties': []},
             'test_type_check.TestIscomplex': {'bases': ['test_type_check.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_fail', [], ''),
                                                           ('test_pass', [], '')],
                                               'properties': []},
             'test_type_check.TestIscomplexobj': {'bases': ['test_type_check.TestCase'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('test_basic', [], '')],
                                                  'properties': []},
             'test_type_check.TestIsfinite': {'bases': ['test_type_check.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_goodvalues', [], ''),
                                                          ('test_posinf', [], ''),
                                                          ('test_neginf', [], ''),
                                                          ('test_ind', [], ''),
                                                          ('test_integer', [], ''),
                                                          ('test_complex', [], ''),
                                                          ('test_complex1', [], '')],
                                              'properties': []},
             'test_type_check.TestIsinf': {'bases': ['test_type_check.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_goodvalues', [], ''),
                                                       ('test_posinf', [], ''),
                                                       ('test_posinf_scalar', [], ''),
                                                       ('test_neginf', [], ''),
                                                       ('test_neginf_scalar', [], ''),
                                                       ('test_ind', [], '')],
                                           'properties': []},
             'test_type_check.TestIsnan': {'bases': ['test_type_check.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_goodvalues', [], ''),
                                                       ('test_posinf', [], ''),
                                                       ('test_neginf', [], ''),
                                                       ('test_ind', [], ''),
                                                       ('test_integer', [], ''),
                                                       ('test_complex', [], ''),
                                                       ('test_complex1', [], '')],
                                           'properties': []},
             'test_type_check.TestIsneginf': {'bases': ['test_type_check.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_generic', [], '')],
                                              'properties': []},
             'test_type_check.TestIsposinf': {'bases': ['test_type_check.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_generic', [], '')],
                                              'properties': []},
             'test_type_check.TestIsreal': {'bases': ['test_type_check.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('test_pass', [], ''),
                                                        ('test_fail', [], '')],
                                            'properties': []},
             'test_type_check.TestIsrealobj': {'bases': ['test_type_check.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_basic', [], '')],
                                               'properties': []},
             'test_type_check.TestIsscalar': {'bases': ['test_type_check.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_basic', [], '')],
                                              'properties': []},
             'test_type_check.TestMintypecode': {'bases': ['test_type_check.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_default_1', [], ''),
                                                             ('test_default_2', [], ''),
                                                             ('test_default_3', [], '')],
                                                 'properties': []},
             'test_type_check.TestNanToNum': {'bases': ['test_type_check.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_generic', [], ''),
                                                          ('test_integer', [], ''),
                                                          ('test_complex_good', [], ''),
                                                          ('test_complex_bad', [], ''),
                                                          ('test_complex_bad2', [], '')],
                                              'properties': []},
             'test_type_check.TestReal': {'bases': ['test_type_check.TestCase'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('test_real', [], ''),
                                                      ('test_cmplx', [], '')],
                                          'properties': []},
             'test_type_check.TestRealIfClose': {'bases': ['test_type_check.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('test_basic', [], '')],
                                                 'properties': []},
             'test_ufunc.TestUfunc': {'bases': ['test_ufunc.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('test_reduceat_shifting_sum', [], ''),
                                                  ('test_generic_loops',
                                                   [],
                                                   "Test generic loops.\n\n        The loops to be tested are:\n\n            PyUFunc_ff_f_As_dd_d\n            PyUFunc_ff_f\n            PyUFunc_dd_d\n            PyUFunc_gg_g\n            PyUFunc_FF_F_As_DD_D\n            PyUFunc_DD_D\n            PyUFunc_FF_F\n            PyUFunc_GG_G\n            PyUFunc_OO_O\n            PyUFunc_OO_O_method\n            PyUFunc_f_f_As_d_d\n            PyUFunc_d_d\n            PyUFunc_f_f\n            PyUFunc_g_g\n            PyUFunc_F_F_As_D_D\n            PyUFunc_F_F\n            PyUFunc_D_D\n            PyUFunc_G_G\n            PyUFunc_O_O\n            PyUFunc_O_O_method\n            PyUFunc_On_Om\n\n        Where:\n\n            f -- float\n            d -- double\n            g -- long double\n            F -- complex float\n            D -- complex double\n            G -- complex long double\n            O -- python object\n\n        It is difficult to assure that each of these loops is entered from the\n        Python level as the special cased loops are a moving target and the\n        corresponding types are architecture dependent. We probably need to\n        define C level testing ufuncs to get at them. For the time being, I've\n        just looked at the signatures registered in the build directory to find\n        relevant functions.\n\n        Fixme, currently untested:\n\n            PyUFunc_ff_f_As_dd_d\n            PyUFunc_FF_F_As_DD_D\n            PyUFunc_f_f_As_d_d\n            PyUFunc_F_F_As_D_D\n            PyUFunc_On_Om\n\n        "),
                                                  ('test_all_ufunc',
                                                   [],
                                                   'Try to check presence and results of all ufuncs.\n\n        The list of ufuncs comes from generate_umath.py and is as follows:\n\n        =====  ====  =============  ===============  ========================\n        done   args   function        types                notes\n        =====  ====  =============  ===============  ========================\n        n      1     conjugate      nums + O\n        n      1     absolute       nums + O         complex -> real\n        n      1     negative       nums + O\n        n      1     sign           nums + O         -> int\n        n      1     invert         bool + ints + O  flts raise an error\n        n      1     degrees        real + M         cmplx raise an error\n        n      1     radians        real + M         cmplx raise an error\n        n      1     arccos         flts + M\n        n      1     arccosh        flts + M\n        n      1     arcsin         flts + M\n        n      1     arcsinh        flts + M\n        n      1     arctan         flts + M\n        n      1     arctanh        flts + M\n        n      1     cos            flts + M\n        n      1     sin            flts + M\n        n      1     tan            flts + M\n        n      1     cosh           flts + M\n        n      1     sinh           flts + M\n        n      1     tanh           flts + M\n        n      1     exp            flts + M\n        n      1     expm1          flts + M\n        n      1     log            flts + M\n        n      1     log10          flts + M\n        n      1     log1p          flts + M\n        n      1     sqrt           flts + M         real x < 0 raises error\n        n      1     ceil           real + M\n        n      1     trunc          real + M\n        n      1     floor          real + M\n        n      1     fabs           real + M\n        n      1     rint           flts + M\n        n      1     isnan          flts             -> bool\n        n      1     isinf          flts             -> bool\n        n      1     isfinite       flts             -> bool\n        n      1     signbit        real             -> bool\n        n      1     modf           real             -> (frac, int)\n        n      1     logical_not    bool + nums + M  -> bool\n        n      2     left_shift     ints + O         flts raise an error\n        n      2     right_shift    ints + O         flts raise an error\n        n      2     add            bool + nums + O  boolean + is ||\n        n      2     subtract       bool + nums + O  boolean - is ^\n        n      2     multiply       bool + nums + O  boolean * is &\n        n      2     divide         nums + O\n        n      2     floor_divide   nums + O\n        n      2     true_divide    nums + O         bBhH -> f, iIlLqQ -> d\n        n      2     fmod           nums + M\n        n      2     power          nums + O\n        n      2     greater        bool + nums + O  -> bool\n        n      2     greater_equal  bool + nums + O  -> bool\n        n      2     less           bool + nums + O  -> bool\n        n      2     less_equal     bool + nums + O  -> bool\n        n      2     equal          bool + nums + O  -> bool\n        n      2     not_equal      bool + nums + O  -> bool\n        n      2     logical_and    bool + nums + M  -> bool\n        n      2     logical_or     bool + nums + M  -> bool\n        n      2     logical_xor    bool + nums + M  -> bool\n        n      2     maximum        bool + nums + O\n        n      2     minimum        bool + nums + O\n        n      2     bitwise_and    bool + ints + O  flts raise an error\n        n      2     bitwise_or     bool + ints + O  flts raise an error\n        n      2     bitwise_xor    bool + ints + O  flts raise an error\n        n      2     arctan2        real + M\n        n      2     remainder      ints + real + O\n        n      2     hypot          real + M\n        =====  ====  =============  ===============  ========================\n\n        Types other than those listed will be accepted, but they are cast to\n        the smallest compatible type for which the function is defined. The\n        casting rules are:\n\n        bool -> int8 -> float32\n        ints -> double\n\n        '),
                                                  ('test_signature', [], ''),
                                                  ('test_get_signature', [], ''),
                                                  ('test_forced_sig', [], ''),
                                                  ('test_inner1d', [], ''),
                                                  ('test_broadcast', [], ''),
                                                  ('test_type_cast', [], ''),
                                                  ('test_endian', [], ''),
                                                  ('test_incontiguous_array', [], ''),
                                                  ('test_output_argument', [], ''),
                                                  ('test_innerwt', [], ''),
                                                  ('test_matrix_multiply', [], ''),
                                                  ('compare_matrix_multiply_results',
                                                   ['tp'],
                                                   ''),
                                                  ('test_casting_out_param', [], '')],
                                      'properties': []},
             'test_ufunclike.TestUfunclike': {'bases': ['test_ufunclike.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_isposinf', [], ''),
                                                          ('test_isneginf', [], ''),
                                                          ('test_fix', [], ''),
                                                          ('test_fix_with_subclass', [], '')],
                                              'properties': []},
             'test_umath_complex.TestCabs': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_simple', [], ''),
                                                         ('test_fabs', [], ''),
                                                         ('test_cabs_inf_nan', [], '')],
                                             'properties': []},
             'test_umath_complex.TestCarg': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_simple', [], ''),
                                                         ('test_zero', [], ''),
                                                         ('test_special_values', [], '')],
                                             'properties': []},
             'test_umath_complex.TestCexp': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_simple', [], ''),
                                                         ('test_special_values', [], ''),
                                                         ('test_special_values2', [], '')],
                                             'properties': []},
             'test_umath_complex.TestClog': {'bases': ['test_umath_complex.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_simple', [], ''),
                                                         ('test_special_values', [], '')],
                                             'properties': []},
             'test_umath_complex.TestCpow': {'bases': ['test_umath_complex.TestCase'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('test_simple', [], ''),
                                                         ('test_scalar', [], ''),
                                                         ('test_array', [], '')],
                                             'properties': []},
             'test_umath_complex.TestCsqrt': {'bases': ['object'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('test_simple', [], ''),
                                                          ('test_simple_conjugate', [], ''),
                                                          ('test_special_values', [], '')],
                                              'properties': []},
             'test_unicode.assign_values': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': 'Check the assignment of unicode arrays with values',
                                            'methods': [('content_check',
                                                         ['ua', 'ua_scalar', 'nbytes'],
                                                         ''),
                                                        ('test_values0D',
                                                         [],
                                                         'Check assignment of 0-dimensional objects with values'),
                                                        ('test_valuesSD',
                                                         [],
                                                         'Check assignment of single-dimensional objects with values'),
                                                        ('test_valuesMD',
                                                         [],
                                                         'Check assignment of multi-dimensional objects with values')],
                                            'properties': []},
             'test_unicode.byteorder_values': {'bases': [],
                                               'constructor': [],
                                               'docstring': 'Check the byteorder of unicode arrays in round-trip conversions',
                                               'methods': [('test_values0D',
                                                            [],
                                                            'Check byteorder of 0-dimensional objects'),
                                                           ('test_valuesSD',
                                                            [],
                                                            'Check byteorder of single-dimensional objects'),
                                                           ('test_valuesMD',
                                                            [],
                                                            'Check byteorder of multi-dimensional objects')],
                                               'properties': []},
             'test_unicode.create_values': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': 'Check the creation of unicode arrays with values',
                                            'methods': [('content_check',
                                                         ['ua', 'ua_scalar', 'nbytes'],
                                                         ''),
                                                        ('test_values0D',
                                                         [],
                                                         'Check creation of 0-dimensional objects with values'),
                                                        ('test_valuesSD',
                                                         [],
                                                         'Check creation of single-dimensional objects with values'),
                                                        ('test_valuesMD',
                                                         [],
                                                         'Check creation of multi-dimensional objects with values')],
                                            'properties': []},
             'test_unicode.create_zeros': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': 'Check the creation of zero-valued arrays',
                                           'methods': [('content_check',
                                                        ['ua', 'ua_scalar', 'nbytes'],
                                                        ''),
                                                       ('test_zeros0D',
                                                        [],
                                                        'Check creation of 0-dimensional objects'),
                                                       ('test_zerosSD',
                                                        [],
                                                        'Check creation of single-dimensional objects'),
                                                       ('test_zerosMD',
                                                        [],
                                                        'Check creation of multi-dimensional objects')],
                                           'properties': []},
             'test_unicode.test_assign_values_1009_ucs2': {'bases': ['test_unicode.assign_values',
                                                                     'test_unicode.TestCase'],
                                                           'constructor': [],
                                                           'docstring': 'Check the assignment of valued arrays (size 1009, UCS2 values)',
                                                           'methods': [],
                                                           'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_assign_values_1009_ucs4': {'bases': ['test_unicode.assign_values',
                                                                     'test_unicode.TestCase'],
                                                           'constructor': [],
                                                           'docstring': 'Check the assignment of valued arrays (size 1009, UCS4 values)',
                                                           'methods': [],
                                                           'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_assign_values_1_ucs2': {'bases': ['test_unicode.assign_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the assignment of valued arrays (size 1, UCS2 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_assign_values_1_ucs4': {'bases': ['test_unicode.assign_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the assignment of valued arrays (size 1, UCS4 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_assign_values_2_ucs2': {'bases': ['test_unicode.assign_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the assignment of valued arrays (size 2, UCS2 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_assign_values_2_ucs4': {'bases': ['test_unicode.assign_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the assignment of valued arrays (size 2, UCS4 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_byteorder_1009_ucs2': {'bases': ['test_unicode.byteorder_values',
                                                                 'test_unicode.TestCase'],
                                                       'constructor': [],
                                                       'docstring': 'Check the byteorder in unicode (size 1009, UCS2 values)',
                                                       'methods': [],
                                                       'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_byteorder_1009_ucs4': {'bases': ['test_unicode.byteorder_values',
                                                                 'test_unicode.TestCase'],
                                                       'constructor': [],
                                                       'docstring': 'Check the byteorder in unicode (size 1009, UCS4 values)',
                                                       'methods': [],
                                                       'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_byteorder_1_ucs2': {'bases': ['test_unicode.byteorder_values',
                                                              'test_unicode.TestCase'],
                                                    'constructor': [],
                                                    'docstring': 'Check the byteorder in unicode (size 1, UCS2 values)',
                                                    'methods': [],
                                                    'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_byteorder_1_ucs4': {'bases': ['test_unicode.byteorder_values',
                                                              'test_unicode.TestCase'],
                                                    'constructor': [],
                                                    'docstring': 'Check the byteorder in unicode (size 1, UCS4 values)',
                                                    'methods': [],
                                                    'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_byteorder_2_ucs2': {'bases': ['test_unicode.byteorder_values',
                                                              'test_unicode.TestCase'],
                                                    'constructor': [],
                                                    'docstring': 'Check the byteorder in unicode (size 2, UCS2 values)',
                                                    'methods': [],
                                                    'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_byteorder_2_ucs4': {'bases': ['test_unicode.byteorder_values',
                                                              'test_unicode.TestCase'],
                                                    'constructor': [],
                                                    'docstring': 'Check the byteorder in unicode (size 2, UCS4 values)',
                                                    'methods': [],
                                                    'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_values_1009_ucs2': {'bases': ['test_unicode.create_values',
                                                                     'test_unicode.TestCase'],
                                                           'constructor': [],
                                                           'docstring': 'Check the creation of valued arrays (size 1009, UCS2 values)',
                                                           'methods': [],
                                                           'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_values_1009_ucs4': {'bases': ['test_unicode.create_values',
                                                                     'test_unicode.TestCase'],
                                                           'constructor': [],
                                                           'docstring': 'Check the creation of valued arrays (size 1009, UCS4 values)',
                                                           'methods': [],
                                                           'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_values_1_ucs2': {'bases': ['test_unicode.create_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the creation of valued arrays (size 1, UCS2 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_values_1_ucs4': {'bases': ['test_unicode.create_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the creation of valued arrays (size 1, UCS4 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_values_2_ucs2': {'bases': ['test_unicode.create_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the creation of valued arrays (size 2, UCS2 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_values_2_ucs4': {'bases': ['test_unicode.create_values',
                                                                  'test_unicode.TestCase'],
                                                        'constructor': [],
                                                        'docstring': 'Check the creation of valued arrays (size 2, UCS4 values)',
                                                        'methods': [],
                                                        'properties': ['ulen', 'ucs_value']},
             'test_unicode.test_create_zeros_1': {'bases': ['test_unicode.create_zeros',
                                                            'test_unicode.TestCase'],
                                                  'constructor': [],
                                                  'docstring': 'Check the creation of zero-valued arrays (size 1)',
                                                  'methods': [],
                                                  'properties': ['ulen']},
             'test_unicode.test_create_zeros_1009': {'bases': ['test_unicode.create_zeros',
                                                               'test_unicode.TestCase'],
                                                     'constructor': [],
                                                     'docstring': 'Check the creation of zero-valued arrays (size 1009)',
                                                     'methods': [],
                                                     'properties': ['ulen']},
             'test_unicode.test_create_zeros_2': {'bases': ['test_unicode.create_zeros',
                                                            'test_unicode.TestCase'],
                                                  'constructor': [],
                                                  'docstring': 'Check the creation of zero-valued arrays (size 2)',
                                                  'methods': [],
                                                  'properties': ['ulen']},
             'test_utils.TestAlmostEqual': {'bases': ['test_utils._GenericTest',
                                                      'unittest.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''),
                                                        ('test_nan_item', [], ''),
                                                        ('test_inf_item', [], ''),
                                                        ('test_simple_item', [], ''),
                                                        ('test_complex_item', [], ''),
                                                        ('test_complex', [], '')],
                                            'properties': ['_assert_func']},
             'test_utils.TestApproxEqual': {'bases': ['unittest.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''),
                                                        ('test_simple_arrays', [], ''),
                                                        ('test_simple_items', [], ''),
                                                        ('test_nan_array', [], ''),
                                                        ('test_nan_items', [], '')],
                                            'properties': ['_assert_func']},
             'test_utils.TestArrayAlmostEqual': {'bases': ['test_utils._GenericTest',
                                                           'unittest.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('setUp', [], ''),
                                                             ('test_simple', [], ''),
                                                             ('test_nan', [], ''),
                                                             ('test_inf', [], '')],
                                                 'properties': ['_assert_func']},
             'test_utils.TestArrayAlmostEqualNulp': {'bases': ['unittest.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('test_simple', [], ''),
                                                                 ('test_simple2', [], ''),
                                                                 ('test_big_float32', [], ''),
                                                                 ('test_big_float64', [], ''),
                                                                 ('test_complex', [], ''),
                                                                 ('test_complex2', [], '')],
                                                     'properties': []},
             'test_utils.TestArrayEqual': {'bases': ['test_utils._GenericTest',
                                                     'unittest.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('setUp', [], ''),
                                                       ('test_generic_rank1',
                                                        [],
                                                        'Test rank 1 array for all dtypes.'),
                                                       ('test_generic_rank3',
                                                        [],
                                                        'Test rank 3 array for all dtypes.'),
                                                       ('test_nan_array',
                                                        [],
                                                        'Test arrays with nan values in them.'),
                                                       ('test_string_arrays',
                                                        [],
                                                        'Test two arrays with different shapes are found not equal.'),
                                                       ('test_recarrays',
                                                        [],
                                                        'Test record arrays.')],
                                           'properties': ['_assert_func']},
             'test_utils.TestAssertAllclose': {'bases': ['unittest.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('test_simple', [], '')],
                                               'properties': []},
             'test_utils.TestEqual': {'bases': ['test_utils.TestArrayEqual'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('setUp', [], ''),
                                                  ('test_nan_items', [], ''),
                                                  ('test_inf_items', [], ''),
                                                  ('test_non_numeric', [], ''),
                                                  ('test_complex_item', [], ''),
                                                  ('test_negative_zero', [], ''),
                                                  ('test_complex', [], '')],
                                      'properties': ['_assert_func']},
             'test_utils.TestRaises': {'bases': ['unittest.TestCase'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('setUp', [], ''),
                                                   ('raises_exception', ['e'], ''),
                                                   ('does_not_raise_exception', [], ''),
                                                   ('test_correct_catch', [], ''),
                                                   ('test_wrong_exception', [], ''),
                                                   ('test_catch_no_raise', [], '')],
                                       'properties': ['e']},
             'test_utils.TestULP': {'bases': ['unittest.TestCase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('test_equal', [], ''),
                                                ('test_single', [], ''),
                                                ('test_double', [], ''),
                                                ('test_inf', [], ''),
                                                ('test_nan', [], '')],
                                    'properties': []},
             'test_utils.TestWarns': {'bases': ['unittest.TestCase'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('test_warn', [], ''),
                                                  ('test_warn_wrong_warning', [], '')],
                                      'properties': []},
             'test_utils._GenericTest': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('_test_equal', ['a', 'b'], ''),
                                                     ('_test_not_equal', ['a', 'b'], ''),
                                                     ('test_array_rank1_eq',
                                                      [],
                                                      'Test two equal array of rank 1 are found equal.'),
                                                     ('test_array_rank1_noteq',
                                                      [],
                                                      'Test two different array of rank 1 are found not equal.'),
                                                     ('test_array_rank2_eq',
                                                      [],
                                                      'Test two equal array of rank 2 are found equal.'),
                                                     ('test_array_diffshape',
                                                      [],
                                                      'Test two arrays with different shapes are found not equal.'),
                                                     ('test_objarray',
                                                      [],
                                                      'Test object arrays.')],
                                         'properties': []},
             'util.F2PyTest': {'bases': ['object'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [('setUp', [], '')],
                               'properties': ['code',
                                              'sources',
                                              'options',
                                              'skip',
                                              'only',
                                              'suffix',
                                              'module',
                                              'module_name']}},
 'CONSTANTS': ['mock.__all__',
               'mock.__version__',
               'mock.inspect',
               'mock.wraps',
               'mock.basestring',
               'mock.unicode',
               'mock.long',
               'mock.BaseException',
               'mock.BaseExceptions',
               'mock.BaseExceptions',
               'mock._isidentifier',
               'mock.regex',
               'mock.inPy3k',
               'mock._super',
               'mock.self',
               'mock.builtin',
               'mock.self',
               'mock.builtin',
               'mock.FILTER_DIR',
               'mock.DescriptorTypes',
               'mock.sentinel',
               'mock.DEFAULT',
               'mock._missing',
               'mock._deleted',
               'mock.ClassType',
               'mock.ClassTypes',
               'mock.ClassTypes',
               'mock._allowed_names',
               'mock.magic_methods',
               'mock.numerics',
               'mock.inplace',
               'mock.n',
               'mock.right',
               'mock.n',
               'mock.extra',
               'mock.extra',
               'mock.extra',
               'mock._non_defaults',
               'mock.method',
               'mock._magics',
               'mock.method',
               'mock._all_magics',
               'mock._unsupported_magics',
               'mock._calculate_return_value',
               'mock._return_values',
               'mock._side_effect_methods',
               'mock.ANY',
               'mock.call',
               'mock.FunctionTypes',
               'mock.FunctionAttributes',
               'mock.file_spec',
               'nose.pyversion.__all__',
               'nose.pyversion.UNICODE_STRINGS',
               'nose.pyversion.ClassType',
               'nose.pyversion.TypeType',
               'nose.pyversion.ClassType',
               'nose.pyversion.TypeType',
               'nose.core.log',
               'nose.core.compat_24',
               'nose.core.__all__',
               'nose.core.run_exit',
               'nose.core.main',
               'nose.commands.Command',
               'nose.commands.nosetests',
               'nose.util.CO_GENERATOR',
               'nose.util.log',
               'nose.util.ident_re',
               'nose.util.class_types',
               'nose.util.skip_pattern',
               'nose.util.set',
               'nose.util.is_generator',
               'nose.__author__',
               'nose.__versioninfo__',
               'nose.__version__',
               'nose.__all__',
               'nose.proxy.log',
               'nose.importer.log',
               'nose.failure.log',
               'nose.failure.__all__',
               'nose.config.log',
               'nose.config.option_blacklist',
               'nose.config.config_files',
               'nose.config.exe_allowed_platforms',
               'nose.suite.log',
               'nose.suite._def',
               'nose.loader.log',
               'nose.loader.op_normpath',
               'nose.loader.op_abspath',
               'nose.loader.op_join',
               'nose.loader.op_isdir',
               'nose.loader.op_isfile',
               'nose.loader.__all__',
               'nose.loader.defaultTestLoader',
               'nose.twistedtools.__all__',
               'nose.twistedtools._twisted_thread',
               'nose.twistedtools.reactor',
               'nose.twistedtools.reactor_thread',
               'nose.selector.log',
               'nose.selector.__all__',
               'nose.selector.op_join',
               'nose.selector.op_basename',
               'nose.selector.op_exists',
               'nose.selector.op_splitext',
               'nose.selector.op_isabs',
               'nose.selector.op_abspath',
               'nose.selector.defaultSelector',
               'nose.inspector.log',
               'nose.result.log',
               'nose.case.log',
               'nose.case.__all__',
               'nose.plugins.prof.hotshot',
               'nose.plugins.prof.stats',
               'nose.plugins.prof.log',
               'nose.plugins.builtin.plugins',
               'nose.plugins.builtin.builtins',
               'nose.plugins.builtin.module',
               'nose.plugins.builtin.cls',
               'nose.plugins.builtin.plugmod',
               'nose.plugins.builtin.plug',
               'nose.plugins.xunit.CONTROL_CHARACTERS',
               'nose.plugins.xunit.TEST_ID',
               'nose.plugins.multiprocess._instantiate_plugins',
               'nose.plugins.multiprocess.log',
               'nose.plugins.multiprocess.Process',
               'nose.plugins.multiprocess.Queue',
               'nose.plugins.multiprocess.Pool',
               'nose.plugins.multiprocess.Event',
               'nose.plugins.multiprocess.Value',
               'nose.plugins.multiprocess.Array',
               'nose.plugins.isolate.log',
               'nose.plugins.doctests.log',
               'nose.plugins.doctests._orp',
               'nose.plugins.plugintest.__all__',
               'nose.plugins.plugintest.Buffer',
               'nose.plugins.plugintest.Buffer',
               'nose.plugins.capture.log',
               'nose.plugins.attrib.log',
               'nose.plugins.attrib.compat_24',
               'nose.plugins.manager.__all__',
               'nose.plugins.manager.log',
               'nose.plugins.cover.log',
               'nose.plugins.logcapture.log',
               'nose.plugins.collect.log',
               'nose.plugins.testid.__test__',
               'nose.plugins.testid.log',
               'nose.tools.nontrivial.__all__',
               'nose.tools.trivial.__all__',
               'nose.tools.trivial.__unittest',
               'nose.tools.trivial.caps',
               'nose.tools.trivial._t',
               'nose.tools.trivial.at',
               'nose.tools.trivial.at',
               'nose.tools.trivial.pepd',
               'nose.tools.trivial.Dummy',
               'nose.tools.trivial._t',
               'nose.tools.trivial.pep8',
               'nose.ext.dtcompat.__docformat__',
               'nose.ext.dtcompat.__all__',
               'nose.ext.dtcompat.OPTIONFLAGS_BY_NAME',
               'nose.ext.dtcompat.DONT_ACCEPT_TRUE_FOR_1',
               'nose.ext.dtcompat.DONT_ACCEPT_BLANKLINE',
               'nose.ext.dtcompat.NORMALIZE_WHITESPACE',
               'nose.ext.dtcompat.ELLIPSIS',
               'nose.ext.dtcompat.IGNORE_EXCEPTION_DETAIL',
               'nose.ext.dtcompat.COMPARISON_FLAGS',
               'nose.ext.dtcompat.REPORT_UDIFF',
               'nose.ext.dtcompat.REPORT_CDIFF',
               'nose.ext.dtcompat.REPORT_NDIFF',
               'nose.ext.dtcompat.REPORT_ONLY_FIRST_FAILURE',
               'nose.ext.dtcompat.REPORTING_FLAGS',
               'nose.ext.dtcompat.BLANKLINE_MARKER',
               'nose.ext.dtcompat.ELLIPSIS_MARKER',
               'nose.ext.dtcompat.master',
               'nose.ext.dtcompat._unittest_reportflags',
               'nose.ext.dtcompat.__test__',
               'numpy.__NUMPY_SETUP__',
               'numpy._sys',
               'numpy.msg',
               'numpy.__all__',
               'numpy.test',
               'numpy.bench',
               'numpy.version.short_version',
               'numpy.version.version',
               'numpy.version.full_version',
               'numpy.version.git_revision',
               'numpy.version.release',
               'numpy.version.version',
               'numpy.dual.__all__',
               'numpy.dual.fft',
               'numpy.dual.ifft',
               'numpy.dual.fftn',
               'numpy.dual.ifftn',
               'numpy.dual.fft2',
               'numpy.dual.ifft2',
               'numpy.dual.norm',
               'numpy.dual.inv',
               'numpy.dual.svd',
               'numpy.dual.solve',
               'numpy.dual.det',
               'numpy.dual.eig',
               'numpy.dual.eigvals',
               'numpy.dual.eigh',
               'numpy.dual.eigvalsh',
               'numpy.dual.lstsq',
               'numpy.dual.pinv',
               'numpy.dual.cholesky',
               'numpy.dual._restore_dict',
               'numpy._import_tools.__all__',
               'numpy._import_tools.PackageLoader',
               'numpy.matlib.__version__',
               'numpy.matlib.__all__',
               'numpy.ctypeslib.__all__',
               'numpy.ctypeslib.ctypes',
               'numpy.ctypeslib.ctypes_load_library',
               'numpy.ctypeslib.load_library',
               'numpy.ctypeslib.as_ctypes',
               'numpy.ctypeslib.as_array',
               'numpy.ctypeslib._ndptr_base',
               'numpy.ctypeslib.c_intp',
               'numpy.ctypeslib.nic',
               'numpy.ctypeslib._ndptr_base',
               'numpy.ctypeslib.ctypes_load_library',
               'numpy.ctypeslib._flagnames',
               'numpy.ctypeslib._pointer_type_cache',
               'numpy.ctypeslib.ct',
               'numpy.ctypeslib._typecodes',
               'numpy.ctypeslib.simple_types',
               'numpy.ctypeslib.types',
               'numpy.ctypeslib.code',
               'numpy.ctypeslib.tp',
               'numpy.ctypeslib._ARRAY_TYPE',
               'numpy.__config__.__all__',
               'numpy.__config__.blas_info',
               'numpy.__config__.lapack_info',
               'numpy.__config__.atlas_threads_info',
               'numpy.__config__.blas_src_info',
               'numpy.__config__.blas_opt_info',
               'numpy.__config__.lapack_src_info',
               'numpy.__config__.atlas_blas_threads_info',
               'numpy.__config__.lapack_opt_info',
               'numpy.__config__.atlas_info',
               'numpy.__config__.lapack_mkl_info',
               'numpy.__config__.blas_mkl_info',
               'numpy.__config__.atlas_blas_info',
               'numpy.__config__.mkl_info',
               'numpy.doc.ref_dir',
               'numpy.doc.__all__',
               'numpy.doc.f',
               'numpy.doc.f',
               'numpy.doc.f',
               'numpy.doc.ref_dir',
               'numpy.doc.__doc__',
               'numpy.doc.constants.constants',
               'numpy.doc.constants.constants_str',
               'numpy.doc.constants.name',
               'numpy.doc.constants.doc',
               'numpy.doc.constants.s',
               'numpy.doc.constants.lines',
               'numpy.doc.constants.new_lines',
               'numpy.doc.constants.line',
               'numpy.doc.constants.m',
               'numpy.doc.constants.prev',
               'numpy.doc.constants.s',
               'numpy.doc.constants.constants_str',
               'numpy.doc.constants.__doc__',
               'numpy.doc.constants.constants_str',
               'numpy.doc.constants.name',
               'numpy.doc.constants.doc',
               'numpy.doc.constants.line',
               'numpy.doc.constants.lines',
               'numpy.doc.constants.new_lines',
               'numpy.doc.constants.m',
               'numpy.doc.constants.s',
               'numpy.doc.constants.prev',
               'numpy.doc.constants.constants',
               'numpy.doc.constants.add_newdoc',
               'numpy.lib.shape_base.__all__',
               'numpy.lib.shape_base.row_stack',
               'numpy.lib.ufunclike.__all__',
               'numpy.lib.__all__',
               'numpy.lib.test',
               'numpy.lib.bench',
               'numpy.lib.arrayterator.__all__',
               'numpy.lib.recfunctions._check_fill_value',
               'numpy.lib.recfunctions.__all__',
               'numpy.lib.function_base.__docformat__',
               'numpy.lib.function_base.__all__',
               'numpy.lib.function_base._i0A',
               'numpy.lib.function_base._i0B',
               'numpy.lib.stride_tricks.__all__',
               'numpy.lib.type_check.__all__',
               'numpy.lib.type_check._typecodes_by_elsize',
               'numpy.lib.type_check._namefromtype',
               'numpy.lib.type_check.array_type',
               'numpy.lib.type_check.array_precision',
               'numpy.lib.index_tricks.__all__',
               'numpy.lib.index_tricks.makemat',
               'numpy.lib.index_tricks.mgrid',
               'numpy.lib.index_tricks.ogrid',
               'numpy.lib.index_tricks.r_',
               'numpy.lib.index_tricks.c_',
               'numpy.lib.index_tricks.index_exp',
               'numpy.lib.index_tricks.s_',
               'numpy.lib.utils.__all__',
               'numpy.lib.utils.deprecate_with_doc',
               'numpy.lib.utils._namedict',
               'numpy.lib.utils._dictlist',
               'numpy.lib.utils._lookfor_caches',
               'numpy.lib.utils._function_signature_re',
               'numpy.lib.scimath.__all__',
               'numpy.lib.scimath._ln2',
               'numpy.lib.npyio.__all__',
               'numpy.lib.npyio._string_like',
               'numpy.lib.financial.__all__',
               'numpy.lib.financial._when_to_num',
               'numpy.lib._iotools.__docformat__',
               'numpy.lib._iotools._bytes_to_complex',
               'numpy.lib._iotools._bytes_to_name',
               'numpy.lib.polynomial.__all__',
               'numpy.lib.polynomial._poly_mat',
               'numpy.lib.user_array.temp',
               'numpy.lib.user_array.ua',
               'numpy.lib.user_array.ua_small',
               'numpy.lib.twodim_base.__all__',
               'numpy.lib.arraysetops.__all__',
               'numpy.lib.info.depends',
               'numpy.lib.info.global_symbols',
               'numpy.lib._datasource.__docformat__',
               'numpy.lib._datasource._open',
               'numpy.lib._datasource._file_openers',
               'numpy.lib.format.MAGIC_PREFIX',
               'numpy.lib.format.MAGIC_LEN',
               'test_type_check._HAS_CTYPE',
               'test_type_check._HAS_CTYPE',
               'test_regression.rlevel',
               'test_format.tempdir',
               'test_format.scalars',
               'test_format.basic_arrays',
               'test_format.scalar',
               'test_format.endian',
               'test_format.dtype',
               'test_format.basic',
               'test_format.Pdescr',
               'test_format.PbufferT',
               'test_format.Ndescr',
               'test_format.NbufferT',
               'test_format.record_arrays',
               'test_format.bad_version_magic',
               'test_format.malformed_magic',
               'test_recfunctions.get_names',
               'test_recfunctions.get_names_flat',
               'test_recfunctions.zip_descr',
               'test_io.BytesIO',
               'test_io.MAJVER',
               'test_io.MINVER',
               'test_utils.new_func3',
               'test__datasource.old_urlopen',
               'test__datasource.http_path',
               'test__datasource.http_file',
               'test__datasource.http_fakepath',
               'test__datasource.http_fakefile',
               'test__datasource.malicious_files',
               'test__datasource.magic_line',
               'simpleindex.N',
               'simpleindex.code2',
               'simpleindex.code3',
               'simpleindex.code',
               'simpleindex.setup3',
               'simpleindex.numpy_timer1',
               'simpleindex.numeric_timer',
               'simpleindex.numarray_timer',
               'simpleindex.numpy_timer2',
               'simpleindex.python_timer',
               'simpleindex.numpy_timer3',
               'casting.modules',
               'casting.b',
               'casting.N',
               'sorting.modules',
               'sorting.b',
               'sorting.N',
               'sorting.N1',
               'sorting.N2',
               'sorting.N1',
               'sorting.N2',
               'creating.modules',
               'creating.N',
               'creating.b',
               'numpy.fft.test',
               'numpy.fft.bench',
               'numpy.fft.fftpack.__all__',
               'numpy.fft.fftpack._fft_cache',
               'numpy.fft.fftpack._real_fft_cache',
               'numpy.fft.helper.__all__',
               'numpy.fft.info.depends',
               'numpy.linalg.test',
               'numpy.linalg.bench',
               'numpy.linalg.info.depends',
               'numpy.linalg.linalg.__all__',
               'numpy.linalg.linalg._N',
               'numpy.linalg.linalg._V',
               'numpy.linalg.linalg._A',
               'numpy.linalg.linalg._S',
               'numpy.linalg.linalg._L',
               'numpy.linalg.linalg.fortran_int',
               'numpy.linalg.linalg._real_types_map',
               'numpy.linalg.linalg._complex_types_map',
               'numpy.linalg.linalg._complex_types_map',
               'numpy.linalg.linalg._fastCT',
               'test_regression.rlevel',
               'test_linalg.old_assert_almost_equal',
               'numpy.testing.test',
               'numpy.testing.utils.__all__',
               'numpy.testing.utils.verbose',
               'numpy.testing.noseclasses._doctest_ignore',
               'numpy.testing.noseclasses.print_state',
               'numpy.testing.numpytest.__all__',
               'numpy.testing.numpytest.DEBUG',
               'numpy.testing.numpytest.get_frame',
               'numpy.oldnumeric.random_array.__all__',
               'numpy.oldnumeric.random_array.ArgumentError',
               'numpy.oldnumeric.__version__',
               'numpy.oldnumeric.numpy',
               'numpy.oldnumeric.__all__',
               'numpy.oldnumeric.compat',
               'numpy.oldnumeric.functions',
               'numpy.oldnumeric.precision',
               'numpy.oldnumeric.ufuncs',
               'numpy.oldnumeric.misc',
               'numpy.oldnumeric.test',
               'numpy.oldnumeric.bench',
               'numpy.oldnumeric.compat.__all__',
               'numpy.oldnumeric.compat.mu',
               'numpy.oldnumeric.compat.NewAxis',
               'numpy.oldnumeric.compat.UFuncType',
               'numpy.oldnumeric.compat.UfuncType',
               'numpy.oldnumeric.compat.ArrayType',
               'numpy.oldnumeric.compat.arraytype',
               'numpy.oldnumeric.compat.LittleEndian',
               'numpy.oldnumeric.compat.arrayrange',
               'numpy.oldnumeric.compat.matrixmultiply',
               'numpy.oldnumeric.rng.__all__',
               'numpy.oldnumeric.rng.default_distribution',
               'numpy.oldnumeric.rng.standard_generator',
               'numpy.oldnumeric.array_printer.__all__',
               'numpy.oldnumeric.fft.__all__',
               'numpy.oldnumeric.precision.__all__',
               'numpy.oldnumeric.precision.typecodes',
               'numpy.oldnumeric.precision._code_table',
               'numpy.oldnumeric.precision.Character',
               'numpy.oldnumeric.precision.UnsignedInt8',
               'numpy.oldnumeric.precision.UInt8',
               'numpy.oldnumeric.precision.UnsignedInt16',
               'numpy.oldnumeric.precision.UInt16',
               'numpy.oldnumeric.precision.UnsignedInt32',
               'numpy.oldnumeric.precision.UInt32',
               'numpy.oldnumeric.precision.UnsignedInt64',
               'numpy.oldnumeric.precision.UInt64',
               'numpy.oldnumeric.precision.UnsignedInt128',
               'numpy.oldnumeric.precision.UInt128',
               'numpy.oldnumeric.precision.UInt',
               'numpy.oldnumeric.precision.UnsignedInt',
               'numpy.oldnumeric.precision.UnsignedInteger',
               'numpy.oldnumeric.precision.Int0',
               'numpy.oldnumeric.precision.Int8',
               'numpy.oldnumeric.precision.Int16',
               'numpy.oldnumeric.precision.Int32',
               'numpy.oldnumeric.precision.Int64',
               'numpy.oldnumeric.precision.Int128',
               'numpy.oldnumeric.precision.Int',
               'numpy.oldnumeric.precision.Float0',
               'numpy.oldnumeric.precision.Float8',
               'numpy.oldnumeric.precision.Float16',
               'numpy.oldnumeric.precision.Float32',
               'numpy.oldnumeric.precision.Float64',
               'numpy.oldnumeric.precision.Float128',
               'numpy.oldnumeric.precision.Float',
               'numpy.oldnumeric.precision.Complex0',
               'numpy.oldnumeric.precision.Complex8',
               'numpy.oldnumeric.precision.Complex16',
               'numpy.oldnumeric.precision.Complex32',
               'numpy.oldnumeric.precision.Complex64',
               'numpy.oldnumeric.precision.Complex128',
               'numpy.oldnumeric.precision.Complex',
               'numpy.oldnumeric.precision.PyObject',
               'numpy.oldnumeric.misc.__all__',
               'numpy.oldnumeric.misc.StringIO',
               'numpy.oldnumeric.misc.copy_reg',
               'numpy.oldnumeric.linear_algebra.__all__',
               'numpy.oldnumeric.linear_algebra.LinAlgError',
               'numpy.oldnumeric.arrayfns.__all__',
               'numpy.oldnumeric.matrix.__all__',
               'numpy.oldnumeric.matrix._table',
               'numpy.oldnumeric.matrix.k',
               'numpy.oldnumeric.matrix._table',
               'numpy.oldnumeric.matrix._numchars',
               'numpy.oldnumeric.matrix._todelete',
               'numpy.oldnumeric.matrix.k',
               'numpy.oldnumeric.matrix._todelete',
               'numpy.oldnumeric.matrix._lkup',
               'numpy.oldnumeric.rng_stats.__all__',
               'numpy.oldnumeric.ufuncs.__all__',
               'numpy.oldnumeric.alter_code2.__all__',
               'numpy.oldnumeric.typeconv.__all__',
               'numpy.oldnumeric.typeconv.oldtype2dtype',
               'numpy.oldnumeric.typeconv._changedtypes',
               'numpy.oldnumeric.typeconv.oldtypecodes',
               'numpy.oldnumeric.fix_default_axis.__all__',
               'numpy.oldnumeric.fix_default_axis._args3',
               'numpy.oldnumeric.fix_default_axis._funcm1',
               'numpy.oldnumeric.fix_default_axis._func0',
               'numpy.oldnumeric.fix_default_axis._all',
               'numpy.oldnumeric.fix_default_axis.func_re',
               'numpy.oldnumeric.fix_default_axis.name',
               'numpy.oldnumeric.fix_default_axis._astr',
               'numpy.oldnumeric.fix_default_axis.disallowed',
               'numpy.oldnumeric.alter_code1.__all__',
               'numpy.oldnumeric.alter_code1._func4',
               'numpy.oldnumeric.alter_code1._meth1',
               'numpy.oldnumeric.alter_code1._func2',
               'numpy.oldnumeric.alter_code1._chars',
               'numpy.oldnumeric.alter_code1.func_re',
               'numpy.oldnumeric.alter_code1.meth_re',
               'numpy.oldnumeric.alter_code1.name',
               'numpy.oldnumeric.alter_code1._astr',
               'numpy.oldnumeric.alter_code1.name',
               'numpy.oldnumeric.alter_code1._astr',
               'numpy.oldnumeric.alter_code1.name',
               'numpy.oldnumeric.alter_code1._astr',
               'numpy.oldnumeric.alter_code1.char',
               'numpy.oldnumeric.alter_code1._astr',
               'numpy.oldnumeric.alter_code1.flatindex_re',
               'numpy.oldnumeric.alter_code1.istest_re',
               'numpy.oldnumeric.alter_code1._types',
               'numpy.oldnumeric.alter_code1.name',
               'numpy.oldnumeric.alter_code1._astr',
               'numpy.oldnumeric.alter_code1.svspc2',
               'numpy.oldnumeric.alter_code1.svspc3',
               'numpy.oldnumeric.alter_code1.header_re',
               'numpy.oldnumeric.user_array.__all__',
               'numpy.oldnumeric.user_array.nold',
               'numpy.oldnumeric.ma.ufunc_domain',
               'numpy.oldnumeric.ma.ufunc_fills',
               'numpy.oldnumeric.ma.MaskType',
               'numpy.oldnumeric.ma.nomask',
               'numpy.oldnumeric.ma.divide_tolerance',
               'numpy.oldnumeric.ma.masked_print_option',
               'numpy.oldnumeric.ma.default_real_fill_value',
               'numpy.oldnumeric.ma.default_complex_fill_value',
               'numpy.oldnumeric.ma.default_character_fill_value',
               'numpy.oldnumeric.ma.default_integer_fill_value',
               'numpy.oldnumeric.ma.default_object_fill_value',
               'numpy.oldnumeric.ma.sqrt',
               'numpy.oldnumeric.ma.log',
               'numpy.oldnumeric.ma.log10',
               'numpy.oldnumeric.ma.exp',
               'numpy.oldnumeric.ma.conjugate',
               'numpy.oldnumeric.ma.sin',
               'numpy.oldnumeric.ma.cos',
               'numpy.oldnumeric.ma.tan',
               'numpy.oldnumeric.ma.arcsin',
               'numpy.oldnumeric.ma.arccos',
               'numpy.oldnumeric.ma.arctan',
               'numpy.oldnumeric.ma.arcsinh',
               'numpy.oldnumeric.ma.arccosh',
               'numpy.oldnumeric.ma.arctanh',
               'numpy.oldnumeric.ma.sinh',
               'numpy.oldnumeric.ma.cosh',
               'numpy.oldnumeric.ma.tanh',
               'numpy.oldnumeric.ma.absolute',
               'numpy.oldnumeric.ma.fabs',
               'numpy.oldnumeric.ma.negative',
               'numpy.oldnumeric.ma.around',
               'numpy.oldnumeric.ma.floor',
               'numpy.oldnumeric.ma.ceil',
               'numpy.oldnumeric.ma.logical_not',
               'numpy.oldnumeric.ma.add',
               'numpy.oldnumeric.ma.subtract',
               'numpy.oldnumeric.ma.multiply',
               'numpy.oldnumeric.ma.divide',
               'numpy.oldnumeric.ma.true_divide',
               'numpy.oldnumeric.ma.floor_divide',
               'numpy.oldnumeric.ma.remainder',
               'numpy.oldnumeric.ma.fmod',
               'numpy.oldnumeric.ma.hypot',
               'numpy.oldnumeric.ma.arctan2',
               'numpy.oldnumeric.ma.equal',
               'numpy.oldnumeric.ma.not_equal',
               'numpy.oldnumeric.ma.less_equal',
               'numpy.oldnumeric.ma.greater_equal',
               'numpy.oldnumeric.ma.less',
               'numpy.oldnumeric.ma.greater',
               'numpy.oldnumeric.ma.logical_and',
               'numpy.oldnumeric.ma.alltrue',
               'numpy.oldnumeric.ma.logical_or',
               'numpy.oldnumeric.ma.sometrue',
               'numpy.oldnumeric.ma.logical_xor',
               'numpy.oldnumeric.ma.bitwise_and',
               'numpy.oldnumeric.ma.bitwise_or',
               'numpy.oldnumeric.ma.bitwise_xor',
               'numpy.oldnumeric.ma.array',
               'numpy.oldnumeric.ma.isarray',
               'numpy.oldnumeric.ma.isMA',
               'numpy.oldnumeric.ma.arrayrange',
               'numpy.oldnumeric.ma.innerproduct',
               'numpy.oldnumeric.ma.outerproduct',
               'numpy.oldnumeric.ma.minimum',
               'numpy.oldnumeric.ma.maximum',
               'numpy.oldnumeric.ma._choose',
               'numpy.oldnumeric.ma._compress',
               'numpy.oldnumeric.ma._max',
               'numpy.oldnumeric.ma._min',
               'numpy.oldnumeric.ma._m',
               'numpy.oldnumeric.ma.MethodType',
               'numpy.oldnumeric.ma.not_implemented',
               'numpy.oldnumeric.ma.masked',
               'numpy.oldnumeric.functions.__all__',
               'numpy.oldnumeric.mlab.__all__',
               'numpy.oldnumeric.mlab.__version__',
               'numpy.oldnumeric.mlab.numpy',
               'numpy.oldnumeric.mlab.compat',
               'numpy.oldnumeric.mlab.functions',
               'numpy.oldnumeric.mlab.precision',
               'numpy.oldnumeric.mlab.ufuncs',
               'numpy.oldnumeric.mlab.misc',
               'test_regression.rlevel',
               'numpy.polynomial.laguerre.__all__',
               'numpy.polynomial.laguerre.lagtrim',
               'numpy.polynomial.laguerre.lagdomain',
               'numpy.polynomial.laguerre.lagzero',
               'numpy.polynomial.laguerre.lagone',
               'numpy.polynomial.laguerre.lagx',
               'numpy.polynomial.hermite.__all__',
               'numpy.polynomial.hermite.hermtrim',
               'numpy.polynomial.hermite.hermdomain',
               'numpy.polynomial.hermite.hermzero',
               'numpy.polynomial.hermite.hermone',
               'numpy.polynomial.hermite.hermx',
               'numpy.polynomial.test',
               'numpy.polynomial.bench',
               'numpy.polynomial.polyutils.__all__',
               'numpy.polynomial.legendre.__all__',
               'numpy.polynomial.legendre.legtrim',
               'numpy.polynomial.legendre.legdomain',
               'numpy.polynomial.legendre.legzero',
               'numpy.polynomial.legendre.legone',
               'numpy.polynomial.legendre.legx',
               'numpy.polynomial.polytemplate.rel_import',
               'numpy.polynomial.polytemplate.rel_import',
               'numpy.polynomial.polytemplate.polytemplate',
               'numpy.polynomial.chebyshev.__all__',
               'numpy.polynomial.chebyshev.chebtrim',
               'numpy.polynomial.chebyshev.chebdomain',
               'numpy.polynomial.chebyshev.chebzero',
               'numpy.polynomial.chebyshev.chebone',
               'numpy.polynomial.chebyshev.chebx',
               'numpy.polynomial.polynomial.__all__',
               'numpy.polynomial.polynomial.polytrim',
               'numpy.polynomial.polynomial.polydomain',
               'numpy.polynomial.polynomial.polyzero',
               'numpy.polynomial.polynomial.polyone',
               'numpy.polynomial.polynomial.polyx',
               'numpy.polynomial.hermite_e.__all__',
               'numpy.polynomial.hermite_e.hermetrim',
               'numpy.polynomial.hermite_e.hermedomain',
               'numpy.polynomial.hermite_e.hermezero',
               'numpy.polynomial.hermite_e.hermeone',
               'numpy.polynomial.hermite_e.hermex',
               'test_legendre.P0',
               'test_legendre.P1',
               'test_legendre.P2',
               'test_legendre.P3',
               'test_legendre.P4',
               'test_legendre.P5',
               'test_legendre.P6',
               'test_legendre.P7',
               'test_legendre.P8',
               'test_legendre.P9',
               'test_legendre.Plist',
               'test_hermite.H0',
               'test_hermite.H1',
               'test_hermite.H2',
               'test_hermite.H3',
               'test_hermite.H4',
               'test_hermite.H5',
               'test_hermite.H6',
               'test_hermite.H7',
               'test_hermite.H8',
               'test_hermite.H9',
               'test_hermite.Hlist',
               'test_hermite_e.He0',
               'test_hermite_e.He1',
               'test_hermite_e.He2',
               'test_hermite_e.He3',
               'test_hermite_e.He4',
               'test_hermite_e.He5',
               'test_hermite_e.He6',
               'test_hermite_e.He7',
               'test_hermite_e.He8',
               'test_hermite_e.He9',
               'test_hermite_e.Helist',
               'test_polynomial.T0',
               'test_polynomial.T1',
               'test_polynomial.T2',
               'test_polynomial.T3',
               'test_polynomial.T4',
               'test_polynomial.T5',
               'test_polynomial.T6',
               'test_polynomial.T7',
               'test_polynomial.T8',
               'test_polynomial.T9',
               'test_polynomial.Tlist',
               'test_chebyshev.T0',
               'test_chebyshev.T1',
               'test_chebyshev.T2',
               'test_chebyshev.T3',
               'test_chebyshev.T4',
               'test_chebyshev.T5',
               'test_chebyshev.T6',
               'test_chebyshev.T7',
               'test_chebyshev.T8',
               'test_chebyshev.T9',
               'test_chebyshev.Tlist',
               'test_laguerre.L0',
               'test_laguerre.L1',
               'test_laguerre.L2',
               'test_laguerre.L3',
               'test_laguerre.L4',
               'test_laguerre.L5',
               'test_laguerre.L6',
               'test_laguerre.Llist',
               'numpy.core.shape_base.__all__',
               'numpy.core.scons_support.array_api_gen_bld',
               'numpy.core.scons_support.ufunc_api_gen_bld',
               'numpy.core.scons_support.template_bld',
               'numpy.core.scons_support.umath_bld',
               'numpy.core.machar.__all__',
               'numpy.core._internal._nbo',
               'numpy.core._internal._nbo',
               'numpy.core._internal.format_datetime',
               'numpy.core._internal.format_re',
               'numpy.core._internal._convorder',
               'numpy.core._internal._pep3118_native_map',
               'numpy.core._internal._pep3118_native_typechars',
               'numpy.core._internal._pep3118_standard_map',
               'numpy.core._internal._pep3118_standard_typechars',
               'numpy.core.arrayprint.__all__',
               'numpy.core.arrayprint.__docformat__',
               'numpy.core.arrayprint._summaryEdgeItems',
               'numpy.core.arrayprint._summaryThreshold',
               'numpy.core.arrayprint._float_output_precision',
               'numpy.core.arrayprint._float_output_suppress_small',
               'numpy.core.arrayprint._line_width',
               'numpy.core.arrayprint._nan_str',
               'numpy.core.arrayprint._inf_str',
               'numpy.core.arrayprint._MAXINT',
               'numpy.core.arrayprint._MININT',
               'numpy.core.nt',
               'numpy.core.__all__',
               'numpy.core.test',
               'numpy.core.bench',
               'numpy.core.function_base.__all__',
               'numpy.core.getlimits.__all__',
               'numpy.core.getlimits._convert_to_float',
               'numpy.core.getlimits.f',
               'numpy.core.getlimits.f',
               'numpy.core.getlimits.f',
               'numpy.core._mx_datetime_parser.__all__',
               'numpy.core._mx_datetime_parser._debug',
               'numpy.core._mx_datetime_parser._year',
               'numpy.core._mx_datetime_parser._fullyear',
               'numpy.core._mx_datetime_parser._year_epoch',
               'numpy.core._mx_datetime_parser._fullyear_epoch',
               'numpy.core._mx_datetime_parser._relyear',
               'numpy.core._mx_datetime_parser._month',
               'numpy.core._mx_datetime_parser._fullmonth',
               'numpy.core._mx_datetime_parser._litmonth',
               'numpy.core._mx_datetime_parser.litmonthtable',
               'numpy.core._mx_datetime_parser._relmonth',
               'numpy.core._mx_datetime_parser._day',
               'numpy.core._mx_datetime_parser._usday',
               'numpy.core._mx_datetime_parser._fullday',
               'numpy.core._mx_datetime_parser._litday',
               'numpy.core._mx_datetime_parser.litdaytable',
               'numpy.core._mx_datetime_parser._relday',
               'numpy.core._mx_datetime_parser._hour',
               'numpy.core._mx_datetime_parser._minute',
               'numpy.core._mx_datetime_parser._second',
               'numpy.core._mx_datetime_parser._days',
               'numpy.core._mx_datetime_parser._hours',
               'numpy.core._mx_datetime_parser._minutes',
               'numpy.core._mx_datetime_parser._seconds',
               'numpy.core._mx_datetime_parser._reldays',
               'numpy.core._mx_datetime_parser._relhours',
               'numpy.core._mx_datetime_parser._relminutes',
               'numpy.core._mx_datetime_parser._relseconds',
               'numpy.core._mx_datetime_parser._sign',
               'numpy.core._mx_datetime_parser._week',
               'numpy.core._mx_datetime_parser._zone',
               'numpy.core._mx_datetime_parser._ampm',
               'numpy.core._mx_datetime_parser._time',
               'numpy.core._mx_datetime_parser._isotime',
               'numpy.core._mx_datetime_parser._yeardate',
               'numpy.core._mx_datetime_parser._weekdate',
               'numpy.core._mx_datetime_parser._eurodate',
               'numpy.core._mx_datetime_parser._usdate',
               'numpy.core._mx_datetime_parser._altusdate',
               'numpy.core._mx_datetime_parser._isodate',
               'numpy.core._mx_datetime_parser._altisodate',
               'numpy.core._mx_datetime_parser._usisodate',
               'numpy.core._mx_datetime_parser._litdate',
               'numpy.core._mx_datetime_parser._altlitdate',
               'numpy.core._mx_datetime_parser._eurlitdate',
               'numpy.core._mx_datetime_parser._relany',
               'numpy.core._mx_datetime_parser._relisodate',
               'numpy.core._mx_datetime_parser._asctime',
               'numpy.core._mx_datetime_parser._relisotime',
               'numpy.core._mx_datetime_parser._isodelta1',
               'numpy.core._mx_datetime_parser._isodelta2',
               'numpy.core._mx_datetime_parser._isodelta3',
               'numpy.core._mx_datetime_parser._litdelta',
               'numpy.core._mx_datetime_parser._litdelta2',
               'numpy.core._mx_datetime_parser._timeRE',
               'numpy.core._mx_datetime_parser._isotimeRE',
               'numpy.core._mx_datetime_parser._isodateRE',
               'numpy.core._mx_datetime_parser._altisodateRE',
               'numpy.core._mx_datetime_parser._usisodateRE',
               'numpy.core._mx_datetime_parser._yeardateRE',
               'numpy.core._mx_datetime_parser._eurodateRE',
               'numpy.core._mx_datetime_parser._usdateRE',
               'numpy.core._mx_datetime_parser._altusdateRE',
               'numpy.core._mx_datetime_parser._litdateRE',
               'numpy.core._mx_datetime_parser._altlitdateRE',
               'numpy.core._mx_datetime_parser._eurlitdateRE',
               'numpy.core._mx_datetime_parser._relisodateRE',
               'numpy.core._mx_datetime_parser._asctimeRE',
               'numpy.core._mx_datetime_parser._isodelta1RE',
               'numpy.core._mx_datetime_parser._isodelta2RE',
               'numpy.core._mx_datetime_parser._isodelta3RE',
               'numpy.core._mx_datetime_parser._litdeltaRE',
               'numpy.core._mx_datetime_parser._litdelta2RE',
               'numpy.core._mx_datetime_parser._relisotimeRE',
               'numpy.core._mx_datetime_parser._date_formats',
               'numpy.core._mx_datetime_parser._time_formats',
               'numpy.core._mx_datetime_parser._zoneoffset',
               'numpy.core._mx_datetime_parser._zoneoffsetRE',
               'numpy.core._mx_datetime_parser._zonetable',
               'numpy.core.records.__all__',
               'numpy.core.records.ndarray',
               'numpy.core.records._byteorderconv',
               'numpy.core.records.numfmt',
               'numpy.core.records._typestr',
               'numpy.core.defchararray.__all__',
               'numpy.core.defchararray._globalvar',
               'numpy.core.defchararray._unicode',
               'numpy.core.defchararray._bytes',
               'numpy.core.defchararray._unicode',
               'numpy.core.defchararray._bytes',
               'numpy.core.defchararray._len',
               'numpy.core.memmap.__all__',
               'numpy.core.memmap.dtypedescr',
               'numpy.core.memmap.valid_filemodes',
               'numpy.core.memmap.writeable_filemodes',
               'numpy.core.memmap.mode_equivalents',
               'numpy.core.fromnumeric.__docformat__',
               'numpy.core.fromnumeric.__all__',
               'numpy.core.fromnumeric._dt_',
               'numpy.core.fromnumeric._gentype',
               'numpy.core.fromnumeric._gentype',
               'numpy.core.fromnumeric._sum_',
               'numpy.core.setup_common.C_ABI_VERSION',
               'numpy.core.setup_common.C_API_VERSION',
               'numpy.core.setup_common.MANDATORY_FUNCS',
               'numpy.core.setup_common.OPTIONAL_STDFUNCS',
               'numpy.core.setup_common.OPTIONAL_STDFUNCS_MAYBE',
               'numpy.core.setup_common.C99_FUNCS',
               'numpy.core.setup_common.C99_FUNCS_SINGLE',
               'numpy.core.setup_common.f',
               'numpy.core.setup_common.C99_FUNCS_EXTENDED',
               'numpy.core.setup_common.f',
               'numpy.core.setup_common.C99_COMPLEX_TYPES',
               'numpy.core.setup_common.C99_COMPLEX_FUNCS',
               'numpy.core.setup_common.LONG_DOUBLE_REPRESENTATION_SRC',
               'numpy.core.setup_common._BEFORE_SEQ',
               'numpy.core.setup_common._AFTER_SEQ',
               'numpy.core.setup_common._IEEE_DOUBLE_BE',
               'numpy.core.setup_common._IEEE_DOUBLE_LE',
               'numpy.core.setup_common._INTEL_EXTENDED_12B',
               'numpy.core.setup_common._INTEL_EXTENDED_16B',
               'numpy.core.setup_common._IEEE_QUAD_PREC_BE',
               'numpy.core.setup_common._IEEE_QUAD_PREC_LE',
               'numpy.core.setup_common._DOUBLE_DOUBLE_BE',
               'numpy.core.generate_numpy_api.h_template',
               'numpy.core.generate_numpy_api.c_template',
               'numpy.core.generate_numpy_api.c_api_header',
               'numpy.core.numerictypes.__all__',
               'numpy.core.numerictypes._all_chars',
               'numpy.core.numerictypes._ascii_upper',
               'numpy.core.numerictypes._ascii_lower',
               'numpy.core.numerictypes.LOWER_TABLE',
               'numpy.core.numerictypes.UPPER_TABLE',
               'numpy.core.numerictypes.sctypeDict',
               'numpy.core.numerictypes.sctypeNA',
               'numpy.core.numerictypes.allTypes',
               'numpy.core.numerictypes.void',
               'numpy.core.numerictypes.generic',
               'numpy.core.numerictypes._sctype2char_dict',
               'numpy.core.numerictypes.sctypes',
               'numpy.core.numerictypes.genericTypeRank',
               'numpy.core.numerictypes.buffer_type',
               'numpy.core.numerictypes.buffer_type',
               'numpy.core.numerictypes._python_types',
               'numpy.core.numerictypes.nbytes',
               'numpy.core.numerictypes._alignment',
               'numpy.core.numerictypes._maxvals',
               'numpy.core.numerictypes._minvals',
               'numpy.core.numerictypes.cast',
               'numpy.core.numerictypes.ScalarType',
               'numpy.core.numerictypes.ScalarType',
               'numpy.core.numerictypes.ScalarType',
               'numpy.core.numerictypes.key',
               'numpy.core.numerictypes._typestr',
               'numpy.core.numerictypes.key',
               'numpy.core.numerictypes.key',
               'numpy.core.numerictypes.val',
               'numpy.core.numerictypes._toadd',
               'numpy.core.numerictypes._toadd',
               'numpy.core.numerictypes.name',
               'numpy.core.numerictypes._toadd',
               'numpy.core.numerictypes.name',
               'numpy.core.numerictypes.key',
               'numpy.core.numerictypes.key',
               'numpy.core.numerictypes.typecodes',
               'numpy.core.numerictypes.typeDict',
               'numpy.core.numerictypes.typeNA',
               'numpy.core.numerictypes._kind_list',
               'numpy.core.numerictypes.__test_types',
               'numpy.core.numerictypes.__len_test_types',
               'numpy.core.info.__doc__',
               'numpy.core.info.depends',
               'numpy.core.info.global_symbols',
               'numpy.core.setup.ENABLE_SEPARATE_COMPILATION',
               'numpy.core.setup.ENABLE_SEPARATE_COMPILATION',
               'numpy.core.setup.PYTHON_HAS_UNICODE_WIDE',
               'numpy.core.numeric.__all__',
               'numpy.core.numeric.bitwise_not',
               'numpy.core.numeric.CLIP',
               'numpy.core.numeric.WRAP',
               'numpy.core.numeric.RAISE',
               'numpy.core.numeric.MAXDIMS',
               'numpy.core.numeric.ALLOW_THREADS',
               'numpy.core.numeric.BUFSIZE',
               'numpy.core.numeric.ndarray',
               'numpy.core.numeric.flatiter',
               'numpy.core.numeric.nditer',
               'numpy.core.numeric.nested_iters',
               'numpy.core.numeric.broadcast',
               'numpy.core.numeric.dtype',
               'numpy.core.numeric.ufunc',
               'numpy.core.numeric.newaxis',
               'numpy.core.numeric.arange',
               'numpy.core.numeric.array',
               'numpy.core.numeric.zeros',
               'numpy.core.numeric.count_nonzero',
               'numpy.core.numeric.empty',
               'numpy.core.numeric.empty_like',
               'numpy.core.numeric.fromstring',
               'numpy.core.numeric.fromiter',
               'numpy.core.numeric.fromfile',
               'numpy.core.numeric.frombuffer',
               'numpy.core.numeric.newbuffer',
               'numpy.core.numeric.getbuffer',
               'numpy.core.numeric.int_asbuffer',
               'numpy.core.numeric.where',
               'numpy.core.numeric.concatenate',
               'numpy.core.numeric.fastCopyAndTranspose',
               'numpy.core.numeric.set_numeric_ops',
               'numpy.core.numeric.can_cast',
               'numpy.core.numeric.promote_types',
               'numpy.core.numeric.min_scalar_type',
               'numpy.core.numeric.result_type',
               'numpy.core.numeric.lexsort',
               'numpy.core.numeric.compare_chararrays',
               'numpy.core.numeric.putmask',
               'numpy.core.numeric.einsum',
               'numpy.core.numeric._mode_from_name_dict',
               'numpy.core.numeric.inner',
               'numpy.core.numeric.dot',
               'numpy.core.numeric._typelessdata',
               'numpy.core.numeric.little_endian',
               'numpy.core.numeric._lkup',
               'numpy.core.numeric._cload',
               'numpy.core.numeric._file',
               'numpy.core.numeric._errdict',
               'numpy.core.numeric._errdict_rev',
               'numpy.core.numeric.key',
               'numpy.core.numeric.key',
               'numpy.core.numeric._Unspecified',
               'numpy.core.numeric.Inf',
               'numpy.core.numeric.inf',
               'numpy.core.numeric.infty',
               'numpy.core.numeric.Infinity',
               'numpy.core.numeric.nan',
               'numpy.core.numeric.NaN',
               'numpy.core.numeric.False_',
               'numpy.core.numeric.True_',
               'test_numerictypes.Pdescr',
               'test_numerictypes.PbufferT',
               'test_numerictypes.Ndescr',
               'test_numerictypes.NbufferT',
               'test_numerictypes.byteorder',
               'test_regression.StringIO',
               'test_regression.rlevel',
               'test_print._REF',
               'test_blasdot.DECPREC',
               'test_blasdot._dotblas',
               'test_umath_complex.olderr',
               'test_umath_complex.functions_seem_flaky',
               'test_umath_complex.skip_complex_tests',
               'test_scalarmath.types',
               'test_unicode.ucs4',
               'test_unicode.ucs4',
               'test_unicode.ucs4',
               'test_unicode.ucs2_value',
               'test_unicode.ucs4_value',
               'test_multiarray.NEIGH_MODE',
               'test_defchararray.kw_unicode_true',
               'test_defchararray.kw_unicode_false',
               'numpy.numarray.random_array.__all__',
               'numpy.numarray.util.__all__',
               'numpy.numarray.nd_image.msg',
               'numpy.numarray.__all__',
               'numpy.numarray.util',
               'numpy.numarray.functions',
               'numpy.numarray.ufuncs',
               'numpy.numarray.compat',
               'numpy.numarray.test',
               'numpy.numarray.bench',
               'numpy.numarray.compat.__all__',
               'numpy.numarray.fft.__all__',
               'numpy.numarray.fft.nof',
               'numpy.numarray.linear_algebra.__all__',
               'numpy.numarray.matrix.__all__',
               'numpy.numarray.convolve.msg',
               'numpy.numarray.ufuncs.__all__',
               'numpy.numarray.alter_code2.__all__',
               'numpy.numarray.alter_code1.__all__',
               'numpy.numarray.alter_code1.flatindex_re',
               'numpy.numarray.alter_code1.info_re',
               'numpy.numarray.alter_code1.new_re',
               'numpy.numarray.alter_code1.toggle_re',
               'numpy.numarray.alter_code1.type_re',
               'numpy.numarray.alter_code1.isbyte_re',
               'numpy.numarray.alter_code1.iscarr_re',
               'numpy.numarray.alter_code1.isfarr_re',
               'numpy.numarray.alter_code1.repeat_re',
               'numpy.numarray.alter_code1.setshape_re',
               'numpy.numarray.alter_code1.setreal_re',
               'numpy.numarray.alter_code1.setimag_re',
               'numpy.numarray.alter_code1.setimaginary_re',
               'numpy.numarray.alter_code1.header_re',
               'numpy.numarray.session.__all__',
               'numpy.numarray.session.SAVEFILE',
               'numpy.numarray.session.VERBOSE',
               'numpy.numarray.session._PROXY_ALLOWED',
               'numpy.numarray.numerictypes.__all__',
               'numpy.numarray.numerictypes.MAX_ALIGN',
               'numpy.numarray.numerictypes.MAX_INT_SIZE',
               'numpy.numarray.numerictypes.LP64',
               'numpy.numarray.numerictypes.HasUInt64',
               'numpy.numarray.numerictypes.HasUInt64',
               'numpy.numarray.numerictypes.typeDict',
               'numpy.numarray.numerictypes._tAny',
               'numpy.numarray.numerictypes._tBool',
               'numpy.numarray.numerictypes._tInt8',
               'numpy.numarray.numerictypes._tUInt8',
               'numpy.numarray.numerictypes._tInt16',
               'numpy.numarray.numerictypes._tUInt16',
               'numpy.numarray.numerictypes._tInt32',
               'numpy.numarray.numerictypes._tUInt32',
               'numpy.numarray.numerictypes._tInt64',
               'numpy.numarray.numerictypes._tUInt64',
               'numpy.numarray.numerictypes._tFloat32',
               'numpy.numarray.numerictypes._tFloat64',
               'numpy.numarray.numerictypes._tComplex32',
               'numpy.numarray.numerictypes._tComplex64',
               'numpy.numarray.numerictypes._tObject',
               'numpy.numarray.numerictypes.Any',
               'numpy.numarray.numerictypes.Object',
               'numpy.numarray.numerictypes.Bool',
               'numpy.numarray.numerictypes.Int8',
               'numpy.numarray.numerictypes.Int16',
               'numpy.numarray.numerictypes.Int32',
               'numpy.numarray.numerictypes.Int64',
               'numpy.numarray.numerictypes.Float32',
               'numpy.numarray.numerictypes.Float64',
               'numpy.numarray.numerictypes.UInt8',
               'numpy.numarray.numerictypes.UInt16',
               'numpy.numarray.numerictypes.UInt32',
               'numpy.numarray.numerictypes.UInt64',
               'numpy.numarray.numerictypes.Complex32',
               'numpy.numarray.numerictypes.Complex64',
               'numpy.numarray.numerictypes.Byte',
               'numpy.numarray.numerictypes.Short',
               'numpy.numarray.numerictypes.Int',
               'numpy.numarray.numerictypes.Long',
               'numpy.numarray.numerictypes.MaybeLong',
               'numpy.numarray.numerictypes.Long',
               'numpy.numarray.numerictypes.MaybeLong',
               'numpy.numarray.numerictypes.Float',
               'numpy.numarray.numerictypes.Complex',
               'numpy.numarray.numerictypes.genericTypeRank',
               'numpy.numarray.numerictypes.genericTypeRank',
               'numpy.numarray.numerictypes.pythonTypeRank',
               'numpy.numarray.numerictypes.pythonTypeMap',
               'numpy.numarray.numerictypes.scalarTypeMap',
               'numpy.numarray.numerictypes.pythonTypeMap',
               'numpy.numarray.numerictypes.scalarTypeMap',
               'numpy.numarray.numerictypes.genericPromotionExclusions',
               'numpy.numarray.numerictypes.typecodes',
               'numpy.numarray.numerictypes._MaximumType',
               'numpy.numarray.numerictypes._MaximumType',
               'numpy.numarray.numerictypes.scalarTypes',
               'numpy.numarray.numerictypes._scipy_dtypechar',
               'numpy.numarray.numerictypes._scipy_dtypechar_inverse',
               'numpy.numarray.numerictypes.key',
               'numpy.numarray.numerictypes.value',
               'numpy.numarray.numerictypes._val',
               'numpy.numarray.numerictypes._val',
               'numpy.numarray.image.msg',
               'numpy.numarray.functions.__all__',
               'numpy.numarray.functions.isBigEndian',
               'numpy.numarray.functions.value',
               'numpy.numarray.functions.tcode',
               'numpy.numarray.functions.tname',
               'numpy.numarray.functions.arrayrange',
               'numpy.numarray.functions.STRICT',
               'numpy.numarray.functions.SLOPPY',
               'numpy.numarray.functions.WARN',
               'numpy.numarray.functions._BLOCKSIZE',
               'numpy.numarray.functions.inputarray',
               'numpy.numarray.mlab.__all__',
               'numpy.numarray.mlab.nom',
               'test_ctypeslib.cdll',
               'test_ctypeslib._HAS_CTYPE',
               'test_ctypeslib._HAS_CTYPE',
               'numpy.matrixlib.__all__',
               'numpy.matrixlib.test',
               'numpy.matrixlib.bench',
               'numpy.matrixlib.defmatrix.__all__',
               'numpy.matrixlib.defmatrix._numchars',
               'numpy.matrixlib.defmatrix._table',
               'numpy.matrixlib.defmatrix._table',
               'numpy.matrixlib.defmatrix.k',
               'numpy.matrixlib.defmatrix._table',
               'numpy.matrixlib.defmatrix._todelete',
               'numpy.matrixlib.defmatrix.k',
               'numpy.matrixlib.defmatrix._todelete',
               'numpy.matrixlib.defmatrix.k',
               'numpy.matrixlib.defmatrix.mat',
               'numpy.matrixlib.setupscons.config',
               'numpy.matrixlib.setup.config',
               'test_regression.rlevel',
               'numpy.distutils.environment.__metaclass__',
               'numpy.distutils.system_info._bits',
               'numpy.distutils.system_info.platform_bits',
               'numpy.distutils.system_info.default_lib_dirs',
               'numpy.distutils.system_info.default_include_dirs',
               'numpy.distutils.system_info.default_src_dirs',
               'numpy.distutils.system_info.default_x11_lib_dirs',
               'numpy.distutils.system_info.default_x11_include_dirs',
               'numpy.distutils.system_info.default_lib_dirs',
               'numpy.distutils.system_info.default_include_dirs',
               'numpy.distutils.system_info.default_src_dirs',
               'numpy.distutils.system_info.default_x11_lib_dirs',
               'numpy.distutils.system_info.default_x11_include_dirs',
               'numpy.distutils.system_info.globbed_x11_dir',
               'numpy.distutils.system_info.x11_so_dir',
               'numpy.distutils.system_info.default_lib_dirs',
               'numpy.distutils.system_info.default_include_dirs',
               'numpy.distutils.system_info.default_src_dirs',
               'numpy.distutils.system_info.so_ext',
               'numpy.distutils.system_info.atlas_version_c_text',
               'numpy.distutils.system_info._cached_atlas_version',
               'numpy.distutils.system_info.language_map',
               'numpy.distutils.system_info.inv_language_map',
               'numpy.distutils.log.good',
               'numpy.distutils.log._global_color_map',
               'numpy.distutils.npy_pkg_config.__all__',
               'numpy.distutils.npy_pkg_config._VAR',
               'numpy.distutils.npy_pkg_config._CACHE',
               'numpy.distutils.npy_pkg_config.parser',
               'numpy.distutils.npy_pkg_config.options',
               'numpy.distutils.npy_pkg_config.args',
               'numpy.distutils.npy_pkg_config.files',
               'numpy.distutils.npy_pkg_config.f',
               'numpy.distutils.npy_pkg_config.info',
               'numpy.distutils.npy_pkg_config.pkg_name',
               'numpy.distutils.npy_pkg_config.d',
               'numpy.distutils.npy_pkg_config.info',
               'numpy.distutils.npy_pkg_config.info',
               'numpy.distutils.npy_pkg_config.section',
               'numpy.distutils.npy_pkg_config.section',
               'numpy.distutils.npy_pkg_config.m',
               'numpy.distutils.npy_pkg_config.name',
               'numpy.distutils.npy_pkg_config.value',
               'numpy.distutils.core.have_setuptools',
               'numpy.distutils.core.have_setuptools',
               'numpy.distutils.core.have_setuptools',
               'numpy.distutils.core.numpy_cmdclass',
               'numpy.distutils._INSTALLED',
               'numpy.distutils._INSTALLED',
               'numpy.distutils._INSTALLED',
               'numpy.distutils._INSTALLED',
               'numpy.distutils.test',
               'numpy.distutils.bench',
               'numpy.distutils.conv_template.__all__',
               'numpy.distutils.conv_template.global_names',
               'numpy.distutils.conv_template.header',
               'numpy.distutils.conv_template.parenrep',
               'numpy.distutils.conv_template.plainrep',
               'numpy.distutils.conv_template.stripast',
               'numpy.distutils.conv_template.named_re',
               'numpy.distutils.conv_template.exclude_vars_re',
               'numpy.distutils.conv_template.exclude_re',
               'numpy.distutils.conv_template.replace_re',
               'numpy.distutils.conv_template.include_src_re',
               'numpy.distutils.conv_template.file',
               'numpy.distutils.conv_template.fid',
               'numpy.distutils.conv_template.outfile',
               'numpy.distutils.conv_template.fid',
               'numpy.distutils.conv_template.base',
               'numpy.distutils.conv_template.ext',
               'numpy.distutils.conv_template.newname',
               'numpy.distutils.conv_template.outfile',
               'numpy.distutils.conv_template.allstr',
               'numpy.distutils.conv_template.writestr',
               'numpy.distutils.conv_template.e',
               'numpy.distutils.exec_command.__all__',
               'numpy.distutils.exec_command.test',
               'numpy.distutils.exec_command.test',
               'numpy.distutils.ccompiler._distutils_new_compiler',
               'numpy.distutils.ccompiler._distutils_gen_lib_options',
               'numpy.distutils.ccompiler._cc',
               'numpy.distutils.ccompiler._m',
               'numpy.distutils.ccompiler._distutils_gen_preprocess_options',
               'numpy.distutils.ccompiler._wordchars_re',
               'numpy.distutils.ccompiler._squote_re',
               'numpy.distutils.ccompiler._dquote_re',
               'numpy.distutils.ccompiler._has_white_re',
               'numpy.distutils.cpuinfo.__all__',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpuinfo',
               'numpy.distutils.cpuinfo.cpu',
               'numpy.distutils.lib2def.__doc__',
               'numpy.distutils.lib2def.__version__',
               'numpy.distutils.lib2def.py_ver',
               'numpy.distutils.lib2def.DEFAULT_NM',
               'numpy.distutils.lib2def.DEF_HEADER',
               'numpy.distutils.lib2def.FUNC_RE',
               'numpy.distutils.lib2def.DATA_RE',
               'numpy.distutils.lib2def.libfile',
               'numpy.distutils.lib2def.deffile',
               'numpy.distutils.lib2def.deffile',
               'numpy.distutils.lib2def.deffile',
               'numpy.distutils.lib2def.nm_cmd',
               'numpy.distutils.lib2def.nm_output',
               'numpy.distutils.lib2def.dlist',
               'numpy.distutils.lib2def.flist',
               'numpy.distutils.__version__.major',
               'numpy.distutils.__version__.minor',
               'numpy.distutils.__version__.micro',
               'numpy.distutils.__version__.version',
               'numpy.distutils.mingw32ccompiler._START',
               'numpy.distutils.mingw32ccompiler._TABLE',
               'numpy.distutils.mingw32ccompiler._MSVCRVER_TO_FULLVER',
               'numpy.distutils.interactive.__all__',
               'numpy.distutils.from_template.__all__',
               'numpy.distutils.from_template.routine_start_re',
               'numpy.distutils.from_template.routine_end_re',
               'numpy.distutils.from_template.function_start_re',
               'numpy.distutils.from_template.template_re',
               'numpy.distutils.from_template.named_re',
               'numpy.distutils.from_template.list_re',
               'numpy.distutils.from_template.item_re',
               'numpy.distutils.from_template.template_name_re',
               'numpy.distutils.from_template.include_src_re',
               'numpy.distutils.from_template._special_names',
               'numpy.distutils.from_template.file',
               'numpy.distutils.from_template.fid',
               'numpy.distutils.from_template.outfile',
               'numpy.distutils.from_template.fid',
               'numpy.distutils.from_template.base',
               'numpy.distutils.from_template.ext',
               'numpy.distutils.from_template.newname',
               'numpy.distutils.from_template.outfile',
               'numpy.distutils.from_template.allstr',
               'numpy.distutils.from_template.writestr',
               'numpy.distutils.misc_util.__all__',
               'numpy.distutils.misc_util._temporary_directory',
               'numpy.distutils.misc_util._colour_codes',
               'numpy.distutils.misc_util.cxx_ext_match',
               'numpy.distutils.misc_util.fortran_ext_match',
               'numpy.distutils.misc_util.f90_ext_match',
               'numpy.distutils.misc_util.f90_module_name_match',
               'numpy.distutils.info.postpone_import',
               'numpy.distutils.extension.__revision__',
               'numpy.distutils.extension.cxx_ext_re',
               'numpy.distutils.extension.fortran_pyf_ext_re',
               'numpy.distutils.__config__.__all__',
               'numpy.distutils.__config__.blas_info',
               'numpy.distutils.__config__.lapack_info',
               'numpy.distutils.__config__.atlas_threads_info',
               'numpy.distutils.__config__.blas_src_info',
               'numpy.distutils.__config__.blas_opt_info',
               'numpy.distutils.__config__.lapack_src_info',
               'numpy.distutils.__config__.atlas_blas_threads_info',
               'numpy.distutils.__config__.lapack_opt_info',
               'numpy.distutils.__config__.atlas_info',
               'numpy.distutils.__config__.lapack_mkl_info',
               'numpy.distutils.__config__.blas_mkl_info',
               'numpy.distutils.__config__.atlas_blas_info',
               'numpy.distutils.__config__.mkl_info',
               'numpy.distutils.command.__revision__',
               'numpy.distutils.command.distutils_all',
               'numpy.distutils.command.__all__',
               'numpy.distutils.command.build_src._f_pyf_ext_match',
               'numpy.distutils.command.build_src._header_ext_match',
               'numpy.distutils.command.build_src._swig_module_name_match',
               'numpy.distutils.command.build_src._has_c_header',
               'numpy.distutils.command.build_src._has_cpp_header',
               'numpy.distutils.command.build_src._f2py_module_name_match',
               'numpy.distutils.command.build_src._f2py_user_module_name_match',
               'numpy.distutils.command.install.have_setuptools',
               'numpy.distutils.command.install.have_setuptools',
               'numpy.distutils.command.install.old_install',
               'numpy.distutils.command.install_data.have_setuptools',
               'numpy.distutils.command.build_clib._l',
               'numpy.distutils.command.build_clib._i',
               'numpy.distutils.fcompiler.pathf95.compilers',
               'numpy.distutils.fcompiler.pathf95.compiler',
               'numpy.distutils.fcompiler.sun.compilers',
               'numpy.distutils.fcompiler.sun.compiler',
               'numpy.distutils.fcompiler.__all__',
               'numpy.distutils.fcompiler.__metaclass__',
               'numpy.distutils.fcompiler._default_compilers',
               'numpy.distutils.fcompiler.fcompiler_class',
               'numpy.distutils.fcompiler.fcompiler_aliases',
               'numpy.distutils.fcompiler.is_f_file',
               'numpy.distutils.fcompiler._has_f_header',
               'numpy.distutils.fcompiler._has_f90_header',
               'numpy.distutils.fcompiler._has_fix_header',
               'numpy.distutils.fcompiler._free_f90_start',
               'numpy.distutils.fcompiler._f77flags_re',
               'numpy.distutils.fcompiler.absoft.compilers',
               'numpy.distutils.fcompiler.absoft.compiler',
               'numpy.distutils.fcompiler.gnu.compilers',
               'numpy.distutils.fcompiler.gnu.TARGET_R',
               'numpy.distutils.fcompiler.gnu._EXTRAFLAGS',
               'numpy.distutils.fcompiler.gnu._EXTRAFLAGS',
               'numpy.distutils.fcompiler.gnu.compiler',
               'numpy.distutils.fcompiler.gnu.compiler',
               'numpy.distutils.fcompiler.gnu.msg',
               'numpy.distutils.fcompiler.mips.compilers',
               'numpy.distutils.fcompiler.mips.compiler',
               'numpy.distutils.fcompiler.ibm.compilers',
               'numpy.distutils.fcompiler.ibm.compiler',
               'numpy.distutils.fcompiler.none.compilers',
               'numpy.distutils.fcompiler.none.compiler',
               'numpy.distutils.fcompiler.pg.compilers',
               'numpy.distutils.fcompiler.pg.compiler',
               'numpy.distutils.fcompiler.compaq.compilers',
               'numpy.distutils.fcompiler.compaq.compiler',
               'numpy.distutils.fcompiler.hpux.compilers',
               'numpy.distutils.fcompiler.hpux.compiler',
               'numpy.distutils.fcompiler.nag.compilers',
               'numpy.distutils.fcompiler.nag.compiler',
               'numpy.distutils.fcompiler.vast.compilers',
               'numpy.distutils.fcompiler.vast.compiler',
               'numpy.distutils.fcompiler.lahey.compilers',
               'numpy.distutils.fcompiler.lahey.compiler',
               'numpy.distutils.fcompiler.g95.compilers',
               'numpy.distutils.fcompiler.g95.compiler',
               'numpy.distutils.fcompiler.intel.compilers',
               'numpy.distutils.fcompiler.intel.compiler',
               'test_misc_util.ajoin',
               'test_npy_pkg_config.simple',
               'test_npy_pkg_config.simple_d',
               'test_npy_pkg_config.simple_variable',
               'test_npy_pkg_config.simple_variable_d',
               'test_fcompiler_intel.intel_32bit_version_strings',
               'test_fcompiler_intel.intel_64bit_version_strings',
               'test_fcompiler_gnu.g77_version_strings',
               'test_fcompiler_gnu.gfortran_version_strings',
               'gen_ext.setup.fib3_f',
               'numpy.ma.core.__author__',
               'numpy.ma.core.__docformat__',
               'numpy.ma.core.__all__',
               'numpy.ma.core.MaskType',
               'numpy.ma.core.nomask',
               'numpy.ma.core.default_filler',
               'numpy.ma.core.max_filler',
               'numpy.ma.core.k',
               'numpy.ma.core.min_filler',
               'numpy.ma.core.k',
               'numpy.ma.core.get_data',
               'numpy.ma.core.ufunc_domain',
               'numpy.ma.core.ufunc_fills',
               'numpy.ma.core.exp',
               'numpy.ma.core.conjugate',
               'numpy.ma.core.sin',
               'numpy.ma.core.cos',
               'numpy.ma.core.tan',
               'numpy.ma.core.arctan',
               'numpy.ma.core.arcsinh',
               'numpy.ma.core.sinh',
               'numpy.ma.core.cosh',
               'numpy.ma.core.tanh',
               'numpy.ma.core.abs',
               'numpy.ma.core.absolute',
               'numpy.ma.core.fabs',
               'numpy.ma.core.negative',
               'numpy.ma.core.floor',
               'numpy.ma.core.ceil',
               'numpy.ma.core.around',
               'numpy.ma.core.logical_not',
               'numpy.ma.core.sqrt',
               'numpy.ma.core.log',
               'numpy.ma.core.log2',
               'numpy.ma.core.log10',
               'numpy.ma.core.tan',
               'numpy.ma.core.arcsin',
               'numpy.ma.core.arccos',
               'numpy.ma.core.arccosh',
               'numpy.ma.core.arctanh',
               'numpy.ma.core.add',
               'numpy.ma.core.subtract',
               'numpy.ma.core.multiply',
               'numpy.ma.core.arctan2',
               'numpy.ma.core.equal',
               'numpy.ma.core.not_equal',
               'numpy.ma.core.less_equal',
               'numpy.ma.core.greater_equal',
               'numpy.ma.core.less',
               'numpy.ma.core.greater',
               'numpy.ma.core.logical_and',
               'numpy.ma.core.alltrue',
               'numpy.ma.core.logical_or',
               'numpy.ma.core.sometrue',
               'numpy.ma.core.logical_xor',
               'numpy.ma.core.bitwise_and',
               'numpy.ma.core.bitwise_or',
               'numpy.ma.core.bitwise_xor',
               'numpy.ma.core.hypot',
               'numpy.ma.core.divide',
               'numpy.ma.core.true_divide',
               'numpy.ma.core.floor_divide',
               'numpy.ma.core.remainder',
               'numpy.ma.core.fmod',
               'numpy.ma.core.mod',
               'numpy.ma.core.get_mask',
               'numpy.ma.core.masked_print_option',
               'numpy.ma.core._print_templates',
               'numpy.ma.core.isarray',
               'numpy.ma.core.isMA',
               'numpy.ma.core.masked',
               'numpy.ma.core.masked_singleton',
               'numpy.ma.core.masked_array',
               'numpy.ma.core.all',
               'numpy.ma.core.anomalies',
               'numpy.ma.core.anom',
               'numpy.ma.core.any',
               'numpy.ma.core.compress',
               'numpy.ma.core.cumprod',
               'numpy.ma.core.cumsum',
               'numpy.ma.core.copy',
               'numpy.ma.core.diagonal',
               'numpy.ma.core.harden_mask',
               'numpy.ma.core.ids',
               'numpy.ma.core.maximum',
               'numpy.ma.core.mean',
               'numpy.ma.core.minimum',
               'numpy.ma.core.nonzero',
               'numpy.ma.core.prod',
               'numpy.ma.core.product',
               'numpy.ma.core.ravel',
               'numpy.ma.core.repeat',
               'numpy.ma.core.shrink_mask',
               'numpy.ma.core.soften_mask',
               'numpy.ma.core.std',
               'numpy.ma.core.sum',
               'numpy.ma.core.swapaxes',
               'numpy.ma.core.trace',
               'numpy.ma.core.var',
               'numpy.ma.core.round',
               'numpy.ma.core.innerproduct',
               'numpy.ma.core.outerproduct',
               'numpy.ma.core.arange',
               'numpy.ma.core.clip',
               'numpy.ma.core.diff',
               'numpy.ma.core.empty',
               'numpy.ma.core.empty_like',
               'numpy.ma.core.frombuffer',
               'numpy.ma.core.fromfunction',
               'numpy.ma.core.identity',
               'numpy.ma.core.indices',
               'numpy.ma.core.ones',
               'numpy.ma.core.ones_like',
               'numpy.ma.core.squeeze',
               'numpy.ma.core.zeros',
               'numpy.ma.core.zeros_like',
               'numpy.ma.__author__',
               'numpy.ma.__version__',
               'numpy.ma.__revision__',
               'numpy.ma.__date__',
               'numpy.ma.__all__',
               'numpy.ma.test',
               'numpy.ma.bench',
               'numpy.ma.timer_comparison.pi',
               'numpy.ma.timer_comparison.setup_base',
               'numpy.ma.timer_comparison.setup_cur',
               'numpy.ma.timer_comparison.nrepeat',
               'numpy.ma.timer_comparison.nloop',
               'numpy.ma.timer_comparison.i',
               'numpy.ma.timer_comparison.func',
               'numpy.ma.timer_comparison.cur',
               'numpy.ma.timer_comparison.cur',
               'numpy.ma.version.version',
               'numpy.ma.version.release',
               'numpy.ma.version.revision',
               'numpy.ma.version.rev',
               'numpy.ma.bench.xs',
               'numpy.ma.bench.ys',
               'numpy.ma.bench.zs',
               'numpy.ma.bench.m1',
               'numpy.ma.bench.m2',
               'numpy.ma.bench.nmxs',
               'numpy.ma.bench.nmys',
               'numpy.ma.bench.nmzs',
               'numpy.ma.bench.xl',
               'numpy.ma.bench.yl',
               'numpy.ma.bench.zl',
               'numpy.ma.bench.maskx',
               'numpy.ma.bench.masky',
               'numpy.ma.bench.nmxl',
               'numpy.ma.bench.nmyl',
               'numpy.ma.bench.nmzl',
               'numpy.ma.extras.__author__',
               'numpy.ma.extras.__version__',
               'numpy.ma.extras.__revision__',
               'numpy.ma.extras.__date__',
               'numpy.ma.extras.__all__',
               'numpy.ma.extras.atleast_1d',
               'numpy.ma.extras.atleast_2d',
               'numpy.ma.extras.atleast_3d',
               'numpy.ma.extras.vstack',
               'numpy.ma.extras.row_stack',
               'numpy.ma.extras.hstack',
               'numpy.ma.extras.column_stack',
               'numpy.ma.extras.dstack',
               'numpy.ma.extras.hsplit',
               'numpy.ma.extras.diagflat',
               'numpy.ma.extras.mr_',
               'numpy.ma.setupscons.__author__',
               'numpy.ma.setupscons.__version__',
               'numpy.ma.setupscons.__revision__',
               'numpy.ma.setupscons.__date__',
               'numpy.ma.setupscons.config',
               'numpy.ma.mrecords.__author__',
               'numpy.ma.mrecords._byteorderconv',
               'numpy.ma.mrecords._typestr',
               'numpy.ma.mrecords._check_fill_value',
               'numpy.ma.mrecords.__all__',
               'numpy.ma.mrecords.reserved_fields',
               'numpy.ma.mrecords.mrecarray',
               'numpy.ma.testutils.__author__',
               'numpy.ma.testutils.__version__',
               'numpy.ma.testutils.__revision__',
               'numpy.ma.testutils.__date__',
               'numpy.ma.testutils.assert_not_equal',
               'numpy.ma.testutils.assert_close',
               'numpy.ma.setup.__author__',
               'numpy.ma.setup.__version__',
               'numpy.ma.setup.__revision__',
               'numpy.ma.setup.__date__',
               'numpy.ma.setup.config',
               'test_regression.rlevel',
               'test_subclassing.__author__',
               'test_subclassing.__version__',
               'test_subclassing.__revision__',
               'test_subclassing.__date__',
               'test_subclassing.subarray',
               'test_subclassing.msubarray',
               'test_subclassing.mmatrix',
               'test_core.__author__',
               'test_core.pi',
               'test_extras.__author__',
               'test_extras.__version__',
               'test_extras.__revision__',
               'test_extras.__date__',
               'test_old_ma.pi',
               'test_mrecords.__author__',
               'test_mrecords.__revision__',
               'test_mrecords.__date__',
               'numpy.random.ranf',
               'numpy.random.random',
               'numpy.random.sample',
               'numpy.random.test',
               'numpy.random.bench',
               'numpy.random.info.depends',
               'numpy.random.info.__all__',
               'numpy.compat.py3k.__all__',
               'numpy.compat.py3k.bytes',
               'numpy.compat.py3k.unicode',
               'numpy.compat.py3k.asunicode',
               'numpy.compat.py3k.strchar',
               'numpy.compat.py3k.bytes',
               'numpy.compat.py3k.unicode',
               'numpy.compat.py3k.asbytes',
               'numpy.compat.py3k.asstr',
               'numpy.compat.py3k.strchar',
               'numpy.compat.__all__',
               'numpy.compat._inspect.__all__',
               'numpy.compat._inspect.CO_OPTIMIZED',
               'numpy.compat._inspect.CO_NEWLOCALS',
               'numpy.compat._inspect.CO_VARARGS',
               'numpy.compat._inspect.CO_VARKEYWORDS',
               'numpy.f2py.capi_maps.__version__',
               'numpy.f2py.capi_maps.f2py_version',
               'numpy.f2py.capi_maps.using_newcore',
               'numpy.f2py.capi_maps.depargs',
               'numpy.f2py.capi_maps.lcb_map',
               'numpy.f2py.capi_maps.lcb2_map',
               'numpy.f2py.capi_maps.c2py_map',
               'numpy.f2py.capi_maps.c2capi_map',
               'numpy.f2py.capi_maps.c2capi_map',
               'numpy.f2py.capi_maps.c2pycode_map',
               'numpy.f2py.capi_maps.c2pycode_map',
               'numpy.f2py.capi_maps.c2buildvalue_map',
               'numpy.f2py.capi_maps.f2cmap_all',
               'numpy.f2py.capi_maps.f',
               'numpy.f2py.capi_maps.d',
               'numpy.f2py.capi_maps.k',
               'numpy.f2py.capi_maps.d1',
               'numpy.f2py.capi_maps.k1',
               'numpy.f2py.capi_maps.k',
               'numpy.f2py.capi_maps.k1',
               'numpy.f2py.capi_maps.msg',
               'numpy.f2py.capi_maps.cformat_map',
               'numpy.f2py.cfuncs.__version__',
               'numpy.f2py.cfuncs.f2py_version',
               'numpy.f2py.cfuncs.errmess',
               'numpy.f2py.cfuncs.outneeds',
               'numpy.f2py.cfuncs.needs',
               'numpy.f2py.cfuncs.includes0',
               'numpy.f2py.cfuncs.includes',
               'numpy.f2py.cfuncs.userincludes',
               'numpy.f2py.cfuncs.typedefs',
               'numpy.f2py.cfuncs.typedefs_generated',
               'numpy.f2py.cfuncs.cppmacros',
               'numpy.f2py.cfuncs.cfuncs',
               'numpy.f2py.cfuncs.callbacks',
               'numpy.f2py.cfuncs.f90modhooks',
               'numpy.f2py.cfuncs.commonhooks',
               'numpy.f2py.common_rules.__version__',
               'numpy.f2py.common_rules.f2py_version',
               'numpy.f2py.common_rules.errmess',
               'numpy.f2py.common_rules.outmess',
               'numpy.f2py.common_rules.show',
               'numpy.f2py.__all__',
               'numpy.f2py.run_main',
               'numpy.f2py.main',
               'numpy.f2py.test',
               'numpy.f2py.bench',
               'numpy.f2py.f2py2e.f2py_version',
               'numpy.f2py.f2py2e.errmess',
               'numpy.f2py.f2py2e.show',
               'numpy.f2py.f2py2e.outmess',
               'numpy.f2py.f2py2e.numpy_version',
               'numpy.f2py.f2py2e.__usage__',
               'numpy.f2py.func2subr.__version__',
               'numpy.f2py.func2subr.f2py_version',
               'numpy.f2py.func2subr.errmess',
               'numpy.f2py.func2subr.outmess',
               'numpy.f2py.func2subr.show',
               'numpy.f2py.rules.__version__',
               'numpy.f2py.rules.f2py_version',
               'numpy.f2py.rules.errmess',
               'numpy.f2py.rules.outmess',
               'numpy.f2py.rules.show',
               'numpy.f2py.rules.options',
               'numpy.f2py.rules.sepdict',
               'numpy.f2py.rules.k',
               'numpy.f2py.rules.module_rules',
               'numpy.f2py.rules.defmod_rules',
               'numpy.f2py.rules.routine_rules',
               'numpy.f2py.rules.rout_rules',
               'numpy.f2py.rules.typedef_need_dict',
               'numpy.f2py.rules.aux_rules',
               'numpy.f2py.rules.arg_rules',
               'numpy.f2py.rules.check_rules',
               'numpy.f2py.rules.stnd',
               'numpy.f2py.cb_rules.__version__',
               'numpy.f2py.cb_rules.f2py_version',
               'numpy.f2py.cb_rules.errmess',
               'numpy.f2py.cb_rules.outmess',
               'numpy.f2py.cb_rules.show',
               'numpy.f2py.cb_rules.cb_routine_rules',
               'numpy.f2py.cb_rules.cb_rout_rules',
               'numpy.f2py.cb_rules.cb_arg_rules',
               'numpy.f2py.cb_rules.cb_map',
               'numpy.f2py.__version__.major',
               'numpy.f2py.__version__.version_info',
               'numpy.f2py.__version__.version',
               'numpy.f2py.__version__.version',
               'numpy.f2py.auxfuncs.__version__',
               'numpy.f2py.auxfuncs.f2py_version',
               'numpy.f2py.auxfuncs.errmess',
               'numpy.f2py.auxfuncs.show',
               'numpy.f2py.auxfuncs.options',
               'numpy.f2py.auxfuncs.debugoptions',
               'numpy.f2py.auxfuncs.wrapfuncs',
               'numpy.f2py.auxfuncs.isintent_dict',
               'numpy.f2py.setupscons.__version__',
               'numpy.f2py.setupscons.config',
               'numpy.f2py.setupscons.version',
               'numpy.f2py.setupscons.config',
               'numpy.f2py.f90mod_rules.__version__',
               'numpy.f2py.f90mod_rules.f2py_version',
               'numpy.f2py.f90mod_rules.errmess',
               'numpy.f2py.f90mod_rules.outmess',
               'numpy.f2py.f90mod_rules.show',
               'numpy.f2py.f90mod_rules.options',
               'numpy.f2py.f90mod_rules.fgetdims1',
               'numpy.f2py.f90mod_rules.fgetdims2',
               'numpy.f2py.f90mod_rules.fgetdims2_sa',
               'numpy.f2py.use_rules.__version__',
               'numpy.f2py.use_rules.f2py_version',
               'numpy.f2py.use_rules.errmess',
               'numpy.f2py.use_rules.outmess',
               'numpy.f2py.use_rules.show',
               'numpy.f2py.use_rules.usemodule_rules',
               'numpy.f2py.info.postpone_import',
               'numpy.f2py.setup.__version__',
               'numpy.f2py.setup.config',
               'numpy.f2py.setup.version',
               'numpy.f2py.setup.config',
               'numpy.f2py.crackfortran.__version__',
               'numpy.f2py.crackfortran.f2py_version',
               'numpy.f2py.crackfortran.strictf77',
               'numpy.f2py.crackfortran.sourcecodeform',
               'numpy.f2py.crackfortran.quiet',
               'numpy.f2py.crackfortran.verbose',
               'numpy.f2py.crackfortran.tabchar',
               'numpy.f2py.crackfortran.pyffilename',
               'numpy.f2py.crackfortran.f77modulename',
               'numpy.f2py.crackfortran.skipemptyends',
               'numpy.f2py.crackfortran.ignorecontains',
               'numpy.f2py.crackfortran.dolowercase',
               'numpy.f2py.crackfortran.debug',
               'numpy.f2py.crackfortran.groupcounter',
               'numpy.f2py.crackfortran.grouplist',
               'numpy.f2py.crackfortran.neededmodule',
               'numpy.f2py.crackfortran.expectbegin',
               'numpy.f2py.crackfortran.skipblocksuntil',
               'numpy.f2py.crackfortran.usermodules',
               'numpy.f2py.crackfortran.f90modulevars',
               'numpy.f2py.crackfortran.gotnextfile',
               'numpy.f2py.crackfortran.filepositiontext',
               'numpy.f2py.crackfortran.currentfilename',
               'numpy.f2py.crackfortran.skipfunctions',
               'numpy.f2py.crackfortran.skipfuncs',
               'numpy.f2py.crackfortran.onlyfuncs',
               'numpy.f2py.crackfortran.include_paths',
               'numpy.f2py.crackfortran.previous_context',
               'numpy.f2py.crackfortran.errmess',
               'numpy.f2py.crackfortran.defaultimplicitrules',
               'numpy.f2py.crackfortran.c',
               'numpy.f2py.crackfortran.c',
               'numpy.f2py.crackfortran.c',
               'numpy.f2py.crackfortran.badnames',
               'numpy.f2py.crackfortran.invbadnames',
               'numpy.f2py.crackfortran.n',
               'numpy.f2py.crackfortran.is_f_file',
               'numpy.f2py.crackfortran._has_f_header',
               'numpy.f2py.crackfortran._has_f90_header',
               'numpy.f2py.crackfortran._has_fix_header',
               'numpy.f2py.crackfortran._free_f90_start',
               'numpy.f2py.crackfortran.beforethisafter',
               'numpy.f2py.crackfortran.fortrantypes',
               'numpy.f2py.crackfortran.typespattern',
               'numpy.f2py.crackfortran.typespattern4implicit',
               'numpy.f2py.crackfortran.functionpattern',
               'numpy.f2py.crackfortran.subroutinepattern',
               'numpy.f2py.crackfortran.groupbegins77',
               'numpy.f2py.crackfortran.beginpattern77',
               'numpy.f2py.crackfortran.groupbegins90',
               'numpy.f2py.crackfortran.beginpattern90',
               'numpy.f2py.crackfortran.groupends',
               'numpy.f2py.crackfortran.endpattern',
               'numpy.f2py.crackfortran.endifs',
               'numpy.f2py.crackfortran.endifpattern',
               'numpy.f2py.crackfortran.implicitpattern',
               'numpy.f2py.crackfortran.dimensionpattern',
               'numpy.f2py.crackfortran.externalpattern',
               'numpy.f2py.crackfortran.optionalpattern',
               'numpy.f2py.crackfortran.requiredpattern',
               'numpy.f2py.crackfortran.publicpattern',
               'numpy.f2py.crackfortran.privatepattern',
               'numpy.f2py.crackfortran.intrisicpattern',
               'numpy.f2py.crackfortran.intentpattern',
               'numpy.f2py.crackfortran.parameterpattern',
               'numpy.f2py.crackfortran.datapattern',
               'numpy.f2py.crackfortran.callpattern',
               'numpy.f2py.crackfortran.entrypattern',
               'numpy.f2py.crackfortran.callfunpattern',
               'numpy.f2py.crackfortran.commonpattern',
               'numpy.f2py.crackfortran.usepattern',
               'numpy.f2py.crackfortran.containspattern',
               'numpy.f2py.crackfortran.formatpattern',
               'numpy.f2py.crackfortran.f2pyenhancementspattern',
               'numpy.f2py.crackfortran.multilinepattern',
               'numpy.f2py.crackfortran.crackline_re_1',
               'numpy.f2py.crackfortran.selectpattern',
               'numpy.f2py.crackfortran.nameargspattern',
               'numpy.f2py.crackfortran.callnameargspattern',
               'numpy.f2py.crackfortran.real16pattern',
               'numpy.f2py.crackfortran.real8pattern',
               'numpy.f2py.crackfortran._intentcallbackpattern',
               'numpy.f2py.crackfortran.namepattern',
               'numpy.f2py.crackfortran.kindselector',
               'numpy.f2py.crackfortran.charselector',
               'numpy.f2py.crackfortran.lenkindpattern',
               'numpy.f2py.crackfortran.lenarraypattern',
               'numpy.f2py.crackfortran.getlincoef_re_1',
               'numpy.f2py.crackfortran._varname_match',
               'numpy.f2py.crackfortran.word_pattern',
               'numpy.f2py.crackfortran._is_kind_number',
               'numpy.f2py.crackfortran.analyzeargs_re_1',
               'numpy.f2py.crackfortran.determineexprtype_re_1',
               'numpy.f2py.crackfortran.determineexprtype_re_2',
               'numpy.f2py.crackfortran.determineexprtype_re_3',
               'numpy.f2py.crackfortran.determineexprtype_re_4',
               'numpy.f2py.crackfortran.determineexprtype_re_5',
               'numpy.f2py.crackfortran.files',
               'numpy.f2py.crackfortran.funcs',
               'numpy.f2py.crackfortran.f',
               'numpy.f2py.crackfortran.f2',
               'numpy.f2py.crackfortran.f3',
               'numpy.f2py.crackfortran.showblocklist',
               'numpy.f2py.crackfortran.l',
               'numpy.f2py.crackfortran.f',
               'numpy.f2py.crackfortran.quiet',
               'numpy.f2py.crackfortran.verbose',
               'numpy.f2py.crackfortran.verbose',
               'numpy.f2py.crackfortran.quiet',
               'numpy.f2py.crackfortran.skipemptyends',
               'numpy.f2py.crackfortran.sourcecodeform',
               'numpy.f2py.crackfortran.skipemptyends',
               'numpy.f2py.crackfortran.ignorecontains',
               'numpy.f2py.crackfortran.strictf77',
               'numpy.f2py.crackfortran.sourcecodeform',
               'numpy.f2py.crackfortran.strictf77',
               'numpy.f2py.crackfortran.sourcecodeform',
               'numpy.f2py.crackfortran.skipemptyends',
               'numpy.f2py.crackfortran.f2',
               'numpy.f2py.crackfortran.showblocklist',
               'numpy.f2py.crackfortran.f3',
               'numpy.f2py.crackfortran.f2',
               'numpy.f2py.crackfortran.pyffilename',
               'numpy.f2py.crackfortran.f3',
               'numpy.f2py.crackfortran.f77modulename',
               'numpy.f2py.crackfortran.detail',
               'numpy.f2py.crackfortran.postlist',
               'numpy.f2py.crackfortran.pyf',
               'numpy.f2py.crackfortran.f',
               'setup_example.ext1',
               'setup_example.ext2',
               'util._module_dir',
               'util._compiler_status',
               'test_array_from_pyobj.wrap',
               'test_array_from_pyobj.intent',
               'test_array_from_pyobj.t',
               'paramiko.sftp.CMD_INIT',
               'paramiko.sftp.CMD_VERSION',
               'paramiko.sftp.CMD_OPEN',
               'paramiko.sftp.CMD_CLOSE',
               'paramiko.sftp.CMD_READ',
               'paramiko.sftp.CMD_WRITE',
               'paramiko.sftp.CMD_LSTAT',
               'paramiko.sftp.CMD_FSTAT',
               'paramiko.sftp.CMD_SETSTAT',
               'paramiko.sftp.CMD_FSETSTAT',
               'paramiko.sftp.CMD_OPENDIR',
               'paramiko.sftp.CMD_READDIR',
               'paramiko.sftp.CMD_REMOVE',
               'paramiko.sftp.CMD_MKDIR',
               'paramiko.sftp.CMD_RMDIR',
               'paramiko.sftp.CMD_REALPATH',
               'paramiko.sftp.CMD_STAT',
               'paramiko.sftp.CMD_RENAME',
               'paramiko.sftp.CMD_READLINK',
               'paramiko.sftp.CMD_SYMLINK',
               'paramiko.sftp.CMD_STATUS',
               'paramiko.sftp.CMD_HANDLE',
               'paramiko.sftp.CMD_DATA',
               'paramiko.sftp.CMD_NAME',
               'paramiko.sftp.CMD_ATTRS',
               'paramiko.sftp.CMD_EXTENDED',
               'paramiko.sftp.CMD_EXTENDED_REPLY',
               'paramiko.sftp.SFTP_OK',
               'paramiko.sftp.SFTP_EOF',
               'paramiko.sftp.SFTP_NO_SUCH_FILE',
               'paramiko.sftp.SFTP_PERMISSION_DENIED',
               'paramiko.sftp.SFTP_FAILURE',
               'paramiko.sftp.SFTP_BAD_MESSAGE',
               'paramiko.sftp.SFTP_NO_CONNECTION',
               'paramiko.sftp.SFTP_CONNECTION_LOST',
               'paramiko.sftp.SFTP_OP_UNSUPPORTED',
               'paramiko.sftp.SFTP_DESC',
               'paramiko.sftp.SFTP_FLAG_READ',
               'paramiko.sftp.SFTP_FLAG_WRITE',
               'paramiko.sftp.SFTP_FLAG_APPEND',
               'paramiko.sftp.SFTP_FLAG_CREATE',
               'paramiko.sftp.SFTP_FLAG_TRUNC',
               'paramiko.sftp.SFTP_FLAG_EXCL',
               'paramiko.sftp._VERSION',
               'paramiko.sftp.CMD_NAMES',
               'paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST_OLD',
               'paramiko.kex_gex._MSG_KEXDH_GEX_GROUP',
               'paramiko.kex_gex._MSG_KEXDH_GEX_INIT',
               'paramiko.kex_gex._MSG_KEXDH_GEX_REPLY',
               'paramiko.kex_gex._MSG_KEXDH_GEX_REQUEST',
               'paramiko.util._g_thread_ids',
               'paramiko.util._g_thread_counter',
               'paramiko.util._g_thread_lock',
               'paramiko.util._pfilter',
               'paramiko.__author__',
               'paramiko.__version__',
               'paramiko.__license__',
               'paramiko.c',
               'paramiko.c',
               'paramiko.__all__',
               'paramiko.channel.MIN_PACKET_SIZE',
               'paramiko.sftp_server._hash_class',
               'paramiko.packet.got_r_hmac',
               'paramiko.packet.got_r_hmac',
               'paramiko.config.SSH_PORT',
               'paramiko.config.proxy_re',
               'paramiko.agent.SSH2_AGENTC_REQUEST_IDENTITIES',
               'paramiko.agent.SSH2_AGENT_IDENTITIES_ANSWER',
               'paramiko.agent.SSH2_AGENTC_SIGN_REQUEST',
               'paramiko.agent.SSH2_AGENT_SIGN_RESPONSE',
               'paramiko.logging22.DEBUG',
               'paramiko.logging22.INFO',
               'paramiko.logging22.WARNING',
               'paramiko.logging22.ERROR',
               'paramiko.logging22.CRITICAL',
               'paramiko.logging22._logger',
               'paramiko.kex_group1._MSG_KEXDH_INIT',
               'paramiko.kex_group1._MSG_KEXDH_REPLY',
               'paramiko.kex_group1.P',
               'paramiko.kex_group1.G',
               'paramiko.client.SSH_PORT',
               'paramiko.resource.ResourceManager',
               'paramiko.common.MSG_DISCONNECT',
               'paramiko.common.MSG_IGNORE',
               'paramiko.common.MSG_UNIMPLEMENTED',
               'paramiko.common.MSG_DEBUG',
               'paramiko.common.MSG_SERVICE_REQUEST',
               'paramiko.common.MSG_SERVICE_ACCEPT',
               'paramiko.common.MSG_KEXINIT',
               'paramiko.common.MSG_NEWKEYS',
               'paramiko.common.MSG_USERAUTH_REQUEST',
               'paramiko.common.MSG_USERAUTH_FAILURE',
               'paramiko.common.MSG_USERAUTH_SUCCESS',
               'paramiko.common.MSG_USERAUTH_BANNER',
               'paramiko.common.MSG_USERAUTH_PK_OK',
               'paramiko.common.MSG_USERAUTH_INFO_REQUEST',
               'paramiko.common.MSG_USERAUTH_INFO_RESPONSE',
               'paramiko.common.MSG_GLOBAL_REQUEST',
               'paramiko.common.MSG_REQUEST_SUCCESS',
               'paramiko.common.MSG_REQUEST_FAILURE',
               'paramiko.common.MSG_CHANNEL_OPEN',
               'paramiko.common.MSG_CHANNEL_OPEN_SUCCESS',
               'paramiko.common.MSG_CHANNEL_OPEN_FAILURE',
               'paramiko.common.MSG_CHANNEL_WINDOW_ADJUST',
               'paramiko.common.MSG_CHANNEL_DATA',
               'paramiko.common.MSG_CHANNEL_EXTENDED_DATA',
               'paramiko.common.MSG_CHANNEL_EOF',
               'paramiko.common.MSG_CHANNEL_CLOSE',
               'paramiko.common.MSG_CHANNEL_REQUEST',
               'paramiko.common.MSG_CHANNEL_SUCCESS',
               'paramiko.common.MSG_CHANNEL_FAILURE',
               'paramiko.common.MSG_NAMES',
               'paramiko.common.AUTH_SUCCESSFUL',
               'paramiko.common.AUTH_PARTIALLY_SUCCESSFUL',
               'paramiko.common.AUTH_FAILED',
               'paramiko.common.OPEN_SUCCEEDED',
               'paramiko.common.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED',
               'paramiko.common.OPEN_FAILED_CONNECT_FAILED',
               'paramiko.common.OPEN_FAILED_UNKNOWN_CHANNEL_TYPE',
               'paramiko.common.OPEN_FAILED_RESOURCE_SHORTAGE',
               'paramiko.common.CONNECTION_FAILED_CODE',
               'paramiko.common.DISCONNECT_SERVICE_NOT_AVAILABLE',
               'paramiko.common.DISCONNECT_AUTH_CANCELLED_BY_USER',
               'paramiko.common.DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE',
               'paramiko.common.rng',
               'paramiko.common.PY22',
               'paramiko.common.timeout',
               'paramiko.common.PY22',
               'paramiko.common.DEBUG',
               'paramiko.common.INFO',
               'paramiko.common.WARNING',
               'paramiko.common.ERROR',
               'paramiko.common.CRITICAL',
               'paramiko.common.io_sleep',
               'paramiko.win_pageant._has_win32all',
               'paramiko.win_pageant._has_ctypes',
               'paramiko.win_pageant._has_win32all',
               'paramiko.win_pageant._has_ctypes',
               'paramiko.win_pageant._AGENT_COPYDATA_ID',
               'paramiko.win_pageant._AGENT_MAX_MSGLEN',
               'paramiko.win_pageant.win32con_WM_COPYDATA',
               'paramiko.win_pageant.ULONG_PTR',
               'serial.serialcli.sab',
               'serial.serialcli.s',
               'serial.serialcli.s',
               'serial.sermsdos.BAUD_RATES',
               'serial.sermsdos.PARITY_NONE',
               'serial.sermsdos.PARITY_EVEN',
               'serial.sermsdos.PARITY_ODD',
               'serial.sermsdos.PARITY_MARK',
               'serial.sermsdos.PARITY_SPACE',
               'serial.sermsdos.STOPBITS_ONE',
               'serial.sermsdos.STOPBITS_ONEANDAHALF',
               'serial.sermsdos.STOPBITS_TWO',
               'serial.sermsdos.FIVEBITS',
               'serial.sermsdos.SIXBITS',
               'serial.sermsdos.SEVENBITS',
               'serial.sermsdos.EIGHTBITS',
               'serial.sermsdos.RETURN_ERROR',
               'serial.sermsdos.RETURN_BUSY',
               'serial.sermsdos.RETURN_RETRY',
               'serial.sermsdos.RETURN_READY',
               'serial.sermsdos.RETURN_NONE',
               'serial.sermsdos.portNotOpenError',
               'serial.sermsdos.s',
               'serial.VERSION',
               'serial.protocol_handler_packages',
               'serial.serialwin32.s',
               'serial.serialwin32.s',
               'serial.serialjava.comm',
               'serial.serialjava.s',
               'serial.serialjava.s',
               'serial.serialposix.TERMIOS',
               'serial.serialposix.FCNTL',
               'serial.serialposix.plat',
               'serial.serialposix.ASYNC_SPD_MASK',
               'serial.serialposix.ASYNC_SPD_CUST',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.version',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.baudrate_constants',
               'serial.serialposix.TIOCMGET',
               'serial.serialposix.TIOCMBIS',
               'serial.serialposix.TIOCMBIC',
               'serial.serialposix.TIOCMSET',
               'serial.serialposix.TIOCM_DTR',
               'serial.serialposix.TIOCM_RTS',
               'serial.serialposix.TIOCM_CTS',
               'serial.serialposix.TIOCM_CAR',
               'serial.serialposix.TIOCM_RNG',
               'serial.serialposix.TIOCM_DSR',
               'serial.serialposix.TIOCM_CD',
               'serial.serialposix.TIOCM_RI',
               'serial.serialposix.TIOCINQ',
               'serial.serialposix.TIOCM_zero_str',
               'serial.serialposix.TIOCM_RTS_str',
               'serial.serialposix.TIOCM_DTR_str',
               'serial.serialposix.TIOCSBRK',
               'serial.serialposix.TIOCCBRK',
               'serial.serialposix.s',
               'serial.serialposix.s',
               'serial.rfc2217.LOGGER_LEVELS',
               'serial.rfc2217.IAC',
               'serial.rfc2217.DONT',
               'serial.rfc2217.DO',
               'serial.rfc2217.WONT',
               'serial.rfc2217.WILL',
               'serial.rfc2217.IAC_DOUBLED',
               'serial.rfc2217.SE',
               'serial.rfc2217.NOP',
               'serial.rfc2217.DM',
               'serial.rfc2217.BRK',
               'serial.rfc2217.IP',
               'serial.rfc2217.AO',
               'serial.rfc2217.AYT',
               'serial.rfc2217.EC',
               'serial.rfc2217.EL',
               'serial.rfc2217.GA',
               'serial.rfc2217.SB',
               'serial.rfc2217.BINARY',
               'serial.rfc2217.ECHO',
               'serial.rfc2217.SGA',
               'serial.rfc2217.COM_PORT_OPTION',
               'serial.rfc2217.SET_BAUDRATE',
               'serial.rfc2217.SET_DATASIZE',
               'serial.rfc2217.SET_PARITY',
               'serial.rfc2217.SET_STOPSIZE',
               'serial.rfc2217.SET_CONTROL',
               'serial.rfc2217.NOTIFY_LINESTATE',
               'serial.rfc2217.NOTIFY_MODEMSTATE',
               'serial.rfc2217.FLOWCONTROL_SUSPEND',
               'serial.rfc2217.FLOWCONTROL_RESUME',
               'serial.rfc2217.SET_LINESTATE_MASK',
               'serial.rfc2217.SET_MODEMSTATE_MASK',
               'serial.rfc2217.PURGE_DATA',
               'serial.rfc2217.SERVER_SET_BAUDRATE',
               'serial.rfc2217.SERVER_SET_DATASIZE',
               'serial.rfc2217.SERVER_SET_PARITY',
               'serial.rfc2217.SERVER_SET_STOPSIZE',
               'serial.rfc2217.SERVER_SET_CONTROL',
               'serial.rfc2217.SERVER_NOTIFY_LINESTATE',
               'serial.rfc2217.SERVER_NOTIFY_MODEMSTATE',
               'serial.rfc2217.SERVER_FLOWCONTROL_SUSPEND',
               'serial.rfc2217.SERVER_FLOWCONTROL_RESUME',
               'serial.rfc2217.SERVER_SET_LINESTATE_MASK',
               'serial.rfc2217.SERVER_SET_MODEMSTATE_MASK',
               'serial.rfc2217.SERVER_PURGE_DATA',
               'serial.rfc2217.RFC2217_ANSWER_MAP',
               'serial.rfc2217.SET_CONTROL_REQ_FLOW_SETTING',
               'serial.rfc2217.SET_CONTROL_USE_NO_FLOW_CONTROL',
               'serial.rfc2217.SET_CONTROL_USE_SW_FLOW_CONTROL',
               'serial.rfc2217.SET_CONTROL_USE_HW_FLOW_CONTROL',
               'serial.rfc2217.SET_CONTROL_REQ_BREAK_STATE',
               'serial.rfc2217.SET_CONTROL_BREAK_ON',
               'serial.rfc2217.SET_CONTROL_BREAK_OFF',
               'serial.rfc2217.SET_CONTROL_REQ_DTR',
               'serial.rfc2217.SET_CONTROL_DTR_ON',
               'serial.rfc2217.SET_CONTROL_DTR_OFF',
               'serial.rfc2217.SET_CONTROL_REQ_RTS',
               'serial.rfc2217.SET_CONTROL_RTS_ON',
               'serial.rfc2217.SET_CONTROL_RTS_OFF',
               'serial.rfc2217.SET_CONTROL_REQ_FLOW_SETTING_IN',
               'serial.rfc2217.SET_CONTROL_USE_NO_FLOW_CONTROL_IN',
               'serial.rfc2217.SET_CONTROL_USE_SW_FLOW_CONTOL_IN',
               'serial.rfc2217.SET_CONTROL_USE_HW_FLOW_CONTOL_IN',
               'serial.rfc2217.SET_CONTROL_USE_DCD_FLOW_CONTROL',
               'serial.rfc2217.SET_CONTROL_USE_DTR_FLOW_CONTROL',
               'serial.rfc2217.SET_CONTROL_USE_DSR_FLOW_CONTROL',
               'serial.rfc2217.LINESTATE_MASK_TIMEOUT',
               'serial.rfc2217.LINESTATE_MASK_SHIFTREG_EMPTY',
               'serial.rfc2217.LINESTATE_MASK_TRANSREG_EMPTY',
               'serial.rfc2217.LINESTATE_MASK_BREAK_DETECT',
               'serial.rfc2217.LINESTATE_MASK_FRAMING_ERROR',
               'serial.rfc2217.LINESTATE_MASK_PARTIY_ERROR',
               'serial.rfc2217.LINESTATE_MASK_OVERRUN_ERROR',
               'serial.rfc2217.LINESTATE_MASK_DATA_READY',
               'serial.rfc2217.MODEMSTATE_MASK_CD',
               'serial.rfc2217.MODEMSTATE_MASK_RI',
               'serial.rfc2217.MODEMSTATE_MASK_DSR',
               'serial.rfc2217.MODEMSTATE_MASK_CTS',
               'serial.rfc2217.MODEMSTATE_MASK_CD_CHANGE',
               'serial.rfc2217.MODEMSTATE_MASK_RI_CHANGE',
               'serial.rfc2217.MODEMSTATE_MASK_DSR_CHANGE',
               'serial.rfc2217.MODEMSTATE_MASK_CTS_CHANGE',
               'serial.rfc2217.PURGE_RECEIVE_BUFFER',
               'serial.rfc2217.PURGE_TRANSMIT_BUFFER',
               'serial.rfc2217.PURGE_BOTH_BUFFERS',
               'serial.rfc2217.RFC2217_PARITY_MAP',
               'serial.rfc2217.RFC2217_REVERSE_PARITY_MAP',
               'serial.rfc2217.k',
               'serial.rfc2217.v',
               'serial.rfc2217.RFC2217_STOPBIT_MAP',
               'serial.rfc2217.RFC2217_REVERSE_STOPBIT_MAP',
               'serial.rfc2217.k',
               'serial.rfc2217.v',
               'serial.rfc2217.M_NORMAL',
               'serial.rfc2217.M_IAC_SEEN',
               'serial.rfc2217.M_NEGOTIATE',
               'serial.rfc2217.REQUESTED',
               'serial.rfc2217.ACTIVE',
               'serial.rfc2217.INACTIVE',
               'serial.rfc2217.REALLY_INACTIVE',
               'serial.rfc2217.s',
               'serial.win32._stdcall_libraries',
               'serial.win32.INVALID_HANDLE_VALUE',
               'serial.win32.ULONG_PTR',
               'serial.win32.ULONG_PTR',
               'serial.win32.LPSECURITY_ATTRIBUTES',
               'serial.win32.CreateEventW',
               'serial.win32.CreateEventA',
               'serial.win32.CreateEvent',
               'serial.win32.CreateFileA',
               'serial.win32.CreateFile',
               'serial.win32.CreateEvent',
               'serial.win32.CreateFileW',
               'serial.win32.CreateFile',
               'serial.win32.OVERLAPPED',
               'serial.win32.COMSTAT',
               'serial.win32.DCB',
               'serial.win32.COMMTIMEOUTS',
               'serial.win32.GetLastError',
               'serial.win32.LPOVERLAPPED',
               'serial.win32.LPDWORD',
               'serial.win32.GetOverlappedResult',
               'serial.win32.ResetEvent',
               'serial.win32.LPCVOID',
               'serial.win32.WriteFile',
               'serial.win32.LPVOID',
               'serial.win32.ReadFile',
               'serial.win32.CloseHandle',
               'serial.win32.ClearCommBreak',
               'serial.win32.LPCOMSTAT',
               'serial.win32.ClearCommError',
               'serial.win32.SetupComm',
               'serial.win32.EscapeCommFunction',
               'serial.win32.GetCommModemStatus',
               'serial.win32.LPDCB',
               'serial.win32.GetCommState',
               'serial.win32.LPCOMMTIMEOUTS',
               'serial.win32.GetCommTimeouts',
               'serial.win32.PurgeComm',
               'serial.win32.SetCommBreak',
               'serial.win32.SetCommMask',
               'serial.win32.SetCommState',
               'serial.win32.SetCommTimeouts',
               'serial.win32.WaitForSingleObject',
               'serial.win32.ONESTOPBIT',
               'serial.win32.TWOSTOPBITS',
               'serial.win32.ONE5STOPBITS',
               'serial.win32.NOPARITY',
               'serial.win32.ODDPARITY',
               'serial.win32.EVENPARITY',
               'serial.win32.MARKPARITY',
               'serial.win32.SPACEPARITY',
               'serial.win32.RTS_CONTROL_HANDSHAKE',
               'serial.win32.RTS_CONTROL_DISABLE',
               'serial.win32.RTS_CONTROL_ENABLE',
               'serial.win32.RTS_CONTROL_TOGGLE',
               'serial.win32.SETRTS',
               'serial.win32.CLRRTS',
               'serial.win32.DTR_CONTROL_HANDSHAKE',
               'serial.win32.DTR_CONTROL_DISABLE',
               'serial.win32.DTR_CONTROL_ENABLE',
               'serial.win32.SETDTR',
               'serial.win32.CLRDTR',
               'serial.win32.MS_DSR_ON',
               'serial.win32.EV_RING',
               'serial.win32.EV_PERR',
               'serial.win32.EV_ERR',
               'serial.win32.SETXOFF',
               'serial.win32.EV_RXCHAR',
               'serial.win32.GENERIC_WRITE',
               'serial.win32.PURGE_TXCLEAR',
               'serial.win32.FILE_FLAG_OVERLAPPED',
               'serial.win32.EV_DSR',
               'serial.win32.MAXDWORD',
               'serial.win32.EV_RLSD',
               'serial.win32.ERROR_IO_PENDING',
               'serial.win32.MS_CTS_ON',
               'serial.win32.EV_EVENT1',
               'serial.win32.EV_RX80FULL',
               'serial.win32.PURGE_RXABORT',
               'serial.win32.FILE_ATTRIBUTE_NORMAL',
               'serial.win32.PURGE_TXABORT',
               'serial.win32.SETXON',
               'serial.win32.OPEN_EXISTING',
               'serial.win32.MS_RING_ON',
               'serial.win32.EV_TXEMPTY',
               'serial.win32.EV_RXFLAG',
               'serial.win32.MS_RLSD_ON',
               'serial.win32.GENERIC_READ',
               'serial.win32.EV_EVENT2',
               'serial.win32.EV_CTS',
               'serial.win32.EV_BREAK',
               'serial.win32.PURGE_RXCLEAR',
               'serial.win32.INFINITE',
               'serial.win32.PVOID',
               'serial.win32.__all__',
               'serial.serialutil.bytes',
               'serial.serialutil.XON',
               'serial.serialutil.XOFF',
               'serial.serialutil.CR',
               'serial.serialutil.LF',
               'serial.serialutil.PARITY_NONE',
               'serial.serialutil.PARITY_EVEN',
               'serial.serialutil.PARITY_ODD',
               'serial.serialutil.PARITY_MARK',
               'serial.serialutil.PARITY_SPACE',
               'serial.serialutil.STOPBITS_ONE',
               'serial.serialutil.STOPBITS_ONE_POINT_FIVE',
               'serial.serialutil.STOPBITS_TWO',
               'serial.serialutil.FIVEBITS',
               'serial.serialutil.SIXBITS',
               'serial.serialutil.SEVENBITS',
               'serial.serialutil.EIGHTBITS',
               'serial.serialutil.PARITY_NAMES',
               'serial.serialutil.writeTimeoutError',
               'serial.serialutil.portNotOpenError',
               'serial.serialutil.s',
               'serial.urlhandler.protocol_hwgrep.s',
               'serial.urlhandler.protocol_loop.LOGGER_LEVELS',
               'serial.urlhandler.protocol_loop.s',
               'serial.urlhandler.protocol_socket.LOGGER_LEVELS',
               'serial.urlhandler.protocol_socket.s',
               'serial.tools.list_ports_posix.plat',
               'serial.tools.list_ports_posix.port',
               'serial.tools.list_ports_posix.desc',
               'serial.tools.list_ports_posix.hwid',
               'serial.tools.miniterm.EXITCHARCTER',
               'serial.tools.miniterm.MENUCHARACTER',
               'serial.tools.miniterm.console',
               'serial.tools.miniterm.console',
               'serial.tools.miniterm.CONVERT_CRLF',
               'serial.tools.miniterm.CONVERT_CR',
               'serial.tools.miniterm.CONVERT_LF',
               'serial.tools.miniterm.NEWLINE_CONVERISON_MAP',
               'serial.tools.miniterm.LF_MODES',
               'serial.tools.miniterm.REPR_MODES',
               'serial.tools.list_ports_windows.NULL',
               'serial.tools.list_ports_windows.HDEVINFO',
               'serial.tools.list_ports_windows.PCTSTR',
               'serial.tools.list_ports_windows.CHAR',
               'serial.tools.list_ports_windows.LPDWORD',
               'serial.tools.list_ports_windows.PDWORD',
               'serial.tools.list_ports_windows.LPBYTE',
               'serial.tools.list_ports_windows.PBYTE',
               'serial.tools.list_ports_windows.PHKEY',
               'serial.tools.list_ports_windows.ACCESS_MASK',
               'serial.tools.list_ports_windows.REGSAM',
               'serial.tools.list_ports_windows.PSP_DEVINFO_DATA',
               'serial.tools.list_ports_windows.PSP_DEVICE_INTERFACE_DATA',
               'serial.tools.list_ports_windows.PSP_DEVICE_INTERFACE_DETAIL_DATA',
               'serial.tools.list_ports_windows.setupapi',
               'serial.tools.list_ports_windows.SetupDiDestroyDeviceInfoList',
               'serial.tools.list_ports_windows.SetupDiGetClassDevs',
               'serial.tools.list_ports_windows.SetupDiEnumDeviceInterfaces',
               'serial.tools.list_ports_windows.SetupDiGetDeviceInterfaceDetail',
               'serial.tools.list_ports_windows.SetupDiGetDeviceRegistryProperty',
               'serial.tools.list_ports_windows.SetupDiOpenDevRegKey',
               'serial.tools.list_ports_windows.advapi32',
               'serial.tools.list_ports_windows.RegCloseKey',
               'serial.tools.list_ports_windows.RegQueryValueEx',
               'serial.tools.list_ports_windows.GUID_CLASS_COMPORT',
               'serial.tools.list_ports_windows.DIGCF_PRESENT',
               'serial.tools.list_ports_windows.DIGCF_DEVICEINTERFACE',
               'serial.tools.list_ports_windows.INVALID_HANDLE_VALUE',
               'serial.tools.list_ports_windows.ERROR_INSUFFICIENT_BUFFER',
               'serial.tools.list_ports_windows.SPDRP_HARDWAREID',
               'serial.tools.list_ports_windows.SPDRP_FRIENDLYNAME',
               'serial.tools.list_ports_windows.ERROR_NO_MORE_ITEMS',
               'serial.tools.list_ports_windows.DICS_FLAG_GLOBAL',
               'serial.tools.list_ports_windows.DIREG_DEV',
               'serial.tools.list_ports_windows.KEY_READ',
               'serial.tools.list_ports_windows.REG_SZ',
               'serial.tools.list_ports_windows.PortName',
               'serial.tools.list_ports_windows.port',
               'serial.tools.list_ports_windows.desc',
               'serial.tools.list_ports_windows.hwid'],
 'FUNCTIONS': [('mock.wraps', ['original'], ''),
               ('mock.wraps', ['func'], ''),
               ('mock.next', ['obj'], ''),
               ('mock._isidentifier', ['string'], ''),
               ('mock._is_instance_mock', ['obj'], ''),
               ('mock._is_exception', ['obj'], ''),
               ('mock._getsignature', ['func', 'skipfirst', 'instance=False'], ''),
               ('mock._check_signature', ['func', 'mock', 'skipfirst', 'instance=False'], ''),
               ('mock._copy_func_details', ['func', 'funcopy'], ''),
               ('mock._callable', ['obj'], ''),
               ('mock._is_list', ['obj'], ''),
               ('mock._instance_callable',
                ['obj'],
                'Given an object, return True if the object is callable.\n    For classes, return True if instances would be callable.'),
               ('mock._set_signature', ['mock', 'original', 'instance=False'], ''),
               ('mock._setup_func', ['funcopy', 'mock'], ''),
               ('mock._is_magic', ['name'], ''),
               ('mock._copy', ['value'], ''),
               ('mock._delegating_property', ['name'], ''),
               ('mock._check_and_set_parent', ['parent', 'value', 'name', 'new_name'], ''),
               ('mock._try_iter', ['obj'], ''),
               ('mock._dot_lookup', ['thing', 'comp', 'import_path'], ''),
               ('mock._importer', ['target'], ''),
               ('mock._is_started', ['patcher'], ''),
               ('mock._get_target', ['target'], ''),
               ('mock._patch_object',
                ['target',
                 'attribute',
                 'new=DEFAULT',
                 'spec=None',
                 'create=False',
                 'spec_set=None',
                 'autospec=None',
                 'new_callable=None',
                 '**kwargs'],
                '\n    patch.object(target, attribute, new=DEFAULT, spec=None, create=False,\n                 spec_set=None, autospec=None, new_callable=None, **kwargs)\n\n    patch the named member (`attribute`) on an object (`target`) with a mock\n    object.\n\n    `patch.object` can be used as a decorator, class decorator or a context\n    manager. Arguments `new`, `spec`, `create`, `spec_set`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. Like\n    `patch`, `patch.object` takes arbitrary keyword arguments for configuring\n    the mock object it creates.\n\n    When used as a class decorator `patch.object` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    '),
               ('mock._patch_multiple',
                ['target',
                 'spec=None',
                 'create=False',
                 'spec_set=None',
                 'autospec=None',
                 'new_callable=None',
                 '**kwargs'],
                "Perform multiple patches in a single call. It takes the object to be\n    patched (either as an object or a string to fetch the object by importing)\n    and keyword arguments for the patches::\n\n        with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):\n            ...\n\n    Use `DEFAULT` as the value if you want `patch.multiple` to create\n    mocks for you. In this case the created mocks are passed into a decorated\n    function by keyword, and a dictionary is returned when `patch.multiple` is\n    used as a context manager.\n\n    `patch.multiple` can be used as a decorator, class decorator or a context\n    manager. The arguments `spec`, `spec_set`, `create`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. These\n    arguments will be applied to *all* patches done by `patch.multiple`.\n\n    When used as a class decorator `patch.multiple` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    "),
               ('mock.patch',
                ['target',
                 'new=DEFAULT',
                 'spec=None',
                 'create=False',
                 'spec_set=None',
                 'autospec=None',
                 'new_callable=None',
                 '**kwargs'],
                '\n    `patch` acts as a function decorator, class decorator or a context\n    manager. Inside the body of the function or with statement, the `target`\n    is patched with a `new` object. When the function/with statement exits\n    the patch is undone.\n\n    If `new` is omitted, then the target is replaced with a\n    `MagicMock`. If `patch` is used as a decorator and `new` is\n    omitted, the created mock is passed in as an extra argument to the\n    decorated function. If `patch` is used as a context manager the created\n    mock is returned by the context manager.\n\n    `target` should be a string in the form `\'package.module.ClassName\'`. The\n    `target` is imported and the specified object replaced with the `new`\n    object, so the `target` must be importable from the environment you are\n    calling `patch` from. The target is imported when the decorated function\n    is executed, not at decoration time.\n\n    The `spec` and `spec_set` keyword arguments are passed to the `MagicMock`\n    if patch is creating one for you.\n\n    In addition you can pass `spec=True` or `spec_set=True`, which causes\n    patch to pass in the object being mocked as the spec/spec_set object.\n\n    `new_callable` allows you to specify a different class, or callable object,\n    that will be called to create the `new` object. By default `MagicMock` is\n    used.\n\n    A more powerful form of `spec` is `autospec`. If you set `autospec=True`\n    then the mock with be created with a spec from the object being replaced.\n    All attributes of the mock will also have the spec of the corresponding\n    attribute of the object being replaced. Methods and functions being\n    mocked will have their arguments checked and will raise a `TypeError` if\n    they are called with the wrong signature. For mocks replacing a class,\n    their return value (the \'instance\') will have the same spec as the class.\n\n    Instead of `autospec=True` you can pass `autospec=some_object` to use an\n    arbitrary object as the spec instead of the one being replaced.\n\n    By default `patch` will fail to replace attributes that don\'t exist. If\n    you pass in `create=True`, and the attribute doesn\'t exist, patch will\n    create the attribute for you when the patched function is called, and\n    delete it again afterwards. This is useful for writing tests against\n    attributes that your production code creates at runtime. It is off by by\n    default because it can be dangerous. With it switched on you can write\n    passing tests against APIs that don\'t actually exist!\n\n    Patch can be used as a `TestCase` class decorator. It works by\n    decorating each test method in the class. This reduces the boilerplate\n    code when your test methods share a common patchings set. `patch` finds\n    tests by looking for method names that start with `patch.TEST_PREFIX`.\n    By default this is `test`, which matches the way `unittest` finds tests.\n    You can specify an alternative prefix by setting `patch.TEST_PREFIX`.\n\n    Patch can be used as a context manager, with the with statement. Here the\n    patching applies to the indented block after the with statement. If you\n    use "as" then the patched object will be bound to the name after the\n    "as"; very useful if `patch` is creating a mock object for you.\n\n    `patch` takes arbitrary keyword arguments. These will be passed to\n    the `Mock` (or `new_callable`) on construction.\n\n    `patch.dict(...)`, `patch.multiple(...)` and `patch.object(...)` are\n    available for alternate use-cases.\n    '),
               ('mock._clear_dict', ['in_dict'], ''),
               ('mock._patch_stopall', [], 'Stop all active patches.'),
               ('mock._get_method',
                ['name', 'func'],
                'Turns a callable object (like a mock) into a real function'),
               ('mock._get_eq', ['self'], ''),
               ('mock._get_ne', ['self'], ''),
               ('mock._get_iter', ['self'], ''),
               ('mock._set_return_value', ['mock', 'method', 'name'], ''),
               ('mock._format_call_signature', ['name', 'args', 'kwargs'], ''),
               ('mock.create_autospec',
                ['spec',
                 'spec_set=False',
                 'instance=False',
                 '_parent=None',
                 '_name=None',
                 '**kwargs'],
                "Create a mock object using another object as a spec. Attributes on the\n    mock will use the corresponding attribute on the `spec` object as their\n    spec.\n\n    Functions or methods being mocked will have their arguments checked\n    to check that they are called with the correct signature.\n\n    If `spec_set` is True then attempting to set attributes that don't exist\n    on the spec object will raise an `AttributeError`.\n\n    If a class is used as a spec then the return value of the mock (the\n    instance of the class) will have the same spec. You can use a class as the\n    spec for an instance object by passing `instance=True`. The returned mock\n    will only be callable if instances of the mock are callable.\n\n    `create_autospec` also takes arbitrary keyword arguments that are passed to\n    the constructor of the created mock."),
               ('mock._must_skip', ['spec', 'entry', 'is_type'], ''),
               ('mock._get_class', ['obj'], ''),
               ('mock.mock_open',
                ['mock=None', "read_data=''"],
                '\n    A helper function to create a mock to replace the use of `open`. It works\n    for `open` called directly or used as a context manager.\n\n    The `mock` argument is the mock object to configure. If `None` (the\n    default) then a `MagicMock` will be created for you, with the API limited\n    to methods or attributes available on standard file handles.\n\n    `read_data` is a string for the `read` method of the file handle to return.\n    This is an empty string by default.\n    '),
               ('nose.pyversion.make_instancemethod', ['function', 'instance'], ''),
               ('nose.pyversion.make_instancemethod', ['function', 'instance'], ''),
               ('nose.pyversion.cmp_to_key',
                ['mycmp'],
                'Convert a cmp= function into a key= function'),
               ('nose.pyversion.sort_list', ['l', 'key', 'reverse=False'], ''),
               ('nose.pyversion.sort_list', ['l', 'key', 'reverse=False'], ''),
               ('nose.pyversion.unbound_method', ['cls', 'func'], ''),
               ('nose.pyversion.ismethod', ['obj'], ''),
               ('nose.pyversion.bytes_', ['s', "encoding='utf8'"], ''),
               ('nose.pyversion.bytes_', ['s', 'encoding=None'], ''),
               ('nose.core.run',
                ['*arg', '**kw'],
                "Collect and run tests, returning success or failure.\n\n    The arguments to `run()` are the same as to `main()`:\n\n    * module: All tests are in this module (default: None)\n    * defaultTest: Tests to load (default: '.')\n    * argv: Command line arguments (default: None; sys.argv is read)\n    * testRunner: Test runner instance (default: None)\n    * testLoader: Test loader instance (default: None)\n    * env: Environment; ignored if config is provided (default: None;\n      os.environ is read)\n    * config: :class:`nose.config.Config` instance (default: None)\n    * suite: Suite or list of tests to run (default: None). Passing a\n      suite or lists of tests will bypass all test discovery and\n      loading. *ALSO NOTE* that if you pass a unittest.TestSuite\n      instance as the suite, context fixtures at the class, module and\n      package level will not be used, and many plugin hooks will not\n      be called. If you want normal nose behavior, either pass a list\n      of tests, or a fully-configured :class:`nose.suite.ContextSuite`.\n    * plugins: List of plugins to use; ignored if config is provided\n      (default: load plugins with DefaultPluginManager)\n    * addplugins: List of **extra** plugins to use. Pass a list of plugin\n      instances in this argument to make custom plugins available while\n      still using the DefaultPluginManager.\n\n    With the exception that the ``exit`` argument is always set\n    to False.\n    "),
               ('nose.core.runmodule',
                ["name='__main__'", '**kw'],
                'Collect and run tests in a single module only. Defaults to running\n    tests in __main__. Additional arguments to TestProgram may be passed\n    as keyword arguments.\n    '),
               ('nose.core.collector',
                [],
                "TestSuite replacement entry point. Use anywhere you might use a\n    unittest.TestSuite. The collector will, by default, load options from\n    all config files and execute loader.loadTestsFromNames() on the\n    configured testNames, or '.' if no testNames are configured.\n    "),
               ('nose.commands.get_user_options',
                ['parser'],
                'convert a optparse option list into a distutils option tuple list'),
               ('nose.util.ls_tree',
                ["dir_path=''",
                 'skip_pattern=skip_pattern',
                 "indent='|-- '",
                 "branch_indent='|   '",
                 "last_indent='`-- '",
                 "last_branch_indent='    '"],
                ''),
               ('nose.util._ls_tree_lines',
                ['dir_path',
                 'skip_pattern',
                 'indent',
                 'branch_indent',
                 'last_indent',
                 'last_branch_indent'],
                ''),
               ('nose.util.absdir',
                ['path'],
                'Return absolute, normalized path to directory, if it exists; None\n    otherwise.\n    '),
               ('nose.util.absfile',
                ['path', 'where=None'],
                "Return absolute, normalized path to file (optionally in directory\n    where), or None if the file can't be found either in where or the current\n    working directory.\n    "),
               ('nose.util.anyp', ['predicate', 'iterable'], ''),
               ('nose.util.file_like',
                ['name'],
                "A name is file-like if it is a path that exists, or it has a\n    directory part, or it ends in .py, or it isn't a legal python\n    identifier.\n    "),
               ('nose.util.func_lineno',
                ['func'],
                'Get the line number of a function. First looks for\n    compat_co_firstlineno, then func_code.co_first_lineno.\n    '),
               ('nose.util.isclass',
                ['obj'],
                "Is obj a class? Inspect's isclass is too liberal and returns True\n    for objects that can't be subclasses of anything.\n    "),
               ('nose.util.isgenerator', ['func'], ''),
               ('nose.util.ispackage',
                ['path'],
                "\n    Is this path a package directory?\n\n    >>> ispackage('nose')\n    True\n    >>> ispackage('unit_tests')\n    False\n    >>> ispackage('nose/plugins')\n    True\n    >>> ispackage('nose/loader.py')\n    False\n    "),
               ('nose.util.isproperty',
                ['obj'],
                '\n    Is this a property?\n\n    >>> class Foo:\n    ...     def got(self):\n    ...         return 2\n    ...     def get(self):\n    ...         return 1\n    ...     get = property(get)\n\n    >>> isproperty(Foo.got)\n    False\n    >>> isproperty(Foo.get)\n    True\n    '),
               ('nose.util.getfilename',
                ['package', 'relativeTo=None'],
                'Find the python source file for a package, relative to a\n    particular directory (defaults to current working directory if not\n    given).\n    '),
               ('nose.util.getpackage',
                ['filename'],
                "\n    Find the full dotted package name for a given python source file\n    name. Returns None if the file is not a python source file.\n\n    >>> getpackage('foo.py')\n    'foo'\n    >>> getpackage('biff/baf.py')\n    'baf'\n    >>> getpackage('nose/util.py')\n    'nose.util'\n\n    Works for directories too.\n\n    >>> getpackage('nose')\n    'nose'\n    >>> getpackage('nose/plugins')\n    'nose.plugins'\n\n    And __init__ files stuck onto directories\n\n    >>> getpackage('nose/plugins/__init__.py')\n    'nose.plugins'\n\n    Absolute paths also work.\n\n    >>> path = os.path.abspath(os.path.join('nose', 'plugins'))\n    >>> getpackage(path)\n    'nose.plugins'\n    "),
               ('nose.util.ln',
                ['label'],
                "Draw a 70-char-wide divider, with label in the middle.\n\n    >>> ln('hello there')\n    '---------------------------- hello there -----------------------------'\n    "),
               ('nose.util.resolve_name',
                ['name', 'module=None'],
                "Resolve a dotted name to a module and its parts. This is stolen\n    wholesale from unittest.TestLoader.loadTestByName.\n\n    >>> resolve_name('nose.util') #doctest: +ELLIPSIS\n    <module 'nose.util' from...>\n    >>> resolve_name('nose.util.resolve_name') #doctest: +ELLIPSIS\n    <function resolve_name at...>\n    "),
               ('nose.util.split_test_name',
                ['test'],
                'Split a test name into a 3-tuple containing file, module, and callable\n    names, any of which (but not all) may be blank.\n\n    Test names are in the form:\n\n    file_or_module:callable\n\n    Either side of the : may be dotted. To change the splitting behavior, you\n    can alter nose.util.split_test_re.\n    '),
               ('nose.util.test_address',
                ['test'],
                'Find the test address for a test, which may be a module, filename,\n    class, method or function.\n    '),
               ('nose.util.try_run',
                ['obj', 'names'],
                'Given a list of possible method names, try to run them with the\n    provided object. Keep going until something works. Used to run\n    setup/teardown methods for module, package, and function tests.\n    '),
               ('nose.util.src',
                ['filename'],
                'Find the python source file for a .pyc, .pyo or $py.class file on\n    jython. Returns the filename provided if it is not a python source\n    file.\n    '),
               ('nose.util.regex_last_key',
                ['regex'],
                "Sort key function factory that puts items that match a\n    regular expression last.\n\n    >>> from nose.config import Config\n    >>> from nose.pyversion import sort_list\n    >>> c = Config()\n    >>> regex = c.testMatch\n    >>> entries = ['.', '..', 'a_test', 'src', 'lib', 'test', 'foo.py']\n    >>> sort_list(entries, regex_last_key(regex))\n    >>> entries\n    ['.', '..', 'foo.py', 'lib', 'src', 'a_test', 'test']\n    "),
               ('nose.util.tolist',
                ['val'],
                'Convert a value that may be a list or a (possibly comma-separated)\n    string into a list. The exception: None is returned as None, not [None].\n\n    >>> tolist(["one", "two"])\n    [\'one\', \'two\']\n    >>> tolist("hello")\n    [\'hello\']\n    >>> tolist("separate,values, with, commas,  spaces , are    ,ok")\n    [\'separate\', \'values\', \'with\', \'commas\', \'spaces\', \'are\', \'ok\']\n    '),
               ('nose.util.transplant_func',
                ['func', 'module'],
                "\n    Make a function imported from module A appear as if it is located\n    in module B.\n\n    >>> from pprint import pprint\n    >>> pprint.__module__\n    'pprint'\n    >>> pp = transplant_func(pprint, __name__)\n    >>> pp.__module__\n    'nose.util'\n\n    The original function is not modified.\n\n    >>> pprint.__module__\n    'pprint'\n\n    Calling the transplanted function calls the original.\n\n    >>> pp([1, 2])\n    [1, 2]\n    >>> pprint([1,2])\n    [1, 2]\n\n    "),
               ('nose.util.transplant_class',
                ['cls', 'module'],
                "\n    Make a class appear to reside in `module`, rather than the module in which\n    it is actually defined.\n\n    >>> from nose.failure import Failure\n    >>> Failure.__module__\n    'nose.failure'\n    >>> Nf = transplant_class(Failure, __name__)\n    >>> Nf.__module__\n    'nose.util'\n    >>> Nf.__name__\n    'Failure'\n\n    "),
               ('nose.util.safe_str', ['val', "encoding='utf-8'"], ''),
               ('nose.proxy.proxied_attribute',
                ['local_attr', 'proxied_attr', 'doc'],
                'Create a property that proxies attribute ``proxied_attr`` through\n    the local attribute ``local_attr``.\n    '),
               ('nose.importer.add_path',
                ['path', 'config=None'],
                'Ensure that the path, or the root of the current package (if\n    path is in a package), is in sys.path.\n    '),
               ('nose.importer.remove_path', ['path'], ''),
               ('nose.config.user_config_files',
                [],
                'Return path to any existing user config files\n    '),
               ('nose.config.all_config_files',
                [],
                'Return path to any existing user config files, plus any setup.cfg\n    in the current working directory.\n    '),
               ('nose.config.flag', ['val'], 'Does the value look like an on/off flag?'),
               ('nose.config._bool', ['val'], ''),
               ('nose.suite._strclass', ['cls'], ''),
               ('nose.twistedtools.threaded_reactor',
                [],
                '\n    Start the Twisted reactor in a separate thread, if not already done.\n    Returns the reactor.\n    The thread will automatically be destroyed when all the tests are done.\n    '),
               ('nose.twistedtools.stop_reactor',
                [],
                'Stop the reactor and join the reactor thread until it stops.\n    Call this function in teardown at the module or package level to\n    reset the twisted system after your tests. You *must* do this if\n    you mix tests using these tools and tests using twisted.trial.\n    '),
               ('nose.twistedtools.deferred',
                ['timeout=None'],
                '\n    By wrapping a test function with this decorator, you can return a\n    twisted Deferred and the test will wait for the deferred to be triggered.\n    The whole test function will run inside the Twisted event loop.\n\n    The optional timeout parameter specifies the maximum duration of the test.\n    The difference with timed() is that timed() will still wait for the test\n    to end, while deferred() will stop the test when its timeout has expired.\n    The latter is more desireable when dealing with network tests, because\n    the result may actually never arrive.\n\n    If the callback is triggered, the test has passed.\n    If the errback is triggered or the timeout expires, the test has failed.\n\n    Example::\n    \n        @deferred(timeout=5.0)\n        def test_resolve():\n            return reactor.resolve("www.python.org")\n\n    Attention! If you combine this decorator with other decorators (like\n    "raises"), deferred() must be called *first*!\n\n    In other words, this is good::\n        \n        @raises(DNSLookupError)\n        @deferred()\n        def test_error():\n            return reactor.resolve("xxxjhjhj.biz")\n\n    and this is bad::\n        \n        @deferred()\n        @raises(DNSLookupError)\n        def test_error():\n            return reactor.resolve("xxxjhjhj.biz")\n    '),
               ('nose.inspector.inspect_traceback',
                ['tb'],
                "Inspect a traceback and its frame, returning source for the expression\n    where the exception was raised, with simple variable replacement performed\n    and the line on which the exception was raised marked with '>>'\n    "),
               ('nose.inspector.tbsource',
                ['tb', 'context=6'],
                'Get source from  a traceback object.\n\n    A tuple of two things is returned: a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.\n\n    .. Note ::\n       This is adapted from inspect.py in the python 2.4 standard library, \n       since a bug in the 2.3 version of inspect prevents it from correctly\n       locating source lines in a traceback frame.\n    '),
               ('nose.inspector.find_inspectable_lines',
                ['lines', 'pos'],
                "Find lines in home that are inspectable.\n    \n    Walk back from the err line up to 3 lines, but don't walk back over\n    changes in indent level.\n\n    Walk forward up to 3 lines, counting \\ separated lines as 1. Don't walk\n    over changes in indent level (unless part of an extended line)\n    "),
               ('nose.result._exception_detail', ['exc'], ''),
               ('nose.result.ln', ['*arg', '**kw'], ''),
               ('nose.plugins.xunit.xml_safe',
                ['value'],
                "Replaces invalid XML characters with '?'."),
               ('nose.plugins.xunit.escape_cdata',
                ['cdata'],
                'Escape a string for an XML CDATA section.'),
               ('nose.plugins.xunit.id_split', ['idval'], ''),
               ('nose.plugins.xunit.nice_classname',
                ['obj'],
                "Returns a nice name for class object or class instance.\n\n        >>> nice_classname(Exception()) # doctest: +ELLIPSIS\n        '...Exception'\n        >>> nice_classname(Exception) # doctest: +ELLIPSIS\n        '...Exception'\n\n    "),
               ('nose.plugins.xunit.exc_message',
                ['exc_info'],
                "Return the exception's message."),
               ('nose.plugins.multiprocess._import_mp', [], ''),
               ('nose.plugins.multiprocess.signalhandler', ['sig', 'frame'], ''),
               ('nose.plugins.multiprocess.runner',
                ['ix',
                 'testQueue',
                 'resultQueue',
                 'currentaddr',
                 'currentstart',
                 'keyboardCaught',
                 'shouldStop',
                 'loaderClass',
                 'resultClass',
                 'config'],
                ''),
               ('nose.plugins.multiprocess.__runner',
                ['ix',
                 'testQueue',
                 'resultQueue',
                 'currentaddr',
                 'currentstart',
                 'keyboardCaught',
                 'shouldStop',
                 'loaderClass',
                 'resultClass',
                 'config'],
                ''),
               ('nose.plugins.plugintest.blankline_separated_blocks',
                ['text'],
                'a bunch of === characters is also considered a blank line'),
               ('nose.plugins.plugintest.remove_stack_traces', ['out'], ''),
               ('nose.plugins.plugintest.simplify_warnings', ['out'], ''),
               ('nose.plugins.plugintest.remove_timings', ['out'], ''),
               ('nose.plugins.plugintest.munge_nose_output_for_doctest',
                ['out'],
                'Modify nose output to make it easy to use in doctests.'),
               ('nose.plugins.plugintest.run',
                ['*arg', '**kw'],
                '\n    Specialized version of nose.run for use inside of doctests that\n    test test runs.\n\n    This version of run() prints the result output to stdout.  Before\n    printing, the output is processed by replacing the timing\n    information with an ellipsis (...), removing traceback stacks, and\n    removing trailing whitespace.\n\n    Use this version of run wherever you are writing a doctest that\n    tests nose (or unittest) test result output.\n\n    Note: do not use doctest: +ELLIPSIS when testing nose output,\n    since ellipses ("test_foo ... ok") in your expected test runner\n    output may match multiple lines of output, causing spurious test\n    passes!\n    '),
               ('nose.plugins.plugintest.run_buffered', ['*arg', '**kw'], ''),
               ('nose.plugins.attrib.attr',
                ['*args', '**kwargs'],
                'Decorator that adds attributes to classes or functions\n    for use with the Attribute (-a) plugin.\n    '),
               ('nose.plugins.attrib.get_method_attr',
                ['method', 'cls', 'attr_name', 'default=False'],
                "Look up an attribute on a method/ function. \n    If the attribute isn't found there, looking it up in the\n    method's class, if any.\n    "),
               ('nose.plugins.errorclass.add_error_patch',
                ['result'],
                'Create a new addError method to patch into a result instance\n    that recognizes the errorClasses attribute and deals with\n    errorclasses correctly.\n    '),
               ('nose.plugins.errorclass.print_errors_patch',
                ['result'],
                'Create a new printErrors method that prints errorClasses items\n    as well.\n    '),
               ('nose.plugins.errorclass.print_label_patch',
                ['result'],
                'Create a new printLabel method that prints errorClasses items\n    as well.\n    '),
               ('nose.plugins.errorclass.wassuccessful_patch',
                ['result'],
                'Create a new wasSuccessful method that checks errorClasses for\n    exceptions that were put into other slots than error or failure\n    but that still count as not success.\n    '),
               ('nose.plugins.errorclass.add_skip_patch',
                ['result'],
                'Create a new addSkip method to patch into a result instance\n    that delegates to addError.\n    '),
               ('nose.tools.nontrivial.make_decorator',
                ['func'],
                "\n    Wraps a test decorator so as to properly replicate metadata\n    of the decorated function, including nose's additional stuff\n    (namely, setup and teardown).\n    "),
               ('nose.tools.nontrivial.raises',
                ['*exceptions'],
                'Test must raise one of expected exceptions to pass.\n\n    Example use::\n\n      @raises(TypeError, ValueError)\n      def test_raises_type_error():\n          raise TypeError("This test passes")\n\n      @raises(Exception)\n      def test_that_fails_by_passing():\n          pass\n\n    If you want to test many assertions about exceptions in a single test,\n    you may want to use `assert_raises` instead.\n    '),
               ('nose.tools.nontrivial.set_trace',
                [],
                'Call pdb.set_trace in the calling frame, first restoring\n    sys.stdout to the real output stream. Note that sys.stdout is NOT\n    reset to whatever it was before the call once pdb is done!\n    '),
               ('nose.tools.nontrivial.timed',
                ['limit'],
                'Test must finish within specified time limit to pass.\n\n    Example use::\n\n      @timed(.1)\n      def test_that_fails():\n          time.sleep(.2)\n    '),
               ('nose.tools.nontrivial.with_setup',
                ['setup=None', 'teardown=None'],
                'Decorator to add setup and/or teardown methods to a test function::\n\n      @with_setup(setup, teardown)\n      def test_something():\n          " ... "\n\n    Note that `with_setup` is useful *only* for test functions, not for test\n    methods or inside of TestCase subclasses.\n    '),
               ('nose.tools.nontrivial.istest',
                ['func'],
                'Decorator to mark a function or method as a test\n    '),
               ('nose.tools.nontrivial.nottest',
                ['func'],
                'Decorator to mark a function or method as *not* a test\n    '),
               ('nose.tools.trivial.ok_',
                ['expr', 'msg=None'],
                'Shorthand for assert. Saves 3 whole characters!\n    '),
               ('nose.tools.trivial.eq_',
                ['a', 'b', 'msg=None'],
                'Shorthand for \'assert a == b, "%r != %r" % (a, b)\n    '),
               ('nose.tools.trivial.pep8', ['name'], ''),
               ('nose.ext.dtcompat.register_optionflag', ['name'], ''),
               ('nose.ext.dtcompat.is_private',
                ['prefix', 'base'],
                'prefix, base -> true iff name prefix + "." + base is "private".\n\n    Prefix may be an empty string, and base does not contain a period.\n    Prefix is ignored (although functions you write conforming to this\n    protocol may make use of it).\n    Return true iff base begins with an (at least one) underscore, but\n    does not both begin and end with (at least) two underscores.\n    '),
               ('nose.ext.dtcompat._extract_future_flags',
                ['globs'],
                '\n    Return the compiler-flags associated with the future features that\n    have been imported into the given namespace (globs).\n    '),
               ('nose.ext.dtcompat._normalize_module',
                ['module', 'depth=2'],
                '\n    Return the module specified by `module`.  In particular:\n      - If `module` is a module, then return module.\n      - If `module` is a string, then import and return the\n        module with that name.\n      - If `module` is None, then return the calling module.\n        The calling module is assumed to be the module of\n        the stack frame at the given depth in the call stack.\n    '),
               ('nose.ext.dtcompat._indent',
                ['s', 'indent=4'],
                '\n    Add the given number of space characters to the beginning every\n    non-blank line in `s`, and return the result.\n    '),
               ('nose.ext.dtcompat._exception_traceback',
                ['exc_info'],
                '\n    Return a string containing a traceback message for the given\n    exc_info tuple (as returned by sys.exc_info()).\n    '),
               ('nose.ext.dtcompat._ellipsis_match', ['want', 'got'], ''),
               ('nose.ext.dtcompat._comment_line',
                ['line'],
                'Return a commented form of the given line'),
               ('nose.ext.dtcompat._module_relative_path', ['module', 'path'], ''),
               ('nose.ext.dtcompat.testmod',
                ['m=None',
                 'name=None',
                 'globs=None',
                 'verbose=None',
                 'isprivate=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'exclude_empty=False'],
                'm=None, name=None, globs=None, verbose=None, isprivate=None,\n       report=True, optionflags=0, extraglobs=None, raise_on_error=False,\n       exclude_empty=False\n\n    Test examples in docstrings in functions and classes reachable\n    from module m (or the current module if m is not supplied), starting\n    with m.__doc__.  Unless isprivate is specified, private names\n    are not skipped.\n\n    Also test examples reachable from dict m.__test__ if it exists and is\n    not None.  m.__test__ maps names to functions, classes and strings;\n    function and class docstrings are tested even if the name is private;\n    strings are tested directly, as if they were docstrings.\n\n    Return (#failures, #tests).\n\n    See doctest.__doc__ for an overview.\n\n    Optional keyword arg "name" gives the name of the module; by default\n    use m.__name__.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use m.__dict__.  A copy of this\n    dict is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.  This is new in 2.4.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  This is new in 2.3.  Possible values (see the\n    docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Deprecated in Python 2.4:\n    Optional keyword arg "isprivate" specifies a function used to\n    determine whether a name is private.  The default function is\n    treat all functions as public.  Optionally, "isprivate" can be\n    set to doctest.is_private to skip over functions marked as private\n    using the underscore naming convention; see its docs for details.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('nose.ext.dtcompat.testfile',
                ['filename',
                 'module_relative=True',
                 'name=None',
                 'package=None',
                 'globs=None',
                 'verbose=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'parser=DocTestParser()'],
                '\n    Test examples in the given file.  Return (#failures, #tests).\n\n    Optional keyword arg "module_relative" specifies how filenames\n    should be interpreted:\n\n      - If "module_relative" is True (the default), then "filename"\n         specifies a module-relative path.  By default, this path is\n         relative to the calling module\'s directory; but if the\n         "package" argument is specified, then it is relative to that\n         package.  To ensure os-independence, "filename" should use\n         "/" characters to separate path segments, and should not\n         be an absolute path (i.e., it may not begin with "/").\n\n      - If "module_relative" is False, then "filename" specifies an\n        os-specific path.  The path may be absolute or relative (to\n        the current working directory).\n\n    Optional keyword arg "name" gives the name of the test; by default\n    use the file\'s basename.\n\n    Optional keyword argument "package" is a Python package or the\n    name of a Python package whose directory should be used as the\n    base directory for a module relative filename.  If no package is\n    specified, then the calling module\'s directory is used as the base\n    directory for module relative filenames.  It is an error to\n    specify "package" if "module_relative" is False.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use {}.  A copy of this dict\n    is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  Possible values (see the docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Optional keyword arg "parser" specifies a DocTestParser (or\n    subclass) that should be used to extract tests from the files.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('nose.ext.dtcompat.run_docstring_examples',
                ['f',
                 'globs',
                 'verbose=False',
                 "name='NoName'",
                 'compileflags=None',
                 'optionflags=0'],
                "\n    Test examples in the given object's docstring (`f`), using `globs`\n    as globals.  Optional argument `name` is used in failure messages.\n    If the optional argument `verbose` is true, then generate output\n    even if there are no failures.\n\n    `compileflags` gives the set of flags that should be used by the\n    Python compiler when running the examples.  If not specified, then\n    it will default to the set of future-import flags that apply to\n    `globs`.\n\n    Optional keyword arg `optionflags` specifies options for the\n    testing and output.  See the documentation for `testmod` for more\n    information.\n    "),
               ('nose.ext.dtcompat.set_unittest_reportflags', ['flags'], ''),
               ('nose.ext.dtcompat.DocTestSuite',
                ['module=None',
                 'globs=None',
                 'extraglobs=None',
                 'test_finder=None',
                 '**options'],
                '\n    Convert doctest tests for a module to a unittest test suite.\n\n    This converts each documentation string in a module that\n    contains doctest tests to a unittest test case.  If any of the\n    tests in a doc string fail, then the test case fails.  An exception\n    is raised showing the name of the file containing the test and a\n    (sometimes approximate) line number.\n\n    The `module` argument provides the module to be tested.  The argument\n    can be either a module or a module name.\n\n    If no argument is given, the calling module is used.\n\n    A number of options may be provided as keyword arguments:\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n       A set of doctest option flags expressed as an integer.\n    '),
               ('nose.ext.dtcompat.DocFileTest',
                ['path',
                 'module_relative=True',
                 'package=None',
                 'globs=None',
                 'parser=DocTestParser()',
                 '**options'],
                ''),
               ('nose.ext.dtcompat.DocFileSuite',
                ['*paths', '**kw'],
                'A unittest suite for one or more doctest files.\n\n    The path to each doctest file is given as a string; the\n    interpretation of that string depends on the keyword argument\n    "module_relative".\n\n    A number of options may be provided as keyword arguments:\n\n    module_relative\n      If "module_relative" is True, then the given file paths are\n      interpreted as os-independent module-relative paths.  By\n      default, these paths are relative to the calling module\'s\n      directory; but if the "package" argument is specified, then\n      they are relative to that package.  To ensure os-independence,\n      "filename" should use "/" characters to separate path\n      segments, and may not be an absolute path (i.e., it may not\n      begin with "/").\n\n      If "module_relative" is False, then the given file paths are\n      interpreted as os-specific paths.  These paths may be absolute\n      or relative (to the current working directory).\n\n    package\n      A Python package or the name of a Python package whose directory\n      should be used as the base directory for module relative paths.\n      If "package" is not specified, then the calling module\'s\n      directory is used as the base directory for module relative\n      filenames.  It is an error to specify "package" if\n      "module_relative" is False.\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n      A set of doctest option flags expressed as an integer.\n\n    parser\n      A DocTestParser (or subclass) that should be used to extract\n      tests from the files.\n    '),
               ('nose.ext.dtcompat.script_from_examples', ['s'], ''),
               ('nose.ext.dtcompat.testsource',
                ['module', 'name'],
                'Extract the test sources from a doctest docstring as a script.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the doc string with tests to be debugged.\n    '),
               ('nose.ext.dtcompat.debug_src',
                ['src', 'pm=False', 'globs=None'],
                "Debug a single doctest docstring, in argument `src`'"),
               ('nose.ext.dtcompat.debug_script',
                ['src', 'pm=False', 'globs=None'],
                'Debug a test script.  `src` is the script, as a string.'),
               ('nose.ext.dtcompat.debug',
                ['module', 'name', 'pm=False'],
                'Debug a single doctest docstring.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the docstring with tests to be debugged.\n    '),
               ('nose.sphinx.pluginopts.autoplugin_directive',
                ['dirname',
                 'arguments',
                 'options',
                 'content',
                 'lineno',
                 'content_offset',
                 'block_text',
                 'state',
                 'state_machine'],
                ''),
               ('nose.sphinx.pluginopts.autohelp_directive',
                ['dirname',
                 'arguments',
                 'options',
                 'content',
                 'lineno',
                 'content_offset',
                 'block_text',
                 'state',
                 'state_machine'],
                'produces rst from nose help'),
               ('nose.sphinx.pluginopts.setup', ['app'], ''),
               ('numpy.pkgload', ['*packages', '**options'], ''),
               ('numpy.dual.register_func', ['name', 'func'], ''),
               ('numpy.dual.restore_func', ['name'], ''),
               ('numpy.dual.restore_all', [], ''),
               ('numpy.matlib.empty',
                ['shape', 'dtype=None', "order='C'"],
                "\n    Return a new matrix of given shape and type, without initializing entries.\n\n    Parameters\n    ----------\n    shape : int or tuple of int\n        Shape of the empty matrix.\n    dtype : data-type, optional\n        Desired output data-type.\n    order : {'C', 'F'}, optional\n        Whether to store multi-dimensional data in C (row-major) or\n        Fortran (column-major) order in memory.\n\n    See Also\n    --------\n    empty_like, zeros\n\n    Notes\n    -----\n    `empty`, unlike `zeros`, does not set the matrix values to zero,\n    and may therefore be marginally faster.  On the other hand, it requires\n    the user to manually set all the values in the array, and should be\n    used with caution.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.empty((2, 2))    # filled with random data\n    matrix([[  6.76425276e-320,   9.79033856e-307],\n            [  7.39337286e-309,   3.22135945e-309]])        #random\n    >>> np.matlib.empty((2, 2), dtype=int)\n    matrix([[ 6600475,        0],\n            [ 6586976, 22740995]])                          #random\n\n    "),
               ('numpy.matlib.ones',
                ['shape', 'dtype=None', "order='C'"],
                "\n    Matrix of ones.\n\n    Return a matrix of given shape and type, filled with ones.\n\n    Parameters\n    ----------\n    shape : {sequence of ints, int}\n        Shape of the matrix\n    dtype : data-type, optional\n        The desired data-type for the matrix, default is np.float64.\n    order : {'C', 'F'}, optional\n        Whether to store matrix in C- or Fortran-contiguous order,\n        default is 'C'.\n\n    Returns\n    -------\n    out : matrix\n        Matrix of ones of given shape, dtype, and order.\n\n    See Also\n    --------\n    ones : Array of ones.\n    matlib.zeros : Zero matrix.\n\n    Notes\n    -----\n    If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,\n    `out` becomes a single row matrix of shape ``(1,N)``.\n\n    Examples\n    --------\n    >>> np.matlib.ones((2,3))\n    matrix([[ 1.,  1.,  1.],\n            [ 1.,  1.,  1.]])\n\n    >>> np.matlib.ones(2)\n    matrix([[ 1.,  1.]])\n\n    "),
               ('numpy.matlib.zeros',
                ['shape', 'dtype=None', "order='C'"],
                "\n    Return a matrix of given shape and type, filled with zeros.\n\n    Parameters\n    ----------\n    shape : int or sequence of ints\n        Shape of the matrix\n    dtype : data-type, optional\n        The desired data-type for the matrix, default is float.\n    order : {'C', 'F'}, optional\n        Whether to store the result in C- or Fortran-contiguous order,\n        default is 'C'.\n\n    Returns\n    -------\n    out : matrix\n        Zero matrix of given shape, dtype, and order.\n\n    See Also\n    --------\n    numpy.zeros : Equivalent array function.\n    matlib.ones : Return a matrix of ones.\n\n    Notes\n    -----\n    If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,\n    `out` becomes a single row matrix of shape ``(1,N)``.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.zeros((2, 3))\n    matrix([[ 0.,  0.,  0.],\n            [ 0.,  0.,  0.]])\n\n    >>> np.matlib.zeros(2)\n    matrix([[ 0.,  0.]])\n\n    "),
               ('numpy.matlib.identity',
                ['n', 'dtype=None'],
                '\n    Returns the square identity matrix of given size.\n\n    Parameters\n    ----------\n    n : int\n        Size of the returned identity matrix.\n    dtype : data-type, optional\n        Data-type of the output. Defaults to ``float``.\n\n    Returns\n    -------\n    out : matrix\n        `n` x `n` matrix with its main diagonal set to one,\n        and all other elements zero.\n\n    See Also\n    --------\n    numpy.identity : Equivalent array function.\n    matlib.eye : More general matrix identity function.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.identity(3, dtype=int)\n    matrix([[1, 0, 0],\n            [0, 1, 0],\n            [0, 0, 1]])\n\n    '),
               ('numpy.matlib.eye',
                ['n', 'M=None', 'k=0', 'dtype=float'],
                '\n    Return a matrix with ones on the diagonal and zeros elsewhere.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows in the output.\n    M : int, optional\n        Number of columns in the output, defaults to `n`.\n    k : int, optional\n        Index of the diagonal: 0 refers to the main diagonal,\n        a positive value refers to an upper diagonal,\n        and a negative value to a lower diagonal.\n    dtype : dtype, optional\n        Data-type of the returned matrix.\n\n    Returns\n    -------\n    I : matrix\n        A `n` x `M` matrix where all elements are equal to zero,\n        except for the `k`-th diagonal, whose values are equal to one.\n\n    See Also\n    --------\n    numpy.eye : Equivalent array function.\n    identity : Square identity matrix.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.eye(3, k=1, dtype=float)\n    matrix([[ 0.,  1.,  0.],\n            [ 0.,  0.,  1.],\n            [ 0.,  0.,  0.]])\n\n    '),
               ('numpy.matlib.rand',
                ['*args'],
                '\n    Return a matrix of random values with given shape.\n\n    Create a matrix of the given shape and propagate it with\n    random samples from a uniform distribution over ``[0, 1)``.\n\n    Parameters\n    ----------\n    \\*args : Arguments\n        Shape of the output.\n        If given as N integers, each integer specifies the size of one\n        dimension.\n        If given as a tuple, this tuple gives the complete shape.\n\n    Returns\n    -------\n    out : ndarray\n        The matrix of random values with shape given by `\\*args`.\n\n    See Also\n    --------\n    randn, numpy.random.rand\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.rand(2, 3)\n    matrix([[ 0.68340382,  0.67926887,  0.83271405],\n            [ 0.00793551,  0.20468222,  0.95253525]])       #random\n    >>> np.matlib.rand((2, 3))\n    matrix([[ 0.84682055,  0.73626594,  0.11308016],\n            [ 0.85429008,  0.3294825 ,  0.89139555]])       #random\n\n    If the first argument is a tuple, other arguments are ignored:\n\n    >>> np.matlib.rand((2, 3), 4)\n    matrix([[ 0.46898646,  0.15163588,  0.95188261],\n            [ 0.59208621,  0.09561818,  0.00583606]])       #random\n\n    '),
               ('numpy.matlib.randn',
                ['*args'],
                '\n    Return a random matrix with data from the "standard normal" distribution.\n\n    `randn` generates a matrix filled with random floats sampled from a\n    univariate "normal" (Gaussian) distribution of mean 0 and variance 1.\n\n    Parameters\n    ----------\n    \\*args : Arguments\n        Shape of the output.\n        If given as N integers, each integer specifies the size of one\n        dimension. If given as a tuple, this tuple gives the complete shape.\n\n    Returns\n    -------\n    Z : matrix of floats\n        A matrix of floating-point samples drawn from the standard normal\n        distribution.\n\n    See Also\n    --------\n    rand, random.randn\n\n    Notes\n    -----\n    For random samples from :math:`N(\\mu, \\sigma^2)`, use:\n\n    ``sigma * np.matlib.randn(...) + mu``\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> np.matlib.randn(1)\n    matrix([[-0.09542833]])                                 #random\n    >>> np.matlib.randn(1, 2, 3)\n    matrix([[ 0.16198284,  0.0194571 ,  0.18312985],\n            [-0.7509172 ,  1.61055   ,  0.45298599]])       #random\n\n    Two-by-four matrix of samples from :math:`N(3, 6.25)`:\n\n    >>> 2.5 * np.matlib.randn((2, 4)) + 3\n    matrix([[ 4.74085004,  8.89381862,  4.09042411,  4.83721922],\n            [ 7.52373709,  5.07933944, -2.64043543,  0.45610557]])  #random\n\n    '),
               ('numpy.matlib.repmat',
                ['a', 'm', 'n'],
                '\n    Repeat a 0-D to 2-D array or matrix MxN times.\n\n    Parameters\n    ----------\n    a : array_like\n        The array or matrix to be repeated.\n    m, n : int\n        The number of times `a` is repeated along the first and second axes.\n\n    Returns\n    -------\n    out : ndarray\n        The result of repeating `a`.\n\n    Examples\n    --------\n    >>> import numpy.matlib\n    >>> a0 = np.array(1)\n    >>> np.matlib.repmat(a0, 2, 3)\n    array([[1, 1, 1],\n           [1, 1, 1]])\n\n    >>> a1 = np.arange(4)\n    >>> np.matlib.repmat(a1, 2, 2)\n    array([[0, 1, 2, 3, 0, 1, 2, 3],\n           [0, 1, 2, 3, 0, 1, 2, 3]])\n\n    >>> a2 = np.asmatrix(np.arange(6).reshape(2, 3))\n    >>> np.matlib.repmat(a2, 2, 3)\n    matrix([[0, 1, 2, 0, 1, 2, 0, 1, 2],\n            [3, 4, 5, 3, 4, 5, 3, 4, 5],\n            [0, 1, 2, 0, 1, 2, 0, 1, 2],\n            [3, 4, 5, 3, 4, 5, 3, 4, 5]])\n\n    '),
               ('numpy.setupscons.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.ctypeslib._dummy',
                ['*args', '**kwds'],
                '\n        Dummy object that raises an ImportError if ctypes is not available.\n\n        Raises\n        ------\n        ImportError\n            If ctypes is not available.\n\n        '),
               ('numpy.ctypeslib.load_library', ['libname', 'loader_path'], ''),
               ('numpy.ctypeslib._num_fromflags', ['flaglist'], ''),
               ('numpy.ctypeslib._flags_fromnum', ['num'], ''),
               ('numpy.ctypeslib.ndpointer',
                ['dtype=None', 'ndim=None', 'shape=None', 'flags=None'],
                "\n    Array-checking restype/argtypes.\n\n    An ndpointer instance is used to describe an ndarray in restypes\n    and argtypes specifications.  This approach is more flexible than\n    using, for example, ``POINTER(c_double)``, since several restrictions\n    can be specified, which are verified upon calling the ctypes function.\n    These include data type, number of dimensions, shape and flags.  If a\n    given array does not satisfy the specified restrictions,\n    a ``TypeError`` is raised.\n\n    Parameters\n    ----------\n    dtype : data-type, optional\n        Array data-type.\n    ndim : int, optional\n        Number of array dimensions.\n    shape : tuple of ints, optional\n        Array shape.\n    flags : str or tuple of str\n        Array flags; may be one or more of:\n\n          - C_CONTIGUOUS / C / CONTIGUOUS\n          - F_CONTIGUOUS / F / FORTRAN\n          - OWNDATA / O\n          - WRITEABLE / W\n          - ALIGNED / A\n          - UPDATEIFCOPY / U\n\n    Returns\n    -------\n    klass : ndpointer type object\n        A type object, which is an ``_ndtpr`` instance containing\n        dtype, ndim, shape and flags information.\n\n    Raises\n    ------\n    TypeError\n        If a given array does not satisfy the specified restrictions.\n\n    Examples\n    --------\n    >>> clib.somefunc.argtypes = [np.ctypeslib.ndpointer(dtype=np.float64,\n    ...                                                  ndim=1,\n    ...                                                  flags='C_CONTIGUOUS')]\n    ... #doctest: +SKIP\n    >>> clib.somefunc(np.array([1, 2, 3], dtype=np.float64))\n    ... #doctest: +SKIP\n\n    "),
               ('numpy.ctypeslib.prep_simple',
                ['simple_type', 'dtype'],
                'Given a ctypes simple type, construct and attach an\n        __array_interface__ property to it if it does not yet have one.\n        '),
               ('numpy.ctypeslib.prep_array',
                ['array_type'],
                'Given a ctypes array type, construct and attach an\n        __array_interface__ property to it if it does not yet have one.\n        '),
               ('numpy.ctypeslib.prep_pointer',
                ['pointer_obj', 'shape'],
                'Given a ctypes pointer object, construct and\n        attach an __array_interface__ property to it if it does not\n        yet have one.\n        '),
               ('numpy.ctypeslib.as_array',
                ['obj', 'shape=None'],
                'Create a numpy array from a ctypes array or a ctypes POINTER.  \n        The numpy array shares the memory with the ctypes object.\n\n        The size parameter must be given if converting from a ctypes POINTER.\n        The size parameter is ignored if converting from a ctypes array\n        '),
               ('numpy.ctypeslib.as_ctypes',
                ['obj'],
                'Create and return a ctypes object from a numpy array.  Actually\n        anything that exposes the __array_interface__ is accepted.'),
               ('numpy.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.__config__.get_info', ['name'], ''),
               ('numpy.__config__.show', [], ''),
               ('numpy.doc.constants.add_newdoc', ['module', 'name', 'doc'], ''),
               ('numpy.lib.shape_base.apply_along_axis',
                ['func1d', 'axis', 'arr', '*args'],
                '\n    Apply a function to 1-D slices along the given axis.\n\n    Execute `func1d(a, *args)` where `func1d` operates on 1-D arrays and `a`\n    is a 1-D slice of `arr` along `axis`.\n\n    Parameters\n    ----------\n    func1d : function\n        This function should accept 1-D arrays. It is applied to 1-D\n        slices of `arr` along the specified axis.\n    axis : integer\n        Axis along which `arr` is sliced.\n    arr : ndarray\n        Input array.\n    args : any\n        Additional arguments to `func1d`.\n\n    Returns\n    -------\n    outarr : ndarray\n        The output array. The shape of `outarr` is identical to the shape of\n        `arr`, except along the `axis` dimension, where the length of `outarr`\n        is equal to the size of the return value of `func1d`.  If `func1d`\n        returns a scalar `outarr` will have one fewer dimensions than `arr`.\n\n    See Also\n    --------\n    apply_over_axes : Apply a function repeatedly over multiple axes.\n\n    Examples\n    --------\n    >>> def my_func(a):\n    ...     """Average first and last element of a 1-D array"""\n    ...     return (a[0] + a[-1]) * 0.5\n    >>> b = np.array([[1,2,3], [4,5,6], [7,8,9]])\n    >>> np.apply_along_axis(my_func, 0, b)\n    array([ 4.,  5.,  6.])\n    >>> np.apply_along_axis(my_func, 1, b)\n    array([ 2.,  5.,  8.])\n\n    For a function that doesn\'t return a scalar, the number of dimensions in\n    `outarr` is the same as `arr`.\n\n    >>> def new_func(a):\n    ...     """Divide elements of a by 2."""\n    ...     return a * 0.5\n    >>> b = np.array([[1,2,3], [4,5,6], [7,8,9]])\n    >>> np.apply_along_axis(new_func, 0, b)\n    array([[ 0.5,  1. ,  1.5],\n           [ 2. ,  2.5,  3. ],\n           [ 3.5,  4. ,  4.5]])\n\n    '),
               ('numpy.lib.shape_base.apply_over_axes',
                ['func', 'a', 'axes'],
                '\n    Apply a function repeatedly over multiple axes.\n\n    `func` is called as `res = func(a, axis)`, where `axis` is the first\n    element of `axes`.  The result `res` of the function call must have\n    either the same dimensions as `a` or one less dimension.  If `res`\n    has one less dimension than `a`, a dimension is inserted before\n    `axis`.  The call to `func` is then repeated for each axis in `axes`,\n    with `res` as the first argument.\n\n    Parameters\n    ----------\n    func : function\n        This function must take two arguments, `func(a, axis)`.\n    a : array_like\n        Input array.\n    axes : array_like\n        Axes over which `func` is applied; the elements must be integers.\n\n    Returns\n    -------\n    val : ndarray\n        The output array.  The number of dimensions is the same as `a`,\n        but the shape can be different.  This depends on whether `func`\n        changes the shape of its output with respect to its input.\n\n    See Also\n    --------\n    apply_along_axis :\n        Apply a function to 1-D slices of an array along the given axis.\n\n    Examples\n    --------\n    >>> a = np.arange(24).reshape(2,3,4)\n    >>> a\n    array([[[ 0,  1,  2,  3],\n            [ 4,  5,  6,  7],\n            [ 8,  9, 10, 11]],\n           [[12, 13, 14, 15],\n            [16, 17, 18, 19],\n            [20, 21, 22, 23]]])\n\n    Sum over axes 0 and 2. The result has same number of dimensions\n    as the original array:\n\n    >>> np.apply_over_axes(np.sum, a, [0,2])\n    array([[[ 60],\n            [ 92],\n            [124]]])\n\n    '),
               ('numpy.lib.shape_base.expand_dims',
                ['a', 'axis'],
                '\n    Expand the shape of an array.\n\n    Insert a new axis, corresponding to a given position in the array shape.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int\n        Position (amongst axes) where new axis is to be inserted.\n\n    Returns\n    -------\n    res : ndarray\n        Output array. The number of dimensions is one greater than that of\n        the input array.\n\n    See Also\n    --------\n    doc.indexing, atleast_1d, atleast_2d, atleast_3d\n\n    Examples\n    --------\n    >>> x = np.array([1,2])\n    >>> x.shape\n    (2,)\n\n    The following is equivalent to ``x[np.newaxis,:]`` or ``x[np.newaxis]``:\n\n    >>> y = np.expand_dims(x, axis=0)\n    >>> y\n    array([[1, 2]])\n    >>> y.shape\n    (1, 2)\n\n    >>> y = np.expand_dims(x, axis=1)  # Equivalent to x[:,newaxis]\n    >>> y\n    array([[1],\n           [2]])\n    >>> y.shape\n    (2, 1)\n\n    Note that some examples may use ``None`` instead of ``np.newaxis``.  These\n    are the same objects:\n\n    >>> np.newaxis is None\n    True\n\n    '),
               ('numpy.lib.shape_base.column_stack',
                ['tup'],
                '\n    Stack 1-D arrays as columns into a 2-D array.\n\n    Take a sequence of 1-D arrays and stack them as columns\n    to make a single 2-D array. 2-D arrays are stacked as-is,\n    just like with `hstack`.  1-D arrays are turned into 2-D columns\n    first.\n\n    Parameters\n    ----------\n    tup : sequence of 1-D or 2-D arrays.\n        Arrays to stack. All of them must have the same first dimension.\n\n    Returns\n    -------\n    stacked : 2-D array\n        The array formed by stacking the given arrays.\n\n    See Also\n    --------\n    hstack, vstack, concatenate\n\n    Notes\n    -----\n    This function is equivalent to ``np.vstack(tup).T``.\n\n    Examples\n    --------\n    >>> a = np.array((1,2,3))\n    >>> b = np.array((2,3,4))\n    >>> np.column_stack((a,b))\n    array([[1, 2],\n           [2, 3],\n           [3, 4]])\n\n    '),
               ('numpy.lib.shape_base.dstack',
                ['tup'],
                '\n    Stack arrays in sequence depth wise (along third axis).\n\n    Takes a sequence of arrays and stack them along the third axis\n    to make a single array. Rebuilds arrays divided by `dsplit`.\n    This is a simple way to stack 2D arrays (images) into a single\n    3D array for processing.\n\n    Parameters\n    ----------\n    tup : sequence of arrays\n        Arrays to stack. All of them must have the same shape along all\n        but the third axis.\n\n    Returns\n    -------\n    stacked : ndarray\n        The array formed by stacking the given arrays.\n\n    See Also\n    --------\n    vstack : Stack along first axis.\n    hstack : Stack along second axis.\n    concatenate : Join arrays.\n    dsplit : Split array along third axis.\n\n    Notes\n    -----\n    Equivalent to ``np.concatenate(tup, axis=2)``.\n\n    Examples\n    --------\n    >>> a = np.array((1,2,3))\n    >>> b = np.array((2,3,4))\n    >>> np.dstack((a,b))\n    array([[[1, 2],\n            [2, 3],\n            [3, 4]]])\n\n    >>> a = np.array([[1],[2],[3]])\n    >>> b = np.array([[2],[3],[4]])\n    >>> np.dstack((a,b))\n    array([[[1, 2]],\n           [[2, 3]],\n           [[3, 4]]])\n\n    '),
               ('numpy.lib.shape_base._replace_zero_by_x_arrays', ['sub_arys'], ''),
               ('numpy.lib.shape_base.array_split',
                ['ary', 'indices_or_sections', 'axis=0'],
                '\n    Split an array into multiple sub-arrays of equal or near-equal size.\n\n    Please refer to the ``split`` documentation.  The only difference\n    between these functions is that ``array_split`` allows\n    `indices_or_sections` to be an integer that does *not* equally\n    divide the axis.\n\n    See Also\n    --------\n    split : Split array into multiple sub-arrays of equal size.\n\n    Examples\n    --------\n    >>> x = np.arange(8.0)\n    >>> np.array_split(x, 3)\n        [array([ 0.,  1.,  2.]), array([ 3.,  4.,  5.]), array([ 6.,  7.])]\n\n    '),
               ('numpy.lib.shape_base.split',
                ['ary', 'indices_or_sections', 'axis=0'],
                '\n    Split an array into multiple sub-arrays of equal size.\n\n    Parameters\n    ----------\n    ary : ndarray\n        Array to be divided into sub-arrays.\n    indices_or_sections : int or 1-D array\n        If `indices_or_sections` is an integer, N, the array will be divided\n        into N equal arrays along `axis`.  If such a split is not possible,\n        an error is raised.\n\n        If `indices_or_sections` is a 1-D array of sorted integers, the entries\n        indicate where along `axis` the array is split.  For example,\n        ``[2, 3]`` would, for ``axis=0``, result in\n\n          - ary[:2]\n          - ary[2:3]\n          - ary[3:]\n\n        If an index exceeds the dimension of the array along `axis`,\n        an empty sub-array is returned correspondingly.\n    axis : int, optional\n        The axis along which to split, default is 0.\n\n    Returns\n    -------\n    sub-arrays : list of ndarrays\n        A list of sub-arrays.\n\n    Raises\n    ------\n    ValueError\n        If `indices_or_sections` is given as an integer, but\n        a split does not result in equal division.\n\n    See Also\n    --------\n    array_split : Split an array into multiple sub-arrays of equal or\n                  near-equal size.  Does not raise an exception if\n                  an equal division cannot be made.\n    hsplit : Split array into multiple sub-arrays horizontally (column-wise).\n    vsplit : Split array into multiple sub-arrays vertically (row wise).\n    dsplit : Split array into multiple sub-arrays along the 3rd axis (depth).\n    concatenate : Join arrays together.\n    hstack : Stack arrays in sequence horizontally (column wise).\n    vstack : Stack arrays in sequence vertically (row wise).\n    dstack : Stack arrays in sequence depth wise (along third dimension).\n\n    Examples\n    --------\n    >>> x = np.arange(9.0)\n    >>> np.split(x, 3)\n    [array([ 0.,  1.,  2.]), array([ 3.,  4.,  5.]), array([ 6.,  7.,  8.])]\n\n    >>> x = np.arange(8.0)\n    >>> np.split(x, [3, 5, 6, 10])\n    [array([ 0.,  1.,  2.]),\n     array([ 3.,  4.]),\n     array([ 5.]),\n     array([ 6.,  7.]),\n     array([], dtype=float64)]\n\n    '),
               ('numpy.lib.shape_base.hsplit',
                ['ary', 'indices_or_sections'],
                '\n    Split an array into multiple sub-arrays horizontally (column-wise).\n\n    Please refer to the `split` documentation.  `hsplit` is equivalent\n    to `split` with ``axis=1``, the array is always split along the second\n    axis regardless of the array dimension.\n\n    See Also\n    --------\n    split : Split an array into multiple sub-arrays of equal size.\n\n    Examples\n    --------\n    >>> x = np.arange(16.0).reshape(4, 4)\n    >>> x\n    array([[  0.,   1.,   2.,   3.],\n           [  4.,   5.,   6.,   7.],\n           [  8.,   9.,  10.,  11.],\n           [ 12.,  13.,  14.,  15.]])\n    >>> np.hsplit(x, 2)\n    [array([[  0.,   1.],\n           [  4.,   5.],\n           [  8.,   9.],\n           [ 12.,  13.]]),\n     array([[  2.,   3.],\n           [  6.,   7.],\n           [ 10.,  11.],\n           [ 14.,  15.]])]\n    >>> np.hsplit(x, np.array([3, 6]))\n    [array([[  0.,   1.,   2.],\n           [  4.,   5.,   6.],\n           [  8.,   9.,  10.],\n           [ 12.,  13.,  14.]]),\n     array([[  3.],\n           [  7.],\n           [ 11.],\n           [ 15.]]),\n     array([], dtype=float64)]\n\n    With a higher dimensional array the split is still along the second axis.\n\n    >>> x = np.arange(8.0).reshape(2, 2, 2)\n    >>> x\n    array([[[ 0.,  1.],\n            [ 2.,  3.]],\n           [[ 4.,  5.],\n            [ 6.,  7.]]])\n    >>> np.hsplit(x, 2)\n    [array([[[ 0.,  1.]],\n           [[ 4.,  5.]]]),\n     array([[[ 2.,  3.]],\n           [[ 6.,  7.]]])]\n\n    '),
               ('numpy.lib.shape_base.vsplit',
                ['ary', 'indices_or_sections'],
                '\n    Split an array into multiple sub-arrays vertically (row-wise).\n\n    Please refer to the ``split`` documentation.  ``vsplit`` is equivalent\n    to ``split`` with `axis=0` (default), the array is always split along the\n    first axis regardless of the array dimension.\n\n    See Also\n    --------\n    split : Split an array into multiple sub-arrays of equal size.\n\n    Examples\n    --------\n    >>> x = np.arange(16.0).reshape(4, 4)\n    >>> x\n    array([[  0.,   1.,   2.,   3.],\n           [  4.,   5.,   6.,   7.],\n           [  8.,   9.,  10.,  11.],\n           [ 12.,  13.,  14.,  15.]])\n    >>> np.vsplit(x, 2)\n    [array([[ 0.,  1.,  2.,  3.],\n           [ 4.,  5.,  6.,  7.]]),\n     array([[  8.,   9.,  10.,  11.],\n           [ 12.,  13.,  14.,  15.]])]\n    >>> np.vsplit(x, np.array([3, 6]))\n    [array([[  0.,   1.,   2.,   3.],\n           [  4.,   5.,   6.,   7.],\n           [  8.,   9.,  10.,  11.]]),\n     array([[ 12.,  13.,  14.,  15.]]),\n     array([], dtype=float64)]\n\n    With a higher dimensional array the split is still along the first axis.\n\n    >>> x = np.arange(8.0).reshape(2, 2, 2)\n    >>> x\n    array([[[ 0.,  1.],\n            [ 2.,  3.]],\n           [[ 4.,  5.],\n            [ 6.,  7.]]])\n    >>> np.vsplit(x, 2)\n    [array([[[ 0.,  1.],\n            [ 2.,  3.]]]),\n     array([[[ 4.,  5.],\n            [ 6.,  7.]]])]\n\n    '),
               ('numpy.lib.shape_base.dsplit',
                ['ary', 'indices_or_sections'],
                '\n    Split array into multiple sub-arrays along the 3rd axis (depth).\n\n    Please refer to the `split` documentation.  `dsplit` is equivalent\n    to `split` with ``axis=2``, the array is always split along the third\n    axis provided the array dimension is greater than or equal to 3.\n\n    See Also\n    --------\n    split : Split an array into multiple sub-arrays of equal size.\n\n    Examples\n    --------\n    >>> x = np.arange(16.0).reshape(2, 2, 4)\n    >>> x\n    array([[[  0.,   1.,   2.,   3.],\n            [  4.,   5.,   6.,   7.]],\n           [[  8.,   9.,  10.,  11.],\n            [ 12.,  13.,  14.,  15.]]])\n    >>> np.dsplit(x, 2)\n    [array([[[  0.,   1.],\n            [  4.,   5.]],\n           [[  8.,   9.],\n            [ 12.,  13.]]]),\n     array([[[  2.,   3.],\n            [  6.,   7.]],\n           [[ 10.,  11.],\n            [ 14.,  15.]]])]\n    >>> np.dsplit(x, np.array([3, 6]))\n    [array([[[  0.,   1.,   2.],\n            [  4.,   5.,   6.]],\n           [[  8.,   9.,  10.],\n            [ 12.,  13.,  14.]]]),\n     array([[[  3.],\n            [  7.]],\n           [[ 11.],\n            [ 15.]]]),\n     array([], dtype=float64)]\n\n    '),
               ('numpy.lib.shape_base.get_array_prepare',
                ['*args'],
                'Find the wrapper for the array with the highest priority.\n\n    In case of ties, leftmost wins. If no wrapper is found, return None\n    '),
               ('numpy.lib.shape_base.get_array_wrap',
                ['*args'],
                'Find the wrapper for the array with the highest priority.\n\n    In case of ties, leftmost wins. If no wrapper is found, return None\n    '),
               ('numpy.lib.shape_base.kron',
                ['a', 'b'],
                '\n    Kronecker product of two arrays.\n\n    Computes the Kronecker product, a composite array made of blocks of the\n    second array scaled by the first.\n\n    Parameters\n    ----------\n    a, b : array_like\n\n    Returns\n    -------\n    out : ndarray\n\n    See Also\n    --------\n\n    outer : The outer product\n\n    Notes\n    -----\n\n    The function assumes that the number of dimenensions of `a` and `b`\n    are the same, if necessary prepending the smallest with ones.\n    If `a.shape = (r0,r1,..,rN)` and `b.shape = (s0,s1,...,sN)`,\n    the Kronecker product has shape `(r0*s0, r1*s1, ..., rN*SN)`.\n    The elements are products of elements from `a` and `b`, organized\n    explicitly by::\n\n        kron(a,b)[k0,k1,...,kN] = a[i0,i1,...,iN] * b[j0,j1,...,jN]\n\n    where::\n\n        kt = it * st + jt,  t = 0,...,N\n\n    In the common 2-D case (N=1), the block structure can be visualized::\n\n        [[ a[0,0]*b,   a[0,1]*b,  ... , a[0,-1]*b  ],\n         [  ...                              ...   ],\n         [ a[-1,0]*b,  a[-1,1]*b, ... , a[-1,-1]*b ]]\n\n\n    Examples\n    --------\n    >>> np.kron([1,10,100], [5,6,7])\n    array([  5,   6,   7,  50,  60,  70, 500, 600, 700])\n    >>> np.kron([5,6,7], [1,10,100])\n    array([  5,  50, 500,   6,  60, 600,   7,  70, 700])\n\n    >>> np.kron(np.eye(2), np.ones((2,2)))\n    array([[ 1.,  1.,  0.,  0.],\n           [ 1.,  1.,  0.,  0.],\n           [ 0.,  0.,  1.,  1.],\n           [ 0.,  0.,  1.,  1.]])\n\n    >>> a = np.arange(100).reshape((2,5,2,5))\n    >>> b = np.arange(24).reshape((2,3,4))\n    >>> c = np.kron(a,b)\n    >>> c.shape\n    (2, 10, 6, 20)\n    >>> I = (1,3,0,2)\n    >>> J = (0,2,1)\n    >>> J1 = (0,) + J             # extend to ndim=4\n    >>> S1 = (1,) + b.shape\n    >>> K = tuple(np.array(I) * np.array(S1) + np.array(J1))\n    >>> c[K] == a[I]*b[J]\n    True\n\n    '),
               ('numpy.lib.shape_base.tile',
                ['A', 'reps'],
                "\n    Construct an array by repeating A the number of times given by reps.\n\n    If `reps` has length ``d``, the result will have dimension of\n    ``max(d, A.ndim)``.\n\n    If ``A.ndim < d``, `A` is promoted to be d-dimensional by prepending new\n    axes. So a shape (3,) array is promoted to (1, 3) for 2-D replication,\n    or shape (1, 1, 3) for 3-D replication. If this is not the desired\n    behavior, promote `A` to d-dimensions manually before calling this\n    function.\n\n    If ``A.ndim > d``, `reps` is promoted to `A`.ndim by pre-pending 1's to it.\n    Thus for an `A` of shape (2, 3, 4, 5), a `reps` of (2, 2) is treated as\n    (1, 1, 2, 2).\n\n    Parameters\n    ----------\n    A : array_like\n        The input array.\n    reps : array_like\n        The number of repetitions of `A` along each axis.\n\n    Returns\n    -------\n    c : ndarray\n        The tiled output array.\n\n    See Also\n    --------\n    repeat : Repeat elements of an array.\n\n    Examples\n    --------\n    >>> a = np.array([0, 1, 2])\n    >>> np.tile(a, 2)\n    array([0, 1, 2, 0, 1, 2])\n    >>> np.tile(a, (2, 2))\n    array([[0, 1, 2, 0, 1, 2],\n           [0, 1, 2, 0, 1, 2]])\n    >>> np.tile(a, (2, 1, 2))\n    array([[[0, 1, 2, 0, 1, 2]],\n           [[0, 1, 2, 0, 1, 2]]])\n\n    >>> b = np.array([[1, 2], [3, 4]])\n    >>> np.tile(b, 2)\n    array([[1, 2, 1, 2],\n           [3, 4, 3, 4]])\n    >>> np.tile(b, (2, 1))\n    array([[1, 2],\n           [3, 4],\n           [1, 2],\n           [3, 4]])\n\n    "),
               ('numpy.lib.ufunclike.fix',
                ['x', 'y=None'],
                '\n    Round to nearest integer towards zero.\n\n    Round an array of floats element-wise to nearest integer towards zero.\n    The rounded values are returned as floats.\n\n    Parameters\n    ----------\n    x : array_like\n        An array of floats to be rounded\n    y : ndarray, optional\n        Output array\n\n    Returns\n    -------\n    out : ndarray of floats\n        The array of rounded numbers\n\n    See Also\n    --------\n    trunc, floor, ceil\n    around : Round to given number of decimals\n\n    Examples\n    --------\n    >>> np.fix(3.14)\n    3.0\n    >>> np.fix(3)\n    3.0\n    >>> np.fix([2.1, 2.9, -2.1, -2.9])\n    array([ 2.,  2., -2., -2.])\n\n    '),
               ('numpy.lib.ufunclike.isposinf',
                ['x', 'y=None'],
                '\n    Test element-wise for positive infinity, return result as bool array.\n\n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    y : array_like, optional\n        A boolean array with the same shape as `x` to store the result.\n\n    Returns\n    -------\n    y : ndarray\n        A boolean array with the same dimensions as the input.\n        If second argument is not supplied then a boolean array is returned\n        with values True where the corresponding element of the input is\n        positive infinity and values False where the element of the input is\n        not positive infinity.\n\n        If a second argument is supplied the result is stored there. If the\n        type of that array is a numeric type the result is represented as zeros\n        and ones, if the type is boolean then as False and True.\n        The return value `y` is then a reference to that array.\n\n    See Also\n    --------\n    isinf, isneginf, isfinite, isnan\n\n    Notes\n    -----\n    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n    (IEEE 754).\n\n    Errors result if the second argument is also supplied when `x` is a\n    scalar input, or if first and second arguments have different shapes.\n\n    Examples\n    --------\n    >>> np.isposinf(np.PINF)\n    array(True, dtype=bool)\n    >>> np.isposinf(np.inf)\n    array(True, dtype=bool)\n    >>> np.isposinf(np.NINF)\n    array(False, dtype=bool)\n    >>> np.isposinf([-np.inf, 0., np.inf])\n    array([False, False,  True], dtype=bool)\n\n    >>> x = np.array([-np.inf, 0., np.inf])\n    >>> y = np.array([2, 2, 2])\n    >>> np.isposinf(x, y)\n    array([0, 0, 1])\n    >>> y\n    array([0, 0, 1])\n\n    '),
               ('numpy.lib.ufunclike.isneginf',
                ['x', 'y=None'],
                '\n    Test element-wise for negative infinity, return result as bool array.\n\n    Parameters\n    ----------\n    x : array_like\n        The input array.\n    y : array_like, optional\n        A boolean array with the same shape and type as `x` to store the\n        result.\n\n    Returns\n    -------\n    y : ndarray\n        A boolean array with the same dimensions as the input.\n        If second argument is not supplied then a numpy boolean array is\n        returned with values True where the corresponding element of the\n        input is negative infinity and values False where the element of\n        the input is not negative infinity.\n\n        If a second argument is supplied the result is stored there. If the\n        type of that array is a numeric type the result is represented as\n        zeros and ones, if the type is boolean then as False and True. The\n        return value `y` is then a reference to that array.\n\n    See Also\n    --------\n    isinf, isposinf, isnan, isfinite\n\n    Notes\n    -----\n    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n    (IEEE 754).\n\n    Errors result if the second argument is also supplied when x is a scalar\n    input, or if first and second arguments have different shapes.\n\n    Examples\n    --------\n    >>> np.isneginf(np.NINF)\n    array(True, dtype=bool)\n    >>> np.isneginf(np.inf)\n    array(False, dtype=bool)\n    >>> np.isneginf(np.PINF)\n    array(False, dtype=bool)\n    >>> np.isneginf([-np.inf, 0., np.inf])\n    array([ True, False, False], dtype=bool)\n\n    >>> x = np.array([-np.inf, 0., np.inf])\n    >>> y = np.array([2, 2, 2])\n    >>> np.isneginf(x, y)\n    array([1, 0, 0])\n    >>> y\n    array([1, 0, 0])\n\n    '),
               ('numpy.lib.recfunctions.recursive_fill_fields',
                ['input', 'output'],
                "\n    Fills fields from output with fields from input,\n    with support for nested structures.\n\n    Parameters\n    ----------\n    input : ndarray\n        Input array.\n    output : ndarray\n        Output array.\n\n    Notes\n    -----\n    * `output` should be at least the same size as `input`\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> a = np.array([(1, 10.), (2, 20.)], dtype=[('A', int), ('B', float)])\n    >>> b = np.zeros((3,), dtype=a.dtype)\n    >>> rfn.recursive_fill_fields(a, b)\n    array([(1, 10.0), (2, 20.0), (0, 0.0)],\n          dtype=[('A', '<i4'), ('B', '<f8')])\n\n    "),
               ('numpy.lib.recfunctions.get_names',
                ['adtype'],
                "\n    Returns the field names of the input datatype as a tuple.\n\n    Parameters\n    ----------\n    adtype : dtype\n        Input datatype\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> rfn.get_names(np.empty((1,), dtype=int)) is None\n    True\n    >>> rfn.get_names(np.empty((1,), dtype=[('A',int), ('B', float)]))\n    ('A', 'B')\n    >>> adtype = np.dtype([('a', int), ('b', [('ba', int), ('bb', int)])])\n    >>> rfn.get_names(adtype)\n    ('a', ('b', ('ba', 'bb')))\n    "),
               ('numpy.lib.recfunctions.get_names_flat',
                ['adtype'],
                "\n    Returns the field names of the input datatype as a tuple. Nested structure\n    are flattend beforehand.\n\n    Parameters\n    ----------\n    adtype : dtype\n        Input datatype\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> rfn.get_names_flat(np.empty((1,), dtype=int)) is None\n    True\n    >>> rfn.get_names_flat(np.empty((1,), dtype=[('A',int), ('B', float)]))\n    ('A', 'B')\n    >>> adtype = np.dtype([('a', int), ('b', [('ba', int), ('bb', int)])])\n    >>> rfn.get_names_flat(adtype)\n    ('a', 'b', 'ba', 'bb')\n    "),
               ('numpy.lib.recfunctions.flatten_descr',
                ['ndtype'],
                "\n    Flatten a structured data-type description.\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> ndtype = np.dtype([('a', '<i4'), ('b', [('ba', '<f8'), ('bb', '<i4')])])\n    >>> rfn.flatten_descr(ndtype)\n    (('a', dtype('int32')), ('ba', dtype('float64')), ('bb', dtype('int32')))\n\n    "),
               ('numpy.lib.recfunctions.zip_descr',
                ['seqarrays', 'flatten=False'],
                '\n    Combine the dtype description of a series of arrays.\n\n    Parameters\n    ----------\n    seqarrays : sequence of arrays\n        Sequence of arrays\n    flatten : {boolean}, optional\n        Whether to collapse nested descriptions.\n    '),
               ('numpy.lib.recfunctions.get_fieldstructure',
                ['adtype', 'lastname=None', 'parents=None'],
                "\n    Returns a dictionary with fields as keys and a list of parent fields as values.\n\n    This function is used to simplify access to fields nested in other fields.\n\n    Parameters\n    ----------\n    adtype : np.dtype\n        Input datatype\n    lastname : optional\n        Last processed field name (used internally during recursion).\n    parents : dictionary\n        Dictionary of parent fields (used interbally during recursion).\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> ndtype =  np.dtype([('A', int),\n    ...                     ('B', [('BA', int),\n    ...                            ('BB', [('BBA', int), ('BBB', int)])])])\n    >>> rfn.get_fieldstructure(ndtype)\n    ... # XXX: possible regression, order of BBA and BBB is swapped\n    {'A': [], 'B': [], 'BA': ['B'], 'BB': ['B'], 'BBA': ['B', 'BB'], 'BBB': ['B', 'BB']}\n\n    "),
               ('numpy.lib.recfunctions._izip_fields_flat',
                ['iterable'],
                '\n    Returns an iterator of concatenated fields from a sequence of arrays,\n    collapsing any nested structure.\n    '),
               ('numpy.lib.recfunctions._izip_fields',
                ['iterable'],
                '\n    Returns an iterator of concatenated fields from a sequence of arrays.\n    '),
               ('numpy.lib.recfunctions.izip_records',
                ['seqarrays', 'fill_value=None', 'flatten=True'],
                '\n    Returns an iterator of concatenated items from a sequence of arrays.\n\n    Parameters\n    ----------\n    seqarray : sequence of arrays\n        Sequence of arrays.\n    fill_value : {None, integer}\n        Value used to pad shorter iterables.\n    flatten : {True, False},\n        Whether to\n    '),
               ('numpy.lib.recfunctions._fix_output',
                ['output', 'usemask=True', 'asrecarray=False'],
                '\n    Private function: return a recarray, a ndarray, a MaskedArray\n    or a MaskedRecords depending on the input parameters\n    '),
               ('numpy.lib.recfunctions._fix_defaults',
                ['output', 'defaults=None'],
                '\n    Update the fill_value and masked data of `output`\n    from the default given in a dictionary defaults.\n    '),
               ('numpy.lib.recfunctions.merge_arrays',
                ['seqarrays',
                 'fill_value=-1',
                 'flatten=False',
                 'usemask=False',
                 'asrecarray=False'],
                "\n    Merge arrays field by field.\n\n    Parameters\n    ----------\n    seqarrays : sequence of ndarrays\n        Sequence of arrays\n    fill_value : {float}, optional\n        Filling value used to pad missing data on the shorter arrays.\n    flatten : {False, True}, optional\n        Whether to collapse nested fields.\n    usemask : {False, True}, optional\n        Whether to return a masked array or not.\n    asrecarray : {False, True}, optional\n        Whether to return a recarray (MaskedRecords) or not.\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> rfn.merge_arrays((np.array([1, 2]), np.array([10., 20., 30.])))\n    masked_array(data = [(1, 10.0) (2, 20.0) (--, 30.0)],\n                 mask = [(False, False) (False, False) (True, False)],\n           fill_value = (999999, 1e+20),\n                dtype = [('f0', '<i4'), ('f1', '<f8')])\n\n    >>> rfn.merge_arrays((np.array([1, 2]), np.array([10., 20., 30.])),\n    ...              usemask=False)\n    array([(1, 10.0), (2, 20.0), (-1, 30.0)],\n          dtype=[('f0', '<i4'), ('f1', '<f8')])\n    >>> rfn.merge_arrays((np.array([1, 2]).view([('a', int)]),\n    ...               np.array([10., 20., 30.])),\n    ...              usemask=False, asrecarray=True)\n    rec.array([(1, 10.0), (2, 20.0), (-1, 30.0)],\n              dtype=[('a', '<i4'), ('f1', '<f8')])\n\n    Notes\n    -----\n    * Without a mask, the missing value will be filled with something,\n    * depending on what its corresponding type:\n            -1      for integers\n            -1.0    for floating point numbers\n            '-'     for characters\n            '-1'    for strings\n            True    for boolean values\n    * XXX: I just obtained these values empirically\n    "),
               ('numpy.lib.recfunctions.drop_fields',
                ['base', 'drop_names', 'usemask=True', 'asrecarray=False'],
                "\n    Return a new array with fields in `drop_names` dropped.\n\n    Nested fields are supported.\n\n    Parameters\n    ----------\n    base : array\n        Input array\n    drop_names : string or sequence\n        String or sequence of strings corresponding to the names of the fields\n        to drop.\n    usemask : {False, True}, optional\n        Whether to return a masked array or not.\n    asrecarray : string or sequence\n        Whether to return a recarray or a mrecarray (`asrecarray=True`) or\n        a plain ndarray or masked array with flexible dtype (`asrecarray=False`)\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> a = np.array([(1, (2, 3.0)), (4, (5, 6.0))],\n    ...   dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])\n    >>> rfn.drop_fields(a, 'a')\n    array([((2.0, 3),), ((5.0, 6),)],\n          dtype=[('b', [('ba', '<f8'), ('bb', '<i4')])])\n    >>> rfn.drop_fields(a, 'ba')\n    array([(1, (3,)), (4, (6,))],\n          dtype=[('a', '<i4'), ('b', [('bb', '<i4')])])\n    >>> rfn.drop_fields(a, ['ba', 'bb'])\n    array([(1,), (4,)],\n          dtype=[('a', '<i4')])\n    "),
               ('numpy.lib.recfunctions.rec_drop_fields',
                ['base', 'drop_names'],
                '\n    Returns a new numpy.recarray with fields in `drop_names` dropped.\n    '),
               ('numpy.lib.recfunctions.rename_fields',
                ['base', 'namemapper'],
                "\n    Rename the fields from a flexible-datatype ndarray or recarray.\n\n    Nested fields are supported.\n\n    Parameters\n    ----------\n    base : ndarray\n        Input array whose fields must be modified.\n    namemapper : dictionary\n        Dictionary mapping old field names to their new version.\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> a = np.array([(1, (2, [3.0, 30.])), (4, (5, [6.0, 60.]))],\n    ...   dtype=[('a', int),('b', [('ba', float), ('bb', (float, 2))])])\n    >>> rfn.rename_fields(a, {'a':'A', 'bb':'BB'})\n    array([(1, (2.0, [3.0, 30.0])), (4, (5.0, [6.0, 60.0]))],\n          dtype=[('A', '<i4'), ('b', [('ba', '<f8'), ('BB', '<f8', 2)])])\n\n    "),
               ('numpy.lib.recfunctions.append_fields',
                ['base',
                 'names',
                 'data',
                 'dtypes=None',
                 'fill_value=-1',
                 'usemask=True',
                 'asrecarray=False'],
                '\n    Add new fields to an existing array.\n\n    The names of the fields are given with the `names` arguments,\n    the corresponding values with the `data` arguments.\n    If a single field is appended, `names`, `data` and `dtypes` do not have\n    to be lists but just values.\n\n    Parameters\n    ----------\n    base : array\n        Input array to extend.\n    names : string, sequence\n        String or sequence of strings corresponding to the names\n        of the new fields.\n    data : array or sequence of arrays\n        Array or sequence of arrays storing the fields to add to the base.\n    dtypes : sequence of datatypes, optional\n        Datatype or sequence of datatypes.\n        If None, the datatypes are estimated from the `data`.\n    fill_value : {float}, optional\n        Filling value used to pad missing data on the shorter arrays.\n    usemask : {False, True}, optional\n        Whether to return a masked array or not.\n    asrecarray : {False, True}, optional\n        Whether to return a recarray (MaskedRecords) or not.\n\n    '),
               ('numpy.lib.recfunctions.rec_append_fields',
                ['base', 'names', 'data', 'dtypes=None'],
                '\n    Add new fields to an existing array.\n\n    The names of the fields are given with the `names` arguments,\n    the corresponding values with the `data` arguments.\n    If a single field is appended, `names`, `data` and `dtypes` do not have\n    to be lists but just values.\n\n    Parameters\n    ----------\n    base : array\n        Input array to extend.\n    names : string, sequence\n        String or sequence of strings corresponding to the names\n        of the new fields.\n    data : array or sequence of arrays\n        Array or sequence of arrays storing the fields to add to the base.\n    dtypes : sequence of datatypes, optional\n        Datatype or sequence of datatypes.\n        If None, the datatypes are estimated from the `data`.\n\n    See Also\n    --------\n    append_fields\n\n    Returns\n    -------\n    appended_array : np.recarray\n    '),
               ('numpy.lib.recfunctions.stack_arrays',
                ['arrays',
                 'defaults=None',
                 'usemask=True',
                 'asrecarray=False',
                 'autoconvert=False'],
                "\n    Superposes arrays fields by fields\n\n    Parameters\n    ----------\n    seqarrays : array or sequence\n        Sequence of input arrays.\n    defaults : dictionary, optional\n        Dictionary mapping field names to the corresponding default values.\n    usemask : {True, False}, optional\n        Whether to return a MaskedArray (or MaskedRecords is `asrecarray==True`)\n        or a ndarray.\n    asrecarray : {False, True}, optional\n        Whether to return a recarray (or MaskedRecords if `usemask==True`) or\n        just a flexible-type ndarray.\n    autoconvert : {False, True}, optional\n        Whether automatically cast the type of the field to the maximum.\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> x = np.array([1, 2,])\n    >>> rfn.stack_arrays(x) is x\n    True\n    >>> z = np.array([('A', 1), ('B', 2)], dtype=[('A', '|S3'), ('B', float)])\n    >>> zz = np.array([('a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],\n    ...   dtype=[('A', '|S3'), ('B', float), ('C', float)])\n    >>> test = rfn.stack_arrays((z,zz))\n    >>> test\n    masked_array(data = [('A', 1.0, --) ('B', 2.0, --) ('a', 10.0, 100.0) ('b', 20.0, 200.0)\n     ('c', 30.0, 300.0)],\n                 mask = [(False, False, True) (False, False, True) (False, False, False)\n     (False, False, False) (False, False, False)],\n           fill_value = ('N/A', 1e+20, 1e+20),\n                dtype = [('A', '|S3'), ('B', '<f8'), ('C', '<f8')])\n\n    "),
               ('numpy.lib.recfunctions.find_duplicates',
                ['a', 'key=None', 'ignoremask=True', 'return_index=False'],
                "\n    Find the duplicates in a structured array along a given key\n\n    Parameters\n    ----------\n    a : array-like\n        Input array\n    key : {string, None}, optional\n        Name of the fields along which to check the duplicates.\n        If None, the search is performed by records\n    ignoremask : {True, False}, optional\n        Whether masked data should be discarded or considered as duplicates.\n    return_index : {False, True}, optional\n        Whether to return the indices of the duplicated values.\n\n    Examples\n    --------\n    >>> from numpy.lib import recfunctions as rfn\n    >>> ndtype = [('a', int)]\n    >>> a = np.ma.array([1, 1, 1, 2, 2, 3, 3],\n    ...         mask=[0, 0, 1, 0, 0, 0, 1]).view(ndtype)\n    >>> rfn.find_duplicates(a, ignoremask=True, return_index=True)\n    ... # XXX: judging by the output, the ignoremask flag has no effect\n    "),
               ('numpy.lib.recfunctions.join_by',
                ['key',
                 'r1',
                 'r2',
                 "jointype='inner'",
                 "r1postfix='1'",
                 "r2postfix='2'",
                 'defaults=None',
                 'usemask=True',
                 'asrecarray=False'],
                "\n    Join arrays `r1` and `r2` on key `key`.\n\n    The key should be either a string or a sequence of string corresponding\n    to the fields used to join the array.\n    An exception is raised if the `key` field cannot be found in the two input\n    arrays.\n    Neither `r1` nor `r2` should have any duplicates along `key`: the presence\n    of duplicates will make the output quite unreliable. Note that duplicates\n    are not looked for by the algorithm.\n\n    Parameters\n    ----------\n    key : {string, sequence}\n        A string or a sequence of strings corresponding to the fields used\n        for comparison.\n    r1, r2 : arrays\n        Structured arrays.\n    jointype : {'inner', 'outer', 'leftouter'}, optional\n        If 'inner', returns the elements common to both r1 and r2.\n        If 'outer', returns the common elements as well as the elements of r1\n        not in r2 and the elements of not in r2.\n        If 'leftouter', returns the common elements and the elements of r1 not\n        in r2.\n    r1postfix : string, optional\n        String appended to the names of the fields of r1 that are present in r2\n        but absent of the key.\n    r2postfix : string, optional\n        String appended to the names of the fields of r2 that are present in r1\n        but absent of the key.\n    defaults : {dictionary}, optional\n        Dictionary mapping field names to the corresponding default values.\n    usemask : {True, False}, optional\n        Whether to return a MaskedArray (or MaskedRecords is `asrecarray==True`)\n        or a ndarray.\n    asrecarray : {False, True}, optional\n        Whether to return a recarray (or MaskedRecords if `usemask==True`) or\n        just a flexible-type ndarray.\n\n    Notes\n    -----\n    * The output is sorted along the key.\n    * A temporary array is formed by dropping the fields not in the key for the\n      two arrays and concatenating the result. This array is then sorted, and\n      the common entries selected. The output is constructed by filling the fields\n      with the selected entries. Matching is not preserved if there are some\n      duplicates...\n\n    "),
               ('numpy.lib.recfunctions.rec_join',
                ['key',
                 'r1',
                 'r2',
                 "jointype='inner'",
                 "r1postfix='1'",
                 "r2postfix='2'",
                 'defaults=None'],
                '\n    Join arrays `r1` and `r2` on keys.\n    Alternative to join_by, that always returns a np.recarray.\n\n    See Also\n    --------\n    join_by : equivalent function\n    '),
               ('numpy.lib.function_base.iterable',
                ['y'],
                '\n    Check whether or not an object can be iterated over.\n\n    Parameters\n    ----------\n    y : object\n      Input object.\n\n    Returns\n    -------\n    b : {0, 1}\n      Return 1 if the object has an iterator method or is a sequence,\n      and 0 otherwise.\n\n\n    Examples\n    --------\n    >>> np.iterable([1, 2, 3])\n    1\n    >>> np.iterable(2)\n    0\n\n    '),
               ('numpy.lib.function_base.histogram',
                ['a', 'bins=10', 'range=None', 'normed=False', 'weights=None', 'density=None'],
                '\n    Compute the histogram of a set of data.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data. The histogram is computed over the flattened array.\n    bins : int or sequence of scalars, optional\n        If `bins` is an int, it defines the number of equal-width\n        bins in the given range (10, by default). If `bins` is a sequence,\n        it defines the bin edges, including the rightmost edge, allowing\n        for non-uniform bin widths.\n    range : (float, float), optional\n        The lower and upper range of the bins.  If not provided, range\n        is simply ``(a.min(), a.max())``.  Values outside the range are\n        ignored.\n    normed : bool, optional\n        This keyword is deprecated in Numpy 1.6 due to confusing/buggy\n        behavior. It will be removed in Numpy 2.0. Use the density keyword\n        instead.\n        If False, the result will contain the number of samples\n        in each bin.  If True, the result is the value of the\n        probability *density* function at the bin, normalized such that\n        the *integral* over the range is 1. Note that this latter behavior is\n        known to be buggy with unequal bin widths; use `density` instead.\n    weights : array_like, optional\n        An array of weights, of the same shape as `a`.  Each value in `a`\n        only contributes its associated weight towards the bin count\n        (instead of 1).  If `normed` is True, the weights are normalized,\n        so that the integral of the density over the range remains 1\n    density : bool, optional\n        If False, the result will contain the number of samples\n        in each bin.  If True, the result is the value of the\n        probability *density* function at the bin, normalized such that\n        the *integral* over the range is 1. Note that the sum of the\n        histogram values will not be equal to 1 unless bins of unity\n        width are chosen; it is not a probability *mass* function.\n        Overrides the `normed` keyword if given.\n\n    Returns\n    -------\n    hist : array\n        The values of the histogram. See `normed` and `weights` for a\n        description of the possible semantics.\n    bin_edges : array of dtype float\n        Return the bin edges ``(length(hist)+1)``.\n\n\n    See Also\n    --------\n    histogramdd, bincount, searchsorted, digitize\n\n    Notes\n    -----\n    All but the last (righthand-most) bin is half-open.  In other words, if\n    `bins` is::\n\n      [1, 2, 3, 4]\n\n    then the first bin is ``[1, 2)`` (including 1, but excluding 2) and the\n    second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which *includes*\n    4.\n\n    Examples\n    --------\n    >>> np.histogram([1, 2, 1], bins=[0, 1, 2, 3])\n    (array([0, 2, 1]), array([0, 1, 2, 3]))\n    >>> np.histogram(np.arange(4), bins=np.arange(5), density=True)\n    (array([ 0.25,  0.25,  0.25,  0.25]), array([0, 1, 2, 3, 4]))\n    >>> np.histogram([[1, 2, 1], [1, 0, 1]], bins=[0,1,2,3])\n    (array([1, 4, 1]), array([0, 1, 2, 3]))\n\n    >>> a = np.arange(5)\n    >>> hist, bin_edges = np.histogram(a, density=True)\n    >>> hist\n    array([ 0.5,  0. ,  0.5,  0. ,  0. ,  0.5,  0. ,  0.5,  0. ,  0.5])\n    >>> hist.sum()\n    2.4999999999999996\n    >>> np.sum(hist*np.diff(bin_edges))\n    1.0\n\n    '),
               ('numpy.lib.function_base.histogramdd',
                ['sample', 'bins=10', 'range=None', 'normed=False', 'weights=None'],
                '\n    Compute the multidimensional histogram of some data.\n\n    Parameters\n    ----------\n    sample : array_like\n        The data to be histogrammed. It must be an (N,D) array or data\n        that can be converted to such. The rows of the resulting array\n        are the coordinates of points in a D dimensional polytope.\n    bins : sequence or int, optional\n        The bin specification:\n\n        * A sequence of arrays describing the bin edges along each dimension.\n        * The number of bins for each dimension (nx, ny, ... =bins)\n        * The number of bins for all dimensions (nx=ny=...=bins).\n\n    range : sequence, optional\n        A sequence of lower and upper bin edges to be used if the edges are\n        not given explicitely in `bins`. Defaults to the minimum and maximum\n        values along each dimension.\n    normed : bool, optional\n        If False, returns the number of samples in each bin. If True, returns\n        the bin density, ie, the bin count divided by the bin hypervolume.\n    weights : array_like (N,), optional\n        An array of values `w_i` weighing each sample `(x_i, y_i, z_i, ...)`.\n        Weights are normalized to 1 if normed is True. If normed is False, the\n        values of the returned histogram are equal to the sum of the weights\n        belonging to the samples falling into each bin.\n\n    Returns\n    -------\n    H : ndarray\n        The multidimensional histogram of sample x. See normed and weights for\n        the different possible semantics.\n    edges : list\n        A list of D arrays describing the bin edges for each dimension.\n\n    See Also\n    --------\n    histogram: 1-D histogram\n    histogram2d: 2-D histogram\n\n    Examples\n    --------\n    >>> r = np.random.randn(100,3)\n    >>> H, edges = np.histogramdd(r, bins = (5, 8, 4))\n    >>> H.shape, edges[0].size, edges[1].size, edges[2].size\n    ((5, 8, 4), 6, 9, 5)\n\n    '),
               ('numpy.lib.function_base.average',
                ['a', 'axis=None', 'weights=None', 'returned=False'],
                '\n    Compute the weighted average along the specified axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing data to be averaged. If `a` is not an array, a\n        conversion is attempted.\n    axis : int, optional\n        Axis along which to average `a`. If `None`, averaging is done over\n        the flattened array.\n    weights : array_like, optional\n        An array of weights associated with the values in `a`. Each value in\n        `a` contributes to the average according to its associated weight.\n        The weights array can either be 1-D (in which case its length must be\n        the size of `a` along the given axis) or of the same shape as `a`.\n        If `weights=None`, then all data in `a` are assumed to have a\n        weight equal to one.\n    returned : bool, optional\n        Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\n        is returned, otherwise only the average is returned.\n        If `weights=None`, `sum_of_weights` is equivalent to the number of\n        elements over which the average is taken.\n\n\n    Returns\n    -------\n    average, [sum_of_weights] : {array_type, double}\n        Return the average along the specified axis. When returned is `True`,\n        return a tuple with the average as the first element and the sum\n        of the weights as the second element. The return type is `Float`\n        if `a` is of integer type, otherwise it is of the same type as `a`.\n        `sum_of_weights` is of the same type as `average`.\n\n    Raises\n    ------\n    ZeroDivisionError\n        When all weights along axis are zero. See `numpy.ma.average` for a\n        version robust to this type of error.\n    TypeError\n        When the length of 1D `weights` is not the same as the shape of `a`\n        along axis.\n\n    See Also\n    --------\n    mean\n\n    ma.average : average for masked arrays\n\n    Examples\n    --------\n    >>> data = range(1,5)\n    >>> data\n    [1, 2, 3, 4]\n    >>> np.average(data)\n    2.5\n    >>> np.average(range(1,11), weights=range(10,0,-1))\n    4.0\n\n    >>> data = np.arange(6).reshape((3,2))\n    >>> data\n    array([[0, 1],\n           [2, 3],\n           [4, 5]])\n    >>> np.average(data, axis=1, weights=[1./4, 3./4])\n    array([ 0.75,  2.75,  4.75])\n    >>> np.average(data, weights=[1./4, 3./4])\n    Traceback (most recent call last):\n    ...\n    TypeError: Axis must be specified when shapes of a and weights differ.\n\n    '),
               ('numpy.lib.function_base.asarray_chkfinite',
                ['a'],
                "\n    Convert the input to an array, checking for NaNs or Infs.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists and ndarrays.  Success requires no NaNs or Infs.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('FORTRAN') memory\n        representation.  Defaults to 'C'.\n\n    Returns\n    -------\n    out : ndarray\n        Array interpretation of `a`.  No copy is performed if the input\n        is already an ndarray.  If `a` is a subclass of ndarray, a base\n        class ndarray is returned.\n\n    Raises\n    ------\n    ValueError\n        Raises ValueError if `a` contains NaN (Not a Number) or Inf (Infinity).\n\n    See Also\n    --------\n    asarray : Create and array.\n    asanyarray : Similar function which passes through subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n\n    Examples\n    --------\n    Convert a list into an array.  If all elements are finite\n    ``asarray_chkfinite`` is identical to ``asarray``.\n\n    >>> a = [1, 2]\n    >>> np.asarray_chkfinite(a)\n    array([1, 2])\n\n    Raises ValueError if array_like contains Nans or Infs.\n\n    >>> a = [1, 2, np.inf]\n    >>> try:\n    ...     np.asarray_chkfinite(a)\n    ... except ValueError:\n    ...     print 'ValueError'\n    ...\n    ValueError\n\n    "),
               ('numpy.lib.function_base.piecewise',
                ['x', 'condlist', 'funclist', '*args', '**kw'],
                "\n    Evaluate a piecewise-defined function.\n\n    Given a set of conditions and corresponding functions, evaluate each\n    function on the input data wherever its condition is true.\n\n    Parameters\n    ----------\n    x : ndarray\n        The input domain.\n    condlist : list of bool arrays\n        Each boolean array corresponds to a function in `funclist`.  Wherever\n        `condlist[i]` is True, `funclist[i](x)` is used as the output value.\n\n        Each boolean array in `condlist` selects a piece of `x`,\n        and should therefore be of the same shape as `x`.\n\n        The length of `condlist` must correspond to that of `funclist`.\n        If one extra function is given, i.e. if\n        ``len(funclist) - len(condlist) == 1``, then that extra function\n        is the default value, used wherever all conditions are false.\n    funclist : list of callables, f(x,*args,**kw), or scalars\n        Each function is evaluated over `x` wherever its corresponding\n        condition is True.  It should take an array as input and give an array\n        or a scalar value as output.  If, instead of a callable,\n        a scalar is provided then a constant function (``lambda x: scalar``) is\n        assumed.\n    args : tuple, optional\n        Any further arguments given to `piecewise` are passed to the functions\n        upon execution, i.e., if called ``piecewise(..., ..., 1, 'a')``, then\n        each function is called as ``f(x, 1, 'a')``.\n    kw : dict, optional\n        Keyword arguments used in calling `piecewise` are passed to the\n        functions upon execution, i.e., if called\n        ``piecewise(..., ..., lambda=1)``, then each function is called as\n        ``f(x, lambda=1)``.\n\n    Returns\n    -------\n    out : ndarray\n        The output is the same shape and type as x and is found by\n        calling the functions in `funclist` on the appropriate portions of `x`,\n        as defined by the boolean arrays in `condlist`.  Portions not covered\n        by any condition have undefined values.\n\n\n    See Also\n    --------\n    choose, select, where\n\n    Notes\n    -----\n    This is similar to choose or select, except that functions are\n    evaluated on elements of `x` that satisfy the corresponding condition from\n    `condlist`.\n\n    The result is::\n\n            |--\n            |funclist[0](x[condlist[0]])\n      out = |funclist[1](x[condlist[1]])\n            |...\n            |funclist[n2](x[condlist[n2]])\n            |--\n\n    Examples\n    --------\n    Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.\n\n    >>> x = np.arange(6) - 2.5\n    >>> np.piecewise(x, [x < 0, x >= 0], [-1, 1])\n    array([-1., -1., -1.,  1.,  1.,  1.])\n\n    Define the absolute value, which is ``-x`` for ``x <0`` and ``x`` for\n    ``x >= 0``.\n\n    >>> np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])\n    array([ 2.5,  1.5,  0.5,  0.5,  1.5,  2.5])\n\n    "),
               ('numpy.lib.function_base.select',
                ['condlist', 'choicelist', 'default=0'],
                '\n    Return an array drawn from elements in choicelist, depending on conditions.\n\n    Parameters\n    ----------\n    condlist : list of bool ndarrays\n        The list of conditions which determine from which array in `choicelist`\n        the output elements are taken. When multiple conditions are satisfied,\n        the first one encountered in `condlist` is used.\n    choicelist : list of ndarrays\n        The list of arrays from which the output elements are taken. It has\n        to be of the same length as `condlist`.\n    default : scalar, optional\n        The element inserted in `output` when all conditions evaluate to False.\n\n    Returns\n    -------\n    output : ndarray\n        The output at position m is the m-th element of the array in\n        `choicelist` where the m-th element of the corresponding array in\n        `condlist` is True.\n\n    See Also\n    --------\n    where : Return elements from one of two arrays depending on condition.\n    take, choose, compress, diag, diagonal\n\n    Examples\n    --------\n    >>> x = np.arange(10)\n    >>> condlist = [x<3, x>5]\n    >>> choicelist = [x, x**2]\n    >>> np.select(condlist, choicelist)\n    array([ 0,  1,  2,  0,  0,  0, 36, 49, 64, 81])\n\n    '),
               ('numpy.lib.function_base.copy',
                ['a'],
                '\n    Return an array copy of the given object.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n\n    Returns\n    -------\n    arr : ndarray\n        Array interpretation of `a`.\n\n    Notes\n    -----\n    This is equivalent to\n\n    >>> np.array(a, copy=True)                              #doctest: +SKIP\n\n    Examples\n    --------\n    Create an array x, with a reference y and a copy z:\n\n    >>> x = np.array([1, 2, 3])\n    >>> y = x\n    >>> z = np.copy(x)\n\n    Note that, when we modify x, y changes, but not z:\n\n    >>> x[0] = 10\n    >>> x[0] == y[0]\n    True\n    >>> x[0] == z[0]\n    False\n\n    '),
               ('numpy.lib.function_base.gradient',
                ['f', '*varargs'],
                '\n    Return the gradient of an N-dimensional array.\n\n    The gradient is computed using central differences in the interior\n    and first differences at the boundaries. The returned gradient hence has\n    the same shape as the input array.\n\n    Parameters\n    ----------\n    f : array_like\n      An N-dimensional array containing samples of a scalar function.\n    `*varargs` : scalars\n      0, 1, or N scalars specifying the sample distances in each direction,\n      that is: `dx`, `dy`, `dz`, ... The default distance is 1.\n\n\n    Returns\n    -------\n    g : ndarray\n      N arrays of the same shape as `f` giving the derivative of `f` with\n      respect to each dimension.\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 4, 7, 11, 16], dtype=np.float)\n    >>> np.gradient(x)\n    array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])\n    >>> np.gradient(x, 2)\n    array([ 0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])\n\n    >>> np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float))\n    [array([[ 2.,  2., -1.],\n           [ 2.,  2., -1.]]),\n    array([[ 1. ,  2.5,  4. ],\n           [ 1. ,  1. ,  1. ]])]\n\n    '),
               ('numpy.lib.function_base.diff',
                ['a', 'n=1', 'axis=-1'],
                '\n    Calculate the n-th order discrete difference along given axis.\n\n    The first order difference is given by ``out[n] = a[n+1] - a[n]`` along\n    the given axis, higher order differences are calculated by using `diff`\n    recursively.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n    n : int, optional\n        The number of times values are differenced.\n    axis : int, optional\n        The axis along which the difference is taken, default is the last axis.\n\n    Returns\n    -------\n    out : ndarray\n        The `n` order differences. The shape of the output is the same as `a`\n        except along `axis` where the dimension is smaller by `n`.\n\n    See Also\n    --------\n    gradient, ediff1d\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 4, 7, 0])\n    >>> np.diff(x)\n    array([ 1,  2,  3, -7])\n    >>> np.diff(x, n=2)\n    array([  1,   1, -10])\n\n    >>> x = np.array([[1, 3, 6, 10], [0, 5, 6, 8]])\n    >>> np.diff(x)\n    array([[2, 3, 4],\n           [5, 1, 2]])\n    >>> np.diff(x, axis=0)\n    array([[-1,  2,  0, -2]])\n\n    '),
               ('numpy.lib.function_base.interp',
                ['x', 'xp', 'fp', 'left=None', 'right=None'],
                "\n    One-dimensional linear interpolation.\n\n    Returns the one-dimensional piecewise linear interpolant to a function\n    with given values at discrete data-points.\n\n    Parameters\n    ----------\n    x : array_like\n        The x-coordinates of the interpolated values.\n\n    xp : 1-D sequence of floats\n        The x-coordinates of the data points, must be increasing.\n\n    fp : 1-D sequence of floats\n        The y-coordinates of the data points, same length as `xp`.\n\n    left : float, optional\n        Value to return for `x < xp[0]`, default is `fp[0]`.\n\n    right : float, optional\n        Value to return for `x > xp[-1]`, defaults is `fp[-1]`.\n\n    Returns\n    -------\n    y : {float, ndarray}\n        The interpolated values, same shape as `x`.\n\n    Raises\n    ------\n    ValueError\n        If `xp` and `fp` have different length\n\n    Notes\n    -----\n    Does not check that the x-coordinate sequence `xp` is increasing.\n    If `xp` is not increasing, the results are nonsense.\n    A simple check for increasingness is::\n\n        np.all(np.diff(xp) > 0)\n\n\n    Examples\n    --------\n    >>> xp = [1, 2, 3]\n    >>> fp = [3, 2, 0]\n    >>> np.interp(2.5, xp, fp)\n    1.0\n    >>> np.interp([0, 1, 1.5, 2.72, 3.14], xp, fp)\n    array([ 3. ,  3. ,  2.5 ,  0.56,  0. ])\n    >>> UNDEF = -99.0\n    >>> np.interp(3.14, xp, fp, right=UNDEF)\n    -99.0\n\n    Plot an interpolant to the sine function:\n\n    >>> x = np.linspace(0, 2*np.pi, 10)\n    >>> y = np.sin(x)\n    >>> xvals = np.linspace(0, 2*np.pi, 50)\n    >>> yinterp = np.interp(xvals, x, y)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x, y, 'o')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.plot(xvals, yinterp, '-x')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.show()\n\n    "),
               ('numpy.lib.function_base.angle',
                ['z', 'deg=0'],
                '\n    Return the angle of the complex argument.\n\n    Parameters\n    ----------\n    z : array_like\n        A complex number or sequence of complex numbers.\n    deg : bool, optional\n        Return angle in degrees if True, radians if False (default).\n\n    Returns\n    -------\n    angle : {ndarray, scalar}\n        The counterclockwise angle from the positive real axis on\n        the complex plane, with dtype as numpy.float64.\n\n    See Also\n    --------\n    arctan2\n    absolute\n\n\n\n    Examples\n    --------\n    >>> np.angle([1.0, 1.0j, 1+1j])               # in radians\n    array([ 0.        ,  1.57079633,  0.78539816])\n    >>> np.angle(1+1j, deg=True)                  # in degrees\n    45.0\n\n    '),
               ('numpy.lib.function_base.unwrap',
                ['p', 'discont=pi', 'axis=-1'],
                '\n    Unwrap by changing deltas between values to 2*pi complement.\n\n    Unwrap radian phase `p` by changing absolute jumps greater than\n    `discont` to their 2*pi complement along the given axis.\n\n    Parameters\n    ----------\n    p : array_like\n        Input array.\n    discont : float, optional\n        Maximum discontinuity between values, default is ``pi``.\n    axis : int, optional\n        Axis along which unwrap will operate, default is the last axis.\n\n    Returns\n    -------\n    out : ndarray\n        Output array.\n\n    See Also\n    --------\n    rad2deg, deg2rad\n\n    Notes\n    -----\n    If the discontinuity in `p` is smaller than ``pi``, but larger than\n    `discont`, no unwrapping is done because taking the 2*pi complement\n    would only make the discontinuity larger.\n\n    Examples\n    --------\n    >>> phase = np.linspace(0, np.pi, num=5)\n    >>> phase[3:] += np.pi\n    >>> phase\n    array([ 0.        ,  0.78539816,  1.57079633,  5.49778714,  6.28318531])\n    >>> np.unwrap(phase)\n    array([ 0.        ,  0.78539816,  1.57079633, -0.78539816,  0.        ])\n\n    '),
               ('numpy.lib.function_base.sort_complex',
                ['a'],
                '\n    Sort a complex array using the real part first, then the imaginary part.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n\n    Returns\n    -------\n    out : complex ndarray\n        Always returns a sorted complex array.\n\n    Examples\n    --------\n    >>> np.sort_complex([5, 3, 6, 2, 1])\n    array([ 1.+0.j,  2.+0.j,  3.+0.j,  5.+0.j,  6.+0.j])\n\n    >>> np.sort_complex([1 + 2j, 2 - 1j, 3 - 2j, 3 - 3j, 3 + 5j])\n    array([ 1.+2.j,  2.-1.j,  3.-3.j,  3.-2.j,  3.+5.j])\n\n    '),
               ('numpy.lib.function_base.trim_zeros',
                ['filt', "trim='fb'"],
                "\n    Trim the leading and/or trailing zeros from a 1-D array or sequence.\n\n    Parameters\n    ----------\n    filt : 1-D array or sequence\n        Input array.\n    trim : str, optional\n        A string with 'f' representing trim from front and 'b' to trim from\n        back. Default is 'fb', trim zeros from both front and back of the\n        array.\n\n    Returns\n    -------\n    trimmed : 1-D array or sequence\n        The result of trimming the input. The input data type is preserved.\n\n    Examples\n    --------\n    >>> a = np.array((0, 0, 0, 1, 2, 3, 0, 2, 1, 0))\n    >>> np.trim_zeros(a)\n    array([1, 2, 3, 0, 2, 1])\n\n    >>> np.trim_zeros(a, 'b')\n    array([0, 0, 0, 1, 2, 3, 0, 2, 1])\n\n    The input data type is preserved, list/tuple in means list/tuple out.\n\n    >>> np.trim_zeros([0, 1, 2, 0])\n    [1, 2]\n\n    "),
               ('numpy.lib.function_base.unique',
                ['x'],
                '\n    This function is deprecated.  Use numpy.lib.arraysetops.unique()\n    instead.\n    '),
               ('numpy.lib.function_base.extract',
                ['condition', 'arr'],
                '\n    Return the elements of an array that satisfy some condition.\n\n    This is equivalent to ``np.compress(ravel(condition), ravel(arr))``.  If\n    `condition` is boolean ``np.extract`` is equivalent to ``arr[condition]``.\n\n    Parameters\n    ----------\n    condition : array_like\n        An array whose nonzero or True entries indicate the elements of `arr`\n        to extract.\n    arr : array_like\n        Input array of the same size as `condition`.\n\n    See Also\n    --------\n    take, put, putmask, compress\n\n    Examples\n    --------\n    >>> arr = np.arange(12).reshape((3, 4))\n    >>> arr\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11]])\n    >>> condition = np.mod(arr, 3)==0\n    >>> condition\n    array([[ True, False, False,  True],\n           [False, False,  True, False],\n           [False,  True, False, False]], dtype=bool)\n    >>> np.extract(condition, arr)\n    array([0, 3, 6, 9])\n\n\n    If `condition` is boolean:\n\n    >>> arr[condition]\n    array([0, 3, 6, 9])\n\n    '),
               ('numpy.lib.function_base.place',
                ['arr', 'mask', 'vals'],
                '\n    Change elements of an array based on conditional and input values.\n\n    Similar to ``np.putmask(arr, mask, vals)``, the difference is that `place`\n    uses the first N elements of `vals`, where N is the number of True values\n    in `mask`, while `putmask` uses the elements where `mask` is True.\n\n    Note that `extract` does the exact opposite of `place`.\n\n    Parameters\n    ----------\n    arr : array_like\n        Array to put data into.\n    mask : array_like\n        Boolean mask array. Must have the same size as `a`.\n    vals : 1-D sequence\n        Values to put into `a`. Only the first N elements are used, where\n        N is the number of True values in `mask`. If `vals` is smaller\n        than N it will be repeated.\n\n    See Also\n    --------\n    putmask, put, take, extract\n\n    Examples\n    --------\n    >>> arr = np.arange(6).reshape(2, 3)\n    >>> np.place(arr, arr>2, [44, 55])\n    >>> arr\n    array([[ 0,  1,  2],\n           [44, 55, 44]])\n\n    '),
               ('numpy.lib.function_base._nanop',
                ['op', 'fill', 'a', 'axis=None'],
                '\n    General operation on arrays with not-a-number values.\n\n    Parameters\n    ----------\n    op : callable\n        Operation to perform.\n    fill : float\n        NaN values are set to fill before doing the operation.\n    a : array-like\n        Input array.\n    axis : {int, None}, optional\n        Axis along which the operation is computed.\n        By default the input is flattened.\n\n    Returns\n    -------\n    y : {ndarray, scalar}\n        Processed data.\n\n    '),
               ('numpy.lib.function_base.nansum',
                ['a', 'axis=None'],
                '\n    Return the sum of array elements over a given axis treating\n    Not a Numbers (NaNs) as zero.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing numbers whose sum is desired. If `a` is not an\n        array, a conversion is attempted.\n    axis : int, optional\n        Axis along which the sum is computed. The default is to compute\n        the sum of the flattened array.\n\n    Returns\n    -------\n    y : ndarray\n        An array with the same shape as a, with the specified axis removed.\n        If a is a 0-d array, or if axis is None, a scalar is returned with\n        the same dtype as `a`.\n\n    See Also\n    --------\n    numpy.sum : Sum across array including Not a Numbers.\n    isnan : Shows which elements are Not a Number (NaN).\n    isfinite: Shows which elements are not: Not a Number, positive and\n             negative infinity\n\n    Notes\n    -----\n    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n    (IEEE 754). This means that Not a Number is not equivalent to infinity.\n    If positive or negative infinity are present the result is positive or\n    negative infinity. But if both positive and negative infinity are present,\n    the result is Not A Number (NaN).\n\n    Arithmetic is modular when using integer types (all elements of `a` must\n    be finite i.e. no elements that are NaNs, positive infinity and negative\n    infinity because NaNs are floating point types), and no error is raised\n    on overflow.\n\n\n    Examples\n    --------\n    >>> np.nansum(1)\n    1\n    >>> np.nansum([1])\n    1\n    >>> np.nansum([1, np.nan])\n    1.0\n    >>> a = np.array([[1, 1], [1, np.nan]])\n    >>> np.nansum(a)\n    3.0\n    >>> np.nansum(a, axis=0)\n    array([ 2.,  1.])\n\n    When positive infinity and negative infinity are present\n\n    >>> np.nansum([1, np.nan, np.inf])\n    inf\n    >>> np.nansum([1, np.nan, np.NINF])\n    -inf\n    >>> np.nansum([1, np.nan, np.inf, np.NINF])\n    nan\n\n    '),
               ('numpy.lib.function_base.nanmin',
                ['a', 'axis=None'],
                '\n    Return the minimum of an array or minimum along an axis ignoring any NaNs.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing numbers whose minimum is desired.\n    axis : int, optional\n        Axis along which the minimum is computed.The default is to compute\n        the minimum of the flattened array.\n\n    Returns\n    -------\n    nanmin : ndarray\n        A new array or a scalar array with the result.\n\n    See Also\n    --------\n    numpy.amin : Minimum across array including any Not a Numbers.\n    numpy.nanmax : Maximum across array ignoring any Not a Numbers.\n    isnan : Shows which elements are Not a Number (NaN).\n    isfinite: Shows which elements are not: Not a Number, positive and\n             negative infinity\n\n    Notes\n    -----\n    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n    (IEEE 754). This means that Not a Number is not equivalent to infinity.\n    Positive infinity is treated as a very large number and negative infinity\n    is treated as a very small (i.e. negative) number.\n\n    If the input has a integer type the function is equivalent to np.min.\n\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, np.nan]])\n    >>> np.nanmin(a)\n    1.0\n    >>> np.nanmin(a, axis=0)\n    array([ 1.,  2.])\n    >>> np.nanmin(a, axis=1)\n    array([ 1.,  3.])\n\n    When positive infinity and negative infinity are present:\n\n    >>> np.nanmin([1, 2, np.nan, np.inf])\n    1.0\n    >>> np.nanmin([1, 2, np.nan, np.NINF])\n    -inf\n\n    '),
               ('numpy.lib.function_base.nanargmin',
                ['a', 'axis=None'],
                '\n    Return indices of the minimum values over an axis, ignoring NaNs.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : int, optional\n        Axis along which to operate.  By default flattened input is used.\n\n    Returns\n    -------\n    index_array : ndarray\n        An array of indices or a single index value.\n\n    See Also\n    --------\n    argmin, nanargmax\n\n    Examples\n    --------\n    >>> a = np.array([[np.nan, 4], [2, 3]])\n    >>> np.argmin(a)\n    0\n    >>> np.nanargmin(a)\n    2\n    >>> np.nanargmin(a, axis=0)\n    array([1, 1])\n    >>> np.nanargmin(a, axis=1)\n    array([1, 0])\n\n    '),
               ('numpy.lib.function_base.nanmax',
                ['a', 'axis=None'],
                '\n    Return the maximum of an array or maximum along an axis ignoring any NaNs.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing numbers whose maximum is desired. If `a` is not\n        an array, a conversion is attempted.\n    axis : int, optional\n        Axis along which the maximum is computed. The default is to compute\n        the maximum of the flattened array.\n\n    Returns\n    -------\n    nanmax : ndarray\n        An array with the same shape as `a`, with the specified axis removed.\n        If `a` is a 0-d array, or if axis is None, a ndarray scalar is\n        returned.  The the same dtype as `a` is returned.\n\n    See Also\n    --------\n    numpy.amax : Maximum across array including any Not a Numbers.\n    numpy.nanmin : Minimum across array ignoring any Not a Numbers.\n    isnan : Shows which elements are Not a Number (NaN).\n    isfinite: Shows which elements are not: Not a Number, positive and\n             negative infinity\n\n    Notes\n    -----\n    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n    (IEEE 754). This means that Not a Number is not equivalent to infinity.\n    Positive infinity is treated as a very large number and negative infinity\n    is treated as a very small (i.e. negative) number.\n\n    If the input has a integer type the function is equivalent to np.max.\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, np.nan]])\n    >>> np.nanmax(a)\n    3.0\n    >>> np.nanmax(a, axis=0)\n    array([ 3.,  2.])\n    >>> np.nanmax(a, axis=1)\n    array([ 2.,  3.])\n\n    When positive infinity and negative infinity are present:\n\n    >>> np.nanmax([1, 2, np.nan, np.NINF])\n    2.0\n    >>> np.nanmax([1, 2, np.nan, np.inf])\n    inf\n\n    '),
               ('numpy.lib.function_base.nanargmax',
                ['a', 'axis=None'],
                '\n    Return indices of the maximum values over an axis, ignoring NaNs.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : int, optional\n        Axis along which to operate.  By default flattened input is used.\n\n    Returns\n    -------\n    index_array : ndarray\n        An array of indices or a single index value.\n\n    See Also\n    --------\n    argmax, nanargmin\n\n    Examples\n    --------\n    >>> a = np.array([[np.nan, 4], [2, 3]])\n    >>> np.argmax(a)\n    0\n    >>> np.nanargmax(a)\n    1\n    >>> np.nanargmax(a, axis=0)\n    array([1, 0])\n    >>> np.nanargmax(a, axis=1)\n    array([1, 1])\n\n    '),
               ('numpy.lib.function_base.disp',
                ['mesg', 'device=None', 'linefeed=True'],
                '\n    Display a message on a device.\n\n    Parameters\n    ----------\n    mesg : str\n        Message to display.\n    device : object\n        Device to write message. If None, defaults to ``sys.stdout`` which is\n        very similar to ``print``. `device` needs to have ``write()`` and\n        ``flush()`` methods.\n    linefeed : bool, optional\n        Option whether to print a line feed or not. Defaults to True.\n\n    Raises\n    ------\n    AttributeError\n        If `device` does not have a ``write()`` or ``flush()`` method.\n\n    Examples\n    --------\n    Besides ``sys.stdout``, a file-like object can also be used as it has\n    both required methods:\n\n    >>> from StringIO import StringIO\n    >>> buf = StringIO()\n    >>> np.disp(\'"Display" in a file\', device=buf)\n    >>> buf.getvalue()\n    \'"Display" in a file\\n\'\n\n    '),
               ('numpy.lib.function_base._get_nargs', ['obj'], ''),
               ('numpy.lib.function_base.cov',
                ['m', 'y=None', 'rowvar=1', 'bias=0', 'ddof=None'],
                '\n    Estimate a covariance matrix, given data.\n\n    Covariance indicates the level to which two variables vary together.\n    If we examine N-dimensional samples, :math:`X = [x_1, x_2, ... x_N]^T`,\n    then the covariance matrix element :math:`C_{ij}` is the covariance of\n    :math:`x_i` and :math:`x_j`. The element :math:`C_{ii}` is the variance\n    of :math:`x_i`.\n\n    Parameters\n    ----------\n    m : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `m` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        form as that of `m`.\n    rowvar : int, optional\n        If `rowvar` is non-zero (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : int, optional\n        Default normalization is by ``(N - 1)``, where ``N`` is the number of\n        observations given (unbiased estimate). If `bias` is 1, then\n        normalization is by ``N``. These values can be overridden by using\n        the keyword ``ddof`` in numpy versions >= 1.5.\n    ddof : int, optional\n        .. versionadded:: 1.5\n        If not ``None`` normalization is by ``(N - ddof)``, where ``N`` is\n        the number of observations; this overrides the value implied by\n        ``bias``. The default value is ``None``.\n\n    Returns\n    -------\n    out : ndarray\n        The covariance matrix of the variables.\n\n    See Also\n    --------\n    corrcoef : Normalized covariance matrix\n\n    Examples\n    --------\n    Consider two variables, :math:`x_0` and :math:`x_1`, which\n    correlate perfectly, but in opposite directions:\n\n    >>> x = np.array([[0, 2], [1, 1], [2, 0]]).T\n    >>> x\n    array([[0, 1, 2],\n           [2, 1, 0]])\n\n    Note how :math:`x_0` increases while :math:`x_1` decreases. The covariance\n    matrix shows this clearly:\n\n    >>> np.cov(x)\n    array([[ 1., -1.],\n           [-1.,  1.]])\n\n    Note that element :math:`C_{0,1}`, which shows the correlation between\n    :math:`x_0` and :math:`x_1`, is negative.\n\n    Further, note how `x` and `y` are combined:\n\n    >>> x = [-2.1, -1,  4.3]\n    >>> y = [3,  1.1,  0.12]\n    >>> X = np.vstack((x,y))\n    >>> print np.cov(X)\n    [[ 11.71        -4.286     ]\n     [ -4.286        2.14413333]]\n    >>> print np.cov(x, y)\n    [[ 11.71        -4.286     ]\n     [ -4.286        2.14413333]]\n    >>> print np.cov(x)\n    11.71\n\n    '),
               ('numpy.lib.function_base.corrcoef',
                ['x', 'y=None', 'rowvar=1', 'bias=0', 'ddof=None'],
                '\n    Return correlation coefficients.\n\n    Please refer to the documentation for `cov` for more detail.  The\n    relationship between the correlation coefficient matrix, `P`, and the\n    covariance matrix, `C`, is\n\n    .. math:: P_{ij} = \\frac{ C_{ij} } { \\sqrt{ C_{ii} * C_{jj} } }\n\n    The values of `P` are between -1 and 1, inclusive.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `m` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        shape as `m`.\n    rowvar : int, optional\n        If `rowvar` is non-zero (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : int, optional\n        Default normalization is by ``(N - 1)``, where ``N`` is the number of\n        observations (unbiased estimate). If `bias` is 1, then\n        normalization is by ``N``. These values can be overridden by using\n        the keyword ``ddof`` in numpy versions >= 1.5.\n    ddof : {None, int}, optional\n        .. versionadded:: 1.5\n        If not ``None`` normalization is by ``(N - ddof)``, where ``N`` is\n        the number of observations; this overrides the value implied by\n        ``bias``. The default value is ``None``.\n\n    Returns\n    -------\n    out : ndarray\n        The correlation coefficient matrix of the variables.\n\n    See Also\n    --------\n    cov : Covariance matrix\n\n    '),
               ('numpy.lib.function_base.blackman',
                ['M'],
                '\n    Return the Blackman window.\n\n    The Blackman window is a taper formed by using the the first three\n    terms of a summation of cosines. It was designed to have close to the\n    minimal leakage possible.  It is close to optimal, only slightly worse\n    than a Kaiser window.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an empty\n        array is returned.\n\n    Returns\n    -------\n    out : ndarray\n        The window, normalized to one (the value one appears only if the\n        number of samples is odd).\n\n    See Also\n    --------\n    bartlett, hamming, hanning, kaiser\n\n    Notes\n    -----\n    The Blackman window is defined as\n\n    .. math::  w(n) = 0.42 - 0.5 \\cos(2\\pi n/M) + 0.08 \\cos(4\\pi n/M)\n\n    Most references to the Blackman window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function. It is known as a\n    "near optimal" tapering function, almost as good (by some measures)\n    as the kaiser window.\n\n    References\n    ----------\n    Blackman, R.B. and Tukey, J.W., (1958) The measurement of power spectra,\n    Dover Publications, New York.\n\n    Oppenheim, A.V., and R.W. Schafer. Discrete-Time Signal Processing.\n    Upper Saddle River, NJ: Prentice-Hall, 1999, pp. 468-471.\n\n    Examples\n    --------\n    >>> from numpy import blackman\n    >>> blackman(12)\n    array([ -1.38777878e-17,   3.26064346e-02,   1.59903635e-01,\n             4.14397981e-01,   7.36045180e-01,   9.67046769e-01,\n             9.67046769e-01,   7.36045180e-01,   4.14397981e-01,\n             1.59903635e-01,   3.26064346e-02,  -1.38777878e-17])\n\n\n    Plot the window and the frequency response:\n\n    >>> from numpy import clip, log10, array, blackman, linspace\n    >>> from numpy.fft import fft, fftshift\n    >>> import matplotlib.pyplot as plt\n\n    >>> window = blackman(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Blackman window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = abs(fftshift(A))\n    >>> freq = linspace(-0.5,0.5,len(A))\n    >>> response = 20*log10(mag)\n    >>> response = clip(response,-100,100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Blackman window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    '),
               ('numpy.lib.function_base.bartlett',
                ['M'],
                '\n    Return the Bartlett window.\n\n    The Bartlett window is very similar to a triangular window, except\n    that the end points are at zero.  It is often used in signal\n    processing for tapering a signal, without generating too much\n    ripple in the frequency domain.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n\n    Returns\n    -------\n    out : array\n        The triangular window, normalized to one (the value one\n        appears only if the number of samples is odd), with the first\n        and last samples equal to zero.\n\n    See Also\n    --------\n    blackman, hamming, hanning, kaiser\n\n    Notes\n    -----\n    The Bartlett window is defined as\n\n    .. math:: w(n) = \\frac{2}{M-1} \\left(\n              \\frac{M-1}{2} - \\left|n - \\frac{M-1}{2}\\right|\n              \\right)\n\n    Most references to the Bartlett window come from the signal\n    processing literature, where it is used as one of many windowing\n    functions for smoothing values.  Note that convolution with this\n    window produces linear interpolation.  It is also known as an\n    apodization (which means"removing the foot", i.e. smoothing\n    discontinuities at the beginning and end of the sampled signal) or\n    tapering function. The fourier transform of the Bartlett is the product\n    of two sinc functions.\n    Note the excellent discussion in Kanasewich.\n\n    References\n    ----------\n    .. [1] M.S. Bartlett, "Periodogram Analysis and Continuous Spectra",\n           Biometrika 37, 1-16, 1950.\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",\n           The University of Alberta Press, 1975, pp. 109-110.\n    .. [3] A.V. Oppenheim and R.W. Schafer, "Discrete-Time Signal\n           Processing", Prentice-Hall, 1999, pp. 468-471.\n    .. [4] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n    .. [5] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           "Numerical Recipes", Cambridge University Press, 1986, page 429.\n\n\n    Examples\n    --------\n    >>> np.bartlett(12)\n    array([ 0.        ,  0.18181818,  0.36363636,  0.54545455,  0.72727273,\n            0.90909091,  0.90909091,  0.72727273,  0.54545455,  0.36363636,\n            0.18181818,  0.        ])\n\n    Plot the window and its frequency response (requires SciPy and matplotlib):\n\n    >>> from numpy import clip, log10, array, bartlett, linspace\n    >>> from numpy.fft import fft, fftshift\n    >>> import matplotlib.pyplot as plt\n\n    >>> window = bartlett(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Bartlett window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = abs(fftshift(A))\n    >>> freq = linspace(-0.5,0.5,len(A))\n    >>> response = 20*log10(mag)\n    >>> response = clip(response,-100,100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Bartlett window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    '),
               ('numpy.lib.function_base.hanning',
                ['M'],
                '\n    Return the Hanning window.\n\n    The Hanning window is a taper formed by using a weighted cosine.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n\n    Returns\n    -------\n    out : ndarray, shape(M,)\n        The window, normalized to one (the value one\n        appears only if `M` is odd).\n\n    See Also\n    --------\n    bartlett, blackman, hamming, kaiser\n\n    Notes\n    -----\n    The Hanning window is defined as\n\n    .. math::  w(n) = 0.5 - 0.5cos\\left(\\frac{2\\pi{n}}{M-1}\\right)\n               \\qquad 0 \\leq n \\leq M-1\n\n    The Hanning was named for Julius van Hann, an Austrian meterologist. It is\n    also known as the Cosine Bell. Some authors prefer that it be called a\n    Hann window, to help avoid confusion with the very similar Hamming window.\n\n    Most references to the Hanning window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function.\n\n    References\n    ----------\n    .. [1] Blackman, R.B. and Tukey, J.W., (1958) The measurement of power\n           spectra, Dover Publications, New York.\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",\n           The University of Alberta Press, 1975, pp. 106-108.\n    .. [3] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n    .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           "Numerical Recipes", Cambridge University Press, 1986, page 425.\n\n    Examples\n    --------\n    >>> from numpy import hanning\n    >>> hanning(12)\n    array([ 0.        ,  0.07937323,  0.29229249,  0.57115742,  0.82743037,\n            0.97974649,  0.97974649,  0.82743037,  0.57115742,  0.29229249,\n            0.07937323,  0.        ])\n\n    Plot the window and its frequency response:\n\n    >>> from numpy.fft import fft, fftshift\n    >>> import matplotlib.pyplot as plt\n\n    >>> window = np.hanning(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Hann window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = abs(fftshift(A))\n    >>> freq = np.linspace(-0.5,0.5,len(A))\n    >>> response = 20*np.log10(mag)\n    >>> response = np.clip(response,-100,100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of the Hann window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    '),
               ('numpy.lib.function_base.hamming',
                ['M'],
                '\n    Return the Hamming window.\n\n    The Hamming window is a taper formed by using a weighted cosine.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n\n    Returns\n    -------\n    out : ndarray\n        The window, normalized to one (the value one\n        appears only if the number of samples is odd).\n\n    See Also\n    --------\n    bartlett, blackman, hanning, kaiser\n\n    Notes\n    -----\n    The Hamming window is defined as\n\n    .. math::  w(n) = 0.54 + 0.46cos\\left(\\frac{2\\pi{n}}{M-1}\\right)\n               \\qquad 0 \\leq n \\leq M-1\n\n    The Hamming was named for R. W. Hamming, an associate of J. W. Tukey and\n    is described in Blackman and Tukey. It was recommended for smoothing the\n    truncated autocovariance function in the time domain.\n    Most references to the Hamming window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function.\n\n    References\n    ----------\n    .. [1] Blackman, R.B. and Tukey, J.W., (1958) The measurement of power\n           spectra, Dover Publications, New York.\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics", The\n           University of Alberta Press, 1975, pp. 109-110.\n    .. [3] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n    .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           "Numerical Recipes", Cambridge University Press, 1986, page 425.\n\n    Examples\n    --------\n    >>> np.hamming(12)\n    array([ 0.08      ,  0.15302337,  0.34890909,  0.60546483,  0.84123594,\n            0.98136677,  0.98136677,  0.84123594,  0.60546483,  0.34890909,\n            0.15302337,  0.08      ])\n\n    Plot the window and the frequency response:\n\n    >>> from numpy.fft import fft, fftshift\n    >>> import matplotlib.pyplot as plt\n\n    >>> window = np.hamming(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Hamming window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = np.abs(fftshift(A))\n    >>> freq = np.linspace(-0.5, 0.5, len(A))\n    >>> response = 20 * np.log10(mag)\n    >>> response = np.clip(response, -100, 100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Hamming window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    '),
               ('numpy.lib.function_base._chbevl', ['x', 'vals'], ''),
               ('numpy.lib.function_base._i0_1', ['x'], ''),
               ('numpy.lib.function_base._i0_2', ['x'], ''),
               ('numpy.lib.function_base.i0',
                ['x'],
                '\n    Modified Bessel function of the first kind, order 0.\n\n    Usually denoted :math:`I_0`.  This function does broadcast, but will *not*\n    "up-cast" int dtype arguments unless accompanied by at least one float or\n    complex dtype argument (see Raises below).\n\n    Parameters\n    ----------\n    x : array_like, dtype float or complex\n        Argument of the Bessel function.\n\n    Returns\n    -------\n    out : ndarray, shape = x.shape, dtype = x.dtype\n        The modified Bessel function evaluated at each of the elements of `x`.\n\n    Raises\n    ------\n    TypeError: array cannot be safely cast to required type\n        If argument consists exclusively of int dtypes.\n\n    See Also\n    --------\n    scipy.special.iv, scipy.special.ive\n\n    Notes\n    -----\n    We use the algorithm published by Clenshaw [1]_ and referenced by\n    Abramowitz and Stegun [2]_, for which the function domain is partitioned\n    into the two intervals [0,8] and (8,inf), and Chebyshev polynomial\n    expansions are employed in each interval. Relative error on the domain\n    [0,30] using IEEE arithmetic is documented [3]_ as having a peak of 5.8e-16\n    with an rms of 1.4e-16 (n = 30000).\n\n    References\n    ----------\n    .. [1] C. W. Clenshaw, "Chebyshev series for mathematical functions," in\n           *National Physical Laboratory Mathematical Tables*, vol. 5, London:\n           Her Majesty\'s Stationery Office, 1962.\n    .. [2] M. Abramowitz and I. A. Stegun, *Handbook of Mathematical\n           Functions*, 10th printing, New York: Dover, 1964, pp. 379.\n           http://www.math.sfu.ca/~cbm/aands/page_379.htm\n    .. [3] http://kobesearch.cpan.org/htdocs/Math-Cephes/Math/Cephes.html\n\n    Examples\n    --------\n    >>> np.i0([0.])\n    array(1.0)\n    >>> np.i0([0., 1. + 2j])\n    array([ 1.00000000+0.j        ,  0.18785373+0.64616944j])\n\n    '),
               ('numpy.lib.function_base.kaiser',
                ['M', 'beta'],
                '\n    Return the Kaiser window.\n\n    The Kaiser window is a taper formed by using a Bessel function.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n    beta : float\n        Shape parameter for window.\n\n    Returns\n    -------\n    out : array\n        The window, normalized to one (the value one\n        appears only if the number of samples is odd).\n\n    See Also\n    --------\n    bartlett, blackman, hamming, hanning\n\n    Notes\n    -----\n    The Kaiser window is defined as\n\n    .. math::  w(n) = I_0\\left( \\beta \\sqrt{1-\\frac{4n^2}{(M-1)^2}}\n               \\right)/I_0(\\beta)\n\n    with\n\n    .. math:: \\quad -\\frac{M-1}{2} \\leq n \\leq \\frac{M-1}{2},\n\n    where :math:`I_0` is the modified zeroth-order Bessel function.\n\n    The Kaiser was named for Jim Kaiser, who discovered a simple approximation\n    to the DPSS window based on Bessel functions.\n    The Kaiser window is a very good approximation to the Digital Prolate\n    Spheroidal Sequence, or Slepian window, which is the transform which\n    maximizes the energy in the main lobe of the window relative to total\n    energy.\n\n    The Kaiser can approximate many other windows by varying the beta\n    parameter.\n\n    ====  =======================\n    beta  Window shape\n    ====  =======================\n    0     Rectangular\n    5     Similar to a Hamming\n    6     Similar to a Hanning\n    8.6   Similar to a Blackman\n    ====  =======================\n\n    A beta value of 14 is probably a good starting point. Note that as beta\n    gets large, the window narrows, and so the number of samples needs to be\n    large enough to sample the increasingly narrow spike, otherwise nans will\n    get returned.\n\n\n    Most references to the Kaiser window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function.\n\n    References\n    ----------\n    .. [1] J. F. Kaiser, "Digital Filters" - Ch 7 in "Systems analysis by\n           digital computer", Editors: F.F. Kuo and J.F. Kaiser, p 218-285.\n           John Wiley and Sons, New York, (1966).\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics", The\n           University of Alberta Press, 1975, pp. 177-178.\n    .. [3] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n\n    Examples\n    --------\n    >>> from numpy import kaiser\n    >>> kaiser(12, 14)\n    array([  7.72686684e-06,   3.46009194e-03,   4.65200189e-02,\n             2.29737120e-01,   5.99885316e-01,   9.45674898e-01,\n             9.45674898e-01,   5.99885316e-01,   2.29737120e-01,\n             4.65200189e-02,   3.46009194e-03,   7.72686684e-06])\n\n\n    Plot the window and the frequency response:\n\n    >>> from numpy import clip, log10, array, kaiser, linspace\n    >>> from numpy.fft import fft, fftshift\n    >>> import matplotlib.pyplot as plt\n\n    >>> window = kaiser(51, 14)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Kaiser window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = abs(fftshift(A))\n    >>> freq = linspace(-0.5,0.5,len(A))\n    >>> response = 20*log10(mag)\n    >>> response = clip(response,-100,100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Kaiser window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    '),
               ('numpy.lib.function_base.sinc',
                ['x'],
                '\n    Return the sinc function.\n\n    The sinc function is :math:`\\sin(\\pi x)/(\\pi x)`.\n\n    Parameters\n    ----------\n    x : ndarray\n        Array (possibly multi-dimensional) of values for which to to\n        calculate ``sinc(x)``.\n\n    Returns\n    -------\n    out : ndarray\n        ``sinc(x)``, which has the same shape as the input.\n\n    Notes\n    -----\n    ``sinc(0)`` is the limit value 1.\n\n    The name sinc is short for "sine cardinal" or "sinus cardinalis".\n\n    The sinc function is used in various signal processing applications,\n    including in anti-aliasing, in the construction of a\n    Lanczos resampling filter, and in interpolation.\n\n    For bandlimited interpolation of discrete-time signals, the ideal\n    interpolation kernel is proportional to the sinc function.\n\n    References\n    ----------\n    .. [1] Weisstein, Eric W. "Sinc Function." From MathWorld--A Wolfram Web\n           Resource. http://mathworld.wolfram.com/SincFunction.html\n    .. [2] Wikipedia, "Sinc function",\n           http://en.wikipedia.org/wiki/Sinc_function\n\n    Examples\n    --------\n    >>> x = np.arange(-20., 21.)/5.\n    >>> np.sinc(x)\n    array([ -3.89804309e-17,  -4.92362781e-02,  -8.40918587e-02,\n            -8.90384387e-02,  -5.84680802e-02,   3.89804309e-17,\n             6.68206631e-02,   1.16434881e-01,   1.26137788e-01,\n             8.50444803e-02,  -3.89804309e-17,  -1.03943254e-01,\n            -1.89206682e-01,  -2.16236208e-01,  -1.55914881e-01,\n             3.89804309e-17,   2.33872321e-01,   5.04551152e-01,\n             7.56826729e-01,   9.35489284e-01,   1.00000000e+00,\n             9.35489284e-01,   7.56826729e-01,   5.04551152e-01,\n             2.33872321e-01,   3.89804309e-17,  -1.55914881e-01,\n            -2.16236208e-01,  -1.89206682e-01,  -1.03943254e-01,\n            -3.89804309e-17,   8.50444803e-02,   1.26137788e-01,\n             1.16434881e-01,   6.68206631e-02,   3.89804309e-17,\n            -5.84680802e-02,  -8.90384387e-02,  -8.40918587e-02,\n            -4.92362781e-02,  -3.89804309e-17])\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x, np.sinc(x))\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Sinc Function")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("X")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    It works in 2-D as well:\n\n    >>> x = np.arange(-200., 201.)/50.\n    >>> xx = np.outer(x, x)\n    >>> plt.imshow(np.sinc(xx))\n    <matplotlib.image.AxesImage object at 0x...>\n\n    '),
               ('numpy.lib.function_base.msort',
                ['a'],
                '\n    Return a copy of an array sorted along the first axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to be sorted.\n\n    Returns\n    -------\n    sorted_array : ndarray\n        Array of the same type and shape as `a`.\n\n    See Also\n    --------\n    sort\n\n    Notes\n    -----\n    ``np.msort(a)`` is equivalent to  ``np.sort(a, axis=0)``.\n\n    '),
               ('numpy.lib.function_base.median',
                ['a', 'axis=None', 'out=None', 'overwrite_input=False'],
                '\n    Compute the median along the specified axis.\n\n    Returns the median of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int, optional\n        Axis along which the medians are computed. The default (axis=None)\n        is to compute the median along a flattened version of the array.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output,\n        but the type (of the output) will be cast if necessary.\n    overwrite_input : bool optional\n       If True, then allow use of memory of input array (a) for\n       calculations. The input array will be modified by the call to\n       median. This will save memory when you do not need to preserve\n       the contents of the input array. Treat the input as undefined,\n       but it will probably be fully or partially sorted. Default is\n       False. Note that, if `overwrite_input` is True and the input\n       is not already an ndarray, an error will be raised.\n\n    Returns\n    -------\n    median : ndarray\n        A new array holding the result (unless `out` is specified, in\n        which case that array is returned instead).  If the input contains\n        integers, or floats of smaller precision than 64, then the output\n        data-type is float64.  Otherwise, the output data-type is the same\n        as that of the input.\n\n    See Also\n    --------\n    mean, percentile\n\n    Notes\n    -----\n    Given a vector V of length N, the median of V is the middle value of\n    a sorted copy of V, ``V_sorted`` - i.e., ``V_sorted[(N-1)/2]``, when N is\n    odd.  When N is even, it is the average of the two middle values of\n    ``V_sorted``.\n\n    Examples\n    --------\n    >>> a = np.array([[10, 7, 4], [3, 2, 1]])\n    >>> a\n    array([[10,  7,  4],\n           [ 3,  2,  1]])\n    >>> np.median(a)\n    3.5\n    >>> np.median(a, axis=0)\n    array([ 6.5,  4.5,  2.5])\n    >>> np.median(a, axis=1)\n    array([ 7.,  2.])\n    >>> m = np.median(a, axis=0)\n    >>> out = np.zeros_like(m)\n    >>> np.median(a, axis=0, out=m)\n    array([ 6.5,  4.5,  2.5])\n    >>> m\n    array([ 6.5,  4.5,  2.5])\n    >>> b = a.copy()\n    >>> np.median(b, axis=1, overwrite_input=True)\n    array([ 7.,  2.])\n    >>> assert not np.all(a==b)\n    >>> b = a.copy()\n    >>> np.median(b, axis=None, overwrite_input=True)\n    3.5\n    >>> assert not np.all(a==b)\n\n    '),
               ('numpy.lib.function_base.percentile',
                ['a', 'q', 'axis=None', 'out=None', 'overwrite_input=False'],
                '\n    Compute the qth percentile of the data along the specified axis.\n\n    Returns the qth percentile of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    q : float in range of [0,100] (or sequence of floats)\n        Percentile to compute which must be between 0 and 100 inclusive.\n    axis : int, optional\n        Axis along which the percentiles are computed. The default (None)\n        is to compute the median along a flattened version of the array.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output,\n        but the type (of the output) will be cast if necessary.\n    overwrite_input : bool, optional\n       If True, then allow use of memory of input array `a` for\n       calculations. The input array will be modified by the call to\n       median. This will save memory when you do not need to preserve\n       the contents of the input array. Treat the input as undefined,\n       but it will probably be fully or partially sorted.\n       Default is False. Note that, if `overwrite_input` is True and the\n       input is not already an array, an error will be raised.\n\n    Returns\n    -------\n    pcntile : ndarray\n        A new array holding the result (unless `out` is specified, in\n        which case that array is returned instead).  If the input contains\n        integers, or floats of smaller precision than 64, then the output\n        data-type is float64.  Otherwise, the output data-type is the same\n        as that of the input.\n\n    See Also\n    --------\n    mean, median\n\n    Notes\n    -----\n    Given a vector V of length N, the qth percentile of V is the qth ranked\n    value in a sorted copy of V.  A weighted average of the two nearest\n    neighbors is used if the normalized ranking does not match q exactly.\n    The same as the median if ``q=0.5``, the same as the minimum if ``q=0``\n    and the same as the maximum if ``q=1``.\n\n    Examples\n    --------\n    >>> a = np.array([[10, 7, 4], [3, 2, 1]])\n    >>> a\n    array([[10,  7,  4],\n           [ 3,  2,  1]])\n    >>> np.percentile(a, 50)\n    3.5\n    >>> np.percentile(a, 0.5, axis=0)\n    array([ 6.5,  4.5,  2.5])\n    >>> np.percentile(a, 50, axis=1)\n    array([ 7.,  2.])\n\n    >>> m = np.percentile(a, 50, axis=0)\n    >>> out = np.zeros_like(m)\n    >>> np.percentile(a, 50, axis=0, out=m)\n    array([ 6.5,  4.5,  2.5])\n    >>> m\n    array([ 6.5,  4.5,  2.5])\n\n    >>> b = a.copy()\n    >>> np.percentile(b, 50, axis=1, overwrite_input=True)\n    array([ 7.,  2.])\n    >>> assert not np.all(a==b)\n    >>> b = a.copy()\n    >>> np.percentile(b, 50, axis=None, overwrite_input=True)\n    3.5\n\n    '),
               ('numpy.lib.function_base._compute_qth_percentile',
                ['sorted', 'q', 'axis', 'out'],
                ''),
               ('numpy.lib.function_base.trapz',
                ['y', 'x=None', 'dx=1.0', 'axis=-1'],
                '\n    Integrate along the given axis using the composite trapezoidal rule.\n\n    Integrate `y` (`x`) along given axis.\n\n    Parameters\n    ----------\n    y : array_like\n        Input array to integrate.\n    x : array_like, optional\n        If `x` is None, then spacing between all `y` elements is `dx`.\n    dx : scalar, optional\n        If `x` is None, spacing given by `dx` is assumed. Default is 1.\n    axis : int, optional\n        Specify the axis.\n\n    Returns\n    -------\n    out : float\n        Definite integral as approximated by trapezoidal rule.\n\n    See Also\n    --------\n    sum, cumsum\n\n    Notes\n    -----\n    Image [2]_ illustrates trapezoidal rule -- y-axis locations of points will\n    be taken from `y` array, by default x-axis distances between points will be\n    1.0, alternatively they can be provided with `x` array or with `dx` scalar.\n    Return value will be equal to combined area under the red lines.\n\n\n    References\n    ----------\n    .. [1] Wikipedia page: http://en.wikipedia.org/wiki/Trapezoidal_rule\n\n    .. [2] Illustration image:\n           http://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png\n\n    Examples\n    --------\n    >>> np.trapz([1,2,3])\n    4.0\n    >>> np.trapz([1,2,3], x=[4,6,8])\n    8.0\n    >>> np.trapz([1,2,3], dx=2)\n    8.0\n    >>> a = np.arange(6).reshape(2, 3)\n    >>> a\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.trapz(a, axis=0)\n    array([ 1.5,  2.5,  3.5])\n    >>> np.trapz(a, axis=1)\n    array([ 2.,  8.])\n\n    '),
               ('numpy.lib.function_base.add_newdoc',
                ['place', 'obj', 'doc'],
                'Adds documentation to obj which is in module place.\n\n    If doc is a string add it to obj as a docstring\n\n    If doc is a tuple, then the first element is interpreted as\n       an attribute of obj and the second as the docstring\n          (method, docstring)\n\n    If doc is a list, then each element of the list should be a\n       sequence of length two --> [(method1, docstring1),\n       (method2, docstring2), ...]\n\n    This routine never raises an error.\n       '),
               ('numpy.lib.function_base.meshgrid',
                ['x', 'y'],
                '\n    Return coordinate matrices from two coordinate vectors.\n\n    Parameters\n    ----------\n    x, y : ndarray\n        Two 1-D arrays representing the x and y coordinates of a grid.\n\n    Returns\n    -------\n    X, Y : ndarray\n        For vectors `x`, `y` with lengths ``Nx=len(x)`` and ``Ny=len(y)``,\n        return `X`, `Y` where `X` and `Y` are ``(Ny, Nx)`` shaped arrays\n        with the elements of `x` and y repeated to fill the matrix along\n        the first dimension for `x`, the second for `y`.\n\n    See Also\n    --------\n    index_tricks.mgrid : Construct a multi-dimensional "meshgrid"\n                         using indexing notation.\n    index_tricks.ogrid : Construct an open multi-dimensional "meshgrid"\n                         using indexing notation.\n\n    Examples\n    --------\n    >>> X, Y = np.meshgrid([1,2,3], [4,5,6,7])\n    >>> X\n    array([[1, 2, 3],\n           [1, 2, 3],\n           [1, 2, 3],\n           [1, 2, 3]])\n    >>> Y\n    array([[4, 4, 4],\n           [5, 5, 5],\n           [6, 6, 6],\n           [7, 7, 7]])\n\n    `meshgrid` is very useful to evaluate functions on a grid.\n\n    >>> x = np.arange(-5, 5, 0.1)\n    >>> y = np.arange(-5, 5, 0.1)\n    >>> xx, yy = np.meshgrid(x, y)\n    >>> z = np.sin(xx**2+yy**2)/(xx**2+yy**2)\n\n    '),
               ('numpy.lib.function_base.delete',
                ['arr', 'obj', 'axis=None'],
                '\n    Return a new array with sub-arrays along an axis deleted.\n\n    Parameters\n    ----------\n    arr : array_like\n      Input array.\n    obj : slice, int or array of ints\n      Indicate which sub-arrays to remove.\n    axis : int, optional\n      The axis along which to delete the subarray defined by `obj`.\n      If `axis` is None, `obj` is applied to the flattened array.\n\n    Returns\n    -------\n    out : ndarray\n        A copy of `arr` with the elements specified by `obj` removed. Note\n        that `delete` does not occur in-place. If `axis` is None, `out` is\n        a flattened array.\n\n    See Also\n    --------\n    insert : Insert elements into an array.\n    append : Append elements at the end of an array.\n\n    Examples\n    --------\n    >>> arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n    >>> arr\n    array([[ 1,  2,  3,  4],\n           [ 5,  6,  7,  8],\n           [ 9, 10, 11, 12]])\n    >>> np.delete(arr, 1, 0)\n    array([[ 1,  2,  3,  4],\n           [ 9, 10, 11, 12]])\n\n    >>> np.delete(arr, np.s_[::2], 1)\n    array([[ 2,  4],\n           [ 6,  8],\n           [10, 12]])\n    >>> np.delete(arr, [1,3,5], None)\n    array([ 1,  3,  5,  7,  8,  9, 10, 11, 12])\n\n    '),
               ('numpy.lib.function_base.insert',
                ['arr', 'obj', 'values', 'axis=None'],
                '\n    Insert values along the given axis before the given indices.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input array.\n    obj : int, slice or sequence of ints\n        Object that defines the index or indices before which `values` is\n        inserted.\n    values : array_like\n        Values to insert into `arr`. If the type of `values` is different\n        from that of `arr`, `values` is converted to the type of `arr`.\n    axis : int, optional\n        Axis along which to insert `values`.  If `axis` is None then `arr`\n        is flattened first.\n\n    Returns\n    -------\n    out : ndarray\n        A copy of `arr` with `values` inserted.  Note that `insert`\n        does not occur in-place: a new array is returned. If\n        `axis` is None, `out` is a flattened array.\n\n    See Also\n    --------\n    append : Append elements at the end of an array.\n    delete : Delete elements from an array.\n\n    Examples\n    --------\n    >>> a = np.array([[1, 1], [2, 2], [3, 3]])\n    >>> a\n    array([[1, 1],\n           [2, 2],\n           [3, 3]])\n    >>> np.insert(a, 1, 5)\n    array([1, 5, 1, 2, 2, 3, 3])\n    >>> np.insert(a, 1, 5, axis=1)\n    array([[1, 5, 1],\n           [2, 5, 2],\n           [3, 5, 3]])\n\n    >>> b = a.flatten()\n    >>> b\n    array([1, 1, 2, 2, 3, 3])\n    >>> np.insert(b, [2, 2], [5, 6])\n    array([1, 1, 5, 6, 2, 2, 3, 3])\n\n    >>> np.insert(b, slice(2, 4), [5, 6])\n    array([1, 1, 5, 2, 6, 2, 3, 3])\n\n    >>> np.insert(b, [2, 2], [7.13, False]) # type casting\n    array([1, 1, 7, 0, 2, 2, 3, 3])\n\n    >>> x = np.arange(8).reshape(2, 4)\n    >>> idx = (1, 3)\n    >>> np.insert(x, idx, 999, axis=1)\n    array([[  0, 999,   1,   2, 999,   3],\n           [  4, 999,   5,   6, 999,   7]])\n\n    '),
               ('numpy.lib.function_base.append',
                ['arr', 'values', 'axis=None'],
                '\n    Append values to the end of an array.\n\n    Parameters\n    ----------\n    arr : array_like\n        Values are appended to a copy of this array.\n    values : array_like\n        These values are appended to a copy of `arr`.  It must be of the\n        correct shape (the same shape as `arr`, excluding `axis`).  If `axis`\n        is not specified, `values` can be any shape and will be flattened\n        before use.\n    axis : int, optional\n        The axis along which `values` are appended.  If `axis` is not given,\n        both `arr` and `values` are flattened before use.\n\n    Returns\n    -------\n    out : ndarray\n        A copy of `arr` with `values` appended to `axis`.  Note that `append`\n        does not occur in-place: a new array is allocated and filled.  If\n        `axis` is None, `out` is a flattened array.\n\n    See Also\n    --------\n    insert : Insert elements into an array.\n    delete : Delete elements from an array.\n\n    Examples\n    --------\n    >>> np.append([1, 2, 3], [[4, 5, 6], [7, 8, 9]])\n    array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    When `axis` is specified, `values` must have the correct shape.\n\n    >>> np.append([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], axis=0)\n    array([[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]])\n    >>> np.append([[1, 2, 3], [4, 5, 6]], [7, 8, 9], axis=0)\n    Traceback (most recent call last):\n    ...\n    ValueError: arrays must have same number of dimensions\n\n    '),
               ('numpy.lib.stride_tricks.as_strided',
                ['x', 'shape=None', 'strides=None'],
                ' Make an ndarray from the given array with the given shape and strides.\n    '),
               ('numpy.lib.stride_tricks.broadcast_arrays',
                ['*args'],
                '\n    Broadcast any number of arrays against each other.\n\n    Parameters\n    ----------\n    `*args` : array_likes\n        The arrays to broadcast.\n\n    Returns\n    -------\n    broadcasted : list of arrays\n        These arrays are views on the original arrays.  They are typically\n        not contiguous.  Furthermore, more than one element of a\n        broadcasted array may refer to a single memory location.  If you\n        need to write to the arrays, make copies first.\n\n    Examples\n    --------\n    >>> x = np.array([[1,2,3]])\n    >>> y = np.array([[1],[2],[3]])\n    >>> np.broadcast_arrays(x, y)\n    [array([[1, 2, 3],\n           [1, 2, 3],\n           [1, 2, 3]]), array([[1, 1, 1],\n           [2, 2, 2],\n           [3, 3, 3]])]\n\n    Here is a useful idiom for getting contiguous copies instead of\n    non-contiguous views.\n\n    >>> map(np.array, np.broadcast_arrays(x, y))\n    [array([[1, 2, 3],\n           [1, 2, 3],\n           [1, 2, 3]]), array([[1, 1, 1],\n           [2, 2, 2],\n           [3, 3, 3]])]\n\n    '),
               ('numpy.lib.type_check.mintypecode',
                ['typechars', "typeset='GDFgdf'", "default='d'"],
                "\n    Return the character for the minimum-size type to which given types can\n    be safely cast.\n\n    The returned type character must represent the smallest size dtype such\n    that an array of the returned type can handle the data from an array of\n    all types in `typechars` (or if `typechars` is an array, then its\n    dtype.char).\n\n    Parameters\n    ----------\n    typechars : list of str or array_like\n        If a list of strings, each string should represent a dtype.\n        If array_like, the character representation of the array dtype is used.\n    typeset : str or list of str, optional\n        The set of characters that the returned character is chosen from.\n        The default set is 'GDFgdf'.\n    default : str, optional\n        The default character, this is returned if none of the characters in\n        `typechars` matches a character in `typeset`.\n\n    Returns\n    -------\n    typechar : str\n        The character representing the minimum-size type that was found.\n\n    See Also\n    --------\n    dtype, sctype2char, maximum_sctype\n\n    Examples\n    --------\n    >>> np.mintypecode(['d', 'f', 'S'])\n    'd'\n    >>> x = np.array([1.1, 2-3.j])\n    >>> np.mintypecode(x)\n    'D'\n\n    >>> np.mintypecode('abceh', default='G')\n    'G'\n\n    "),
               ('numpy.lib.type_check.asfarray',
                ['a', 'dtype=_nx.float_'],
                "\n    Return an array converted to a float type.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    dtype : str or dtype object, optional\n        Float type code to coerce input array `a`.  If `dtype` is one of the\n        'int' dtypes, it is replaced with float64.\n\n    Returns\n    -------\n    out : ndarray\n        The input `a` as a float ndarray.\n\n    Examples\n    --------\n    >>> np.asfarray([2, 3])\n    array([ 2.,  3.])\n    >>> np.asfarray([2, 3], dtype='float')\n    array([ 2.,  3.])\n    >>> np.asfarray([2, 3], dtype='int8')\n    array([ 2.,  3.])\n\n    "),
               ('numpy.lib.type_check.real',
                ['val'],
                '\n    Return the real part of the elements of the array.\n\n    Parameters\n    ----------\n    val : array_like\n        Input array.\n\n    Returns\n    -------\n    out : ndarray\n        Output array. If `val` is real, the type of `val` is used for the\n        output.  If `val` has complex elements, the returned type is float.\n\n    See Also\n    --------\n    real_if_close, imag, angle\n\n    Examples\n    --------\n    >>> a = np.array([1+2j, 3+4j, 5+6j])\n    >>> a.real\n    array([ 1.,  3.,  5.])\n    >>> a.real = 9\n    >>> a\n    array([ 9.+2.j,  9.+4.j,  9.+6.j])\n    >>> a.real = np.array([9, 8, 7])\n    >>> a\n    array([ 9.+2.j,  8.+4.j,  7.+6.j])\n\n    '),
               ('numpy.lib.type_check.imag',
                ['val'],
                '\n    Return the imaginary part of the elements of the array.\n\n    Parameters\n    ----------\n    val : array_like\n        Input array.\n\n    Returns\n    -------\n    out : ndarray\n        Output array. If `val` is real, the type of `val` is used for the\n        output.  If `val` has complex elements, the returned type is float.\n\n    See Also\n    --------\n    real, angle, real_if_close\n\n    Examples\n    --------\n    >>> a = np.array([1+2j, 3+4j, 5+6j])\n    >>> a.imag\n    array([ 2.,  4.,  6.])\n    >>> a.imag = np.array([8, 10, 12])\n    >>> a\n    array([ 1. +8.j,  3.+10.j,  5.+12.j])\n\n    '),
               ('numpy.lib.type_check.iscomplex',
                ['x'],
                '\n    Returns a bool array, where True if input element is complex.\n\n    What is tested is whether the input has a non-zero imaginary part, not if\n    the input type is complex.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n\n    Returns\n    -------\n    out : ndarray of bools\n        Output array.\n\n    See Also\n    --------\n    isreal\n    iscomplexobj : Return True if x is a complex type or an array of complex\n                   numbers.\n\n    Examples\n    --------\n    >>> np.iscomplex([1+1j, 1+0j, 4.5, 3, 2, 2j])\n    array([ True, False, False, False, False,  True], dtype=bool)\n\n    '),
               ('numpy.lib.type_check.isreal',
                ['x'],
                '\n    Returns a bool array, where True if input element is real.\n\n    If element has complex type with zero complex part, the return value\n    for that element is True.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n\n    Returns\n    -------\n    out : ndarray, bool\n        Boolean array of same shape as `x`.\n\n    See Also\n    --------\n    iscomplex\n    isrealobj : Return True if x is not a complex type.\n\n    Examples\n    --------\n    >>> np.isreal([1+1j, 1+0j, 4.5, 3, 2, 2j])\n    array([False,  True,  True,  True,  True, False], dtype=bool)\n\n    '),
               ('numpy.lib.type_check.iscomplexobj',
                ['x'],
                '\n    Return True if x is a complex type or an array of complex numbers.\n\n    The type of the input is checked, not the value. So even if the input\n    has an imaginary part equal to zero, `iscomplexobj` evaluates to True\n    if the data type is complex.\n\n    Parameters\n    ----------\n    x : any\n        The input can be of any type and shape.\n\n    Returns\n    -------\n    y : bool\n        The return value, True if `x` is of a complex type.\n\n    See Also\n    --------\n    isrealobj, iscomplex\n\n    Examples\n    --------\n    >>> np.iscomplexobj(1)\n    False\n    >>> np.iscomplexobj(1+0j)\n    True\n    >>> np.iscomplexobj([3, 1+0j, True])\n    True\n\n    '),
               ('numpy.lib.type_check.isrealobj',
                ['x'],
                '\n    Return True if x is a not complex type or an array of complex numbers.\n\n    The type of the input is checked, not the value. So even if the input\n    has an imaginary part equal to zero, `isrealobj` evaluates to False\n    if the data type is complex.\n\n    Parameters\n    ----------\n    x : any\n        The input can be of any type and shape.\n\n    Returns\n    -------\n    y : bool\n        The return value, False if `x` is of a complex type.\n\n    See Also\n    --------\n    iscomplexobj, isreal\n\n    Examples\n    --------\n    >>> np.isrealobj(1)\n    True\n    >>> np.isrealobj(1+0j)\n    False\n    >>> np.isrealobj([3, 1+0j, True])\n    False\n\n    '),
               ('numpy.lib.type_check._getmaxmin', ['t'], ''),
               ('numpy.lib.type_check.nan_to_num',
                ['x'],
                '\n    Replace nan with zero and inf with finite numbers.\n\n    Returns an array or scalar replacing Not a Number (NaN) with zero,\n    (positive) infinity with a very large number and negative infinity\n    with a very small (or negative) number.\n\n    Parameters\n    ----------\n    x : array_like\n        Input data.\n\n    Returns\n    -------\n    out : ndarray, float\n        Array with the same shape as `x` and dtype of the element in `x`  with\n        the greatest precision. NaN is replaced by zero, and infinity\n        (-infinity) is replaced by the largest (smallest or most negative)\n        floating point value that fits in the output dtype. All finite numbers\n        are upcast to the output dtype (default float64).\n\n    See Also\n    --------\n    isinf : Shows which elements are negative or negative infinity.\n    isneginf : Shows which elements are negative infinity.\n    isposinf : Shows which elements are positive infinity.\n    isnan : Shows which elements are Not a Number (NaN).\n    isfinite : Shows which elements are finite (not NaN, not infinity)\n\n    Notes\n    -----\n    Numpy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n    (IEEE 754). This means that Not a Number is not equivalent to infinity.\n\n\n    Examples\n    --------\n    >>> np.set_printoptions(precision=8)\n    >>> x = np.array([np.inf, -np.inf, np.nan, -128, 128])\n    >>> np.nan_to_num(x)\n    array([  1.79769313e+308,  -1.79769313e+308,   0.00000000e+000,\n            -1.28000000e+002,   1.28000000e+002])\n\n    '),
               ('numpy.lib.type_check.real_if_close',
                ['a', 'tol=100'],
                '\n    If complex input returns a real array if complex parts are close to zero.\n\n    "Close to zero" is defined as `tol` * (machine epsilon of the type for\n    `a`).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    tol : float\n        Tolerance in machine epsilons for the complex part of the elements\n        in the array.\n\n    Returns\n    -------\n    out : ndarray\n        If `a` is real, the type of `a` is used for the output.  If `a`\n        has complex elements, the returned type is float.\n\n    See Also\n    --------\n    real, imag, angle\n\n    Notes\n    -----\n    Machine epsilon varies from machine to machine and between data types\n    but Python floats on most platforms have a machine epsilon equal to\n    2.2204460492503131e-16.  You can use \'np.finfo(np.float).eps\' to print\n    out the machine epsilon for floats.\n\n    Examples\n    --------\n    >>> np.finfo(np.float).eps\n    2.2204460492503131e-16\n\n    >>> np.real_if_close([2.1 + 4e-14j], tol=1000)\n    array([ 2.1])\n    >>> np.real_if_close([2.1 + 4e-13j], tol=1000)\n    array([ 2.1 +4.00000000e-13j])\n\n    '),
               ('numpy.lib.type_check.asscalar',
                ['a'],
                '\n    Convert an array of size 1 to its scalar equivalent.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array of size 1.\n\n    Returns\n    -------\n    out : scalar\n        Scalar representation of `a`. The input data type is preserved.\n\n    Examples\n    --------\n    >>> np.asscalar(np.array([24]))\n    24\n\n    '),
               ('numpy.lib.type_check.typename',
                ['char'],
                "\n    Return a description for the given data type code.\n\n    Parameters\n    ----------\n    char : str\n        Data type code.\n\n    Returns\n    -------\n    out : str\n        Description of the input data type code.\n\n    See Also\n    --------\n    dtype, typecodes\n\n    Examples\n    --------\n    >>> typechars = ['S1', '?', 'B', 'D', 'G', 'F', 'I', 'H', 'L', 'O', 'Q',\n    ...              'S', 'U', 'V', 'b', 'd', 'g', 'f', 'i', 'h', 'l', 'q']\n    >>> for typechar in typechars:\n    ...     print typechar, ' : ', np.typename(typechar)\n    ...\n    S1  :  character\n    ?  :  bool\n    B  :  unsigned char\n    D  :  complex double precision\n    G  :  complex long double precision\n    F  :  complex single precision\n    I  :  unsigned integer\n    H  :  unsigned short\n    L  :  unsigned long integer\n    O  :  object\n    Q  :  unsigned long long integer\n    S  :  string\n    U  :  unicode\n    V  :  void\n    b  :  signed char\n    d  :  double precision\n    g  :  long precision\n    f  :  single precision\n    i  :  integer\n    h  :  short\n    l  :  long integer\n    q  :  long long integer\n\n    "),
               ('numpy.lib.type_check.common_type',
                ['*arrays'],
                "\n    Return a scalar type which is common to the input arrays.\n\n    The return type will always be an inexact (i.e. floating point) scalar\n    type, even if all the arrays are integer arrays. If one of the inputs is\n    an integer array, the minimum precision type that is returned is a\n    64-bit floating point dtype.\n\n    All input arrays can be safely cast to the returned dtype without loss\n    of information.\n\n    Parameters\n    ----------\n    array1, array2, ... : ndarrays\n        Input arrays.\n\n    Returns\n    -------\n    out : data type code\n        Data type code.\n\n    See Also\n    --------\n    dtype, mintypecode\n\n    Examples\n    --------\n    >>> np.common_type(np.arange(2, dtype=np.float32))\n    <type 'numpy.float32'>\n    >>> np.common_type(np.arange(2, dtype=np.float32), np.arange(2))\n    <type 'numpy.float64'>\n    >>> np.common_type(np.arange(4), np.array([45, 6.j]), np.array([45.0]))\n    <type 'numpy.complex128'>\n\n    "),
               ('numpy.lib.type_check.datetime_data',
                ['dtype'],
                'Return (unit, numerator, denominator, events) from a datetime dtype\n    '),
               ('numpy.lib.index_tricks.ix_',
                ['*args'],
                '\n    Construct an open mesh from multiple sequences.\n\n    This function takes N 1-D sequences and returns N outputs with N\n    dimensions each, such that the shape is 1 in all but one dimension\n    and the dimension with the non-unit shape value cycles through all\n    N dimensions.\n\n    Using `ix_` one can quickly construct index arrays that will index\n    the cross product. ``a[np.ix_([1,3],[2,5])]`` returns the array\n    ``[[a[1,2] a[1,5]], [a[3,2] a[3,5]]]``.\n\n    Parameters\n    ----------\n    args : 1-D sequences\n\n    Returns\n    -------\n    out : tuple of ndarrays\n        N arrays with N dimensions each, with N the number of input\n        sequences. Together these arrays form an open mesh.\n\n    See Also\n    --------\n    ogrid, mgrid, meshgrid\n\n    Examples\n    --------\n    >>> a = np.arange(10).reshape(2, 5)\n    >>> a\n    array([[0, 1, 2, 3, 4],\n           [5, 6, 7, 8, 9]])\n    >>> ixgrid = np.ix_([0,1], [2,4])\n    >>> ixgrid\n    (array([[0],\n           [1]]), array([[2, 4]]))\n    >>> ixgrid[0].shape, ixgrid[1].shape\n    ((2, 1), (1, 2))\n    >>> a[ixgrid]\n    array([[2, 4],\n           [7, 9]])\n\n    '),
               ('numpy.lib.index_tricks.fill_diagonal',
                ['a', 'val'],
                '\n    Fill the main diagonal of the given array of any dimensionality.\n\n    For an array `a` with ``a.ndim > 2``, the diagonal is the list of\n    locations with indices ``a[i, i, ..., i]`` all identical. This function\n    modifies the input array in-place, it does not return a value.\n\n    Parameters\n    ----------\n    a : array, at least 2-D.\n      Array whose diagonal is to be filled, it gets modified in-place.\n\n    val : scalar\n      Value to be written on the diagonal, its type must be compatible with\n      that of the array a.\n\n    See also\n    --------\n    diag_indices, diag_indices_from\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    This functionality can be obtained via `diag_indices`, but internally\n    this version uses a much faster implementation that never constructs the\n    indices and uses simple slicing.\n\n    Examples\n    --------\n    >>> a = np.zeros((3, 3), int)\n    >>> np.fill_diagonal(a, 5)\n    >>> a\n    array([[5, 0, 0],\n           [0, 5, 0],\n           [0, 0, 5]])\n\n    The same function can operate on a 4-D array:\n\n    >>> a = np.zeros((3, 3, 3, 3), int)\n    >>> np.fill_diagonal(a, 4)\n\n    We only show a few blocks for clarity:\n\n    >>> a[0, 0]\n    array([[4, 0, 0],\n           [0, 0, 0],\n           [0, 0, 0]])\n    >>> a[1, 1]\n    array([[0, 0, 0],\n           [0, 4, 0],\n           [0, 0, 0]])\n    >>> a[2, 2]\n    array([[0, 0, 0],\n           [0, 0, 0],\n           [0, 0, 4]])\n\n    '),
               ('numpy.lib.index_tricks.diag_indices',
                ['n', 'ndim=2'],
                '\n    Return the indices to access the main diagonal of an array.\n\n    This returns a tuple of indices that can be used to access the main\n    diagonal of an array `a` with ``a.ndim >= 2`` dimensions and shape\n    (n, n, ..., n). For ``a.ndim = 2`` this is the usual diagonal, for\n    ``a.ndim > 2`` this is the set of indices to access ``a[i, i, ..., i]``\n    for ``i = [0..n-1]``.\n\n    Parameters\n    ----------\n    n : int\n      The size, along each dimension, of the arrays for which the returned\n      indices can be used.\n\n    ndim : int, optional\n      The number of dimensions.\n\n    See also\n    --------\n    diag_indices_from\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    Examples\n    --------\n    Create a set of indices to access the diagonal of a (4, 4) array:\n\n    >>> di = np.diag_indices(4)\n    >>> di\n    (array([0, 1, 2, 3]), array([0, 1, 2, 3]))\n    >>> a = np.arange(16).reshape(4, 4)\n    >>> a\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n    >>> a[di] = 100\n    >>> a\n    array([[100,   1,   2,   3],\n           [  4, 100,   6,   7],\n           [  8,   9, 100,  11],\n           [ 12,  13,  14, 100]])\n\n    Now, we create indices to manipulate a 3-D array:\n\n    >>> d3 = np.diag_indices(2, 3)\n    >>> d3\n    (array([0, 1]), array([0, 1]), array([0, 1]))\n\n    And use it to set the diagonal of an array of zeros to 1:\n\n    >>> a = np.zeros((2, 2, 2), dtype=np.int)\n    >>> a[d3] = 1\n    >>> a\n    array([[[1, 0],\n            [0, 0]],\n           [[0, 0],\n            [0, 1]]])\n\n    '),
               ('numpy.lib.index_tricks.diag_indices_from',
                ['arr'],
                '\n    Return the indices to access the main diagonal of an n-dimensional array.\n\n    See `diag_indices` for full details.\n\n    Parameters\n    ----------\n    arr : array, at least 2-D\n\n    See Also\n    --------\n    diag_indices\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    '),
               ('numpy.lib.utils.get_include',
                [],
                "\n    Return the directory that contains the NumPy \\*.h header files.\n\n    Extension modules that need to compile against NumPy should use this\n    function to locate the appropriate include directory.\n\n    Notes\n    -----\n    When using ``distutils``, for example in ``setup.py``.\n    ::\n\n        import numpy as np\n        ...\n        Extension('extension_name', ...\n                include_dirs=[np.get_include()])\n        ...\n\n    "),
               ('numpy.lib.utils.get_numarray_include',
                ['type=None'],
                "\n    Return the directory that contains the numarray \\*.h header files.\n\n    Extension modules that need to compile against numarray should use this\n    function to locate the appropriate include directory.\n\n    Parameters\n    ----------\n    type : any, optional\n        If `type` is not None, the location of the NumPy headers is returned\n        as well.\n\n    Returns\n    -------\n    dirs : str or list of str\n        If `type` is None, `dirs` is a string containing the path to the\n        numarray headers.\n        If `type` is not None, `dirs` is a list of strings with first the\n        path(s) to the numarray headers, followed by the path to the NumPy\n        headers.\n\n    Notes\n    -----\n    Useful when using ``distutils``, for example in ``setup.py``.\n    ::\n\n        import numpy as np\n        ...\n        Extension('extension_name', ...\n                include_dirs=[np.get_numarray_include()])\n        ...\n\n    "),
               ('numpy.lib.utils._set_function_name', ['func', 'name'], ''),
               ('numpy.lib.utils._set_function_name', ['func', 'name'], ''),
               ('numpy.lib.utils.deprecate',
                ['*args', '**kwargs'],
                "\n    Issues a DeprecationWarning, adds warning to `old_name`'s\n    docstring, rebinds ``old_name.__name__`` and returns the new\n    function object.\n\n    This function may also be used as a decorator.\n\n    Parameters\n    ----------\n    func : function\n        The function to be deprecated.\n    old_name : str, optional\n        The name of the function to be deprecated. Default is None, in which\n        case the name of `func` is used.\n    new_name : str, optional\n        The new name for the function. Default is None, in which case\n        the deprecation message is that `old_name` is deprecated. If given,\n        the deprecation message is that `old_name` is deprecated and `new_name`\n        should be used instead.\n    message : str, optional\n        Additional explanation of the deprecation.  Displayed in the docstring\n        after the warning.\n\n    Returns\n    -------\n    old_func : function\n        The deprecated function.\n\n    Examples\n    --------\n    Note that ``olduint`` returns a value after printing Deprecation Warning:\n\n    >>> olduint = np.deprecate(np.uint)\n    >>> olduint(6)\n    /usr/lib/python2.5/site-packages/numpy/lib/utils.py:114:\n    DeprecationWarning: uint32 is deprecated\n      warnings.warn(str1, DeprecationWarning)\n    6\n\n    "),
               ('numpy.lib.utils.byte_bounds',
                ['a'],
                "\n    Returns pointers to the end-points of an array.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array. It must conform to the Python-side of the array interface.\n\n    Returns\n    -------\n    (low, high) : tuple of 2 integers\n        The first integer is the first byte of the array, the second integer is\n        just past the last byte of the array.  If `a` is not contiguous it\n        will not use every byte between the (`low`, `high`) values.\n\n    Examples\n    --------\n    >>> I = np.eye(2, dtype='f'); I.dtype\n    dtype('float32')\n    >>> low, high = np.byte_bounds(I)\n    >>> high - low == I.size*I.itemsize\n    True\n    >>> I = np.eye(2, dtype='G'); I.dtype\n    dtype('complex192')\n    >>> low, high = np.byte_bounds(I)\n    >>> high - low == I.size*I.itemsize\n    True\n\n    "),
               ('numpy.lib.utils.may_share_memory',
                ['a', 'b'],
                '\n    Determine if two arrays can share memory\n\n    The memory-bounds of a and b are computed.  If they overlap then\n    this function returns True.  Otherwise, it returns False.\n\n    A return of True does not necessarily mean that the two arrays\n    share any element.  It just means that they *might*.\n\n    Parameters\n    ----------\n    a, b : ndarray\n\n    Returns\n    -------\n    out : bool\n\n    Examples\n    --------\n    >>> np.may_share_memory(np.array([1,2]), np.array([5,8,9]))\n    False\n\n    '),
               ('numpy.lib.utils.who',
                ['vardict=None'],
                "\n    Print the Numpy arrays in the given dictionary.\n\n    If there is no dictionary passed in or `vardict` is None then returns\n    Numpy arrays in the globals() dictionary (all Numpy arrays in the\n    namespace).\n\n    Parameters\n    ----------\n    vardict : dict, optional\n        A dictionary possibly containing ndarrays.  Default is globals().\n\n    Returns\n    -------\n    out : None\n        Returns 'None'.\n\n    Notes\n    -----\n    Prints out the name, shape, bytes and type of all of the ndarrays present\n    in `vardict`.\n\n    Examples\n    --------\n    >>> a = np.arange(10)\n    >>> b = np.ones(20)\n    >>> np.who()\n    Name            Shape            Bytes            Type\n    ===========================================================\n    a               10               40               int32\n    b               20               160              float64\n    Upper bound on total bytes  =       200\n\n    >>> d = {'x': np.arange(2.0), 'y': np.arange(3.0), 'txt': 'Some str',\n    ... 'idx':5}\n    >>> np.who(d)\n    Name            Shape            Bytes            Type\n    ===========================================================\n    y               3                24               float64\n    x               2                16               float64\n    Upper bound on total bytes  =       40\n\n    "),
               ('numpy.lib.utils._split_line', ['name', 'arguments', 'width'], ''),
               ('numpy.lib.utils._makenamedict', ["module='numpy'"], ''),
               ('numpy.lib.utils.info',
                ['object=None', 'maxwidth=76', 'output=sys.stdout', "toplevel='numpy'"],
                "\n    Get help information for a function, class, or module.\n\n    Parameters\n    ----------\n    object : object or str, optional\n        Input object or name to get information about. If `object` is a\n        numpy object, its docstring is given. If it is a string, available\n        modules are searched for matching objects.\n        If None, information about `info` itself is returned.\n    maxwidth : int, optional\n        Printing width.\n    output : file like object, optional\n        File like object that the output is written to, default is ``stdout``.\n        The object has to be opened in 'w' or 'a' mode.\n    toplevel : str, optional\n        Start search at this level.\n\n    See Also\n    --------\n    source, lookfor\n\n    Notes\n    -----\n    When used interactively with an object, ``np.info(obj)`` is equivalent to\n    ``help(obj)`` on the Python prompt or ``obj?`` on the IPython prompt.\n\n    Examples\n    --------\n    >>> np.info(np.polyval) # doctest: +SKIP\n       polyval(p, x)\n         Evaluate the polynomial p at x.\n         ...\n\n    When using a string for `object` it is possible to get multiple results.\n\n    >>> np.info('fft') # doctest: +SKIP\n         *** Found in numpy ***\n    Core FFT routines\n    ...\n         *** Found in numpy.fft ***\n     fft(a, n=None, axis=-1)\n    ...\n         *** Repeat reference found in numpy.fft.fftpack ***\n         *** Total of 3 references found. ***\n\n    "),
               ('numpy.lib.utils.source',
                ['object', 'output=sys.stdout'],
                '\n    Print or write to a file the source code for a Numpy object.\n\n    The source code is only returned for objects written in Python. Many\n    functions and classes are defined in C and will therefore not return\n    useful information.\n\n    Parameters\n    ----------\n    object : numpy object\n        Input object. This can be any object (function, class, module, ...).\n    output : file object, optional\n        If `output` not supplied then source code is printed to screen\n        (sys.stdout).  File object must be created with either write \'w\' or\n        append \'a\' modes.\n\n    See Also\n    --------\n    lookfor, info\n\n    Examples\n    --------\n    >>> np.source(np.interp)                        #doctest: +SKIP\n    In file: /usr/lib/python2.6/dist-packages/numpy/lib/function_base.py\n    def interp(x, xp, fp, left=None, right=None):\n        """.... (full docstring printed)"""\n        if isinstance(x, (float, int, number)):\n            return compiled_interp([x], xp, fp, left, right).item()\n        else:\n            return compiled_interp(x, xp, fp, left, right)\n\n    The source code is only returned for objects written in Python.\n\n    >>> np.source(np.array)                         #doctest: +SKIP\n    Not available for this object.\n\n    '),
               ('numpy.lib.utils.lookfor',
                ['what',
                 'module=None',
                 'import_modules=True',
                 'regenerate=False',
                 'output=None'],
                "\n    Do a keyword search on docstrings.\n\n    A list of of objects that matched the search is displayed,\n    sorted by relevance. All given keywords need to be found in the\n    docstring for it to be returned as a result, but the order does\n    not matter.\n\n    Parameters\n    ----------\n    what : str\n        String containing words to look for.\n    module : str or list, optional\n        Name of module(s) whose docstrings to go through.\n    import_modules : bool, optional\n        Whether to import sub-modules in packages. Default is True.\n    regenerate : bool, optional\n        Whether to re-generate the docstring cache. Default is False.\n    output : file-like, optional\n        File-like object to write the output to. If omitted, use a pager.\n\n    See Also\n    --------\n    source, info\n\n    Notes\n    -----\n    Relevance is determined only roughly, by checking if the keywords occur\n    in the function name, at the start of a docstring, etc.\n\n    Examples\n    --------\n    >>> np.lookfor('binary representation')\n    Search results for 'binary representation'\n    ------------------------------------------\n    numpy.binary_repr\n        Return the binary representation of the input number as a string.\n    numpy.core.setup_common.long_double_representation\n        Given a binary dump as given by GNU od -b, look for long double\n    numpy.base_repr\n        Return a string representation of a number in the given base system.\n    ...\n\n    "),
               ('numpy.lib.utils._lookfor_generate_cache',
                ['module', 'import_modules', 'regenerate'],
                '\n    Generate docstring cache for given module.\n\n    Parameters\n    ----------\n    module : str, None, module\n        Module for which to generate docstring cache\n    import_modules : bool\n        Whether to import sub-modules in packages.\n    regenerate: bool\n        Re-generate the docstring cache\n\n    Returns\n    -------\n    cache : dict {obj_full_name: (docstring, kind, index), ...}\n        Docstring cache for the module, either cached one (regenerate=False)\n        or newly generated.\n\n    '),
               ('numpy.lib.utils._getmembers', ['item'], ''),
               ('numpy.lib.utils.safe_eval',
                ['source'],
                '\n    Protected string evaluation.\n\n    Evaluate a string containing a Python literal expression without\n    allowing the execution of arbitrary non-literal code.\n\n    Parameters\n    ----------\n    source : str\n        The string to evaluate.\n\n    Returns\n    -------\n    obj : object\n       The result of evaluating `source`.\n\n    Raises\n    ------\n    SyntaxError\n        If the code has invalid Python syntax, or if it contains non-literal\n        code.\n\n    Examples\n    --------\n    >>> np.safe_eval(\'1\')\n    1\n    >>> np.safe_eval(\'[1, 2, 3]\')\n    [1, 2, 3]\n    >>> np.safe_eval(\'{"foo": ("bar", 10.0)}\')\n    {\'foo\': (\'bar\', 10.0)}\n\n    >>> np.safe_eval(\'import os\')\n    Traceback (most recent call last):\n      ...\n    SyntaxError: invalid syntax\n\n    >>> np.safe_eval(\'open("/home/user/.ssh/id_dsa").read()\')\n    Traceback (most recent call last):\n      ...\n    SyntaxError: Unsupported source construct: compiler.ast.CallFunc\n\n    '),
               ('numpy.lib.scimath._tocomplex',
                ['arr'],
                "Convert its input `arr` to a complex array.\n\n    The input is returned as a complex array of the smallest type that will fit\n    the original data: types like single, byte, short, etc. become csingle,\n    while others become cdouble.\n\n    A copy of the input is always made.\n\n    Parameters\n    ----------\n    arr : array\n\n    Returns\n    -------\n    array\n        An array with the same input data as the input but in complex form.\n\n    Examples\n    --------\n\n    First, consider an input of type short:\n\n    >>> a = np.array([1,2,3],np.short)\n\n    >>> ac = np.lib.scimath._tocomplex(a); ac\n    array([ 1.+0.j,  2.+0.j,  3.+0.j], dtype=complex64)\n\n    >>> ac.dtype\n    dtype('complex64')\n\n    If the input is of type double, the output is correspondingly of the\n    complex double type as well:\n\n    >>> b = np.array([1,2,3],np.double)\n\n    >>> bc = np.lib.scimath._tocomplex(b); bc\n    array([ 1.+0.j,  2.+0.j,  3.+0.j])\n\n    >>> bc.dtype\n    dtype('complex128')\n\n    Note that even if the input was complex to begin with, a copy is still\n    made, since the astype() method always copies:\n\n    >>> c = np.array([1,2,3],np.csingle)\n\n    >>> cc = np.lib.scimath._tocomplex(c); cc\n    array([ 1.+0.j,  2.+0.j,  3.+0.j], dtype=complex64)\n\n    >>> c *= 2; c\n    array([ 2.+0.j,  4.+0.j,  6.+0.j], dtype=complex64)\n\n    >>> cc\n    array([ 1.+0.j,  2.+0.j,  3.+0.j], dtype=complex64)\n    "),
               ('numpy.lib.scimath._fix_real_lt_zero',
                ['x'],
                'Convert `x` to complex if it has real, negative components.\n\n    Otherwise, output is just the array version of the input (via asarray).\n\n    Parameters\n    ----------\n    x : array_like\n\n    Returns\n    -------\n    array\n\n    Examples\n    --------\n    >>> np.lib.scimath._fix_real_lt_zero([1,2])\n    array([1, 2])\n\n    >>> np.lib.scimath._fix_real_lt_zero([-1,2])\n    array([-1.+0.j,  2.+0.j])\n    '),
               ('numpy.lib.scimath._fix_int_lt_zero',
                ['x'],
                'Convert `x` to double if it has real, negative components.\n\n    Otherwise, output is just the array version of the input (via asarray).\n\n    Parameters\n    ----------\n    x : array_like\n\n    Returns\n    -------\n    array\n\n    Examples\n    --------\n    >>> np.lib.scimath._fix_int_lt_zero([1,2])\n    array([1, 2])\n\n    >>> np.lib.scimath._fix_int_lt_zero([-1,2])\n    array([-1.,  2.])\n    '),
               ('numpy.lib.scimath._fix_real_abs_gt_1',
                ['x'],
                'Convert `x` to complex if it has real components x_i with abs(x_i)>1.\n\n    Otherwise, output is just the array version of the input (via asarray).\n\n    Parameters\n    ----------\n    x : array_like\n\n    Returns\n    -------\n    array\n\n    Examples\n    --------\n    >>> np.lib.scimath._fix_real_abs_gt_1([0,1])\n    array([0, 1])\n\n    >>> np.lib.scimath._fix_real_abs_gt_1([0,2])\n    array([ 0.+0.j,  2.+0.j])\n    '),
               ('numpy.lib.scimath.sqrt',
                ['x'],
                '\n    Compute the square root of x.\n\n    For negative input elements, a complex value is returned\n    (unlike `numpy.sqrt` which returns NaN).\n\n    Parameters\n    ----------\n    x : array_like\n       The input value(s).\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The square root of `x`. If `x` was a scalar, so is `out`,\n       otherwise an array is returned.\n\n    See Also\n    --------\n    numpy.sqrt\n\n    Examples\n    --------\n    For real, non-negative inputs this works just like `numpy.sqrt`:\n\n    >>> np.lib.scimath.sqrt(1)\n    1.0\n    >>> np.lib.scimath.sqrt([1, 4])\n    array([ 1.,  2.])\n\n    But it automatically handles negative inputs:\n\n    >>> np.lib.scimath.sqrt(-1)\n    (0.0+1.0j)\n    >>> np.lib.scimath.sqrt([-1,4])\n    array([ 0.+1.j,  2.+0.j])\n\n    '),
               ('numpy.lib.scimath.log',
                ['x'],
                '\n    Compute the natural logarithm of `x`.\n\n    Return the "principal value" (for a description of this, see `numpy.log`)\n    of :math:`log_e(x)`. For real `x > 0`, this is a real number (``log(0)``\n    returns ``-inf`` and ``log(np.inf)`` returns ``inf``). Otherwise, the\n    complex principle value is returned.\n\n    Parameters\n    ----------\n    x : array_like\n       The value(s) whose log is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The log of the `x` value(s). If `x` was a scalar, so is `out`,\n       otherwise an array is returned.\n\n    See Also\n    --------\n    numpy.log\n\n    Notes\n    -----\n    For a log() that returns ``NAN`` when real `x < 0`, use `numpy.log`\n    (note, however, that otherwise `numpy.log` and this `log` are identical,\n    i.e., both return ``-inf`` for `x = 0`, ``inf`` for `x = inf`, and,\n    notably, the complex principle value if ``x.imag != 0``).\n\n    Examples\n    --------\n    >>> np.emath.log(np.exp(1))\n    1.0\n\n    Negative arguments are handled "correctly" (recall that\n    ``exp(log(x)) == x`` does *not* hold for real ``x < 0``):\n\n    >>> np.emath.log(-np.exp(1)) == (1 + np.pi * 1j)\n    True\n\n    '),
               ('numpy.lib.scimath.log10',
                ['x'],
                '\n    Compute the logarithm base 10 of `x`.\n\n    Return the "principal value" (for a description of this, see\n    `numpy.log10`) of :math:`log_{10}(x)`. For real `x > 0`, this\n    is a real number (``log10(0)`` returns ``-inf`` and ``log10(np.inf)``\n    returns ``inf``). Otherwise, the complex principle value is returned.\n\n    Parameters\n    ----------\n    x : array_like or scalar\n       The value(s) whose log base 10 is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The log base 10 of the `x` value(s). If `x` was a scalar, so is `out`,\n       otherwise an array object is returned.\n\n    See Also\n    --------\n    numpy.log10\n\n    Notes\n    -----\n    For a log10() that returns ``NAN`` when real `x < 0`, use `numpy.log10`\n    (note, however, that otherwise `numpy.log10` and this `log10` are\n    identical, i.e., both return ``-inf`` for `x = 0`, ``inf`` for `x = inf`,\n    and, notably, the complex principle value if ``x.imag != 0``).\n\n    Examples\n    --------\n\n    (We set the printing precision so the example can be auto-tested)\n\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.emath.log10(10**1)\n    1.0\n\n    >>> np.emath.log10([-10**1, -10**2, 10**2])\n    array([ 1.+1.3644j,  2.+1.3644j,  2.+0.j    ])\n\n    '),
               ('numpy.lib.scimath.logn',
                ['n', 'x'],
                '\n    Take log base n of x.\n\n    If `x` contains negative inputs, the answer is computed and returned in the\n    complex domain.\n\n    Parameters\n    ----------\n    n : int\n       The base in which the log is taken.\n    x : array_like\n       The value(s) whose log base `n` is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The log base `n` of the `x` value(s). If `x` was a scalar, so is\n       `out`, otherwise an array is returned.\n\n    Examples\n    --------\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.lib.scimath.logn(2, [4, 8])\n    array([ 2.,  3.])\n    >>> np.lib.scimath.logn(2, [-4, -8, 8])\n    array([ 2.+4.5324j,  3.+4.5324j,  3.+0.j    ])\n\n    '),
               ('numpy.lib.scimath.log2',
                ['x'],
                '\n    Compute the logarithm base 2 of `x`.\n\n    Return the "principal value" (for a description of this, see\n    `numpy.log2`) of :math:`log_2(x)`. For real `x > 0`, this is\n    a real number (``log2(0)`` returns ``-inf`` and ``log2(np.inf)`` returns\n    ``inf``). Otherwise, the complex principle value is returned.\n\n    Parameters\n    ----------\n    x : array_like\n       The value(s) whose log base 2 is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The log base 2 of the `x` value(s). If `x` was a scalar, so is `out`,\n       otherwise an array is returned.\n\n    See Also\n    --------\n    numpy.log2\n\n    Notes\n    -----\n    For a log2() that returns ``NAN`` when real `x < 0`, use `numpy.log2`\n    (note, however, that otherwise `numpy.log2` and this `log2` are\n    identical, i.e., both return ``-inf`` for `x = 0`, ``inf`` for `x = inf`,\n    and, notably, the complex principle value if ``x.imag != 0``).\n\n    Examples\n    --------\n    We set the printing precision so the example can be auto-tested:\n\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.emath.log2(8)\n    3.0\n    >>> np.emath.log2([-4, -8, 8])\n    array([ 2.+4.5324j,  3.+4.5324j,  3.+0.j    ])\n\n    '),
               ('numpy.lib.scimath.power',
                ['x', 'p'],
                '\n    Return x to the power p, (x**p).\n\n    If `x` contains negative values, the output is converted to the\n    complex domain.\n\n    Parameters\n    ----------\n    x : array_like\n        The input value(s).\n    p : array_like of ints\n        The power(s) to which `x` is raised. If `x` contains multiple values,\n        `p` has to either be a scalar, or contain the same number of values\n        as `x`. In the latter case, the result is\n        ``x[0]**p[0], x[1]**p[1], ...``.\n\n    Returns\n    -------\n    out : ndarray or scalar\n        The result of ``x**p``. If `x` and `p` are scalars, so is `out`,\n        otherwise an array is returned.\n\n    See Also\n    --------\n    numpy.power\n\n    Examples\n    --------\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.lib.scimath.power([2, 4], 2)\n    array([ 4, 16])\n    >>> np.lib.scimath.power([2, 4], -2)\n    array([ 0.25  ,  0.0625])\n    >>> np.lib.scimath.power([-2, 4], 2)\n    array([  4.+0.j,  16.+0.j])\n\n    '),
               ('numpy.lib.scimath.arccos',
                ['x'],
                '\n    Compute the inverse cosine of x.\n\n    Return the "principal value" (for a description of this, see\n    `numpy.arccos`) of the inverse cosine of `x`. For real `x` such that\n    `abs(x) <= 1`, this is a real number in the closed interval\n    :math:`[0, \\pi]`.  Otherwise, the complex principle value is returned.\n\n    Parameters\n    ----------\n    x : array_like or scalar\n       The value(s) whose arccos is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The inverse cosine(s) of the `x` value(s). If `x` was a scalar, so\n       is `out`, otherwise an array object is returned.\n\n    See Also\n    --------\n    numpy.arccos\n\n    Notes\n    -----\n    For an arccos() that returns ``NAN`` when real `x` is not in the\n    interval ``[-1,1]``, use `numpy.arccos`.\n\n    Examples\n    --------\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.emath.arccos(1) # a scalar is returned\n    0.0\n\n    >>> np.emath.arccos([1,2])\n    array([ 0.-0.j   ,  0.+1.317j])\n\n    '),
               ('numpy.lib.scimath.arcsin',
                ['x'],
                '\n    Compute the inverse sine of x.\n\n    Return the "principal value" (for a description of this, see\n    `numpy.arcsin`) of the inverse sine of `x`. For real `x` such that\n    `abs(x) <= 1`, this is a real number in the closed interval\n    :math:`[-\\pi/2, \\pi/2]`.  Otherwise, the complex principle value is\n    returned.\n\n    Parameters\n    ----------\n    x : array_like or scalar\n       The value(s) whose arcsin is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The inverse sine(s) of the `x` value(s). If `x` was a scalar, so\n       is `out`, otherwise an array object is returned.\n\n    See Also\n    --------\n    numpy.arcsin\n\n    Notes\n    -----\n    For an arcsin() that returns ``NAN`` when real `x` is not in the\n    interval ``[-1,1]``, use `numpy.arcsin`.\n\n    Examples\n    --------\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.emath.arcsin(0)\n    0.0\n\n    >>> np.emath.arcsin([0,1])\n    array([ 0.    ,  1.5708])\n\n    '),
               ('numpy.lib.scimath.arctanh',
                ['x'],
                '\n    Compute the inverse hyperbolic tangent of `x`.\n\n    Return the "principal value" (for a description of this, see\n    `numpy.arctanh`) of `arctanh(x)`. For real `x` such that\n    `abs(x) < 1`, this is a real number.  If `abs(x) > 1`, or if `x` is\n    complex, the result is complex. Finally, `x = 1` returns``inf`` and\n    `x=-1` returns ``-inf``.\n\n    Parameters\n    ----------\n    x : array_like\n       The value(s) whose arctanh is (are) required.\n\n    Returns\n    -------\n    out : ndarray or scalar\n       The inverse hyperbolic tangent(s) of the `x` value(s). If `x` was\n       a scalar so is `out`, otherwise an array is returned.\n\n\n    See Also\n    --------\n    numpy.arctanh\n\n    Notes\n    -----\n    For an arctanh() that returns ``NAN`` when real `x` is not in the\n    interval ``(-1,1)``, use `numpy.arctanh` (this latter, however, does\n    return +/-inf for `x = +/-1`).\n\n    Examples\n    --------\n    >>> np.set_printoptions(precision=4)\n\n    >>> np.emath.arctanh(np.matrix(np.eye(2)))\n    array([[ Inf,   0.],\n           [  0.,  Inf]])\n    >>> np.emath.arctanh([1j])\n    array([ 0.+0.7854j])\n\n    '),
               ('numpy.lib.npyio.seek_gzip_factory',
                ['f'],
                'Use this factory to produce the class so that we can do a lazy\n    import on gzip.\n\n    '),
               ('numpy.lib.npyio.zipfile_factory', ['*args', '**kwargs'], ''),
               ('numpy.lib.npyio.load',
                ['file', 'mmap_mode=None'],
                "\n    Load a pickled, ``.npy``, or ``.npz`` binary file.\n\n    Parameters\n    ----------\n    file : file-like object or string\n        The file to read.  It must support ``seek()`` and ``read()`` methods.\n        If the filename extension is ``.gz``, the file is first decompressed.\n    mmap_mode: {None, 'r+', 'r', 'w+', 'c'}, optional\n        If not None, then memory-map the file, using the given mode\n        (see `numpy.memmap`).  The mode has no effect for pickled or\n        zipped files.\n        A memory-mapped array is stored on disk, and not directly loaded\n        into memory.  However, it can be accessed and sliced like any\n        ndarray.  Memory mapping is especially useful for accessing\n        small fragments of large files without reading the entire file\n        into memory.\n\n    Returns\n    -------\n    result : array, tuple, dict, etc.\n        Data stored in the file.\n\n    Raises\n    ------\n    IOError\n        If the input file does not exist or cannot be read.\n\n    See Also\n    --------\n    save, savez, loadtxt\n    memmap : Create a memory-map to an array stored in a file on disk.\n\n    Notes\n    -----\n    - If the file contains pickle data, then whatever is stored in the\n      pickle is returned.\n    - If the file is a ``.npy`` file, then an array is returned.\n    - If the file is a ``.npz`` file, then a dictionary-like object is\n      returned, containing ``{filename: array}`` key-value pairs, one for\n      each file in the archive.\n\n    Examples\n    --------\n    Store data to disk, and load it again:\n\n    >>> np.save('/tmp/123', np.array([[1, 2, 3], [4, 5, 6]]))\n    >>> np.load('/tmp/123.npy')\n    array([[1, 2, 3],\n           [4, 5, 6]])\n\n    Mem-map the stored array, and then access the second row\n    directly from disk:\n\n    >>> X = np.load('/tmp/123.npy', mmap_mode='r')\n    >>> X[1, :]\n    memmap([4, 5, 6])\n\n    "),
               ('numpy.lib.npyio.save',
                ['file', 'arr'],
                '\n    Save an array to a binary file in NumPy ``.npy`` format.\n\n    Parameters\n    ----------\n    file : file or str\n        File or filename to which the data is saved.  If file is a file-object,\n        then the filename is unchanged.  If file is a string, a ``.npy``\n        extension will be appended to the file name if it does not already\n        have one.\n    arr : array_like\n        Array data to be saved.\n\n    See Also\n    --------\n    savez : Save several arrays into a ``.npz`` archive\n    savetxt, load\n\n    Notes\n    -----\n    For a description of the ``.npy`` format, see `format`.\n\n    Examples\n    --------\n    >>> from tempfile import TemporaryFile\n    >>> outfile = TemporaryFile()\n\n    >>> x = np.arange(10)\n    >>> np.save(outfile, x)\n\n    >>> outfile.seek(0) # Only needed here to simulate closing & reopening file\n    >>> np.load(outfile)\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    '),
               ('numpy.lib.npyio.savez',
                ['file', '*args', '**kwds'],
                '\n    Save several arrays into a single file in uncompressed ``.npz`` format.\n\n    If arguments are passed in with no keywords, the corresponding variable\n    names, in the .npz file, are \'arr_0\', \'arr_1\', etc. If keyword arguments\n    are given, the corresponding variable names, in the ``.npz`` file will\n    match the keyword names.\n\n    Parameters\n    ----------\n    file : str or file\n        Either the file name (string) or an open file (file-like object)\n        where the data will be saved. If file is a string, the ``.npz``\n        extension will be appended to the file name if it is not already there.\n    *args : Arguments, optional\n        Arrays to save to the file. Since it is not possible for Python to\n        know the names of the arrays outside `savez`, the arrays will be saved\n        with names "arr_0", "arr_1", and so on. These arguments can be any\n        expression.\n    **kwds : Keyword arguments, optional\n        Arrays to save to the file. Arrays will be saved in the file with the\n        keyword names.\n\n    Returns\n    -------\n    None\n\n    See Also\n    --------\n    save : Save a single array to a binary file in NumPy format.\n    savetxt : Save an array to a file as plain text.\n\n    Notes\n    -----\n    The ``.npz`` file format is a zipped archive of files named after the\n    variables they contain.  The archive is not compressed and each file\n    in the archive contains one variable in ``.npy`` format. For a\n    description of the ``.npy`` format, see `format`.\n\n    When opening the saved ``.npz`` file with `load` a `NpzFile` object is\n    returned. This is a dictionary-like object which can be queried for\n    its list of arrays (with the ``.files`` attribute), and for the arrays\n    themselves.\n\n    Examples\n    --------\n    >>> from tempfile import TemporaryFile\n    >>> outfile = TemporaryFile()\n    >>> x = np.arange(10)\n    >>> y = np.sin(x)\n\n    Using `savez` with *args, the arrays are saved with default names.\n\n    >>> np.savez(outfile, x, y)\n    >>> outfile.seek(0) # Only needed here to simulate closing & reopening file\n    >>> npzfile = np.load(outfile)\n    >>> npzfile.files\n    [\'arr_1\', \'arr_0\']\n    >>> npzfile[\'arr_0\']\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    Using `savez` with **kwds, the arrays are saved with the keyword names.\n\n    >>> outfile = TemporaryFile()\n    >>> np.savez(outfile, x=x, y=y)\n    >>> outfile.seek(0)\n    >>> npzfile = np.load(outfile)\n    >>> npzfile.files\n    [\'y\', \'x\']\n    >>> npzfile[\'x\']\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    See Also\n    --------\n    numpy.savez_compressed : Save several arrays into a compressed .npz file format\n\n    '),
               ('numpy.lib.npyio.savez_compressed',
                ['file', '*args', '**kwds'],
                '\n    Save several arrays into a single file in compressed ``.npz`` format.\n\n    If keyword arguments are given, then filenames are taken from the keywords.\n    If arguments are passed in with no keywords, then stored file names are\n    arr_0, arr_1, etc.\n\n    Parameters\n    ----------\n    file : str\n        File name of .npz file.\n    args : Arguments\n        Function arguments.\n    kwds : Keyword arguments\n        Keywords.\n\n    See Also\n    --------\n    numpy.savez : Save several arrays into an uncompressed .npz file format\n\n    '),
               ('numpy.lib.npyio._savez', ['file', 'args', 'kwds', 'compress'], ''),
               ('numpy.lib.npyio._getconv', ['dtype'], ''),
               ('numpy.lib.npyio.loadtxt',
                ['fname',
                 'dtype=float',
                 "comments='#'",
                 'delimiter=None',
                 'converters=None',
                 'skiprows=0',
                 'usecols=None',
                 'unpack=False',
                 'ndmin=0'],
                '\n    Load data from a text file.\n\n    Each row in the text file must have the same number of values.\n\n    Parameters\n    ----------\n    fname : file or str\n        File, filename, or generator to read.  If the filename extension is\n        ``.gz`` or ``.bz2``, the file is first decompressed. Note that\n        generators should return byte strings for Python 3k.\n    dtype : data-type, optional\n        Data-type of the resulting array; default: float.  If this is a\n        record data-type, the resulting array will be 1-dimensional, and\n        each row will be interpreted as an element of the array.  In this\n        case, the number of columns used must match the number of fields in\n        the data-type.\n    comments : str, optional\n        The character used to indicate the start of a comment;\n        default: \'#\'.\n    delimiter : str, optional\n        The string used to separate values.  By default, this is any\n        whitespace.\n    converters : dict, optional\n        A dictionary mapping column number to a function that will convert\n        that column to a float.  E.g., if column 0 is a date string:\n        ``converters = {0: datestr2num}``.  Converters can also be used to\n        provide a default value for missing data (but see also `genfromtxt`):\n        ``converters = {3: lambda s: float(s.strip() or 0)}``.  Default: None.\n    skiprows : int, optional\n        Skip the first `skiprows` lines; default: 0.\n    usecols : sequence, optional\n        Which columns to read, with 0 being the first.  For example,\n        ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.\n        The default, None, results in all columns being read.\n    unpack : bool, optional\n        If True, the returned array is transposed, so that arguments may be\n        unpacked using ``x, y, z = loadtxt(...)``.  When used with a record\n        data-type, arrays are returned for each field.  Default is False.\n    ndmin : int, optional\n        The returned array will have at least `ndmin` dimensions.\n        Otherwise mono-dimensional axes will be squeezed. \n        Legal values: 0 (default), 1 or 2.\n        .. versionadded:: 1.6.0\n\n    Returns\n    -------\n    out : ndarray\n        Data read from the text file.\n\n    See Also\n    --------\n    load, fromstring, fromregex\n    genfromtxt : Load data with missing values handled as specified.\n    scipy.io.loadmat : reads MATLAB data files\n\n    Notes\n    -----\n    This function aims to be a fast reader for simply formatted files.  The\n    `genfromtxt` function provides more sophisticated handling of, e.g.,\n    lines with missing values.\n\n    Examples\n    --------\n    >>> from StringIO import StringIO   # StringIO behaves like a file object\n    >>> c = StringIO("0 1\\n2 3")\n    >>> np.loadtxt(c)\n    array([[ 0.,  1.],\n           [ 2.,  3.]])\n\n    >>> d = StringIO("M 21 72\\nF 35 58")\n    >>> np.loadtxt(d, dtype={\'names\': (\'gender\', \'age\', \'weight\'),\n    ...                      \'formats\': (\'S1\', \'i4\', \'f4\')})\n    array([(\'M\', 21, 72.0), (\'F\', 35, 58.0)],\n          dtype=[(\'gender\', \'|S1\'), (\'age\', \'<i4\'), (\'weight\', \'<f4\')])\n\n    >>> c = StringIO("1,0,2\\n3,0,4")\n    >>> x, y = np.loadtxt(c, delimiter=\',\', usecols=(0, 2), unpack=True)\n    >>> x\n    array([ 1.,  3.])\n    >>> y\n    array([ 2.,  4.])\n\n    '),
               ('numpy.lib.npyio.savetxt',
                ['fname', 'X', "fmt='%.18e'", "delimiter=' '", "newline='\\n'"],
                "\n    Save an array to a text file.\n\n    Parameters\n    ----------\n    fname : filename or file handle\n        If the filename ends in ``.gz``, the file is automatically saved in\n        compressed gzip format.  `loadtxt` understands gzipped files\n        transparently.\n    X : array_like\n        Data to be saved to a text file.\n    fmt : str or sequence of strs\n        A single format (%10.5f), a sequence of formats, or a\n        multi-format string, e.g. 'Iteration %d -- %10.5f', in which\n        case `delimiter` is ignored. For complex `X`, the legal options\n        for `fmt` are:\n            a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted\n                like `' (%s+%sj)' % (fmt, fmt)`\n            b) a full string specifying every real and imaginary part, e.g.\n                `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns\n            c) a list of specifiers, one per column - in this case, the real\n                and imaginary part must have separate specifiers,\n                e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns\n    delimiter : str, optional\n        Character separating columns.\n    newline : str\n        .. versionadded:: 1.5.0\n\n        Character separating lines.\n\n    See Also\n    --------\n    save : Save an array to a binary file in NumPy ``.npy`` format\n    savez : Save several arrays into a ``.npz`` compressed archive\n\n    Notes\n    -----\n    Further explanation of the `fmt` parameter\n    (``%[flag]width[.precision]specifier``):\n\n    flags:\n        ``-`` : left justify\n\n        ``+`` : Forces to preceed result with + or -.\n\n        ``0`` : Left pad the number with zeros instead of space (see width).\n\n    width:\n        Minimum number of characters to be printed. The value is not truncated\n        if it has more characters.\n\n    precision:\n        - For integer specifiers (eg. ``d,i,o,x``), the minimum number of\n          digits.\n        - For ``e, E`` and ``f`` specifiers, the number of digits to print\n          after the decimal point.\n        - For ``g`` and ``G``, the maximum number of significant digits.\n        - For ``s``, the maximum number of characters.\n\n    specifiers:\n        ``c`` : character\n\n        ``d`` or ``i`` : signed decimal integer\n\n        ``e`` or ``E`` : scientific notation with ``e`` or ``E``.\n\n        ``f`` : decimal floating point\n\n        ``g,G`` : use the shorter of ``e,E`` or ``f``\n\n        ``o`` : signed octal\n\n        ``s`` : string of characters\n\n        ``u`` : unsigned decimal integer\n\n        ``x,X`` : unsigned hexadecimal integer\n\n    This explanation of ``fmt`` is not complete, for an exhaustive\n    specification see [1]_.\n\n    References\n    ----------\n    .. [1] `Format Specification Mini-Language\n           <http://docs.python.org/library/string.html#\n           format-specification-mini-language>`_, Python Documentation.\n\n    Examples\n    --------\n    >>> x = y = z = np.arange(0.0,5.0,1.0)\n    >>> np.savetxt('test.out', x, delimiter=',')   # X is an array\n    >>> np.savetxt('test.out', (x,y,z))   # x,y,z equal sized 1D arrays\n    >>> np.savetxt('test.out', x, fmt='%1.4e')   # use exponential notation\n\n    "),
               ('numpy.lib.npyio.fromregex',
                ['file', 'regexp', 'dtype'],
                '\n    Construct an array from a text file, using regular expression parsing.\n\n    The returned array is always a structured array, and is constructed from\n    all matches of the regular expression in the file. Groups in the regular\n    expression are converted to fields of the structured array.\n\n    Parameters\n    ----------\n    file : str or file\n        File name or file object to read.\n    regexp : str or regexp\n        Regular expression used to parse the file.\n        Groups in the regular expression correspond to fields in the dtype.\n    dtype : dtype or list of dtypes\n        Dtype for the structured array.\n\n    Returns\n    -------\n    output : ndarray\n        The output array, containing the part of the content of `file` that\n        was matched by `regexp`. `output` is always a structured array.\n\n    Raises\n    ------\n    TypeError\n        When `dtype` is not a valid dtype for a structured array.\n\n    See Also\n    --------\n    fromstring, loadtxt\n\n    Notes\n    -----\n    Dtypes for structured arrays can be specified in several forms, but all\n    forms specify at least the data type and field name. For details see\n    `doc.structured_arrays`.\n\n    Examples\n    --------\n    >>> f = open(\'test.dat\', \'w\')\n    >>> f.write("1312 foo\\n1534  bar\\n444   qux")\n    >>> f.close()\n\n    >>> regexp = r"(\\d+)\\s+(...)"  # match [digits, whitespace, anything]\n    >>> output = np.fromregex(\'test.dat\', regexp,\n    ...                       [(\'num\', np.int64), (\'key\', \'S3\')])\n    >>> output\n    array([(1312L, \'foo\'), (1534L, \'bar\'), (444L, \'qux\')],\n          dtype=[(\'num\', \'<i8\'), (\'key\', \'|S3\')])\n    >>> output[\'num\']\n    array([1312, 1534,  444], dtype=int64)\n\n    '),
               ('numpy.lib.npyio.genfromtxt',
                ['fname',
                 'dtype=float',
                 "comments='#'",
                 'delimiter=None',
                 'skiprows=0',
                 'skip_header=0',
                 'skip_footer=0',
                 'converters=None',
                 "missing=''",
                 'missing_values=None',
                 'filling_values=None',
                 'usecols=None',
                 'names=None',
                 'excludelist=None',
                 'deletechars=None',
                 "replace_space='_'",
                 'autostrip=False',
                 'case_sensitive=True',
                 "defaultfmt='f%i'",
                 'unpack=None',
                 'usemask=False',
                 'loose=True',
                 'invalid_raise=True'],
                '\n    Load data from a text file, with missing values handled as specified.\n\n    Each line past the first `skip_header` lines is split at the `delimiter`\n    character, and characters following the `comments` character are discarded.\n\n    Parameters\n    ----------\n    fname : file or str\n        File, filename, or generator to read.  If the filename extension is\n        `.gz` or `.bz2`, the file is first decompressed. Note that\n        generators must return byte strings in Python 3k.\n    dtype : dtype, optional\n        Data type of the resulting array.\n        If None, the dtypes will be determined by the contents of each\n        column, individually.\n    comments : str, optional\n        The character used to indicate the start of a comment.\n        All the characters occurring on a line after a comment are discarded\n    delimiter : str, int, or sequence, optional\n        The string used to separate values.  By default, any consecutive\n        whitespaces act as delimiter.  An integer or sequence of integers\n        can also be provided as width(s) of each field.\n    skip_header : int, optional\n        The numbers of lines to skip at the beginning of the file.\n    skip_footer : int, optional\n        The numbers of lines to skip at the end of the file\n    converters : variable, optional\n        The set of functions that convert the data of a column to a value.\n        The converters can also be used to provide a default value\n        for missing data: ``converters = {3: lambda s: float(s or 0)}``.\n    missing_values : variable, optional\n        The set of strings corresponding to missing data.\n    filling_values : variable, optional\n        The set of values to be used as default when the data are missing.\n    usecols : sequence, optional\n        Which columns to read, with 0 being the first.  For example,\n        ``usecols = (1, 4, 5)`` will extract the 2nd, 5th and 6th columns.\n    names : {None, True, str, sequence}, optional\n        If `names` is True, the field names are read from the first valid line\n        after the first `skip_header` lines.\n        If `names` is a sequence or a single-string of comma-separated names,\n        the names will be used to define the field names in a structured dtype.\n        If `names` is None, the names of the dtype fields will be used, if any.\n    excludelist : sequence, optional\n        A list of names to exclude. This list is appended to the default list\n        [\'return\',\'file\',\'print\']. Excluded names are appended an underscore:\n        for example, `file` would become `file_`.\n    deletechars : str, optional\n        A string combining invalid characters that must be deleted from the\n        names.\n    defaultfmt : str, optional\n        A format used to define default field names, such as "f%i" or "f_%02i".\n    autostrip : bool, optional\n        Whether to automatically strip white spaces from the variables.\n    replace_space : char, optional\n        Character(s) used in replacement of white spaces in the variables names.\n        By default, use a \'_\'.\n    case_sensitive : {True, False, \'upper\', \'lower\'}, optional\n        If True, field names are case sensitive.\n        If False or \'upper\', field names are converted to upper case.\n        If \'lower\', field names are converted to lower case.\n    unpack : bool, optional\n        If True, the returned array is transposed, so that arguments may be\n        unpacked using ``x, y, z = loadtxt(...)``\n    usemask : bool, optional\n        If True, return a masked array.\n        If False, return a regular array.\n    invalid_raise : bool, optional\n        If True, an exception is raised if an inconsistency is detected in the\n        number of columns.\n        If False, a warning is emitted and the offending lines are skipped.\n\n    Returns\n    -------\n    out : ndarray\n        Data read from the text file. If `usemask` is True, this is a\n        masked array.\n\n    See Also\n    --------\n    numpy.loadtxt : equivalent function when no data is missing.\n\n    Notes\n    -----\n    * When spaces are used as delimiters, or when no delimiter has been given\n      as input, there should not be any missing data between two fields.\n    * When the variables are named (either by a flexible dtype or with `names`,\n      there must not be any header in the file (else a ValueError\n      exception is raised).\n    * Individual values are not stripped of spaces by default.\n      When using a custom converter, make sure the function does remove spaces.\n\n    Examples\n    ---------\n    >>> from StringIO import StringIO\n    >>> import numpy as np\n\n    Comma delimited file with mixed dtype\n\n    >>> s = StringIO("1,1.3,abcde")\n    >>> data = np.genfromtxt(s, dtype=[(\'myint\',\'i8\'),(\'myfloat\',\'f8\'),\n    ... (\'mystring\',\'S5\')], delimiter=",")\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'myint\', \'<i8\'), (\'myfloat\', \'<f8\'), (\'mystring\', \'|S5\')])\n\n    Using dtype = None\n\n    >>> s.seek(0) # needed for StringIO example only\n    >>> data = np.genfromtxt(s, dtype=None,\n    ... names = [\'myint\',\'myfloat\',\'mystring\'], delimiter=",")\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'myint\', \'<i8\'), (\'myfloat\', \'<f8\'), (\'mystring\', \'|S5\')])\n\n    Specifying dtype and names\n\n    >>> s.seek(0)\n    >>> data = np.genfromtxt(s, dtype="i8,f8,S5",\n    ... names=[\'myint\',\'myfloat\',\'mystring\'], delimiter=",")\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'myint\', \'<i8\'), (\'myfloat\', \'<f8\'), (\'mystring\', \'|S5\')])\n\n    An example with fixed-width columns\n\n    >>> s = StringIO("11.3abcde")\n    >>> data = np.genfromtxt(s, dtype=None, names=[\'intvar\',\'fltvar\',\'strvar\'],\n    ...     delimiter=[1,3,5])\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'intvar\', \'<i8\'), (\'fltvar\', \'<f8\'), (\'strvar\', \'|S5\')])\n\n    '),
               ('numpy.lib.npyio.ndfromtxt',
                ['fname', '**kwargs'],
                '\n    Load ASCII data stored in a file and return it as a single array.\n\n    Complete description of all the optional input parameters is available in\n    the docstring of the `genfromtxt` function.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function.\n\n    '),
               ('numpy.lib.npyio.mafromtxt',
                ['fname', '**kwargs'],
                '\n    Load ASCII data stored in a text file and return a masked array.\n\n    For a complete description of all the input parameters, see `genfromtxt`.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function to load ASCII data.\n\n    '),
               ('numpy.lib.npyio.recfromtxt',
                ['fname', '**kwargs'],
                '\n    Load ASCII data from a file and return it in a record array.\n\n    If ``usemask=False`` a standard `recarray` is returned,\n    if ``usemask=True`` a MaskedRecords array is returned.\n\n    Complete description of all the optional input parameters is available in\n    the docstring of the `genfromtxt` function.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function\n\n    Notes\n    -----\n    By default, `dtype` is None, which means that the data-type of the output\n    array will be determined from the data.\n\n    '),
               ('numpy.lib.npyio.recfromcsv',
                ['fname', '**kwargs'],
                '\n    Load ASCII data stored in a comma-separated file.\n\n    The returned array is a record array (if ``usemask=False``, see\n    `recarray`) or a masked record array (if ``usemask=True``,\n    see `ma.mrecords.MaskedRecords`).\n\n    For a complete description of all the input parameters, see `genfromtxt`.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function to load ASCII data.\n\n    '),
               ('numpy.lib.financial._convert_when', ['when'], ''),
               ('numpy.lib.financial.fv',
                ['rate', 'nper', 'pmt', 'pv', "when='end'"],
                "\n    Compute the future value.\n\n    Given:\n     * a present value, `pv`\n     * an interest `rate` compounded once per period, of which\n       there are\n     * `nper` total\n     * a (fixed) payment, `pmt`, paid either\n     * at the beginning (`when` = {'begin', 1}) or the end\n       (`when` = {'end', 0}) of each period\n\n    Return:\n       the value at the end of the `nper` periods\n\n    Parameters\n    ----------\n    rate : scalar or array_like of shape(M, )\n        Rate of interest as decimal (not per cent) per period\n    nper : scalar or array_like of shape(M, )\n        Number of compounding periods\n    pmt : scalar or array_like of shape(M, )\n        Payment\n    pv : scalar or array_like of shape(M, )\n        Present value\n    when : {{'begin', 1}, {'end', 0}}, {string, int}, optional\n        When payments are due ('begin' (1) or 'end' (0)).\n        Defaults to {'end', 0}.\n\n    Returns\n    -------\n    out : ndarray\n        Future values.  If all input is scalar, returns a scalar float.  If\n        any input is array_like, returns future values for each input element.\n        If multiple inputs are array_like, they all must have the same shape.\n\n    Notes\n    -----\n    The future value is computed by solving the equation::\n\n     fv +\n     pv*(1+rate)**nper +\n     pmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) == 0\n\n    or, when ``rate == 0``::\n\n     fv + pv + pmt * nper == 0\n\n    References\n    ----------\n    .. [WRW] Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May).\n       Open Document Format for Office Applications (OpenDocument)v1.2,\n       Part 2: Recalculated Formula (OpenFormula) Format - Annotated Version,\n       Pre-Draft 12. Organization for the Advancement of Structured Information\n       Standards (OASIS). Billerica, MA, USA. [ODT Document].\n       Available:\n       http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula\n       OpenDocument-formula-20090508.odt\n\n    Examples\n    --------\n    What is the future value after 10 years of saving $100 now, with\n    an additional monthly savings of $100.  Assume the interest rate is\n    5% (annually) compounded monthly?\n\n    >>> np.fv(0.05/12, 10*12, -100, -100)\n    15692.928894335748\n\n    By convention, the negative sign represents cash flow out (i.e. money not\n    available today).  Thus, saving $100 a month at 5% annual interest leads\n    to $15,692.93 available to spend in 10 years.\n\n    If any input is array_like, returns an array of equal shape.  Let's\n    compare different interest rates from the example above.\n\n    >>> a = np.array((0.05, 0.06, 0.07))/12\n    >>> np.fv(a, 10*12, -100, -100)\n    array([ 15692.92889434,  16569.87435405,  17509.44688102])\n\n    "),
               ('numpy.lib.financial.pmt',
                ['rate', 'nper', 'pv', 'fv=0', "when='end'"],
                "\n    Compute the payment against loan principal plus interest.\n\n    Given:\n     * a present value, `pv` (e.g., an amount borrowed)\n     * a future value, `fv` (e.g., 0)\n     * an interest `rate` compounded once per period, of which\n       there are\n     * `nper` total\n     * and (optional) specification of whether payment is made\n       at the beginning (`when` = {'begin', 1}) or the end\n       (`when` = {'end', 0}) of each period\n\n    Return:\n       the (fixed) periodic payment.\n\n    Parameters\n    ----------\n    rate : array_like\n        Rate of interest (per period)\n    nper : array_like\n        Number of compounding periods\n    pv : array_like\n        Present value\n    fv : array_like (optional)\n        Future value (default = 0)\n    when : {{'begin', 1}, {'end', 0}}, {string, int}\n        When payments are due ('begin' (1) or 'end' (0))\n\n    Returns\n    -------\n    out : ndarray\n        Payment against loan plus interest.  If all input is scalar, returns a\n        scalar float.  If any input is array_like, returns payment for each\n        input element. If multiple inputs are array_like, they all must have\n        the same shape.\n\n    Notes\n    -----\n    The payment is computed by solving the equation::\n\n     fv +\n     pv*(1 + rate)**nper +\n     pmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) == 0\n\n    or, when ``rate == 0``::\n\n      fv + pv + pmt * nper == 0\n\n    for ``pmt``.\n\n    Note that computing a monthly mortgage payment is only\n    one use for this function.  For example, pmt returns the\n    periodic deposit one must make to achieve a specified\n    future balance given an initial deposit, a fixed,\n    periodically compounded interest rate, and the total\n    number of periods.\n\n    References\n    ----------\n    .. [WRW] Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May).\n       Open Document Format for Office Applications (OpenDocument)v1.2,\n       Part 2: Recalculated Formula (OpenFormula) Format - Annotated Version,\n       Pre-Draft 12. Organization for the Advancement of Structured Information\n       Standards (OASIS). Billerica, MA, USA. [ODT Document].\n       Available:\n       http://www.oasis-open.org/committees/documents.php\n       ?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt\n\n    Examples\n    --------\n    What is the monthly payment needed to pay off a $200,000 loan in 15\n    years at an annual interest rate of 7.5%?\n\n    >>> np.pmt(0.075/12, 12*15, 200000)\n    -1854.0247200054619\n\n    In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained\n    today, a monthly payment of $1,854.02 would be required.  Note that this\n    example illustrates usage of `fv` having a default value of 0.\n\n    "),
               ('numpy.lib.financial.nper',
                ['rate', 'pmt', 'pv', 'fv=0', "when='end'"],
                "\n    Compute the number of periodic payments.\n\n    Parameters\n    ----------\n    rate : array_like\n        Rate of interest (per period)\n    pmt : array_like\n        Payment\n    pv : array_like\n        Present value\n    fv : array_like, optional\n        Future value\n    when : {{'begin', 1}, {'end', 0}}, {string, int}, optional\n        When payments are due ('begin' (1) or 'end' (0))\n\n    Notes\n    -----\n    The number of periods ``nper`` is computed by solving the equation::\n\n     fv + pv*(1+rate)**nper + pmt*(1+rate*when)/rate*((1+rate)**nper-1) = 0\n\n    but if ``rate = 0`` then::\n\n     fv + pv + pmt*nper = 0\n\n    Examples\n    --------\n    If you only had $150/month to pay towards the loan, how long would it take\n    to pay-off a loan of $8,000 at 7% annual interest?\n\n    >>> np.nper(0.07/12, -150, 8000)\n    64.073348770661852\n\n    So, over 64 months would be required to pay off the loan.\n\n    The same analysis could be done with several different interest rates\n    and/or payments and/or total amounts to produce an entire table.\n\n    >>> np.nper(*(np.ogrid[0.07/12: 0.08/12: 0.01/12,\n    ...                    -150   : -99     : 50    ,\n    ...                    8000   : 9001    : 1000]))\n    array([[[  64.07334877,   74.06368256],\n            [ 108.07548412,  127.99022654]],\n           [[  66.12443902,   76.87897353],\n            [ 114.70165583,  137.90124779]]])\n\n    "),
               ('numpy.lib.financial.ipmt',
                ['rate', 'per', 'nper', 'pv', 'fv=0.0', "when='end'"],
                "\n    Not implemented. Compute the payment portion for loan interest.\n\n    Parameters\n    ----------\n    rate : scalar or array_like of shape(M, )\n        Rate of interest as decimal (not per cent) per period\n    per : scalar or array_like of shape(M, )\n        Interest paid against the loan changes during the life or the loan.\n        The `per` is the payment period to calculate the interest amount.\n    nper : scalar or array_like of shape(M, )\n        Number of compounding periods\n    pv : scalar or array_like of shape(M, )\n        Present value\n    fv : scalar or array_like of shape(M, ), optional\n        Future value\n    when : {{'begin', 1}, {'end', 0}}, {string, int}, optional\n        When payments are due ('begin' (1) or 'end' (0)).\n        Defaults to {'end', 0}.\n\n    Returns\n    -------\n    out : ndarray\n        Interest portion of payment.  If all input is scalar, returns a scalar\n        float.  If any input is array_like, returns interest payment for each\n        input element. If multiple inputs are array_like, they all must have\n        the same shape.\n\n    See Also\n    --------\n    ppmt, pmt, pv\n\n    Notes\n    -----\n    The total payment is made up of payment against principal plus interest.\n\n    ``pmt = ppmt + ipmt``\n\n    "),
               ('numpy.lib.financial.ppmt',
                ['rate', 'per', 'nper', 'pv', 'fv=0.0', "when='end'"],
                "\n    Not implemented. Compute the payment against loan principal.\n\n    Parameters\n    ----------\n    rate : array_like\n        Rate of interest (per period)\n    per : array_like, int\n        Amount paid against the loan changes.  The `per` is the period of\n        interest.\n    nper : array_like\n        Number of compounding periods\n    pv : array_like\n        Present value\n    fv : array_like, optional\n        Future value\n    when : {{'begin', 1}, {'end', 0}}, {string, int}\n        When payments are due ('begin' (1) or 'end' (0))\n\n    See Also\n    --------\n    pmt, pv, ipmt\n\n    "),
               ('numpy.lib.financial.pv',
                ['rate', 'nper', 'pmt', 'fv=0.0', "when='end'"],
                '\n    Compute the present value.\n\n    Given:\n     * a future value, `fv`\n     * an interest `rate` compounded once per period, of which\n       there are\n     * `nper` total\n     * a (fixed) payment, `pmt`, paid either\n     * at the beginning (`when` = {\'begin\', 1}) or the end\n       (`when` = {\'end\', 0}) of each period\n\n    Return:\n       the value now\n\n    Parameters\n    ----------\n    rate : array_like\n        Rate of interest (per period)\n    nper : array_like\n        Number of compounding periods\n    pmt : array_like\n        Payment\n    fv : array_like, optional\n        Future value\n    when : {{\'begin\', 1}, {\'end\', 0}}, {string, int}, optional\n        When payments are due (\'begin\' (1) or \'end\' (0))\n\n    Returns\n    -------\n    out : ndarray, float\n        Present value of a series of payments or investments.\n\n    Notes\n    -----\n    The present value is computed by solving the equation::\n\n     fv +\n     pv*(1 + rate)**nper +\n     pmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) = 0\n\n    or, when ``rate = 0``::\n\n     fv + pv + pmt * nper = 0\n\n    for `pv`, which is then returned.\n\n    References\n    ----------\n    .. [WRW] Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May).\n       Open Document Format for Office Applications (OpenDocument)v1.2,\n       Part 2: Recalculated Formula (OpenFormula) Format - Annotated Version,\n       Pre-Draft 12. Organization for the Advancement of Structured Information\n       Standards (OASIS). Billerica, MA, USA. [ODT Document].\n       Available:\n       http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula\n       OpenDocument-formula-20090508.odt\n\n    Examples\n    --------\n    What is the present value (e.g., the initial investment)\n    of an investment that needs to total $15692.93\n    after 10 years of saving $100 every month?  Assume the\n    interest rate is 5% (annually) compounded monthly.\n\n    >>> np.pv(0.05/12, 10*12, -100, 15692.93)\n    -100.00067131625819\n\n    By convention, the negative sign represents cash flow out\n    (i.e., money not available today).  Thus, to end up with\n    $15,692.93 in 10 years saving $100 a month at 5% annual\n    interest, one\'s initial deposit should also be $100.\n\n    If any input is array_like, ``pv`` returns an array of equal shape.\n    Let\'s compare different interest rates in the example above:\n\n    >>> a = np.array((0.05, 0.04, 0.03))/12\n    >>> np.pv(a, 10*12, -100, 15692.93)\n    array([ -100.00067132,  -649.26771385, -1273.78633713])\n\n    So, to end up with the same $15692.93 under the same $100 per month\n    "savings plan," for annual interest rates of 4% and 3%, one would\n    need initial investments of $649.27 and $1273.79, respectively.\n\n    '),
               ('numpy.lib.financial._g_div_gp', ['r', 'n', 'p', 'x', 'y', 'w'], ''),
               ('numpy.lib.financial.rate',
                ['nper',
                 'pmt',
                 'pv',
                 'fv',
                 "when='end'",
                 'guess=0.1',
                 'tol=1e-06',
                 'maxiter=100'],
                "\n    Compute the rate of interest per period.\n\n    Parameters\n    ----------\n    nper : array_like\n        Number of compounding periods\n    pmt : array_like\n        Payment\n    pv : array_like\n        Present value\n    fv : array_like\n        Future value\n    when : {{'begin', 1}, {'end', 0}}, {string, int}, optional\n        When payments are due ('begin' (1) or 'end' (0))\n    guess : float, optional\n        Starting guess for solving the rate of interest\n    tol : float, optional\n        Required tolerance for the solution\n    maxiter : int, optional\n        Maximum iterations in finding the solution\n\n    Notes\n    -----\n    The rate of interest is computed by iteratively solving the\n    (non-linear) equation::\n\n     fv + pv*(1+rate)**nper + pmt*(1+rate*when)/rate * ((1+rate)**nper - 1) = 0\n\n    for ``rate``.\n\n    References\n    ----------\n    Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May). Open Document\n    Format for Office Applications (OpenDocument)v1.2, Part 2: Recalculated\n    Formula (OpenFormula) Format - Annotated Version, Pre-Draft 12.\n    Organization for the Advancement of Structured Information Standards\n    (OASIS). Billerica, MA, USA. [ODT Document]. Available:\n    http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula\n    OpenDocument-formula-20090508.odt\n\n    "),
               ('numpy.lib.financial.irr',
                ['values'],
                '\n    Return the Internal Rate of Return (IRR).\n\n    This is the "average" periodically compounded rate of return\n    that gives a net present value of 0.0; for a more complete explanation,\n    see Notes below.\n\n    Parameters\n    ----------\n    values : array_like, shape(N,)\n        Input cash flows per time period.  By convention, net "deposits"\n        are negative and net "withdrawals" are positive.  Thus, for example,\n        at least the first element of `values`, which represents the initial\n        investment, will typically be negative.\n\n    Returns\n    -------\n    out : float\n        Internal Rate of Return for periodic input values.\n\n    Notes\n    -----\n    The IRR is perhaps best understood through an example (illustrated\n    using np.irr in the Examples section below).  Suppose one invests\n    100 units and then makes the following withdrawals at regular\n    (fixed) intervals: 39, 59, 55, 20.  Assuming the ending value is 0,\n    one\'s 100 unit investment yields 173 units; however, due to the\n    combination of compounding and the periodic withdrawals, the\n    "average" rate of return is neither simply 0.73/4 nor (1.73)^0.25-1.\n    Rather, it is the solution (for :math:`r`) of the equation:\n\n    .. math:: -100 + \\frac{39}{1+r} + \\frac{59}{(1+r)^2}\n     + \\frac{55}{(1+r)^3} + \\frac{20}{(1+r)^4} = 0\n\n    In general, for `values` :math:`= [v_0, v_1, ... v_M]`,\n    irr is the solution of the equation: [G]_\n\n    .. math:: \\sum_{t=0}^M{\\frac{v_t}{(1+irr)^{t}}} = 0\n\n    References\n    ----------\n    .. [G] L. J. Gitman, "Principles of Managerial Finance, Brief," 3rd ed.,\n       Addison-Wesley, 2003, pg. 348.\n\n    Examples\n    --------\n    >>> np.irr([-100, 39, 59, 55, 20])\n    0.2809484211599611\n\n    (Compare with the Example given for numpy.lib.financial.npv)\n\n    '),
               ('numpy.lib.financial.npv',
                ['rate', 'values'],
                '\n    Returns the NPV (Net Present Value) of a cash flow series.\n\n    Parameters\n    ----------\n    rate : scalar\n        The discount rate.\n    values : array_like, shape(M, )\n        The values of the time series of cash flows.  The (fixed) time\n        interval between cash flow "events" must be the same as that\n        for which `rate` is given (i.e., if `rate` is per year, then\n        precisely a year is understood to elapse between each cash flow\n        event).  By convention, investments or "deposits" are negative,\n        income or "withdrawals" are positive; `values` must begin with\n        the initial investment, thus `values[0]` will typically be\n        negative.\n\n    Returns\n    -------\n    out : float\n        The NPV of the input cash flow series `values` at the discount `rate`.\n\n    Notes\n    -----\n    Returns the result of: [G]_\n\n    .. math :: \\sum_{t=0}^M{\\frac{values_t}{(1+rate)^{t}}}\n\n    References\n    ----------\n    .. [G] L. J. Gitman, "Principles of Managerial Finance, Brief," 3rd ed.,\n       Addison-Wesley, 2003, pg. 346.\n\n    Examples\n    --------\n    >>> np.npv(0.281,[-100, 39, 59, 55, 20])\n    -0.0066187288356340801\n\n    (Compare with the Example given for numpy.lib.financial.irr)\n\n    '),
               ('numpy.lib.financial.mirr',
                ['values', 'finance_rate', 'reinvest_rate'],
                '\n    Modified internal rate of return.\n\n    Parameters\n    ----------\n    values : array_like\n        Cash flows (must contain at least one positive and one negative value)\n        or nan is returned.  The first value is considered a sunk cost at time zero.\n    finance_rate : scalar\n        Interest rate paid on the cash flows\n    reinvest_rate : scalar\n        Interest rate received on the cash flows upon reinvestment\n\n    Returns\n    -------\n    out : float\n        Modified internal rate of return\n\n    '),
               ('numpy.lib._iotools._bytes_to_complex', ['s'], ''),
               ('numpy.lib._iotools._bytes_to_name', ['s'], ''),
               ('numpy.lib._iotools._is_string_like',
                ['obj'],
                '\n    Check whether obj behaves like a string.\n    '),
               ('numpy.lib._iotools._is_bytes_like',
                ['obj'],
                '\n    Check whether obj behaves like a bytes object.\n    '),
               ('numpy.lib._iotools._to_filehandle',
                ['fname', "flag='r'", 'return_opened=False'],
                "\n    Returns the filehandle corresponding to a string or a file.\n    If the string ends in '.gz', the file is automatically unzipped.\n    \n    Parameters\n    ----------\n    fname : string, filehandle\n        Name of the file whose filehandle must be returned.\n    flag : string, optional\n        Flag indicating the status of the file ('r' for read, 'w' for write).\n    return_opened : boolean, optional\n        Whether to return the opening status of the file.\n    "),
               ('numpy.lib._iotools.has_nested_fields',
                ['ndtype'],
                "\n    Returns whether one or several fields of a dtype are nested.\n\n    Parameters\n    ----------\n    ndtype : dtype\n        Data-type of a structured array.\n\n    Raises\n    ------\n    AttributeError : If `ndtype` does not have a `names` attribute.\n\n    Examples\n    --------\n    >>> dt = np.dtype([('name', 'S4'), ('x', float), ('y', float)])\n    >>> np.lib._iotools.has_nested_fields(dt)\n    False\n\n    "),
               ('numpy.lib._iotools.flatten_dtype',
                ['ndtype', 'flatten_base=False'],
                "\n    Unpack a structured data-type by collapsing nested fields and/or fields\n    with a shape.\n\n    Note that the field names are lost.\n\n    Parameters\n    ----------\n    ndtype : dtype\n        The datatype to collapse\n    flatten_base : {False, True}, optional\n        Whether to transform a field with a shape into several fields or not.\n\n    Examples\n    --------\n    >>> dt = np.dtype([('name', 'S4'), ('x', float), ('y', float),\n    ...                ('block', int, (2, 3))])\n    >>> np.lib._iotools.flatten_dtype(dt)\n    [dtype('|S4'), dtype('float64'), dtype('float64'), dtype('int32')]\n    >>> np.lib._iotools.flatten_dtype(dt, flatten_base=True)\n    [dtype('|S4'), dtype('float64'), dtype('float64'), dtype('int32'),\n     dtype('int32'), dtype('int32'), dtype('int32'), dtype('int32'),\n     dtype('int32')]\n\n    "),
               ('numpy.lib._iotools.str2bool',
                ['value'],
                "\n    Tries to transform a string supposed to represent a boolean to a boolean.\n\n    Parameters\n    ----------\n    value : str\n        The string that is transformed to a boolean.\n\n    Returns\n    -------\n    boolval : bool\n        The boolean representation of `value`.\n\n    Raises\n    ------\n    ValueError\n        If the string is not 'True' or 'False' (case independent)\n\n    Examples\n    --------\n    >>> np.lib._iotools.str2bool('TRUE')\n    True\n    >>> np.lib._iotools.str2bool('false')\n    False\n\n    "),
               ('numpy.lib._iotools.easy_dtype',
                ['ndtype', 'names=None', "defaultfmt='f%i'", '**validationargs'],
                '\n    Convenience function to create a `np.dtype` object.\n\n    The function processes the input `dtype` and matches it with the given\n    names.\n\n    Parameters\n    ----------\n    ndtype : var\n        Definition of the dtype. Can be any string or dictionary\n        recognized by the `np.dtype` function, or a sequence of types.\n    names : str or sequence, optional\n        Sequence of strings to use as field names for a structured dtype.\n        For convenience, `names` can be a string of a comma-separated list of\n        names.\n    defaultfmt : str, optional\n        Format string used to define missing names, such as ``"f%i"``\n        (default) or ``"fields_%02i"``.\n    validationargs : optional\n        A series of optional arguments used to initialize a `NameValidator`.\n\n    Examples\n    --------\n    >>> np.lib._iotools.easy_dtype(float)\n    dtype(\'float64\')\n    >>> np.lib._iotools.easy_dtype("i4, f8")\n    dtype([(\'f0\', \'<i4\'), (\'f1\', \'<f8\')])\n    >>> np.lib._iotools.easy_dtype("i4, f8", defaultfmt="field_%03i")\n    dtype([(\'field_000\', \'<i4\'), (\'field_001\', \'<f8\')])\n\n    >>> np.lib._iotools.easy_dtype((int, float, float), names="a,b,c")\n    dtype([(\'a\', \'<i8\'), (\'b\', \'<f8\'), (\'c\', \'<f8\')])\n    >>> np.lib._iotools.easy_dtype(float, names="a,b,c")\n    dtype([(\'a\', \'<f8\'), (\'b\', \'<f8\'), (\'c\', \'<f8\')])\n\n    '),
               ('numpy.lib.setupscons.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.lib.polynomial.poly',
                ['seq_of_zeros'],
                '\n    Find the coefficients of a polynomial with the given sequence of roots.\n\n    Returns the coefficients of the polynomial whose leading coefficient\n    is one for the given sequence of zeros (multiple roots must be included\n    in the sequence as many times as their multiplicity; see Examples).\n    A square matrix (or array, which will be treated as a matrix) can also\n    be given, in which case the coefficients of the characteristic polynomial\n    of the matrix are returned.\n\n    Parameters\n    ----------\n    seq_of_zeros : array_like, shape (N,) or (N, N)\n        A sequence of polynomial roots, or a square array or matrix object.\n\n    Returns\n    -------\n    c : ndarray\n        1D array of polynomial coefficients from highest to lowest degree:\n\n        ``c[0] * x**(N) + c[1] * x**(N-1) + ... + c[N-1] * x + c[N]``\n        where c[0] always equals 1.\n\n    Raises\n    ------\n    ValueError\n        If input is the wrong shape (the input must be a 1-D or square\n        2-D array).\n\n    See Also\n    --------\n    polyval : Evaluate a polynomial at a point.\n    roots : Return the roots of a polynomial.\n    polyfit : Least squares polynomial fit.\n    poly1d : A one-dimensional polynomial class.\n\n    Notes\n    -----\n    Specifying the roots of a polynomial still leaves one degree of\n    freedom, typically represented by an undetermined leading\n    coefficient. [1]_ In the case of this function, that coefficient -\n    the first one in the returned array - is always taken as one. (If\n    for some reason you have one other point, the only automatic way\n    presently to leverage that information is to use ``polyfit``.)\n\n    The characteristic polynomial, :math:`p_a(t)`, of an `n`-by-`n`\n    matrix **A** is given by\n\n        :math:`p_a(t) = \\mathrm{det}(t\\, \\mathbf{I} - \\mathbf{A})`,\n\n    where **I** is the `n`-by-`n` identity matrix. [2]_\n\n    References\n    ----------\n    .. [1] M. Sullivan and M. Sullivan, III, "Algebra and Trignometry,\n       Enhanced With Graphing Utilities," Prentice-Hall, pg. 318, 1996.\n\n    .. [2] G. Strang, "Linear Algebra and Its Applications, 2nd Edition,"\n       Academic Press, pg. 182, 1980.\n\n    Examples\n    --------\n    Given a sequence of a polynomial\'s zeros:\n\n    >>> np.poly((0, 0, 0)) # Multiple root example\n    array([1, 0, 0, 0])\n    \n    The line above represents z**3 + 0*z**2 + 0*z + 0.\n\n    >>> np.poly((-1./2, 0, 1./2))\n    array([ 1.  ,  0.  , -0.25,  0.  ])\n    \n    The line above represents z**3 - z/4\n\n    >>> np.poly((np.random.random(1.)[0], 0, np.random.random(1.)[0]))\n    array([ 1.        , -0.77086955,  0.08618131,  0.        ]) #random\n\n    Given a square array object:\n\n    >>> P = np.array([[0, 1./3], [-1./2, 0]])\n    >>> np.poly(P)\n    array([ 1.        ,  0.        ,  0.16666667])\n\n    Or a square matrix object:\n\n    >>> np.poly(np.matrix(P))\n    array([ 1.        ,  0.        ,  0.16666667])\n\n    Note how in all cases the leading coefficient is always 1.\n\n    '),
               ('numpy.lib.polynomial.roots',
                ['p'],
                '\n    Return the roots of a polynomial with coefficients given in p.\n\n    The values in the rank-1 array `p` are coefficients of a polynomial.\n    If the length of `p` is n+1 then the polynomial is described by::\n\n      p[0] * x**n + p[1] * x**(n-1) + ... + p[n-1]*x + p[n]\n\n    Parameters\n    ----------\n    p : array_like\n        Rank-1 array of polynomial coefficients.\n\n    Returns\n    -------\n    out : ndarray\n        An array containing the complex roots of the polynomial.\n\n    Raises\n    ------\n    ValueError :\n        When `p` cannot be converted to a rank-1 array.\n\n    See also\n    --------\n    poly : Find the coefficients of a polynomial with a given sequence\n           of roots.\n    polyval : Evaluate a polynomial at a point.\n    polyfit : Least squares polynomial fit.\n    poly1d : A one-dimensional polynomial class.\n\n    Notes\n    -----\n    The algorithm relies on computing the eigenvalues of the\n    companion matrix [1]_.\n\n    References\n    ----------\n    .. [1] R. A. Horn & C. R. Johnson, *Matrix Analysis*.  Cambridge, UK:\n        Cambridge University Press, 1999, pp. 146-7.\n\n    Examples\n    --------\n    >>> coeff = [3.2, 2, 1]\n    >>> np.roots(coeff)\n    array([-0.3125+0.46351241j, -0.3125-0.46351241j])\n\n    '),
               ('numpy.lib.polynomial.polyint',
                ['p', 'm=1', 'k=None'],
                '\n    Return an antiderivative (indefinite integral) of a polynomial.\n\n    The returned order `m` antiderivative `P` of polynomial `p` satisfies\n    :math:`\\frac{d^m}{dx^m}P(x) = p(x)` and is defined up to `m - 1`\n    integration constants `k`. The constants determine the low-order\n    polynomial part\n\n    .. math:: \\frac{k_{m-1}}{0!} x^0 + \\ldots + \\frac{k_0}{(m-1)!}x^{m-1}\n\n    of `P` so that :math:`P^{(j)}(0) = k_{m-j-1}`.\n\n    Parameters\n    ----------\n    p : {array_like, poly1d}\n        Polynomial to differentiate.\n        A sequence is interpreted as polynomial coefficients, see `poly1d`.\n    m : int, optional\n        Order of the antiderivative. (Default: 1)\n    k : {None, list of `m` scalars, scalar}, optional\n        Integration constants. They are given in the order of integration:\n        those corresponding to highest-order terms come first.\n\n        If ``None`` (default), all constants are assumed to be zero.\n        If `m = 1`, a single scalar can be given instead of a list.\n\n    See Also\n    --------\n    polyder : derivative of a polynomial\n    poly1d.integ : equivalent method\n\n    Examples\n    --------\n    The defining property of the antiderivative:\n\n    >>> p = np.poly1d([1,1,1])\n    >>> P = np.polyint(p)\n    >>> P\n    poly1d([ 0.33333333,  0.5       ,  1.        ,  0.        ])\n    >>> np.polyder(P) == p\n    True\n\n    The integration constants default to zero, but can be specified:\n\n    >>> P = np.polyint(p, 3)\n    >>> P(0)\n    0.0\n    >>> np.polyder(P)(0)\n    0.0\n    >>> np.polyder(P, 2)(0)\n    0.0\n    >>> P = np.polyint(p, 3, k=[6,5,3])\n    >>> P\n    poly1d([ 0.01666667,  0.04166667,  0.16666667,  3. ,  5. ,  3. ])\n\n    Note that 3 = 6 / 2!, and that the constants are given in the order of\n    integrations. Constant of the highest-order polynomial term comes first:\n\n    >>> np.polyder(P, 2)(0)\n    6.0\n    >>> np.polyder(P, 1)(0)\n    5.0\n    >>> P(0)\n    3.0\n\n    '),
               ('numpy.lib.polynomial.polyder',
                ['p', 'm=1'],
                '\n    Return the derivative of the specified order of a polynomial.\n\n    Parameters\n    ----------\n    p : poly1d or sequence\n        Polynomial to differentiate.\n        A sequence is interpreted as polynomial coefficients, see `poly1d`.\n    m : int, optional\n        Order of differentiation (default: 1)\n\n    Returns\n    -------\n    der : poly1d\n        A new polynomial representing the derivative.\n\n    See Also\n    --------\n    polyint : Anti-derivative of a polynomial.\n    poly1d : Class for one-dimensional polynomials.\n\n    Examples\n    --------\n    The derivative of the polynomial :math:`x^3 + x^2 + x^1 + 1` is:\n\n    >>> p = np.poly1d([1,1,1,1])\n    >>> p2 = np.polyder(p)\n    >>> p2\n    poly1d([3, 2, 1])\n\n    which evaluates to:\n\n    >>> p2(2.)\n    17.0\n\n    We can verify this, approximating the derivative with\n    ``(f(x + h) - f(x))/h``:\n\n    >>> (p(2. + 0.001) - p(2.)) / 0.001\n    17.007000999997857\n\n    The fourth-order derivative of a 3rd-order polynomial is zero:\n\n    >>> np.polyder(p, 2)\n    poly1d([6, 2])\n    >>> np.polyder(p, 3)\n    poly1d([6])\n    >>> np.polyder(p, 4)\n    poly1d([ 0.])\n\n    '),
               ('numpy.lib.polynomial.polyfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False'],
                '\n    Least squares polynomial fit.\n\n    Fit a polynomial ``p(x) = p[0] * x**deg + ... + p[deg]`` of degree `deg`\n    to points `(x, y)`. Returns a vector of coefficients `p` that minimises\n    the squared error.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int\n        Degree of the fitting polynomial\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than this\n        relative to the largest singular value will be ignored. The default\n        value is len(x)*eps, where eps is the relative precision of the float\n        type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is\n        False (the default) just the coefficients are returned, when True\n        diagnostic information from the singular value decomposition is also\n        returned.\n\n    Returns\n    -------\n    p : ndarray, shape (M,) or (M, K)\n        Polynomial coefficients, highest power first.\n        If `y` was 2-D, the coefficients for `k`-th data set are in ``p[:,k]``.\n\n    residuals, rank, singular_values, rcond : present only if `full` = True\n        Residuals of the least-squares fit, the effective rank of the scaled\n        Vandermonde coefficient matrix, its singular values, and the specified\n        value of `rcond`. For more details, see `linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if `full` = False.\n\n        The warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', np.RankWarning)\n\n    See Also\n    --------\n    polyval : Computes polynomial values.\n    linalg.lstsq : Computes a least-squares fit.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution minimizes the squared error\n\n    .. math ::\n        E = \\sum_{j=0}^k |p(x_j) - y_j|^2\n\n    in the equations::\n\n        x[0]**n * p[n] + ... + x[0] * p[1] + p[0] = y[0]\n        x[1]**n * p[n] + ... + x[1] * p[1] + p[0] = y[1]\n        ...\n        x[k]**n * p[n] + ... + x[k] * p[1] + p[0] = y[k]\n\n    The coefficient matrix of the coefficients `p` is a Vandermonde matrix.\n\n    `polyfit` issues a `RankWarning` when the least-squares fit is badly\n    conditioned. This implies that the best fit is not well-defined due\n    to numerical error. The results may be improved by lowering the polynomial\n    degree or by replacing `x` by `x` - `x`.mean(). The `rcond` parameter\n    can also be set to a value smaller than its default, but the resulting\n    fit may be spurious: including contributions from the small singular\n    values can add numerical noise to the result.\n\n    Note that fitting polynomial coefficients is inherently badly conditioned\n    when the degree of the polynomial is large or the interval of sample points\n    is badly centered. The quality of the fit should always be checked in these\n    cases. When polynomial fits are not satisfactory, splines may be a good\n    alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Curve fitting",\n           http://en.wikipedia.org/wiki/Curve_fitting\n    .. [2] Wikipedia, "Polynomial interpolation",\n           http://en.wikipedia.org/wiki/Polynomial_interpolation\n\n    Examples\n    --------\n    >>> x = np.array([0.0, 1.0, 2.0, 3.0,  4.0,  5.0])\n    >>> y = np.array([0.0, 0.8, 0.9, 0.1, -0.8, -1.0])\n    >>> z = np.polyfit(x, y, 3)\n    >>> z\n    array([ 0.08703704, -0.81349206,  1.69312169, -0.03968254])\n\n    It is convenient to use `poly1d` objects for dealing with polynomials:\n\n    >>> p = np.poly1d(z)\n    >>> p(0.5)\n    0.6143849206349179\n    >>> p(3.5)\n    -0.34732142857143039\n    >>> p(10)\n    22.579365079365115\n\n    High-order polynomials may oscillate wildly:\n\n    >>> p30 = np.poly1d(np.polyfit(x, y, 30))\n    /... RankWarning: Polyfit may be poorly conditioned...\n    >>> p30(4)\n    -0.80000000000000204\n    >>> p30(5)\n    -0.99999999999999445\n    >>> p30(4.5)\n    -0.10547061179440398\n\n    Illustration:\n\n    >>> import matplotlib.pyplot as plt\n    >>> xp = np.linspace(-2, 6, 100)\n    >>> plt.plot(x, y, \'.\', xp, p(xp), \'-\', xp, p30(xp), \'--\')\n    [<matplotlib.lines.Line2D object at 0x...>, <matplotlib.lines.Line2D object at 0x...>, <matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.ylim(-2,2)\n    (-2, 2)\n    >>> plt.show()\n\n    '),
               ('numpy.lib.polynomial.polyval',
                ['p', 'x'],
                '\n    Evaluate a polynomial at specific values.\n\n    If `p` is of length N, this function returns the value:\n\n        ``p[0]*x**(N-1) + p[1]*x**(N-2) + ... + p[N-2]*x + p[N-1]``\n\n    If `x` is a sequence, then `p(x)` is returned for each element of `x`.\n    If `x` is another polynomial then the composite polynomial `p(x(t))`\n    is returned.\n\n    Parameters\n    ----------\n    p : array_like or poly1d object\n       1D array of polynomial coefficients (including coefficients equal\n       to zero) from highest degree to the constant term, or an\n       instance of poly1d.\n    x : array_like or poly1d object\n       A number, a 1D array of numbers, or an instance of poly1d, "at"\n       which to evaluate `p`.\n\n    Returns\n    -------\n    values : ndarray or poly1d\n       If `x` is a poly1d instance, the result is the composition of the two\n       polynomials, i.e., `x` is "substituted" in `p` and the simplified\n       result is returned. In addition, the type of `x` - array_like or\n       poly1d - governs the type of the output: `x` array_like => `values`\n       array_like, `x` a poly1d object => `values` is also.\n\n    See Also\n    --------\n    poly1d: A polynomial class.\n\n    Notes\n    -----\n    Horner\'s scheme [1]_ is used to evaluate the polynomial. Even so,\n    for polynomials of high degree the values may be inaccurate due to\n    rounding errors. Use carefully.\n\n    References\n    ----------\n    .. [1] I. N. Bronshtein, K. A. Semendyayev, and K. A. Hirsch (Eng.\n       trans. Ed.), *Handbook of Mathematics*, New York, Van Nostrand\n       Reinhold Co., 1985, pg. 720.\n\n    Examples\n    --------\n    >>> np.polyval([3,0,1], 5)  # 3 * 5**2 + 0 * 5**1 + 1\n    76\n    >>> np.polyval([3,0,1], np.poly1d(5))\n    poly1d([ 76.])\n    >>> np.polyval(np.poly1d([3,0,1]), 5)\n    76\n    >>> np.polyval(np.poly1d([3,0,1]), np.poly1d(5))\n    poly1d([ 76.])\n\n    '),
               ('numpy.lib.polynomial.polyadd',
                ['a1', 'a2'],
                '\n    Find the sum of two polynomials.\n\n    Returns the polynomial resulting from the sum of two input polynomials.\n    Each input must be either a poly1d object or a 1D sequence of polynomial\n    coefficients, from highest to lowest degree.\n\n    Parameters\n    ----------\n    a1, a2 : array_like or poly1d object\n        Input polynomials.\n\n    Returns\n    -------\n    out : ndarray or poly1d object\n        The sum of the inputs. If either input is a poly1d object, then the\n        output is also a poly1d object. Otherwise, it is a 1D array of\n        polynomial coefficients from highest to lowest degree.\n\n    See Also\n    --------\n    poly1d : A one-dimensional polynomial class.\n    poly, polyadd, polyder, polydiv, polyfit, polyint, polysub, polyval\n\n    Examples\n    --------\n    >>> np.polyadd([1, 2], [9, 5, 4])\n    array([9, 6, 6])\n\n    Using poly1d objects:\n\n    >>> p1 = np.poly1d([1, 2])\n    >>> p2 = np.poly1d([9, 5, 4])\n    >>> print p1\n    1 x + 2\n    >>> print p2\n       2\n    9 x + 5 x + 4\n    >>> print np.polyadd(p1, p2)\n       2\n    9 x + 6 x + 6\n\n    '),
               ('numpy.lib.polynomial.polysub',
                ['a1', 'a2'],
                "\n    Difference (subtraction) of two polynomials.\n\n    Given two polynomials `a1` and `a2`, returns ``a1 - a2``.\n    `a1` and `a2` can be either array_like sequences of the polynomials'\n    coefficients (including coefficients equal to zero), or `poly1d` objects.\n\n    Parameters\n    ----------\n    a1, a2 : array_like or poly1d\n        Minuend and subtrahend polynomials, respectively.\n\n    Returns\n    -------\n    out : ndarray or poly1d\n        Array or `poly1d` object of the difference polynomial's coefficients.\n\n    See Also\n    --------\n    polyval, polydiv, polymul, polyadd\n\n    Examples\n    --------\n    .. math:: (2 x^2 + 10 x - 2) - (3 x^2 + 10 x -4) = (-x^2 + 2)\n\n    >>> np.polysub([2, 10, -2], [3, 10, -4])\n    array([-1,  0,  2])\n\n    "),
               ('numpy.lib.polynomial.polymul',
                ['a1', 'a2'],
                '\n    Find the product of two polynomials.\n\n    Finds the polynomial resulting from the multiplication of the two input\n    polynomials. Each input must be either a poly1d object or a 1D sequence\n    of polynomial coefficients, from highest to lowest degree.\n\n    Parameters\n    ----------\n    a1, a2 : array_like or poly1d object\n        Input polynomials.\n\n    Returns\n    -------\n    out : ndarray or poly1d object\n        The polynomial resulting from the multiplication of the inputs. If\n        either inputs is a poly1d object, then the output is also a poly1d\n        object. Otherwise, it is a 1D array of polynomial coefficients from\n        highest to lowest degree.\n\n    See Also\n    --------\n    poly1d : A one-dimensional polynomial class.\n    poly, polyadd, polyder, polydiv, polyfit, polyint, polysub,\n    polyval\n\n    Examples\n    --------\n    >>> np.polymul([1, 2, 3], [9, 5, 1])\n    array([ 9, 23, 38, 17,  3])\n\n    Using poly1d objects:\n\n    >>> p1 = np.poly1d([1, 2, 3])\n    >>> p2 = np.poly1d([9, 5, 1])\n    >>> print p1\n       2\n    1 x + 2 x + 3\n    >>> print p2\n       2\n    9 x + 5 x + 1\n    >>> print np.polymul(p1, p2)\n       4      3      2\n    9 x + 23 x + 38 x + 17 x + 3\n\n    '),
               ('numpy.lib.polynomial.polydiv',
                ['u', 'v'],
                '\n    Returns the quotient and remainder of polynomial division.\n\n    The input arrays are the coefficients (including any coefficients\n    equal to zero) of the "numerator" (dividend) and "denominator"\n    (divisor) polynomials, respectively.\n\n    Parameters\n    ----------\n    u : array_like or poly1d\n        Dividend polynomial\'s coefficients.\n\n    v : array_like or poly1d\n        Divisor polynomial\'s coefficients.\n\n    Returns\n    -------\n    q : ndarray\n        Coefficients, including those equal to zero, of the quotient.\n    r : ndarray\n        Coefficients, including those equal to zero, of the remainder.\n\n    See Also\n    --------\n    poly, polyadd, polyder, polydiv, polyfit, polyint, polymul, polysub,\n    polyval\n\n    Notes\n    -----\n    Both `u` and `v` must be 0-d or 1-d (ndim = 0 or 1), but `u.ndim` need\n    not equal `v.ndim`. In other words, all four possible combinations -\n    ``u.ndim = v.ndim = 0``, ``u.ndim = v.ndim = 1``,\n    ``u.ndim = 1, v.ndim = 0``, and ``u.ndim = 0, v.ndim = 1`` - work.\n\n    Examples\n    --------\n    .. math:: \\frac{3x^2 + 5x + 2}{2x + 1} = 1.5x + 1.75, remainder 0.25\n\n    >>> x = np.array([3.0, 5.0, 2.0])\n    >>> y = np.array([2.0, 1.0])\n    >>> np.polydiv(x, y)\n    (array([ 1.5 ,  1.75]), array([ 0.25]))\n\n    '),
               ('numpy.lib.polynomial._raise_power', ['astr', 'wrap=70'], ''),
               ('numpy.lib.twodim_base.fliplr',
                ['m'],
                '\n    Flip array in the left/right direction.\n\n    Flip the entries in each row in the left/right direction.\n    Columns are preserved, but appear in a different order than before.\n\n    Parameters\n    ----------\n    m : array_like\n        Input array.\n\n    Returns\n    -------\n    f : ndarray\n        A view of `m` with the columns reversed.  Since a view\n        is returned, this operation is :math:`\\mathcal O(1)`.\n\n    See Also\n    --------\n    flipud : Flip array in the up/down direction.\n    rot90 : Rotate array counterclockwise.\n\n    Notes\n    -----\n    Equivalent to A[:,::-1]. Does not require the array to be\n    two-dimensional.\n\n    Examples\n    --------\n    >>> A = np.diag([1.,2.,3.])\n    >>> A\n    array([[ 1.,  0.,  0.],\n           [ 0.,  2.,  0.],\n           [ 0.,  0.,  3.]])\n    >>> np.fliplr(A)\n    array([[ 0.,  0.,  1.],\n           [ 0.,  2.,  0.],\n           [ 3.,  0.,  0.]])\n\n    >>> A = np.random.randn(2,3,5)\n    >>> np.all(np.fliplr(A)==A[:,::-1,...])\n    True\n\n    '),
               ('numpy.lib.twodim_base.flipud',
                ['m'],
                '\n    Flip array in the up/down direction.\n\n    Flip the entries in each column in the up/down direction.\n    Rows are preserved, but appear in a different order than before.\n\n    Parameters\n    ----------\n    m : array_like\n        Input array.\n\n    Returns\n    -------\n    out : array_like\n        A view of `m` with the rows reversed.  Since a view is\n        returned, this operation is :math:`\\mathcal O(1)`.\n\n    See Also\n    --------\n    fliplr : Flip array in the left/right direction.\n    rot90 : Rotate array counterclockwise.\n\n    Notes\n    -----\n    Equivalent to ``A[::-1,...]``.\n    Does not require the array to be two-dimensional.\n\n    Examples\n    --------\n    >>> A = np.diag([1.0, 2, 3])\n    >>> A\n    array([[ 1.,  0.,  0.],\n           [ 0.,  2.,  0.],\n           [ 0.,  0.,  3.]])\n    >>> np.flipud(A)\n    array([[ 0.,  0.,  3.],\n           [ 0.,  2.,  0.],\n           [ 1.,  0.,  0.]])\n\n    >>> A = np.random.randn(2,3,5)\n    >>> np.all(np.flipud(A)==A[::-1,...])\n    True\n\n    >>> np.flipud([1,2])\n    array([2, 1])\n\n    '),
               ('numpy.lib.twodim_base.rot90',
                ['m', 'k=1'],
                '\n    Rotate an array by 90 degrees in the counter-clockwise direction.\n\n    The first two dimensions are rotated; therefore, the array must be at\n    least 2-D.\n\n    Parameters\n    ----------\n    m : array_like\n        Array of two or more dimensions.\n    k : integer\n        Number of times the array is rotated by 90 degrees.\n\n    Returns\n    -------\n    y : ndarray\n        Rotated array.\n\n    See Also\n    --------\n    fliplr : Flip an array horizontally.\n    flipud : Flip an array vertically.\n\n    Examples\n    --------\n    >>> m = np.array([[1,2],[3,4]], int)\n    >>> m\n    array([[1, 2],\n           [3, 4]])\n    >>> np.rot90(m)\n    array([[2, 4],\n           [1, 3]])\n    >>> np.rot90(m, 2)\n    array([[4, 3],\n           [2, 1]])\n\n    '),
               ('numpy.lib.twodim_base.eye',
                ['N', 'M=None', 'k=0', 'dtype=float'],
                '\n    Return a 2-D array with ones on the diagonal and zeros elsewhere.\n\n    Parameters\n    ----------\n    N : int\n      Number of rows in the output.\n    M : int, optional\n      Number of columns in the output. If None, defaults to `N`.\n    k : int, optional\n      Index of the diagonal: 0 (the default) refers to the main diagonal,\n      a positive value refers to an upper diagonal, and a negative value\n      to a lower diagonal.\n    dtype : data-type, optional\n      Data-type of the returned array.\n\n    Returns\n    -------\n    I : ndarray of shape (N,M)\n      An array where all elements are equal to zero, except for the `k`-th\n      diagonal, whose values are equal to one.\n\n    See Also\n    --------\n    identity : (almost) equivalent function\n    diag : diagonal 2-D array from a 1-D array specified by the user.\n\n    Examples\n    --------\n    >>> np.eye(2, dtype=int)\n    array([[1, 0],\n           [0, 1]])\n    >>> np.eye(3, k=1)\n    array([[ 0.,  1.,  0.],\n           [ 0.,  0.,  1.],\n           [ 0.,  0.,  0.]])\n\n    '),
               ('numpy.lib.twodim_base.diag',
                ['v', 'k=0'],
                '\n    Extract a diagonal or construct a diagonal array.\n\n    Parameters\n    ----------\n    v : array_like\n        If `v` is a 2-D array, return a copy of its `k`-th diagonal.\n        If `v` is a 1-D array, return a 2-D array with `v` on the `k`-th\n        diagonal.\n    k : int, optional\n        Diagonal in question. The default is 0. Use `k>0` for diagonals\n        above the main diagonal, and `k<0` for diagonals below the main\n        diagonal.\n\n    Returns\n    -------\n    out : ndarray\n        The extracted diagonal or constructed diagonal array.\n\n    See Also\n    --------\n    diagonal : Return specified diagonals.\n    diagflat : Create a 2-D array with the flattened input as a diagonal.\n    trace : Sum along diagonals.\n    triu : Upper triangle of an array.\n    tril : Lower triange of an array.\n\n    Examples\n    --------\n    >>> x = np.arange(9).reshape((3,3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5],\n           [6, 7, 8]])\n\n    >>> np.diag(x)\n    array([0, 4, 8])\n    >>> np.diag(x, k=1)\n    array([1, 5])\n    >>> np.diag(x, k=-1)\n    array([3, 7])\n\n    >>> np.diag(np.diag(x))\n    array([[0, 0, 0],\n           [0, 4, 0],\n           [0, 0, 8]])\n\n    '),
               ('numpy.lib.twodim_base.diagflat',
                ['v', 'k=0'],
                '\n    Create a two-dimensional array with the flattened input as a diagonal.\n\n    Parameters\n    ----------\n    v : array_like\n        Input data, which is flattened and set as the `k`-th\n        diagonal of the output.\n    k : int, optional\n        Diagonal to set; 0, the default, corresponds to the "main" diagonal,\n        a positive (negative) `k` giving the number of the diagonal above\n        (below) the main.\n\n    Returns\n    -------\n    out : ndarray\n        The 2-D output array.\n\n    See Also\n    --------\n    diag : MATLAB work-alike for 1-D and 2-D arrays.\n    diagonal : Return specified diagonals.\n    trace : Sum along diagonals.\n\n    Examples\n    --------\n    >>> np.diagflat([[1,2], [3,4]])\n    array([[1, 0, 0, 0],\n           [0, 2, 0, 0],\n           [0, 0, 3, 0],\n           [0, 0, 0, 4]])\n\n    >>> np.diagflat([1,2], 1)\n    array([[0, 1, 0],\n           [0, 0, 2],\n           [0, 0, 0]])\n\n    '),
               ('numpy.lib.twodim_base.tri',
                ['N', 'M=None', 'k=0', 'dtype=float'],
                '\n    An array with ones at and below the given diagonal and zeros elsewhere.\n\n    Parameters\n    ----------\n    N : int\n        Number of rows in the array.\n    M : int, optional\n        Number of columns in the array.\n        By default, `M` is taken equal to `N`.\n    k : int, optional\n        The sub-diagonal at and below which the array is filled.\n        `k` = 0 is the main diagonal, while `k` < 0 is below it,\n        and `k` > 0 is above.  The default is 0.\n    dtype : dtype, optional\n        Data type of the returned array.  The default is float.\n\n    Returns\n    -------\n    T : ndarray of shape (N, M)\n        Array with its lower triangle filled with ones and zero elsewhere;\n        in other words ``T[i,j] == 1`` for ``i <= j + k``, 0 otherwise.\n\n    Examples\n    --------\n    >>> np.tri(3, 5, 2, dtype=int)\n    array([[1, 1, 1, 0, 0],\n           [1, 1, 1, 1, 0],\n           [1, 1, 1, 1, 1]])\n\n    >>> np.tri(3, 5, -1)\n    array([[ 0.,  0.,  0.,  0.,  0.],\n           [ 1.,  0.,  0.,  0.,  0.],\n           [ 1.,  1.,  0.,  0.,  0.]])\n\n    '),
               ('numpy.lib.twodim_base.tril',
                ['m', 'k=0'],
                '\n    Lower triangle of an array.\n\n    Return a copy of an array with elements above the `k`-th diagonal zeroed.\n\n    Parameters\n    ----------\n    m : array_like, shape (M, N)\n        Input array.\n    k : int, optional\n        Diagonal above which to zero elements.  `k = 0` (the default) is the\n        main diagonal, `k < 0` is below it and `k > 0` is above.\n\n    Returns\n    -------\n    L : ndarray, shape (M, N)\n        Lower triangle of `m`, of same shape and data-type as `m`.\n\n    See Also\n    --------\n    triu : same thing, only for the upper triangle\n\n    Examples\n    --------\n    >>> np.tril([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)\n    array([[ 0,  0,  0],\n           [ 4,  0,  0],\n           [ 7,  8,  0],\n           [10, 11, 12]])\n\n    '),
               ('numpy.lib.twodim_base.triu',
                ['m', 'k=0'],
                '\n    Upper triangle of an array.\n\n    Return a copy of a matrix with the elements below the `k`-th diagonal\n    zeroed.\n\n    Please refer to the documentation for `tril` for further details.\n\n    See Also\n    --------\n    tril : lower triangle of an array\n\n    Examples\n    --------\n    >>> np.triu([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], -1)\n    array([[ 1,  2,  3],\n           [ 4,  5,  6],\n           [ 0,  8,  9],\n           [ 0,  0, 12]])\n\n    '),
               ('numpy.lib.twodim_base.vander',
                ['x', 'N=None'],
                '\n    Generate a Van der Monde matrix.\n\n    The columns of the output matrix are decreasing powers of the input\n    vector.  Specifically, the `i`-th output column is the input vector\n    raised element-wise to the power of ``N - i - 1``.  Such a matrix with\n    a geometric progression in each row is named for Alexandre-Theophile\n    Vandermonde.\n\n    Parameters\n    ----------\n    x : array_like\n        1-D input array.\n    N : int, optional\n        Order of (number of columns in) the output.  If `N` is not specified,\n        a square array is returned (``N = len(x)``).\n\n    Returns\n    -------\n    out : ndarray\n        Van der Monde matrix of order `N`.  The first column is ``x^(N-1)``,\n        the second ``x^(N-2)`` and so forth.\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 3, 5])\n    >>> N = 3\n    >>> np.vander(x, N)\n    array([[ 1,  1,  1],\n           [ 4,  2,  1],\n           [ 9,  3,  1],\n           [25,  5,  1]])\n\n    >>> np.column_stack([x**(N-1-i) for i in range(N)])\n    array([[ 1,  1,  1],\n           [ 4,  2,  1],\n           [ 9,  3,  1],\n           [25,  5,  1]])\n\n    >>> x = np.array([1, 2, 3, 5])\n    >>> np.vander(x)\n    array([[  1,   1,   1,   1],\n           [  8,   4,   2,   1],\n           [ 27,   9,   3,   1],\n           [125,  25,   5,   1]])\n\n    The determinant of a square Vandermonde matrix is the product\n    of the differences between the values of the input vector:\n\n    >>> np.linalg.det(np.vander(x))\n    48.000000000000043\n    >>> (5-3)*(5-2)*(5-1)*(3-2)*(3-1)*(2-1)\n    48\n\n    '),
               ('numpy.lib.twodim_base.histogram2d',
                ['x', 'y', 'bins=10', 'range=None', 'normed=False', 'weights=None'],
                "\n    Compute the bi-dimensional histogram of two data samples.\n\n    Parameters\n    ----------\n    x : array_like, shape(N,)\n        A sequence of values to be histogrammed along the first dimension.\n    y : array_like, shape(M,)\n        A sequence of values to be histogrammed along the second dimension.\n    bins : int or [int, int] or array_like or [array, array], optional\n        The bin specification:\n\n          * If int, the number of bins for the two dimensions (nx=ny=bins).\n          * If [int, int], the number of bins in each dimension (nx, ny = bins).\n          * If array_like, the bin edges for the two dimensions (x_edges=y_edges=bins).\n          * If [array, array], the bin edges in each dimension (x_edges, y_edges = bins).\n\n    range : array_like, shape(2,2), optional\n        The leftmost and rightmost edges of the bins along each dimension\n        (if not specified explicitly in the `bins` parameters):\n        ``[[xmin, xmax], [ymin, ymax]]``. All values outside of this range\n        will be considered outliers and not tallied in the histogram.\n    normed : bool, optional\n        If False, returns the number of samples in each bin. If True, returns\n        the bin density, i.e. the bin count divided by the bin area.\n    weights : array_like, shape(N,), optional\n        An array of values ``w_i`` weighing each sample ``(x_i, y_i)``. Weights\n        are normalized to 1 if `normed` is True. If `normed` is False, the\n        values of the returned histogram are equal to the sum of the weights\n        belonging to the samples falling into each bin.\n\n    Returns\n    -------\n    H : ndarray, shape(nx, ny)\n        The bi-dimensional histogram of samples `x` and `y`. Values in `x`\n        are histogrammed along the first dimension and values in `y` are\n        histogrammed along the second dimension.\n    xedges : ndarray, shape(nx,)\n        The bin edges along the first dimension.\n    yedges : ndarray, shape(ny,)\n        The bin edges along the second dimension.\n\n    See Also\n    --------\n    histogram: 1D histogram\n    histogramdd: Multidimensional histogram\n\n    Notes\n    -----\n    When `normed` is True, then the returned histogram is the sample density,\n    defined such that:\n\n    .. math::\n      \\sum_{i=0}^{nx-1} \\sum_{j=0}^{ny-1} H_{i,j} \\Delta x_i \\Delta y_j = 1\n\n    where `H` is the histogram array and :math:`\\Delta x_i \\Delta y_i`\n    the area of bin `{i,j}`.\n\n    Please note that the histogram does not follow the Cartesian convention\n    where `x` values are on the abcissa and `y` values on the ordinate axis.\n    Rather, `x` is histogrammed along the first dimension of the array\n    (vertical), and `y` along the second dimension of the array (horizontal).\n    This ensures compatibility with `histogramdd`.\n\n    Examples\n    --------\n    >>> x, y = np.random.randn(2, 100)\n    >>> H, xedges, yedges = np.histogram2d(x, y, bins=(5, 8))\n    >>> H.shape, xedges.shape, yedges.shape\n    ((5, 8), (6,), (9,))\n\n    We can now use the Matplotlib to visualize this 2-dimensional histogram:\n\n    >>> extent = [yedges[0], yedges[-1], xedges[-1], xedges[0]]\n    >>> import matplotlib.pyplot as plt\n    >>> plt.imshow(H, extent=extent, interpolation='nearest')\n    <matplotlib.image.AxesImage object at ...>\n    >>> plt.colorbar()\n    <matplotlib.colorbar.Colorbar instance at ...>\n    >>> plt.show()\n\n    "),
               ('numpy.lib.twodim_base.mask_indices',
                ['n', 'mask_func', 'k=0'],
                '\n    Return the indices to access (n, n) arrays, given a masking function.\n\n    Assume `mask_func` is a function that, for a square array a of size\n    ``(n, n)`` with a possible offset argument `k`, when called as\n    ``mask_func(a, k)`` returns a new array with zeros in certain locations\n    (functions like `triu` or `tril` do precisely this). Then this function\n    returns the indices where the non-zero values would be located.\n\n    Parameters\n    ----------\n    n : int\n        The returned indices will be valid to access arrays of shape (n, n).\n    mask_func : callable\n        A function whose call signature is similar to that of `triu`, `tril`.\n        That is, ``mask_func(x, k)`` returns a boolean array, shaped like `x`.\n        `k` is an optional argument to the function.\n    k : scalar\n        An optional argument which is passed through to `mask_func`. Functions\n        like `triu`, `tril` take a second argument that is interpreted as an\n        offset.\n\n    Returns\n    -------\n    indices : tuple of arrays.\n        The `n` arrays of indices corresponding to the locations where\n        ``mask_func(np.ones((n, n)), k)`` is True.\n\n    See Also\n    --------\n    triu, tril, triu_indices, tril_indices\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    Examples\n    --------\n    These are the indices that would allow you to access the upper triangular\n    part of any 3x3 array:\n\n    >>> iu = np.mask_indices(3, np.triu)\n\n    For example, if `a` is a 3x3 array:\n\n    >>> a = np.arange(9).reshape(3, 3)\n    >>> a\n    array([[0, 1, 2],\n           [3, 4, 5],\n           [6, 7, 8]])\n    >>> a[iu]\n    array([0, 1, 2, 4, 5, 8])\n\n    An offset can be passed also to the masking function.  This gets us the\n    indices starting on the first diagonal right of the main one:\n\n    >>> iu1 = np.mask_indices(3, np.triu, 1)\n\n    with which we now extract only three elements:\n\n    >>> a[iu1]\n    array([1, 2, 5])\n\n    '),
               ('numpy.lib.twodim_base.tril_indices',
                ['n', 'k=0'],
                '\n    Return the indices for the lower-triangle of an (n, n) array.\n\n    Parameters\n    ----------\n    n : int\n        The row dimension of the square arrays for which the returned\n        indices will be valid.\n    k : int, optional\n        Diagonal offset (see `tril` for details).\n\n    Returns\n    -------\n    inds : tuple of arrays\n        The indices for the triangle. The returned tuple contains two arrays,\n        each with the indices along one dimension of the array.\n\n    See also\n    --------\n    triu_indices : similar function, for upper-triangular.\n    mask_indices : generic function accepting an arbitrary mask function.\n    tril, triu\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    Examples\n    --------\n    Compute two different sets of indices to access 4x4 arrays, one for the\n    lower triangular part starting at the main diagonal, and one starting two\n    diagonals further right:\n\n    >>> il1 = np.tril_indices(4)\n    >>> il2 = np.tril_indices(4, 2)\n\n    Here is how they can be used with a sample array:\n\n    >>> a = np.arange(16).reshape(4, 4)\n    >>> a\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n\n    Both for indexing:\n\n    >>> a[il1]\n    array([ 0,  4,  5,  8,  9, 10, 12, 13, 14, 15])\n\n    And for assigning values:\n\n    >>> a[il1] = -1\n    >>> a\n    array([[-1,  1,  2,  3],\n           [-1, -1,  6,  7],\n           [-1, -1, -1, 11],\n           [-1, -1, -1, -1]])\n\n    These cover almost the whole array (two diagonals right of the main one):\n\n    >>> a[il2] = -10\n    >>> a\n    array([[-10, -10, -10,   3],\n           [-10, -10, -10, -10],\n           [-10, -10, -10, -10],\n           [-10, -10, -10, -10]])\n\n    '),
               ('numpy.lib.twodim_base.tril_indices_from',
                ['arr', 'k=0'],
                '\n    Return the indices for the lower-triangle of arr.\n\n    See `tril_indices` for full details.\n\n    Parameters\n    ----------\n    arr : array_like\n        The indices will be valid for square arrays whose dimensions are\n        the same as arr.\n    k : int, optional\n        Diagonal offset (see `tril` for details).\n\n    See Also\n    --------\n    tril_indices, tril\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    '),
               ('numpy.lib.twodim_base.triu_indices',
                ['n', 'k=0'],
                '\n    Return the indices for the upper-triangle of an (n, n) array.\n\n    Parameters\n    ----------\n    n : int\n        The size of the arrays for which the returned indices will\n        be valid.\n    k : int, optional\n        Diagonal offset (see `triu` for details).\n\n    Returns\n    -------\n    inds : tuple of arrays\n        The indices for the triangle. The returned tuple contains two arrays,\n        each with the indices along one dimension of the array.\n\n    See also\n    --------\n    tril_indices : similar function, for lower-triangular.\n    mask_indices : generic function accepting an arbitrary mask function.\n    triu, tril\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    Examples\n    --------\n    Compute two different sets of indices to access 4x4 arrays, one for the\n    upper triangular part starting at the main diagonal, and one starting two\n    diagonals further right:\n\n    >>> iu1 = np.triu_indices(4)\n    >>> iu2 = np.triu_indices(4, 2)\n\n    Here is how they can be used with a sample array:\n\n    >>> a = np.arange(16).reshape(4, 4)\n    >>> a\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11],\n           [12, 13, 14, 15]])\n\n    Both for indexing:\n\n    >>> a[iu1]\n    array([ 0,  1,  2,  3,  5,  6,  7, 10, 11, 15])\n\n    And for assigning values:\n\n    >>> a[iu1] = -1\n    >>> a\n    array([[-1, -1, -1, -1],\n           [ 4, -1, -1, -1],\n           [ 8,  9, -1, -1],\n           [12, 13, 14, -1]])\n\n    These cover only a small part of the whole array (two diagonals right\n    of the main one):\n\n    >>> a[iu2] = -10\n    >>> a\n    array([[ -1,  -1, -10, -10],\n           [  4,  -1,  -1, -10],\n           [  8,   9,  -1,  -1],\n           [ 12,  13,  14,  -1]])\n\n    '),
               ('numpy.lib.twodim_base.triu_indices_from',
                ['arr', 'k=0'],
                '\n    Return the indices for the upper-triangle of an (n, n) array.\n\n    See `triu_indices` for full details.\n\n    Parameters\n    ----------\n    arr : array_like\n        The indices will be valid for square arrays whose dimensions are\n        the same as arr.\n    k : int, optional\n      Diagonal offset (see `triu` for details).\n\n    See Also\n    --------\n    triu_indices, triu\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    '),
               ('numpy.lib.arraysetops.ediff1d',
                ['ary', 'to_end=None', 'to_begin=None'],
                '\n    The differences between consecutive elements of an array.\n\n    Parameters\n    ----------\n    ary : array_like\n        If necessary, will be flattened before the differences are taken.\n    to_end : array_like, optional\n        Number(s) to append at the end of the returned differences.\n    to_begin : array_like, optional\n        Number(s) to prepend at the beginning of the returned differences.\n\n    Returns\n    -------\n    ed : ndarray\n        The differences. Loosely, this is ``ary.flat[1:] - ary.flat[:-1]``.\n\n    See Also\n    --------\n    diff, gradient\n\n    Notes\n    -----\n    When applied to masked arrays, this function drops the mask information\n    if the `to_begin` and/or `to_end` parameters are used.\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 4, 7, 0])\n    >>> np.ediff1d(x)\n    array([ 1,  2,  3, -7])\n\n    >>> np.ediff1d(x, to_begin=-99, to_end=np.array([88, 99]))\n    array([-99,   1,   2,   3,  -7,  88,  99])\n\n    The returned array is always 1D.\n\n    >>> y = [[1, 2, 4], [1, 6, 24]]\n    >>> np.ediff1d(y)\n    array([ 1,  2, -3,  5, 18])\n\n    '),
               ('numpy.lib.arraysetops.unique',
                ['ar', 'return_index=False', 'return_inverse=False'],
                "\n    Find the unique elements of an array.\n\n    Returns the sorted unique elements of an array. There are two optional\n    outputs in addition to the unique elements: the indices of the input array\n    that give the unique values, and the indices of the unique array that\n    reconstruct the input array.\n\n    Parameters\n    ----------\n    ar : array_like\n        Input array. This will be flattened if it is not already 1-D.\n    return_index : bool, optional\n        If True, also return the indices of `ar` that result in the unique\n        array.\n    return_inverse : bool, optional\n        If True, also return the indices of the unique array that can be used\n        to reconstruct `ar`.\n\n    Returns\n    -------\n    unique : ndarray\n        The sorted unique values.\n    unique_indices : ndarray, optional\n        The indices of the first occurrences of the unique values in the\n        (flattened) original array. Only provided if `return_index` is True.\n    unique_inverse : ndarray, optional\n        The indices to reconstruct the (flattened) original array from the\n        unique array. Only provided if `return_inverse` is True.\n\n    See Also\n    --------\n    numpy.lib.arraysetops : Module with a number of other functions for\n                            performing set operations on arrays.\n\n    Examples\n    --------\n    >>> np.unique([1, 1, 2, 2, 3, 3])\n    array([1, 2, 3])\n    >>> a = np.array([[1, 1], [2, 3]])\n    >>> np.unique(a)\n    array([1, 2, 3])\n\n    Return the indices of the original array that give the unique values:\n\n    >>> a = np.array(['a', 'b', 'b', 'c', 'a'])\n    >>> u, indices = np.unique(a, return_index=True)\n    >>> u\n    array(['a', 'b', 'c'],\n           dtype='|S1')\n    >>> indices\n    array([0, 1, 3])\n    >>> a[indices]\n    array(['a', 'b', 'c'],\n           dtype='|S1')\n\n    Reconstruct the input array from the unique values:\n\n    >>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n    >>> u, indices = np.unique(a, return_inverse=True)\n    >>> u\n    array([1, 2, 3, 4, 6])\n    >>> indices\n    array([0, 1, 4, 3, 1, 2, 1])\n    >>> u[indices]\n    array([1, 2, 6, 4, 2, 3, 2])\n\n    "),
               ('numpy.lib.arraysetops.intersect1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Find the intersection of two arrays.\n\n    Return the sorted, unique values that are in both of the input arrays.\n\n    Parameters\n    ----------\n    ar1, ar2 : array_like\n        Input arrays.\n    assume_unique : bool\n        If True, the input arrays are both assumed to be unique, which\n        can speed up the calculation.  Default is False.\n\n    Returns\n    -------\n    out : ndarray\n        Sorted 1D array of common and unique elements.\n\n    See Also\n    --------\n    numpy.lib.arraysetops : Module with a number of other functions for\n                            performing set operations on arrays.\n\n    Examples\n    --------\n    >>> np.intersect1d([1, 3, 4, 3], [3, 1, 2, 1])\n    array([1, 3])\n\n    '),
               ('numpy.lib.arraysetops.setxor1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Find the set exclusive-or of two arrays.\n\n    Return the sorted, unique values that are in only one (not both) of the\n    input arrays.\n\n    Parameters\n    ----------\n    ar1, ar2 : array_like\n        Input arrays.\n    assume_unique : bool\n        If True, the input arrays are both assumed to be unique, which\n        can speed up the calculation.  Default is False.\n\n    Returns\n    -------\n    xor : ndarray\n        Sorted 1D array of unique values that are in only one of the input\n        arrays.\n\n    Examples\n    --------\n    >>> a = np.array([1, 2, 3, 2, 4])\n    >>> b = np.array([2, 3, 5, 7, 5])\n    >>> np.setxor1d(a,b)\n    array([1, 4, 5, 7])\n\n    '),
               ('numpy.lib.arraysetops.in1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Test whether each element of a 1D array is also present in a second array.\n\n    Returns a boolean array the same length as `ar1` that is True\n    where an element of `ar1` is in `ar2` and False otherwise.\n\n    Parameters\n    ----------\n    ar1 : array_like, shape (M,)\n        Input array.\n    ar2 : array_like\n        The values against which to test each value of `ar1`.\n    assume_unique : bool, optional\n        If True, the input arrays are both assumed to be unique, which\n        can speed up the calculation.  Default is False.\n\n    Returns\n    -------\n    mask : ndarray of bools, shape(M,)\n        The values `ar1[mask]` are in `ar2`.\n\n    See Also\n    --------\n    numpy.lib.arraysetops : Module with a number of other functions for\n                            performing set operations on arrays.\n\n    Notes\n    -----\n    `in1d` can be considered as an element-wise function version of the\n    python keyword `in`, for 1D sequences. ``in1d(a, b)`` is roughly\n    equivalent to ``np.array([item in b for item in a])``.\n\n    .. versionadded:: 1.4.0\n\n    Examples\n    --------\n    >>> test = np.array([0, 1, 2, 5, 0])\n    >>> states = [0, 2]\n    >>> mask = np.in1d(test, states)\n    >>> mask\n    array([ True, False,  True, False,  True], dtype=bool)\n    >>> test[mask]\n    array([0, 2, 0])\n\n    '),
               ('numpy.lib.arraysetops.union1d',
                ['ar1', 'ar2'],
                '\n    Find the union of two arrays.\n\n    Return the unique, sorted array of values that are in either of the two\n    input arrays.\n\n    Parameters\n    ----------\n    ar1, ar2 : array_like\n        Input arrays. They are flattened if they are not already 1D.\n\n    Returns\n    -------\n    union : ndarray\n        Unique, sorted union of the input arrays.\n\n    See Also\n    --------\n    numpy.lib.arraysetops : Module with a number of other functions for\n                            performing set operations on arrays.\n\n    Examples\n    --------\n    >>> np.union1d([-1, 0, 1], [-2, 0, 2])\n    array([-2, -1,  0,  1,  2])\n\n    '),
               ('numpy.lib.arraysetops.setdiff1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Find the set difference of two arrays.\n\n    Return the sorted, unique values in `ar1` that are not in `ar2`.\n\n    Parameters\n    ----------\n    ar1 : array_like\n        Input array.\n    ar2 : array_like\n        Input comparison array.\n    assume_unique : bool\n        If True, the input arrays are both assumed to be unique, which\n        can speed up the calculation.  Default is False.\n\n    Returns\n    -------\n    difference : ndarray\n        Sorted 1D array of values in `ar1` that are not in `ar2`.\n\n    See Also\n    --------\n    numpy.lib.arraysetops : Module with a number of other functions for\n                            performing set operations on arrays.\n\n    Examples\n    --------\n    >>> a = np.array([1, 2, 3, 2, 4, 1])\n    >>> b = np.array([3, 4, 5, 6])\n    >>> np.setdiff1d(a, b)\n    array([1, 2])\n\n    '),
               ('numpy.lib._datasource.open',
                ['path', "mode='r'", 'destpath=os.curdir'],
                "\n    Open `path` with `mode` and return the file object.\n\n    If ``path`` is an URL, it will be downloaded, stored in the `DataSource`\n    `destpath` directory and opened from there.\n\n    Parameters\n    ----------\n    path : str\n        Local file path or URL to open.\n    mode : str, optional\n        Mode to open `path`. Mode 'r' for reading, 'w' for writing, 'a' to\n        append. Available modes depend on the type of object specified by path.\n        Default is 'r'.\n    destpath : str, optional\n        Path to the directory where the source file gets downloaded to for use.\n        If `destpath` is None, a temporary directory will be created. The\n        default path is the current directory.\n\n    Returns\n    -------\n    out : file object\n        The opened file.\n\n    Notes\n    -----\n    This is a convenience function that instantiates a `DataSource` and\n    returns the file object from ``DataSource.open(path)``.\n\n    "),
               ('numpy.lib.format.magic',
                ['major', 'minor'],
                ' Return the magic string for the given file format version.\n\n    Parameters\n    ----------\n    major : int in [0, 255]\n    minor : int in [0, 255]\n\n    Returns\n    -------\n    magic : str\n\n    Raises\n    ------\n    ValueError if the version cannot be formatted.\n    '),
               ('numpy.lib.format.read_magic',
                ['fp'],
                ' Read the magic string to get the version of the file format.\n\n    Parameters\n    ----------\n    fp : filelike object\n\n    Returns\n    -------\n    major : int\n    minor : int\n    '),
               ('numpy.lib.format.dtype_to_descr',
                ['dtype'],
                "\n    Get a serializable descriptor from the dtype.\n\n    The .descr attribute of a dtype object cannot be round-tripped through\n    the dtype() constructor. Simple types, like dtype('float32'), have\n    a descr which looks like a record array with one field with '' as\n    a name. The dtype() constructor interprets this as a request to give\n    a default name.  Instead, we construct descriptor that can be passed to\n    dtype().\n\n    Parameters\n    ----------\n    dtype : dtype\n        The dtype of the array that will be written to disk.\n\n    Returns\n    -------\n    descr : object\n        An object that can be passed to `numpy.dtype()` in order to\n        replicate the input dtype.\n\n    "),
               ('numpy.lib.format.header_data_from_array_1_0',
                ['array'],
                ' Get the dictionary of header metadata from a numpy.ndarray.\n\n    Parameters\n    ----------\n    array : numpy.ndarray\n\n    Returns\n    -------\n    d : dict\n        This has the appropriate entries for writing its string representation\n        to the header of the file.\n    '),
               ('numpy.lib.format.write_array_header_1_0',
                ['fp', 'd'],
                ' Write the header for an array using the 1.0 format.\n\n    Parameters\n    ----------\n    fp : filelike object\n    d : dict\n        This has the appropriate entries for writing its string representation\n        to the header of the file.\n    '),
               ('numpy.lib.format.read_array_header_1_0',
                ['fp'],
                "\n    Read an array header from a filelike object using the 1.0 file format\n    version.\n\n    This will leave the file object located just after the header.\n\n    Parameters\n    ----------\n    fp : filelike object\n        A file object or something with a `.read()` method like a file.\n\n    Returns\n    -------\n    shape : tuple of int\n        The shape of the array.\n    fortran_order : bool\n        The array data will be written out directly if it is either C-contiguous\n        or Fortran-contiguous. Otherwise, it will be made contiguous before\n        writing it out.\n    dtype : dtype\n        The dtype of the file's data.\n\n    Raises\n    ------\n    ValueError :\n        If the data is invalid.\n\n    "),
               ('numpy.lib.format.write_array',
                ['fp', 'array', 'version=(1, 0)'],
                '\n    Write an array to an NPY file, including a header.\n\n    If the array is neither C-contiguous nor Fortran-contiguous AND the\n    file_like object is not a real file object, this function will have to\n    copy data in memory.\n\n    Parameters\n    ----------\n    fp : file_like object\n        An open, writable file object, or similar object with a ``.write()``\n        method.\n    array : ndarray\n        The array to write to disk.\n    version : (int, int), optional\n        The version number of the format.  Default: (1, 0)\n\n    Raises\n    ------\n    ValueError\n        If the array cannot be persisted.\n    Various other errors\n        If the array contains Python objects as part of its dtype, the\n        process of pickling them may raise various errors if the objects\n        are not picklable.\n\n    '),
               ('numpy.lib.format.read_array',
                ['fp'],
                '\n    Read an array from an NPY file.\n\n    Parameters\n    ----------\n    fp : file_like object\n        If this is not a real file object, then this may take extra memory\n        and time.\n\n    Returns\n    -------\n    array : ndarray\n        The array from the data on disk.\n\n    Raises\n    ------\n    ValueError\n        If the data is invalid.\n\n    '),
               ('numpy.lib.format.open_memmap',
                ['filename',
                 "mode='r+'",
                 'dtype=None',
                 'shape=None',
                 'fortran_order=False',
                 'version=(1, 0)'],
                '\n    Open a .npy file as a memory-mapped array.\n\n    This may be used to read an existing file or create a new one.\n\n    Parameters\n    ----------\n    filename : str\n        The name of the file on disk.  This may *not* be a file-like\n        object.\n    mode : str, optional\n        The mode in which to open the file; the default is \'r+\'.  In\n        addition to the standard file modes, \'c\' is also accepted to\n        mean "copy on write."  See `memmap` for the available mode strings.\n    dtype : data-type, optional\n        The data type of the array if we are creating a new file in "write"\n        mode, if not, `dtype` is ignored.  The default value is None,\n        which results in a data-type of `float64`.\n    shape : tuple of int\n        The shape of the array if we are creating a new file in "write"\n        mode, in which case this parameter is required.  Otherwise, this\n        parameter is ignored and is thus optional.\n    fortran_order : bool, optional\n        Whether the array should be Fortran-contiguous (True) or\n        C-contiguous (False, the default) if we are creating a new file\n        in "write" mode.\n    version : tuple of int (major, minor)\n        If the mode is a "write" mode, then this is the version of the file\n        format used to create the file.  Default: (1,0)\n\n    Returns\n    -------\n    marray : memmap\n        The memory-mapped array.\n\n    Raises\n    ------\n    ValueError\n        If the data or the mode is invalid.\n    IOError\n        If the file is not found or cannot be opened correctly.\n\n    See Also\n    --------\n    memmap\n\n    '),
               ('numpy.lib.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('test_stride_tricks.assert_shapes_correct',
                ['input_shapes', 'expected_shape'],
                ' Broadcast a list of arrays with the given input shapes and check the\n    common output shape.\n    '),
               ('test_stride_tricks.assert_incompatible_shapes_raise',
                ['input_shapes'],
                ' Broadcast a list of arrays with the given (incompatible) input shapes\n    and check that they raise a ValueError.\n    '),
               ('test_stride_tricks.assert_same_as_ufunc',
                ['shape0', 'shape1', 'transposed=False', 'flipped=False'],
                ' Broadcast two shapes against each other and check that the data layout\n    is the same as if a ufunc did the broadcasting.\n    '),
               ('test_stride_tricks.test_same', [], ''),
               ('test_stride_tricks.test_one_off', [], ''),
               ('test_stride_tricks.test_same_input_shapes',
                [],
                ' Check that the final shape is just the input shape.\n    '),
               ('test_stride_tricks.test_two_compatible_by_ones_input_shapes',
                [],
                ' Check that two different input shapes (of the same length but some have\n    1s) broadcast to the correct shape.\n    '),
               ('test_stride_tricks.test_two_compatible_by_prepending_ones_input_shapes',
                [],
                ' Check that two different input shapes (of different lengths) broadcast\n    to the correct shape.\n    '),
               ('test_stride_tricks.test_incompatible_shapes_raise_valueerror',
                [],
                ' Check that a ValueError is raised for incompatible shapes.\n    '),
               ('test_stride_tricks.test_same_as_ufunc',
                [],
                ' Check that the data layout is the same as if a ufunc did the operation.\n    '),
               ('test_type_check.assert_all', ['x'], ''),
               ('test_format.setup_module', [], ''),
               ('test_format.teardown_module', [], ''),
               ('test_format.roundtrip', ['arr'], ''),
               ('test_format.assert_equal', ['o1', 'o2'], ''),
               ('test_format.test_roundtrip', [], ''),
               ('test_format.test_memmap_roundtrip', [], ''),
               ('test_format.test_write_version_1_0', [], ''),
               ('test_format.test_read_magic_bad_magic', [], ''),
               ('test_format.test_read_version_1_0_bad_magic', [], ''),
               ('test_format.test_bad_magic_args', [], ''),
               ('test_format.test_large_header', [], ''),
               ('test_format.test_bad_header', [], ''),
               ('test_shape_base.compare_results', ['res', 'desired'], ''),
               ('test_function_base.compare_results', ['res', 'desired'], ''),
               ('test_function_base.test_percentile_list', [], ''),
               ('test_function_base.test_percentile_out', [], ''),
               ('test_function_base.test_median', [], ''),
               ('test_financial.test_unimplemented', [], ''),
               ('test__iotools.StringIO', ["s=''"], ''),
               ('test__iotools._bytes_to_date', ['s'], ''),
               ('test_index_tricks.test_fill_diagonal', [], ''),
               ('test_index_tricks.test_diag_indices', [], ''),
               ('test_index_tricks.test_diag_indices_from', [], ''),
               ('test_io.StringIO', ["s=''"], ''),
               ('test_io.strptime',
                ['s', 'fmt=None'],
                'This function is available in the datetime module only\n    from Python >= 2.5.\n\n    '),
               ('test_io._assert_floatstr_lines_equal',
                ['actual_lines', 'expected_lines'],
                'A string comparison function that also works on Windows + Python 2.5.\n\n    This is necessary because Python 2.5 on Windows inserts an extra 0 in\n    the exponent of the string representation of floating point numbers.\n\n    Only used in TestSaveTxt.test_complex_arrays, no attempt made to make this\n    more generic.\n\n    Once Python 2.5 compatibility is dropped, simply use `assert_equal` instead\n    of this function.\n    '),
               ('test_io.test_gzip_load', [], ''),
               ('test_io.test_gzip_loadtxt', [], ''),
               ('test_io.test_gzip_loadtxt_from_string', [], ''),
               ('test_io.test_npzfile_dict', [], ''),
               ('test_io.test_load_refcount', [], ''),
               ('test_utils.test_lookfor', [], ''),
               ('test_utils.old_func', ['self', 'x'], ''),
               ('test_utils.old_func2', ['self', 'x'], ''),
               ('test_utils.old_func3', ['self', 'x'], ''),
               ('test_utils.test_deprecate_decorator', [], ''),
               ('test_utils.test_deprecate_decorator_message', [], ''),
               ('test_utils.test_deprecate_fn', [], ''),
               ('test_twodim_base.get_mat', ['n'], ''),
               ('test_twodim_base.test_tril_triu', [], ''),
               ('test_twodim_base.test_mask_indices', [], ''),
               ('test_twodim_base.test_tril_indices', [], ''),
               ('test_arrayterator.test', [], ''),
               ('test__datasource.urlopen_stub',
                ['url', 'data=None'],
                'Stub to replace urlopen for testing.'),
               ('test__datasource.setup', [], ''),
               ('test__datasource.teardown', [], ''),
               ('test__datasource.valid_textfile', ['filedir'], ''),
               ('test__datasource.invalid_textfile', ['filedir'], ''),
               ('test__datasource.valid_httpurl', [], ''),
               ('test__datasource.invalid_httpurl', [], ''),
               ('test__datasource.valid_baseurl', [], ''),
               ('test__datasource.invalid_baseurl', [], ''),
               ('test__datasource.valid_httpfile', [], ''),
               ('test__datasource.invalid_httpfile', [], ''),
               ('numpy.fft.fftpack._raw_fft',
                ['a',
                 'n=None',
                 'axis=-1',
                 'init_function=fftpack.cffti',
                 'work_function=fftpack.cfftf',
                 'fft_cache=_fft_cache'],
                ''),
               ('numpy.fft.fftpack.fft',
                ['a', 'n=None', 'axis=-1'],
                '\n    Compute the one-dimensional discrete Fourier Transform.\n\n    This function computes the one-dimensional *n*-point discrete Fourier\n    Transform (DFT) with the efficient Fast Fourier Transform (FFT)\n    algorithm [CT].\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, can be complex.\n    n : int, optional\n        Length of the transformed axis of the output.\n        If `n` is smaller than the length of the input, the input is cropped.\n        If it is larger, the input is padded with zeros.  If `n` is not given,\n        the length of the input (along the axis specified by `axis`) is used.\n    axis : int, optional\n        Axis over which to compute the FFT.  If not given, the last axis is\n        used.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n\n    Raises\n    ------\n    IndexError\n        if `axes` is larger than the last axis of `a`.\n\n    See Also\n    --------\n    numpy.fft : for definition of the DFT and conventions used.\n    ifft : The inverse of `fft`.\n    fft2 : The two-dimensional FFT.\n    fftn : The *n*-dimensional FFT.\n    rfftn : The *n*-dimensional FFT of real input.\n    fftfreq : Frequency bins for given FFT parameters.\n\n    Notes\n    -----\n    FFT (Fast Fourier Transform) refers to a way the discrete Fourier\n    Transform (DFT) can be calculated efficiently, by using symmetries in the\n    calculated terms.  The symmetry is highest when `n` is a power of 2, and\n    the transform is therefore most efficient for these sizes.\n\n    The DFT is defined, with the conventions used in this implementation, in\n    the documentation for the `numpy.fft` module.\n\n    References\n    ----------\n    .. [CT] Cooley, James W., and John W. Tukey, 1965, "An algorithm for the\n            machine calculation of complex Fourier series," *Math. Comput.*\n            19: 297-301.\n\n    Examples\n    --------\n    >>> np.fft.fft(np.exp(2j * np.pi * np.arange(8) / 8))\n    array([ -3.44505240e-16 +1.14383329e-17j,\n             8.00000000e+00 -5.71092652e-15j,\n             2.33482938e-16 +1.22460635e-16j,\n             1.64863782e-15 +1.77635684e-15j,\n             9.95839695e-17 +2.33482938e-16j,\n             0.00000000e+00 +1.66837030e-15j,\n             1.14383329e-17 +1.22460635e-16j,\n             -1.64863782e-15 +1.77635684e-15j])\n\n    >>> import matplotlib.pyplot as plt\n    >>> t = np.arange(256)\n    >>> sp = np.fft.fft(np.sin(t))\n    >>> freq = np.fft.fftfreq(t.shape[-1])\n    >>> plt.plot(freq, sp.real, freq, sp.imag)\n    [<matplotlib.lines.Line2D object at 0x...>, <matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.show()\n\n    In this example, real input has an FFT which is Hermitian, i.e., symmetric\n    in the real part and anti-symmetric in the imaginary part, as described in\n    the `numpy.fft` documentation.\n\n    '),
               ('numpy.fft.fftpack.ifft',
                ['a', 'n=None', 'axis=-1'],
                "\n    Compute the one-dimensional inverse discrete Fourier Transform.\n\n    This function computes the inverse of the one-dimensional *n*-point\n    discrete Fourier transform computed by `fft`.  In other words,\n    ``ifft(fft(a)) == a`` to within numerical accuracy.\n    For a general description of the algorithm and definitions,\n    see `numpy.fft`.\n\n    The input should be ordered in the same way as is returned by `fft`,\n    i.e., ``a[0]`` should contain the zero frequency term,\n    ``a[1:n/2+1]`` should contain the positive-frequency terms, and\n    ``a[n/2+1:]`` should contain the negative-frequency terms, in order of\n    decreasingly negative frequency.  See `numpy.fft` for details.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, can be complex.\n    n : int, optional\n        Length of the transformed axis of the output.\n        If `n` is smaller than the length of the input, the input is cropped.\n        If it is larger, the input is padded with zeros.  If `n` is not given,\n        the length of the input (along the axis specified by `axis`) is used.\n        See notes about padding issues.\n    axis : int, optional\n        Axis over which to compute the inverse DFT.  If not given, the last\n        axis is used.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n\n    Raises\n    ------\n    IndexError\n        If `axes` is larger than the last axis of `a`.\n\n    See Also\n    --------\n    numpy.fft : An introduction, with definitions and general explanations.\n    fft : The one-dimensional (forward) FFT, of which `ifft` is the inverse\n    ifft2 : The two-dimensional inverse FFT.\n    ifftn : The n-dimensional inverse FFT.\n\n    Notes\n    -----\n    If the input parameter `n` is larger than the size of the input, the input\n    is padded by appending zeros at the end.  Even though this is the common\n    approach, it might lead to surprising results.  If a different padding is\n    desired, it must be performed before calling `ifft`.\n\n    Examples\n    --------\n    >>> np.fft.ifft([0, 4, 0, 0])\n    array([ 1.+0.j,  0.+1.j, -1.+0.j,  0.-1.j])\n\n    Create and plot a band-limited signal with random phases:\n\n    >>> import matplotlib.pyplot as plt\n    >>> t = np.arange(400)\n    >>> n = np.zeros((400,), dtype=complex)\n    >>> n[40:60] = np.exp(1j*np.random.uniform(0, 2*np.pi, (20,)))\n    >>> s = np.fft.ifft(n)\n    >>> plt.plot(t, s.real, 'b-', t, s.imag, 'r--')\n    [<matplotlib.lines.Line2D object at 0x...>, <matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.legend(('real', 'imaginary'))\n    <matplotlib.legend.Legend object at 0x...>\n    >>> plt.show()\n\n    "),
               ('numpy.fft.fftpack.rfft',
                ['a', 'n=None', 'axis=-1'],
                '\n    Compute the one-dimensional discrete Fourier Transform for real input.\n\n    This function computes the one-dimensional *n*-point discrete Fourier\n    Transform (DFT) of a real-valued array by means of an efficient algorithm\n    called the Fast Fourier Transform (FFT).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n    n : int, optional\n        Number of points along transformation axis in the input to use.\n        If `n` is smaller than the length of the input, the input is cropped.\n        If it is larger, the input is padded with zeros. If `n` is not given,\n        the length of the input (along the axis specified by `axis`) is used.\n    axis : int, optional\n        Axis over which to compute the FFT. If not given, the last axis is\n        used.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n        The length of the transformed axis is ``n/2+1``.\n\n    Raises\n    ------\n    IndexError\n        If `axis` is larger than the last axis of `a`.\n\n    See Also\n    --------\n    numpy.fft : For definition of the DFT and conventions used.\n    irfft : The inverse of `rfft`.\n    fft : The one-dimensional FFT of general (complex) input.\n    fftn : The *n*-dimensional FFT.\n    rfftn : The *n*-dimensional FFT of real input.\n\n    Notes\n    -----\n    When the DFT is computed for purely real input, the output is\n    Hermite-symmetric, i.e. the negative frequency terms are just the complex\n    conjugates of the corresponding positive-frequency terms, and the\n    negative-frequency terms are therefore redundant.  This function does not\n    compute the negative frequency terms, and the length of the transformed\n    axis of the output is therefore ``n/2+1``.\n\n    When ``A = rfft(a)``, ``A[0]`` contains the zero-frequency term, which\n    must be purely real due to the Hermite symmetry.\n\n    If `n` is even, ``A[-1]`` contains the term for frequencies ``n/2`` and\n    ``-n/2``, and must also be purely real.  If `n` is odd, ``A[-1]``\n    contains the term for frequency ``A[(n-1)/2]``, and is complex in the\n    general case.\n\n    If the input `a` contains an imaginary part, it is silently discarded.\n\n    Examples\n    --------\n    >>> np.fft.fft([0, 1, 0, 0])\n    array([ 1.+0.j,  0.-1.j, -1.+0.j,  0.+1.j])\n    >>> np.fft.rfft([0, 1, 0, 0])\n    array([ 1.+0.j,  0.-1.j, -1.+0.j])\n\n    Notice how the final element of the `fft` output is the complex conjugate\n    of the second element, for real input. For `rfft`, this symmetry is\n    exploited to compute only the non-negative frequency terms.\n\n    '),
               ('numpy.fft.fftpack.irfft',
                ['a', 'n=None', 'axis=-1'],
                '\n    Compute the inverse of the n-point DFT for real input.\n\n    This function computes the inverse of the one-dimensional *n*-point\n    discrete Fourier Transform of real input computed by `rfft`.\n    In other words, ``irfft(rfft(a), len(a)) == a`` to within numerical\n    accuracy. (See Notes below for why ``len(a)`` is necessary here.)\n\n    The input is expected to be in the form returned by `rfft`, i.e. the\n    real zero-frequency term followed by the complex positive frequency terms\n    in order of increasing frequency.  Since the discrete Fourier Transform of\n    real input is Hermite-symmetric, the negative frequency terms are taken\n    to be the complex conjugates of the corresponding positive frequency terms.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    n : int, optional\n        Length of the transformed axis of the output.\n        For `n` output points, ``n/2+1`` input points are necessary.  If the\n        input is longer than this, it is cropped.  If it is shorter than this,\n        it is padded with zeros.  If `n` is not given, it is determined from\n        the length of the input (along the axis specified by `axis`).\n    axis : int, optional\n        Axis over which to compute the inverse FFT.\n\n    Returns\n    -------\n    out : ndarray\n        The truncated or zero-padded input, transformed along the axis\n        indicated by `axis`, or the last one if `axis` is not specified.\n        The length of the transformed axis is `n`, or, if `n` is not given,\n        ``2*(m-1)`` where `m` is the length of the transformed axis of the\n        input. To get an odd number of output points, `n` must be specified.\n\n    Raises\n    ------\n    IndexError\n        If `axis` is larger than the last axis of `a`.\n\n    See Also\n    --------\n    numpy.fft : For definition of the DFT and conventions used.\n    rfft : The one-dimensional FFT of real input, of which `irfft` is inverse.\n    fft : The one-dimensional FFT.\n    irfft2 : The inverse of the two-dimensional FFT of real input.\n    irfftn : The inverse of the *n*-dimensional FFT of real input.\n\n    Notes\n    -----\n    Returns the real valued `n`-point inverse discrete Fourier transform\n    of `a`, where `a` contains the non-negative frequency terms of a\n    Hermite-symmetric sequence. `n` is the length of the result, not the\n    input.\n\n    If you specify an `n` such that `a` must be zero-padded or truncated, the\n    extra/removed values will be added/removed at high frequencies. One can\n    thus resample a series to `m` points via Fourier interpolation by:\n    ``a_resamp = irfft(rfft(a), m)``.\n\n\n    Examples\n    --------\n    >>> np.fft.ifft([1, -1j, -1, 1j])\n    array([ 0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j])\n    >>> np.fft.irfft([1, -1j, -1])\n    array([ 0.,  1.,  0.,  0.])\n\n    Notice how the last term in the input to the ordinary `ifft` is the\n    complex conjugate of the second term, and the output has zero imaginary\n    part everywhere.  When calling `irfft`, the negative frequencies are not\n    specified, and the output array is purely real.\n\n    '),
               ('numpy.fft.fftpack.hfft',
                ['a', 'n=None', 'axis=-1'],
                "\n    Compute the FFT of a signal whose spectrum has Hermitian symmetry.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    n : int, optional\n        The length of the FFT.\n    axis : int, optional\n        The axis over which to compute the FFT, assuming Hermitian symmetry\n        of the spectrum. Default is the last axis.\n\n    Returns\n    -------\n    out : ndarray\n        The transformed input.\n\n    See also\n    --------\n    rfft : Compute the one-dimensional FFT for real input.\n    ihfft : The inverse of `hfft`.\n\n    Notes\n    -----\n    `hfft`/`ihfft` are a pair analogous to `rfft`/`irfft`, but for the\n    opposite case: here the signal is real in the frequency domain and has\n    Hermite symmetry in the time domain. So here it's `hfft` for which\n    you must supply the length of the result if it is to be odd:\n    ``ihfft(hfft(a), len(a)) == a``, within numerical accuracy.\n\n    Examples\n    --------\n    >>> signal = np.array([[1, 1.j], [-1.j, 2]])\n    >>> np.conj(signal.T) - signal   # check Hermitian symmetry\n    array([[ 0.-0.j,  0.+0.j],\n           [ 0.+0.j,  0.-0.j]])\n    >>> freq_spectrum = np.fft.hfft(signal)\n    >>> freq_spectrum\n    array([[ 1.,  1.],\n           [ 2., -2.]])\n\n    "),
               ('numpy.fft.fftpack.ihfft',
                ['a', 'n=None', 'axis=-1'],
                "\n    Compute the inverse FFT of a signal whose spectrum has Hermitian symmetry.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    n : int, optional\n        Length of the inverse FFT.\n    axis : int, optional\n        Axis over which to compute the inverse FFT, assuming Hermitian\n        symmetry of the spectrum. Default is the last axis.\n\n    Returns\n    -------\n    out : ndarray\n        The transformed input.\n\n    See also\n    --------\n    hfft, irfft\n\n    Notes\n    -----\n    `hfft`/`ihfft` are a pair analogous to `rfft`/`irfft`, but for the\n    opposite case: here the signal is real in the frequency domain and has\n    Hermite symmetry in the time domain. So here it's `hfft` for which\n    you must supply the length of the result if it is to be odd:\n    ``ihfft(hfft(a), len(a)) == a``, within numerical accuracy.\n\n    "),
               ('numpy.fft.fftpack._cook_nd_args', ['a', 's=None', 'axes=None', 'invreal=0'], ''),
               ('numpy.fft.fftpack._raw_fftnd', ['a', 's=None', 'axes=None', 'function=fft'], ''),
               ('numpy.fft.fftpack.fftn',
                ['a', 's=None', 'axes=None'],
                '\n    Compute the N-dimensional discrete Fourier Transform.\n\n    This function computes the *N*-dimensional discrete Fourier Transform over\n    any number of axes in an *M*-dimensional array by means of the Fast Fourier\n    Transform (FFT).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, can be complex.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (`s[0]` refers to axis 0, `s[1]` to axis 1, etc.).\n        This corresponds to `n` for `fft(x, n)`.\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped.  If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input (along the axes specified\n        by `axes`) is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.  If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n        Repeated indices in `axes` means that the transform over that axis is\n        performed multiple times.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` and `a`,\n        as explained in the parameters section above.\n\n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than than the number of axes of `a`.\n\n    See Also\n    --------\n    numpy.fft : Overall view of discrete Fourier transforms, with definitions\n        and conventions used.\n    ifftn : The inverse of `fftn`, the inverse *n*-dimensional FFT.\n    fft : The one-dimensional FFT, with definitions and conventions used.\n    rfftn : The *n*-dimensional FFT of real input.\n    fft2 : The two-dimensional FFT.\n    fftshift : Shifts zero-frequency terms to centre of array\n\n    Notes\n    -----\n    The output, analogously to `fft`, contains the term for zero frequency in\n    the low-order corner of all axes, the positive frequency terms in the\n    first half of all axes, the term for the Nyquist frequency in the middle\n    of all axes and the negative frequency terms in the second half of all\n    axes, in order of decreasingly negative frequency.\n\n    See `numpy.fft` for details, definitions and conventions used.\n\n    Examples\n    --------\n    >>> a = np.mgrid[:3, :3, :3][0]\n    >>> np.fft.fftn(a, axes=(1, 2))\n    array([[[  0.+0.j,   0.+0.j,   0.+0.j],\n            [  0.+0.j,   0.+0.j,   0.+0.j],\n            [  0.+0.j,   0.+0.j,   0.+0.j]],\n           [[  9.+0.j,   0.+0.j,   0.+0.j],\n            [  0.+0.j,   0.+0.j,   0.+0.j],\n            [  0.+0.j,   0.+0.j,   0.+0.j]],\n           [[ 18.+0.j,   0.+0.j,   0.+0.j],\n            [  0.+0.j,   0.+0.j,   0.+0.j],\n            [  0.+0.j,   0.+0.j,   0.+0.j]]])\n    >>> np.fft.fftn(a, (2, 2), axes=(0, 1))\n    array([[[ 2.+0.j,  2.+0.j,  2.+0.j],\n            [ 0.+0.j,  0.+0.j,  0.+0.j]],\n           [[-2.+0.j, -2.+0.j, -2.+0.j],\n            [ 0.+0.j,  0.+0.j,  0.+0.j]]])\n\n    >>> import matplotlib.pyplot as plt\n    >>> [X, Y] = np.meshgrid(2 * np.pi * np.arange(200) / 12,\n    ...                      2 * np.pi * np.arange(200) / 34)\n    >>> S = np.sin(X) + np.cos(Y) + np.random.uniform(0, 1, X.shape)\n    >>> FS = np.fft.fftn(S)\n    >>> plt.imshow(np.log(np.abs(np.fft.fftshift(FS))**2))\n    <matplotlib.image.AxesImage object at 0x...>\n    >>> plt.show()\n\n    '),
               ('numpy.fft.fftpack.ifftn',
                ['a', 's=None', 'axes=None'],
                '\n    Compute the N-dimensional inverse discrete Fourier Transform.\n\n    This function computes the inverse of the N-dimensional discrete\n    Fourier Transform over any number of axes in an M-dimensional array by\n    means of the Fast Fourier Transform (FFT).  In other words,\n    ``ifftn(fftn(a)) == a`` to within numerical accuracy.\n    For a description of the definitions and conventions used, see `numpy.fft`.\n\n    The input, analogously to `ifft`, should be ordered in the same way as is\n    returned by `fftn`, i.e. it should have the term for zero frequency\n    in all axes in the low-order corner, the positive frequency terms in the\n    first half of all axes, the term for the Nyquist frequency in the middle\n    of all axes and the negative frequency terms in the second half of all\n    axes, in order of decreasingly negative frequency.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, can be complex.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        This corresponds to ``n`` for ``ifft(x, n)``.\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped.  If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input (along the axes specified\n        by `axes`) is used.  See notes for issue on `ifft` zero padding.\n    axes : sequence of ints, optional\n        Axes over which to compute the IFFT.  If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n        Repeated indices in `axes` means that the inverse transform over that\n        axis is performed multiple times.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` or `a`,\n        as explained in the parameters section above.\n\n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than than the number of axes of `a`.\n\n    See Also\n    --------\n    numpy.fft : Overall view of discrete Fourier transforms, with definitions\n         and conventions used.\n    fftn : The forward *n*-dimensional FFT, of which `ifftn` is the inverse.\n    ifft : The one-dimensional inverse FFT.\n    ifft2 : The two-dimensional inverse FFT.\n    ifftshift : Undoes `fftshift`, shifts zero-frequency terms to beginning\n        of array.\n\n    Notes\n    -----\n    See `numpy.fft` for definitions and conventions used.\n\n    Zero-padding, analogously with `ifft`, is performed by appending zeros to\n    the input along the specified dimension.  Although this is the common\n    approach, it might lead to surprising results.  If another form of zero\n    padding is desired, it must be performed before `ifftn` is called.\n\n    Examples\n    --------\n    >>> a = np.eye(4)\n    >>> np.fft.ifftn(np.fft.fftn(a, axes=(0,)), axes=(1,))\n    array([[ 1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],\n           [ 0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],\n           [ 0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n           [ 0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])\n\n\n    Create and plot an image with band-limited frequency content:\n\n    >>> import matplotlib.pyplot as plt\n    >>> n = np.zeros((200,200), dtype=complex)\n    >>> n[60:80, 20:40] = np.exp(1j*np.random.uniform(0, 2*np.pi, (20, 20)))\n    >>> im = np.fft.ifftn(n).real\n    >>> plt.imshow(im)\n    <matplotlib.image.AxesImage object at 0x...>\n    >>> plt.show()\n\n    '),
               ('numpy.fft.fftpack.fft2',
                ['a', 's=None', 'axes=(-2, -1)'],
                '\n    Compute the 2-dimensional discrete Fourier Transform\n\n    This function computes the *n*-dimensional discrete Fourier Transform\n    over any axes in an *M*-dimensional array by means of the\n    Fast Fourier Transform (FFT).  By default, the transform is computed over\n    the last two axes of the input array, i.e., a 2-dimensional FFT.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, can be complex\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (`s[0]` refers to axis 0, `s[1]` to axis 1, etc.).\n        This corresponds to `n` for `fft(x, n)`.\n        Along each axis, if the given shape is smaller than that of the input,\n        the input is cropped.  If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input (along the axes specified\n        by `axes`) is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.  If not given, the last two\n        axes are used.  A repeated index in `axes` means the transform over\n        that axis is performed multiple times.  A one-element sequence means\n        that a one-dimensional FFT is performed.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or the last two axes if `axes` is not given.\n\n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length, or `axes` not given and\n        ``len(s) != 2``.\n    IndexError\n        If an element of `axes` is larger than than the number of axes of `a`.\n\n    See Also\n    --------\n    numpy.fft : Overall view of discrete Fourier transforms, with definitions\n         and conventions used.\n    ifft2 : The inverse two-dimensional FFT.\n    fft : The one-dimensional FFT.\n    fftn : The *n*-dimensional FFT.\n    fftshift : Shifts zero-frequency terms to the center of the array.\n        For two-dimensional input, swaps first and third quadrants, and second\n        and fourth quadrants.\n\n    Notes\n    -----\n    `fft2` is just `fftn` with a different default for `axes`.\n\n    The output, analogously to `fft`, contains the term for zero frequency in\n    the low-order corner of the transformed axes, the positive frequency terms\n    in the first half of these axes, the term for the Nyquist frequency in the\n    middle of the axes and the negative frequency terms in the second half of\n    the axes, in order of decreasingly negative frequency.\n\n    See `fftn` for details and a plotting example, and `numpy.fft` for\n    definitions and conventions used.\n\n\n    Examples\n    --------\n    >>> a = np.mgrid[:5, :5][0]\n    >>> np.fft.fft2(a)\n    array([[  0.+0.j,   0.+0.j,   0.+0.j,   0.+0.j,   0.+0.j],\n           [  5.+0.j,   0.+0.j,   0.+0.j,   0.+0.j,   0.+0.j],\n           [ 10.+0.j,   0.+0.j,   0.+0.j,   0.+0.j,   0.+0.j],\n           [ 15.+0.j,   0.+0.j,   0.+0.j,   0.+0.j,   0.+0.j],\n           [ 20.+0.j,   0.+0.j,   0.+0.j,   0.+0.j,   0.+0.j]])\n\n    '),
               ('numpy.fft.fftpack.ifft2',
                ['a', 's=None', 'axes=(-2, -1)'],
                '\n    Compute the 2-dimensional inverse discrete Fourier Transform.\n\n    This function computes the inverse of the 2-dimensional discrete Fourier\n    Transform over any number of axes in an M-dimensional array by means of\n    the Fast Fourier Transform (FFT).  In other words, ``ifft2(fft2(a)) == a``\n    to within numerical accuracy.  By default, the inverse transform is\n    computed over the last two axes of the input array.\n\n    The input, analogously to `ifft`, should be ordered in the same way as is\n    returned by `fft2`, i.e. it should have the term for zero frequency\n    in the low-order corner of the two axes, the positive frequency terms in\n    the first half of these axes, the term for the Nyquist frequency in the\n    middle of the axes and the negative frequency terms in the second half of\n    both axes, in order of decreasingly negative frequency.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, can be complex.\n    s : sequence of ints, optional\n        Shape (length of each axis) of the output (``s[0]`` refers to axis 0,\n        ``s[1]`` to axis 1, etc.).  This corresponds to `n` for ``ifft(x, n)``.\n        Along each axis, if the given shape is smaller than that of the input,\n        the input is cropped.  If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input (along the axes specified\n        by `axes`) is used.  See notes for issue on `ifft` zero padding.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.  If not given, the last two\n        axes are used.  A repeated index in `axes` means the transform over\n        that axis is performed multiple times.  A one-element sequence means\n        that a one-dimensional FFT is performed.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or the last two axes if `axes` is not given.\n\n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length, or `axes` not given and\n        ``len(s) != 2``.\n    IndexError\n        If an element of `axes` is larger than than the number of axes of `a`.\n\n    See Also\n    --------\n    numpy.fft : Overall view of discrete Fourier transforms, with definitions\n         and conventions used.\n    fft2 : The forward 2-dimensional FFT, of which `ifft2` is the inverse.\n    ifftn : The inverse of the *n*-dimensional FFT.\n    fft : The one-dimensional FFT.\n    ifft : The one-dimensional inverse FFT.\n\n    Notes\n    -----\n    `ifft2` is just `ifftn` with a different default for `axes`.\n\n    See `ifftn` for details and a plotting example, and `numpy.fft` for\n    definition and conventions used.\n\n    Zero-padding, analogously with `ifft`, is performed by appending zeros to\n    the input along the specified dimension.  Although this is the common\n    approach, it might lead to surprising results.  If another form of zero\n    padding is desired, it must be performed before `ifft2` is called.\n\n    Examples\n    --------\n    >>> a = 4 * np.eye(4)\n    >>> np.fft.ifft2(a)\n    array([[ 1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],\n           [ 0.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],\n           [ 0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n           [ 0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j]])\n\n    '),
               ('numpy.fft.fftpack.rfftn',
                ['a', 's=None', 'axes=None'],
                '\n    Compute the N-dimensional discrete Fourier Transform for real input.\n\n    This function computes the N-dimensional discrete Fourier Transform over\n    any number of axes in an M-dimensional real array by means of the Fast\n    Fourier Transform (FFT).  By default, all axes are transformed, with the\n    real transform performed over the last axis, while the remaining\n    transforms are complex.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, taken to be real.\n    s : sequence of ints, optional\n        Shape (length along each transformed axis) to use from the input.\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.).\n        The final element of `s` corresponds to `n` for ``rfft(x, n)``, while\n        for the remaining axes, it corresponds to `n` for ``fft(x, n)``.\n        Along any axis, if the given shape is smaller than that of the input,\n        the input is cropped.  If it is larger, the input is padded with zeros.\n        if `s` is not given, the shape of the input (along the axes specified\n        by `axes`) is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.  If not given, the last ``len(s)``\n        axes are used, or all axes if `s` is also not specified.\n\n    Returns\n    -------\n    out : complex ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` and `a`,\n        as explained in the parameters section above.\n        The length of the last axis transformed will be ``s[-1]//2+1``,\n        while the remaining transformed axes will have lengths according to\n        `s`, or unchanged from the input.\n\n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than than the number of axes of `a`.\n\n    See Also\n    --------\n    irfftn : The inverse of `rfftn`, i.e. the inverse of the n-dimensional FFT\n         of real input.\n    fft : The one-dimensional FFT, with definitions and conventions used.\n    rfft : The one-dimensional FFT of real input.\n    fftn : The n-dimensional FFT.\n    rfft2 : The two-dimensional FFT of real input.\n\n    Notes\n    -----\n    The transform for real input is performed over the last transformation\n    axis, as by `rfft`, then the transform over the remaining axes is\n    performed as by `fftn`.  The order of the output is as for `rfft` for the\n    final transformation axis, and as for `fftn` for the remaining\n    transformation axes.\n\n    See `fft` for details, definitions and conventions used.\n\n    Examples\n    --------\n    >>> a = np.ones((2, 2, 2))\n    >>> np.fft.rfftn(a)\n    array([[[ 8.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j]],\n           [[ 0.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j]]])\n\n    >>> np.fft.rfftn(a, axes=(2, 0))\n    array([[[ 4.+0.j,  0.+0.j],\n            [ 4.+0.j,  0.+0.j]],\n           [[ 0.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j]]])\n\n    '),
               ('numpy.fft.fftpack.rfft2',
                ['a', 's=None', 'axes=(-2, -1)'],
                '\n    Compute the 2-dimensional FFT of a real array.\n\n    Parameters\n    ----------\n    a : array\n        Input array, taken to be real.\n    s : sequence of ints, optional\n        Shape of the FFT.\n    axes : sequence of ints, optional\n        Axes over which to compute the FFT.\n\n    Returns\n    -------\n    out : ndarray\n        The result of the real 2-D FFT.\n\n    See Also\n    --------\n    rfftn : Compute the N-dimensional discrete Fourier Transform for real\n            input.\n\n    Notes\n    -----\n    This is really just `rfftn` with different default behavior.\n    For more details see `rfftn`.\n\n    '),
               ('numpy.fft.fftpack.irfftn',
                ['a', 's=None', 'axes=None'],
                '\n    Compute the inverse of the N-dimensional FFT of real input.\n\n    This function computes the inverse of the N-dimensional discrete\n    Fourier Transform for real input over any number of axes in an\n    M-dimensional array by means of the Fast Fourier Transform (FFT).  In\n    other words, ``irfftn(rfftn(a), a.shape) == a`` to within numerical\n    accuracy. (The ``a.shape`` is necessary like ``len(a)`` is for `irfft`,\n    and for the same reason.)\n\n    The input should be ordered in the same way as is returned by `rfftn`,\n    i.e. as for `irfft` for the final transformation axis, and as for `ifftn`\n    along all the other axes.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    s : sequence of ints, optional\n        Shape (length of each transformed axis) of the output\n        (``s[0]`` refers to axis 0, ``s[1]`` to axis 1, etc.). `s` is also the\n        number of input points used along this axis, except for the last axis,\n        where ``s[-1]//2+1`` points of the input are used.\n        Along any axis, if the shape indicated by `s` is smaller than that of\n        the input, the input is cropped.  If it is larger, the input is padded\n        with zeros. If `s` is not given, the shape of the input (along the\n        axes specified by `axes`) is used.\n    axes : sequence of ints, optional\n        Axes over which to compute the inverse FFT. If not given, the last\n        `len(s)` axes are used, or all axes if `s` is also not specified.\n        Repeated indices in `axes` means that the inverse transform over that\n        axis is performed multiple times.\n\n    Returns\n    -------\n    out : ndarray\n        The truncated or zero-padded input, transformed along the axes\n        indicated by `axes`, or by a combination of `s` or `a`,\n        as explained in the parameters section above.\n        The length of each transformed axis is as given by the corresponding\n        element of `s`, or the length of the input in every axis except for the\n        last one if `s` is not given.  In the final transformed axis the length\n        of the output when `s` is not given is ``2*(m-1)`` where `m` is the\n        length of the final transformed axis of the input.  To get an odd\n        number of output points in the final axis, `s` must be specified.\n\n    Raises\n    ------\n    ValueError\n        If `s` and `axes` have different length.\n    IndexError\n        If an element of `axes` is larger than than the number of axes of `a`.\n\n    See Also\n    --------\n    rfftn : The forward n-dimensional FFT of real input,\n            of which `ifftn` is the inverse.\n    fft : The one-dimensional FFT, with definitions and conventions used.\n    irfft : The inverse of the one-dimensional FFT of real input.\n    irfft2 : The inverse of the two-dimensional FFT of real input.\n\n    Notes\n    -----\n    See `fft` for definitions and conventions used.\n\n    See `rfft` for definitions and conventions used for real input.\n\n    Examples\n    --------\n    >>> a = np.zeros((3, 2, 2))\n    >>> a[0, 0, 0] = 3 * 2 * 2\n    >>> np.fft.irfftn(a)\n    array([[[ 1.,  1.],\n            [ 1.,  1.]],\n           [[ 1.,  1.],\n            [ 1.,  1.]],\n           [[ 1.,  1.],\n            [ 1.,  1.]]])\n\n    '),
               ('numpy.fft.fftpack.irfft2',
                ['a', 's=None', 'axes=(-2, -1)'],
                '\n    Compute the 2-dimensional inverse FFT of a real array.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array\n    s : sequence of ints, optional\n        Shape of the inverse FFT.\n    axes : sequence of ints, optional\n        The axes over which to compute the inverse fft.\n        Default is the last two axes.\n\n    Returns\n    -------\n    out : ndarray\n        The result of the inverse real 2-D FFT.\n\n    See Also\n    --------\n    irfftn : Compute the inverse of the N-dimensional FFT of real input.\n\n    Notes\n    -----\n    This is really `irfftn` with different defaults.\n    For more details see `irfftn`.\n\n    '),
               ('numpy.fft.helper.fftshift',
                ['x', 'axes=None'],
                '\n    Shift the zero-frequency component to the center of the spectrum.\n\n    This function swaps half-spaces for all axes listed (defaults to all).\n    Note that ``y[0]`` is the Nyquist component only if ``len(x)`` is even.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    axes : int or shape tuple, optional\n        Axes over which to shift.  Default is None, which shifts all axes.\n\n    Returns\n    -------\n    y : ndarray\n        The shifted array.\n\n    See Also\n    --------\n    ifftshift : The inverse of `fftshift`.\n\n    Examples\n    --------\n    >>> freqs = np.fft.fftfreq(10, 0.1)\n    >>> freqs\n    array([ 0.,  1.,  2.,  3.,  4., -5., -4., -3., -2., -1.])\n    >>> np.fft.fftshift(freqs)\n    array([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n\n    Shift the zero-frequency component only along the second axis:\n\n    >>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)\n    >>> freqs\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4., -4.],\n           [-3., -2., -1.]])\n    >>> np.fft.fftshift(freqs, axes=(1,))\n    array([[ 2.,  0.,  1.],\n           [-4.,  3.,  4.],\n           [-1., -3., -2.]])\n\n    '),
               ('numpy.fft.helper.ifftshift',
                ['x', 'axes=None'],
                '\n    The inverse of fftshift.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.\n    axes : int or shape tuple, optional\n        Axes over which to calculate.  Defaults to None, which shifts all axes.\n\n    Returns\n    -------\n    y : ndarray\n        The shifted array.\n\n    See Also\n    --------\n    fftshift : Shift zero-frequency component to the center of the spectrum.\n\n    Examples\n    --------\n    >>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)\n    >>> freqs\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4., -4.],\n           [-3., -2., -1.]])\n    >>> np.fft.ifftshift(np.fft.fftshift(freqs))\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4., -4.],\n           [-3., -2., -1.]])\n\n    '),
               ('numpy.fft.helper.fftfreq',
                ['n', 'd=1.0'],
                '\n    Return the Discrete Fourier Transform sample frequencies.\n\n    The returned float array contains the frequency bins in\n    cycles/unit (with zero at the start) given a window length `n` and a\n    sample spacing `d`::\n\n      f = [0, 1, ..., n/2-1, -n/2, ..., -1] / (d*n)         if n is even\n      f = [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)   if n is odd\n\n    Parameters\n    ----------\n    n : int\n        Window length.\n    d : scalar\n        Sample spacing.\n\n    Returns\n    -------\n    out : ndarray\n        The array of length `n`, containing the sample frequencies.\n\n    Examples\n    --------\n    >>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5], dtype=float)\n    >>> fourier = np.fft.fft(signal)\n    >>> n = signal.size\n    >>> timestep = 0.1\n    >>> freq = np.fft.fftfreq(n, d=timestep)\n    >>> freq\n    array([ 0.  ,  1.25,  2.5 ,  3.75, -5.  , -3.75, -2.5 , -1.25])\n\n    '),
               ('numpy.fft.setupscons.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.fft.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('test_helper.random', ['size'], ''),
               ('test_fftpack.fft1', ['x'], ''),
               ('numpy.linalg.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.linalg.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.linalg.linalg._makearray', ['a'], ''),
               ('numpy.linalg.linalg.isComplexType', ['t'], ''),
               ('numpy.linalg.linalg._realType', ['t', 'default=double'], ''),
               ('numpy.linalg.linalg._complexType', ['t', 'default=cdouble'], ''),
               ('numpy.linalg.linalg._linalgRealType',
                ['t'],
                'Cast the type t to either double or cdouble.'),
               ('numpy.linalg.linalg._commonType', ['*arrays'], ''),
               ('numpy.linalg.linalg._to_native_byte_order', ['*arrays'], ''),
               ('numpy.linalg.linalg._fastCopyAndTranspose', ['type', '*arrays'], ''),
               ('numpy.linalg.linalg._assertRank2', ['*arrays'], ''),
               ('numpy.linalg.linalg._assertSquareness', ['*arrays'], ''),
               ('numpy.linalg.linalg._assertFinite', ['*arrays'], ''),
               ('numpy.linalg.linalg._assertNonEmpty', ['*arrays'], ''),
               ('numpy.linalg.linalg.tensorsolve',
                ['a', 'b', 'axes=None'],
                "\n    Solve the tensor equation ``a x = b`` for x.\n\n    It is assumed that all indices of `x` are summed over in the product,\n    together with the rightmost indices of `a`, as is done in, for example,\n    ``tensordot(a, x, axes=len(b.shape))``.\n\n    Parameters\n    ----------\n    a : array_like\n        Coefficient tensor, of shape ``b.shape + Q``. `Q`, a tuple, equals\n        the shape of that sub-tensor of `a` consisting of the appropriate\n        number of its rightmost indices, and must be such that\n       ``prod(Q) == prod(b.shape)`` (in which sense `a` is said to be\n       'square').\n    b : array_like\n        Right-hand tensor, which can be of any shape.\n    axes : tuple of ints, optional\n        Axes in `a` to reorder to the right, before inversion.\n        If None (default), no reordering is done.\n\n    Returns\n    -------\n    x : ndarray, shape Q\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not 'square' (in the above sense).\n\n    See Also\n    --------\n    tensordot, tensorinv, einsum\n\n    Examples\n    --------\n    >>> a = np.eye(2*3*4)\n    >>> a.shape = (2*3, 4, 2, 3, 4)\n    >>> b = np.random.randn(2*3, 4)\n    >>> x = np.linalg.tensorsolve(a, b)\n    >>> x.shape\n    (2, 3, 4)\n    >>> np.allclose(np.tensordot(a, x, axes=3), b)\n    True\n\n    "),
               ('numpy.linalg.linalg.solve',
                ['a', 'b'],
                '\n    Solve a linear matrix equation, or system of linear scalar equations.\n\n    Computes the "exact" solution, `x`, of the well-determined, i.e., full\n    rank, linear matrix equation `ax = b`.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        Coefficient matrix.\n    b : array_like, shape (M,) or (M, N)\n        Ordinate or "dependent variable" values.\n\n    Returns\n    -------\n    x : ndarray, shape (M,) or (M, N) depending on b\n        Solution to the system a x = b\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not square.\n\n    Notes\n    -----\n    `solve` is a wrapper for the LAPACK routines `dgesv`_ and\n    `zgesv`_, the former being used if `a` is real-valued, the latter if\n    it is complex-valued.  The solution to the system of linear equations\n    is computed using an LU decomposition [1]_ with partial pivoting and\n    row interchanges.\n\n    .. _dgesv: http://www.netlib.org/lapack/double/dgesv.f\n\n    .. _zgesv: http://www.netlib.org/lapack/complex16/zgesv.f\n\n    `a` must be square and of full-rank, i.e., all rows (or, equivalently,\n    columns) must be linearly independent; if either is not true, use\n    `lstsq` for the least-squares best "solution" of the\n    system/equation.\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n           FL, Academic Press, Inc., 1980, pg. 22.\n\n    Examples\n    --------\n    Solve the system of equations ``3 * x0 + x1 = 9`` and ``x0 + 2 * x1 = 8``:\n\n    >>> a = np.array([[3,1], [1,2]])\n    >>> b = np.array([9,8])\n    >>> x = np.linalg.solve(a, b)\n    >>> x\n    array([ 2.,  3.])\n\n    Check that the solution is correct:\n\n    >>> (np.dot(a, x) == b).all()\n    True\n\n    '),
               ('numpy.linalg.linalg.tensorinv',
                ['a', 'ind=2'],
                '\n    Compute the \'inverse\' of an N-dimensional array.\n\n    The result is an inverse for `a` relative to the tensordot operation\n    ``tensordot(a, b, ind)``, i. e., up to floating-point accuracy,\n    ``tensordot(tensorinv(a), a, ind)`` is the "identity" tensor for the\n    tensordot operation.\n\n    Parameters\n    ----------\n    a : array_like\n        Tensor to \'invert\'. Its shape must be \'square\', i. e.,\n        ``prod(a.shape[:ind]) == prod(a.shape[ind:])``.\n    ind : int, optional\n        Number of first indices that are involved in the inverse sum.\n        Must be a positive integer, default is 2.\n\n    Returns\n    -------\n    b : ndarray\n        `a`\'s tensordot inverse, shape ``a.shape[:ind] + a.shape[ind:]``.\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not \'square\' (in the above sense).\n\n    See Also\n    --------\n    tensordot, tensorsolve\n\n    Examples\n    --------\n    >>> a = np.eye(4*6)\n    >>> a.shape = (4, 6, 8, 3)\n    >>> ainv = np.linalg.tensorinv(a, ind=2)\n    >>> ainv.shape\n    (8, 3, 4, 6)\n    >>> b = np.random.randn(4, 6)\n    >>> np.allclose(np.tensordot(ainv, b), np.linalg.tensorsolve(a, b))\n    True\n\n    >>> a = np.eye(4*6)\n    >>> a.shape = (24, 8, 3)\n    >>> ainv = np.linalg.tensorinv(a, ind=1)\n    >>> ainv.shape\n    (8, 3, 24)\n    >>> b = np.random.randn(24)\n    >>> np.allclose(np.tensordot(ainv, b, 1), np.linalg.tensorsolve(a, b))\n    True\n\n    '),
               ('numpy.linalg.linalg.inv',
                ['a'],
                '\n    Compute the (multiplicative) inverse of a matrix.\n\n    Given a square matrix `a`, return the matrix `ainv` satisfying\n    ``dot(a, ainv) = dot(ainv, a) = eye(a.shape[0])``.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        Matrix to be inverted.\n\n    Returns\n    -------\n    ainv : ndarray or matrix, shape (M, M)\n        (Multiplicative) inverse of the matrix `a`.\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not square.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1., 2.], [3., 4.]])\n    >>> ainv = LA.inv(a)\n    >>> np.allclose(np.dot(a, ainv), np.eye(2))\n    True\n    >>> np.allclose(np.dot(ainv, a), np.eye(2))\n    True\n\n    If a is a matrix object, then the return value is a matrix as well:\n\n    >>> ainv = LA.inv(np.matrix(a))\n    >>> ainv\n    matrix([[-2. ,  1. ],\n            [ 1.5, -0.5]])\n\n    '),
               ('numpy.linalg.linalg.cholesky',
                ['a'],
                '\n    Cholesky decomposition.\n\n    Return the Cholesky decomposition, `L * L.H`, of the square matrix `a`,\n    where `L` is lower-triangular and .H is the conjugate transpose operator\n    (which is the ordinary transpose if `a` is real-valued).  `a` must be\n    Hermitian (symmetric if real-valued) and positive-definite.  Only `L` is\n    actually returned.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        Hermitian (symmetric if all elements are real), positive-definite\n        input matrix.\n\n    Returns\n    -------\n    L : ndarray, or matrix object if `a` is, shape (M, M)\n        Lower-triangular Cholesky factor of a.\n\n    Raises\n    ------\n    LinAlgError\n       If the decomposition fails, for example, if `a` is not\n       positive-definite.\n\n    Notes\n    -----\n    The Cholesky decomposition is often used as a fast way of solving\n\n    .. math:: A \\mathbf{x} = \\mathbf{b}\n\n    (when `A` is both Hermitian/symmetric and positive-definite).\n\n    First, we solve for :math:`\\mathbf{y}` in\n\n    .. math:: L \\mathbf{y} = \\mathbf{b},\n\n    and then for :math:`\\mathbf{x}` in\n\n    .. math:: L.H \\mathbf{x} = \\mathbf{y}.\n\n    Examples\n    --------\n    >>> A = np.array([[1,-2j],[2j,5]])\n    >>> A\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])\n    >>> L = np.linalg.cholesky(A)\n    >>> L\n    array([[ 1.+0.j,  0.+0.j],\n           [ 0.+2.j,  1.+0.j]])\n    >>> np.dot(L, L.T.conj()) # verify that L * L.H = A\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])\n    >>> A = [[1,-2j],[2j,5]] # what happens if A is only array_like?\n    >>> np.linalg.cholesky(A) # an ndarray object is returned\n    array([[ 1.+0.j,  0.+0.j],\n           [ 0.+2.j,  1.+0.j]])\n    >>> # But a matrix object is returned if A is a matrix object\n    >>> LA.cholesky(np.matrix(A))\n    matrix([[ 1.+0.j,  0.+0.j],\n            [ 0.+2.j,  1.+0.j]])\n\n    '),
               ('numpy.linalg.linalg.qr',
                ['a', "mode='full'"],
                "\n    Compute the qr factorization of a matrix.\n\n    Factor the matrix `a` as *qr*, where `q` is orthonormal and `r` is\n    upper-triangular.\n\n    Parameters\n    ----------\n    a : array_like\n        Matrix to be factored, of shape (M, N).\n    mode : {'full', 'r', 'economic'}, optional\n        Specifies the values to be returned. 'full' is the default.\n        Economic mode is slightly faster then 'r' mode if only `r` is needed.\n\n    Returns\n    -------\n    q : ndarray of float or complex, optional\n        The orthonormal matrix, of shape (M, K). Only returned if\n        ``mode='full'``.\n    r : ndarray of float or complex, optional\n        The upper-triangular matrix, of shape (K, N) with K = min(M, N).\n        Only returned when ``mode='full'`` or ``mode='r'``.\n    a2 : ndarray of float or complex, optional\n        Array of shape (M, N), only returned when ``mode='economic``'.\n        The  diagonal and the upper triangle of `a2` contains `r`, while\n        the rest of the matrix is undefined.\n\n    Raises\n    ------\n    LinAlgError\n        If factoring fails.\n\n    Notes\n    -----\n    This is an interface to the LAPACK routines dgeqrf, zgeqrf,\n    dorgqr, and zungqr.\n\n    For more information on the qr factorization, see for example:\n    http://en.wikipedia.org/wiki/QR_factorization\n\n    Subclasses of `ndarray` are preserved, so if `a` is of type `matrix`,\n    all the return values will be matrices too.\n\n    Examples\n    --------\n    >>> a = np.random.randn(9, 6)\n    >>> q, r = np.linalg.qr(a)\n    >>> np.allclose(a, np.dot(q, r))  # a does equal qr\n    True\n    >>> r2 = np.linalg.qr(a, mode='r')\n    >>> r3 = np.linalg.qr(a, mode='economic')\n    >>> np.allclose(r, r2)  # mode='r' returns the same r as mode='full'\n    True\n    >>> # But only triu parts are guaranteed equal when mode='economic'\n    >>> np.allclose(r, np.triu(r3[:6,:6], k=0))\n    True\n\n    Example illustrating a common use of `qr`: solving of least squares\n    problems\n\n    What are the least-squares-best `m` and `y0` in ``y = y0 + mx`` for\n    the following data: {(0,1), (1,0), (1,2), (2,1)}. (Graph the points\n    and you'll see that it should be y0 = 0, m = 1.)  The answer is provided\n    by solving the over-determined matrix equation ``Ax = b``, where::\n\n      A = array([[0, 1], [1, 1], [1, 1], [2, 1]])\n      x = array([[y0], [m]])\n      b = array([[1], [0], [2], [1]])\n\n    If A = qr such that q is orthonormal (which is always possible via\n    Gram-Schmidt), then ``x = inv(r) * (q.T) * b``.  (In numpy practice,\n    however, we simply use `lstsq`.)\n\n    >>> A = np.array([[0, 1], [1, 1], [1, 1], [2, 1]])\n    >>> A\n    array([[0, 1],\n           [1, 1],\n           [1, 1],\n           [2, 1]])\n    >>> b = np.array([1, 0, 2, 1])\n    >>> q, r = LA.qr(A)\n    >>> p = np.dot(q.T, b)\n    >>> np.dot(LA.inv(r), p)\n    array([  1.1e-16,   1.0e+00])\n\n    "),
               ('numpy.linalg.linalg.eigvals',
                ['a'],
                '\n    Compute the eigenvalues of a general matrix.\n\n    Main difference between `eigvals` and `eig`: the eigenvectors aren\'t\n    returned.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        A complex- or real-valued matrix whose eigenvalues will be computed.\n\n    Returns\n    -------\n    w : ndarray, shape (M,)\n        The eigenvalues, each repeated according to its multiplicity.\n        They are not necessarily ordered, nor are they necessarily\n        real for real matrices.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eig : eigenvalues and right eigenvectors of general arrays\n    eigvalsh : eigenvalues of symmetric or Hermitian arrays.\n    eigh : eigenvalues and eigenvectors of symmetric/Hermitian arrays.\n\n    Notes\n    -----\n    This is a simple interface to the LAPACK routines dgeev and zgeev\n    that sets those routines\' flags to return only the eigenvalues of\n    general real and complex arrays, respectively.\n\n    Examples\n    --------\n    Illustration, using the fact that the eigenvalues of a diagonal matrix\n    are its diagonal elements, that multiplying a matrix on the left\n    by an orthogonal matrix, `Q`, and on the right by `Q.T` (the transpose\n    of `Q`), preserves the eigenvalues of the "middle" matrix.  In other words,\n    if `Q` is orthogonal, then ``Q * A * Q.T`` has the same eigenvalues as\n    ``A``:\n\n    >>> from numpy import linalg as LA\n    >>> x = np.random.random()\n    >>> Q = np.array([[np.cos(x), -np.sin(x)], [np.sin(x), np.cos(x)]])\n    >>> LA.norm(Q[0, :]), LA.norm(Q[1, :]), np.dot(Q[0, :],Q[1, :])\n    (1.0, 1.0, 0.0)\n\n    Now multiply a diagonal matrix by Q on one side and by Q.T on the other:\n\n    >>> D = np.diag((-1,1))\n    >>> LA.eigvals(D)\n    array([-1.,  1.])\n    >>> A = np.dot(Q, D)\n    >>> A = np.dot(A, Q.T)\n    >>> LA.eigvals(A)\n    array([ 1., -1.])\n\n    '),
               ('numpy.linalg.linalg.eigvalsh',
                ['a', "UPLO='L'"],
                "\n    Compute the eigenvalues of a Hermitian or real symmetric matrix.\n\n    Main difference from eigh: the eigenvectors are not computed.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        A complex- or real-valued matrix whose eigenvalues are to be\n        computed.\n    UPLO : {'L', 'U'}, optional\n        Specifies whether the calculation is done with the lower triangular\n        part of `a` ('L', default) or the upper triangular part ('U').\n\n    Returns\n    -------\n    w : ndarray, shape (M,)\n        The eigenvalues, not necessarily ordered, each repeated according to\n        its multiplicity.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigh : eigenvalues and eigenvectors of symmetric/Hermitian arrays.\n    eigvals : eigenvalues of general real or complex arrays.\n    eig : eigenvalues and right eigenvectors of general real or complex\n          arrays.\n\n    Notes\n    -----\n    This is a simple interface to the LAPACK routines dsyevd and zheevd\n    that sets those routines' flags to return only the eigenvalues of\n    real symmetric and complex Hermitian arrays, respectively.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1, -2j], [2j, 5]])\n    >>> LA.eigvalsh(a)\n    array([ 0.17157288+0.j,  5.82842712+0.j])\n\n    "),
               ('numpy.linalg.linalg._convertarray', ['a'], ''),
               ('numpy.linalg.linalg.eig',
                ['a'],
                '\n    Compute the eigenvalues and right eigenvectors of a square array.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        A square array of real or complex elements.\n\n    Returns\n    -------\n    w : ndarray, shape (M,)\n        The eigenvalues, each repeated according to its multiplicity.\n        The eigenvalues are not necessarily ordered, nor are they\n        necessarily real for real arrays (though for real arrays\n        complex-valued eigenvalues should occur in conjugate pairs).\n\n    v : ndarray, shape (M, M)\n        The normalized (unit "length") eigenvectors, such that the\n        column ``v[:,i]`` is the eigenvector corresponding to the\n        eigenvalue ``w[i]``.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigvalsh : eigenvalues of a symmetric or Hermitian (conjugate symmetric)\n       array.\n\n    eigvals : eigenvalues of a non-symmetric array.\n\n    Notes\n    -----\n    This is a simple interface to the LAPACK routines dgeev and zgeev\n    which compute the eigenvalues and eigenvectors of, respectively,\n    general real- and complex-valued square arrays.\n\n    The number `w` is an eigenvalue of `a` if there exists a vector\n    `v` such that ``dot(a,v) = w * v``. Thus, the arrays `a`, `w`, and\n    `v` satisfy the equations ``dot(a[i,:], v[i]) = w[i] * v[:,i]``\n    for :math:`i \\in \\{0,...,M-1\\}`.\n\n    The array `v` of eigenvectors may not be of maximum rank, that is, some\n    of the columns may be linearly dependent, although round-off error may\n    obscure that fact. If the eigenvalues are all different, then theoretically\n    the eigenvectors are linearly independent. Likewise, the (complex-valued)\n    matrix of eigenvectors `v` is unitary if the matrix `a` is normal, i.e.,\n    if ``dot(a, a.H) = dot(a.H, a)``, where `a.H` denotes the conjugate\n    transpose of `a`.\n\n    Finally, it is emphasized that `v` consists of the *right* (as in\n    right-hand side) eigenvectors of `a`.  A vector `y` satisfying\n    ``dot(y.T, a) = z * y.T`` for some number `z` is called a *left*\n    eigenvector of `a`, and, in general, the left and right eigenvectors\n    of a matrix are not necessarily the (perhaps conjugate) transposes\n    of each other.\n\n    References\n    ----------\n    G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando, FL,\n    Academic Press, Inc., 1980, Various pp.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n\n    (Almost) trivial example with real e-values and e-vectors.\n\n    >>> w, v = LA.eig(np.diag((1, 2, 3)))\n    >>> w; v\n    array([ 1.,  2.,  3.])\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n\n    Real matrix possessing complex e-values and e-vectors; note that the\n    e-values are complex conjugates of each other.\n\n    >>> w, v = LA.eig(np.array([[1, -1], [1, 1]]))\n    >>> w; v\n    array([ 1. + 1.j,  1. - 1.j])\n    array([[ 0.70710678+0.j        ,  0.70710678+0.j        ],\n           [ 0.00000000-0.70710678j,  0.00000000+0.70710678j]])\n\n    Complex-valued matrix with real e-values (but complex-valued e-vectors);\n    note that a.conj().T = a, i.e., a is Hermitian.\n\n    >>> a = np.array([[1, 1j], [-1j, 1]])\n    >>> w, v = LA.eig(a)\n    >>> w; v\n    array([  2.00000000e+00+0.j,   5.98651912e-36+0.j]) # i.e., {2, 0}\n    array([[ 0.00000000+0.70710678j,  0.70710678+0.j        ],\n           [ 0.70710678+0.j        ,  0.00000000+0.70710678j]])\n\n    Be careful about round-off error!\n\n    >>> a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]])\n    >>> # Theor. e-values are 1 +/- 1e-9\n    >>> w, v = LA.eig(a)\n    >>> w; v\n    array([ 1.,  1.])\n    array([[ 1.,  0.],\n           [ 0.,  1.]])\n\n    '),
               ('numpy.linalg.linalg.eigh',
                ['a', "UPLO='L'"],
                "\n    Return the eigenvalues and eigenvectors of a Hermitian or symmetric matrix.\n\n    Returns two objects, a 1-D array containing the eigenvalues of `a`, and\n    a 2-D square array or matrix (depending on the input type) of the\n    corresponding eigenvectors (in columns).\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        A complex Hermitian or real symmetric matrix.\n    UPLO : {'L', 'U'}, optional\n        Specifies whether the calculation is done with the lower triangular\n        part of `a` ('L', default) or the upper triangular part ('U').\n\n    Returns\n    -------\n    w : ndarray, shape (M,)\n        The eigenvalues, not necessarily ordered.\n    v : ndarray, or matrix object if `a` is, shape (M, M)\n        The column ``v[:, i]`` is the normalized eigenvector corresponding\n        to the eigenvalue ``w[i]``.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigvalsh : eigenvalues of symmetric or Hermitian arrays.\n    eig : eigenvalues and right eigenvectors for non-symmetric arrays.\n    eigvals : eigenvalues of non-symmetric arrays.\n\n    Notes\n    -----\n    This is a simple interface to the LAPACK routines dsyevd and zheevd,\n    which compute the eigenvalues and eigenvectors of real symmetric and\n    complex Hermitian arrays, respectively.\n\n    The eigenvalues of real symmetric or complex Hermitian matrices are\n    always real. [1]_ The array `v` of (column) eigenvectors is unitary\n    and `a`, `w`, and `v` satisfy the equations\n    ``dot(a, v[:, i]) = w[i] * v[:, i]``.\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n           FL, Academic Press, Inc., 1980, pg. 222.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1, -2j], [2j, 5]])\n    >>> a\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])\n    >>> w, v = LA.eigh(a)\n    >>> w; v\n    array([ 0.17157288,  5.82842712])\n    array([[-0.92387953+0.j        , -0.38268343+0.j        ],\n           [ 0.00000000+0.38268343j,  0.00000000-0.92387953j]])\n\n    >>> np.dot(a, v[:, 0]) - w[0] * v[:, 0] # verify 1st e-val/vec pair\n    array([2.77555756e-17 + 0.j, 0. + 1.38777878e-16j])\n    >>> np.dot(a, v[:, 1]) - w[1] * v[:, 1] # verify 2nd e-val/vec pair\n    array([ 0.+0.j,  0.+0.j])\n\n    >>> A = np.matrix(a) # what happens if input is a matrix object\n    >>> A\n    matrix([[ 1.+0.j,  0.-2.j],\n            [ 0.+2.j,  5.+0.j]])\n    >>> w, v = LA.eigh(A)\n    >>> w; v\n    array([ 0.17157288,  5.82842712])\n    matrix([[-0.92387953+0.j        , -0.38268343+0.j        ],\n            [ 0.00000000+0.38268343j,  0.00000000-0.92387953j]])\n\n    "),
               ('numpy.linalg.linalg.svd',
                ['a', 'full_matrices=1', 'compute_uv=1'],
                "\n    Singular Value Decomposition.\n\n    Factors the matrix `a` as ``u * np.diag(s) * v``, where `u` and `v`\n    are unitary and `s` is a 1-d array of `a`'s singular values.\n\n    Parameters\n    ----------\n    a : array_like\n        A real or complex matrix of shape (`M`, `N`) .\n    full_matrices : bool, optional\n        If True (default), `u` and `v` have the shapes (`M`, `M`) and\n        (`N`, `N`), respectively.  Otherwise, the shapes are (`M`, `K`)\n        and (`K`, `N`), respectively, where `K` = min(`M`, `N`).\n    compute_uv : bool, optional\n        Whether or not to compute `u` and `v` in addition to `s`.  True\n        by default.\n\n    Returns\n    -------\n    u : ndarray\n        Unitary matrix.  The shape of `u` is (`M`, `M`) or (`M`, `K`)\n        depending on value of ``full_matrices``.\n    s : ndarray\n        The singular values, sorted so that ``s[i] >= s[i+1]``.  `s` is\n        a 1-d array of length min(`M`, `N`).\n    v : ndarray\n        Unitary matrix of shape (`N`, `N`) or (`K`, `N`), depending on\n        ``full_matrices``.\n\n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n\n    Notes\n    -----\n    The SVD is commonly written as ``a = U S V.H``.  The `v` returned\n    by this function is ``V.H`` and ``u = U``.\n\n    If ``U`` is a unitary matrix, it means that it\n    satisfies ``U.H = inv(U)``.\n\n    The rows of `v` are the eigenvectors of ``a.H a``. The columns\n    of `u` are the eigenvectors of ``a a.H``.  For row ``i`` in\n    `v` and column ``i`` in `u`, the corresponding eigenvalue is\n    ``s[i]**2``.\n\n    If `a` is a `matrix` object (as opposed to an `ndarray`), then so\n    are all the return values.\n\n    Examples\n    --------\n    >>> a = np.random.randn(9, 6) + 1j*np.random.randn(9, 6)\n\n    Reconstruction based on full SVD:\n\n    >>> U, s, V = np.linalg.svd(a, full_matrices=True)\n    >>> U.shape, V.shape, s.shape\n    ((9, 6), (6, 6), (6,))\n    >>> S = np.zeros((9, 6), dtype=complex)\n    >>> S[:6, :6] = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, V)))\n    True\n\n    Reconstruction based on reduced SVD:\n\n    >>> U, s, V = np.linalg.svd(a, full_matrices=False)\n    >>> U.shape, V.shape, s.shape\n    ((9, 6), (6, 6), (6,))\n    >>> S = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, V)))\n    True\n\n    "),
               ('numpy.linalg.linalg.cond',
                ['x', 'p=None'],
                "\n    Compute the condition number of a matrix.\n\n    This function is capable of returning the condition number using\n    one of seven different norms, depending on the value of `p` (see\n    Parameters below).\n\n    Parameters\n    ----------\n    x : array_like, shape (M, N)\n        The matrix whose condition number is sought.\n    p : {None, 1, -1, 2, -2, inf, -inf, 'fro'}, optional\n        Order of the norm:\n\n        =====  ============================\n        p      norm for matrices\n        =====  ============================\n        None   2-norm, computed directly using the ``SVD``\n        'fro'  Frobenius norm\n        inf    max(sum(abs(x), axis=1))\n        -inf   min(sum(abs(x), axis=1))\n        1      max(sum(abs(x), axis=0))\n        -1     min(sum(abs(x), axis=0))\n        2      2-norm (largest sing. value)\n        -2     smallest singular value\n        =====  ============================\n\n        inf means the numpy.inf object, and the Frobenius norm is\n        the root-of-sum-of-squares norm.\n\n    Returns\n    -------\n    c : {float, inf}\n        The condition number of the matrix. May be infinite.\n\n    See Also\n    --------\n    numpy.linalg.linalg.norm\n\n    Notes\n    -----\n    The condition number of `x` is defined as the norm of `x` times the\n    norm of the inverse of `x` [1]_; the norm can be the usual L2-norm\n    (root-of-sum-of-squares) or one of a number of other matrix norms.\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, Orlando, FL,\n           Academic Press, Inc., 1980, pg. 285.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])\n    >>> a\n    array([[ 1,  0, -1],\n           [ 0,  1,  0],\n           [ 1,  0,  1]])\n    >>> LA.cond(a)\n    1.4142135623730951\n    >>> LA.cond(a, 'fro')\n    3.1622776601683795\n    >>> LA.cond(a, np.inf)\n    2.0\n    >>> LA.cond(a, -np.inf)\n    1.0\n    >>> LA.cond(a, 1)\n    2.0\n    >>> LA.cond(a, -1)\n    1.0\n    >>> LA.cond(a, 2)\n    1.4142135623730951\n    >>> LA.cond(a, -2)\n    0.70710678118654746\n    >>> min(LA.svd(a, compute_uv=0))*min(LA.svd(LA.inv(a), compute_uv=0))\n    0.70710678118654746\n\n    "),
               ('numpy.linalg.linalg.matrix_rank',
                ['M', 'tol=None'],
                '\n    Return matrix rank of array using SVD method\n\n    Rank of the array is the number of SVD singular values of the\n    array that are greater than `tol`.\n\n    Parameters\n    ----------\n    M : array_like\n        array of <=2 dimensions\n    tol : {None, float}\n       threshold below which SVD values are considered zero. If `tol` is\n       None, and ``S`` is an array with singular values for `M`, and\n       ``eps`` is the epsilon value for datatype of ``S``, then `tol` is\n       set to ``S.max() * eps``.\n\n    Notes\n    -----\n    Golub and van Loan [1]_ define "numerical rank deficiency" as using\n    tol=eps*S[0] (where S[0] is the maximum singular value and thus the\n    2-norm of the matrix). This is one definition of rank deficiency,\n    and the one we use here.  When floating point roundoff is the main\n    concern, then "numerical rank deficiency" is a reasonable choice. In\n    some cases you may prefer other definitions. The most useful measure\n    of the tolerance depends on the operations you intend to use on your\n    matrix. For example, if your data come from uncertain measurements\n    with uncertainties greater than floating point epsilon, choosing a\n    tolerance near that uncertainty may be preferable.  The tolerance\n    may be absolute if the uncertainties are absolute rather than\n    relative.\n\n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*.\n       Baltimore: Johns Hopkins University Press, 1996.\n\n    Examples\n    --------\n    >>> matrix_rank(np.eye(4)) # Full rank matrix\n    4\n    >>> I=np.eye(4); I[-1,-1] = 0. # rank deficient matrix\n    >>> matrix_rank(I)\n    3\n    >>> matrix_rank(np.ones((4,))) # 1 dimension - rank 1 unless all 0\n    1\n    >>> matrix_rank(np.zeros((4,)))\n    0\n\n    '),
               ('numpy.linalg.linalg.pinv',
                ['a', 'rcond=1e-15'],
                '\n    Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n\n    Calculate the generalized inverse of a matrix using its\n    singular-value decomposition (SVD) and including all\n    *large* singular values.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, N)\n      Matrix to be pseudo-inverted.\n    rcond : float\n      Cutoff for small singular values.\n      Singular values smaller (in modulus) than\n      `rcond` * largest_singular_value (again, in modulus)\n      are set to zero.\n\n    Returns\n    -------\n    B : ndarray, shape (N, M)\n      The pseudo-inverse of `a`. If `a` is a `matrix` instance, then so\n      is `B`.\n\n    Raises\n    ------\n    LinAlgError\n      If the SVD computation does not converge.\n\n    Notes\n    -----\n    The pseudo-inverse of a matrix A, denoted :math:`A^+`, is\n    defined as: "the matrix that \'solves\' [the least-squares problem]\n    :math:`Ax = b`," i.e., if :math:`\\bar{x}` is said solution, then\n    :math:`A^+` is that matrix such that :math:`\\bar{x} = A^+b`.\n\n    It can be shown that if :math:`Q_1 \\Sigma Q_2^T = A` is the singular\n    value decomposition of A, then\n    :math:`A^+ = Q_2 \\Sigma^+ Q_1^T`, where :math:`Q_{1,2}` are\n    orthogonal matrices, :math:`\\Sigma` is a diagonal matrix consisting\n    of A\'s so-called singular values, (followed, typically, by\n    zeros), and then :math:`\\Sigma^+` is simply the diagonal matrix\n    consisting of the reciprocals of A\'s singular values\n    (again, followed by zeros). [1]_\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n           FL, Academic Press, Inc., 1980, pp. 139-142.\n\n    Examples\n    --------\n    The following example checks that ``a * a+ * a == a`` and\n    ``a+ * a * a+ == a+``:\n\n    >>> a = np.random.randn(9, 6)\n    >>> B = np.linalg.pinv(a)\n    >>> np.allclose(a, np.dot(a, np.dot(B, a)))\n    True\n    >>> np.allclose(B, np.dot(B, np.dot(a, B)))\n    True\n\n    '),
               ('numpy.linalg.linalg.slogdet',
                ['a'],
                '\n    Compute the sign and (natural) logarithm of the determinant of an array.\n\n    If an array has a very small or very large determinant, than a call to\n    `det` may overflow or underflow. This routine is more robust against such\n    issues, because it computes the logarithm of the determinant rather than\n    the determinant itself.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, has to be a square 2-D array.\n\n    Returns\n    -------\n    sign : float or complex\n        A number representing the sign of the determinant. For a real matrix,\n        this is 1, 0, or -1. For a complex matrix, this is a complex number\n        with absolute value 1 (i.e., it is on the unit circle), or else 0.\n    logdet : float\n        The natural log of the absolute value of the determinant.\n\n    If the determinant is zero, then `sign` will be 0 and `logdet` will be\n    -Inf. In all cases, the determinant is equal to ``sign * np.exp(logdet)``.\n\n    See Also\n    --------\n    det\n\n    Notes\n    -----\n    The determinant is computed via LU factorization using the LAPACK\n    routine z/dgetrf.\n\n    .. versionadded:: 1.6.0.\n\n    Examples\n    --------\n    The determinant of a 2-D array ``[[a, b], [c, d]]`` is ``ad - bc``:\n\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> (sign, logdet) = np.linalg.slogdet(a)\n    >>> (sign, logdet)\n    (-1, 0.69314718055994529)\n    >>> sign * np.exp(logdet)\n    -2.0\n\n    This routine succeeds where ordinary `det` does not:\n\n    >>> np.linalg.det(np.eye(500) * 0.1)\n    0.0\n    >>> np.linalg.slogdet(np.eye(500) * 0.1)\n    (1, -1151.2925464970228)\n\n    '),
               ('numpy.linalg.linalg.det',
                ['a'],
                '\n    Compute the determinant of an array.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, M)\n        Input array.\n\n    Returns\n    -------\n    det : ndarray\n        Determinant of `a`.\n\n    Notes\n    -----\n    The determinant is computed via LU factorization using the LAPACK\n    routine z/dgetrf.\n\n    Examples\n    --------\n    The determinant of a 2-D array [[a, b], [c, d]] is ad - bc:\n\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> np.linalg.det(a)\n    -2.0\n\n    See Also\n    --------\n    slogdet : Another way to representing the determinant, more suitable\n      for large matrices where underflow/overflow may occur.\n\n    '),
               ('numpy.linalg.linalg.lstsq',
                ['a', 'b', 'rcond=-1'],
                '\n    Return the least-squares solution to a linear matrix equation.\n\n    Solves the equation `a x = b` by computing a vector `x` that\n    minimizes the Euclidean 2-norm `|| b - a x ||^2`.  The equation may\n    be under-, well-, or over- determined (i.e., the number of\n    linearly independent rows of `a` can be less than, equal to, or\n    greater than its number of linearly independent columns).  If `a`\n    is square and of full rank, then `x` (but for round-off error) is\n    the "exact" solution of the equation.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, N)\n        "Coefficient" matrix.\n    b : array_like, shape (M,) or (M, K)\n        Ordinate or "dependent variable" values. If `b` is two-dimensional,\n        the least-squares solution is calculated for each of the `K` columns\n        of `b`.\n    rcond : float, optional\n        Cut-off ratio for small singular values of `a`.\n        Singular values are set to zero if they are smaller than `rcond`\n        times the largest singular value of `a`.\n\n    Returns\n    -------\n    x : ndarray, shape (N,) or (N, K)\n        Least-squares solution.  The shape of `x` depends on the shape of\n        `b`.\n    residues : ndarray, shape (), (1,), or (K,)\n        Sums of residues; squared Euclidean 2-norm for each column in\n        ``b - a*x``.\n        If the rank of `a` is < N or > M, this is an empty array.\n        If `b` is 1-dimensional, this is a (1,) shape array.\n        Otherwise the shape is (K,).\n    rank : int\n        Rank of matrix `a`.\n    s : ndarray, shape (min(M,N),)\n        Singular values of `a`.\n\n    Raises\n    ------\n    LinAlgError\n        If computation does not converge.\n\n    Notes\n    -----\n    If `b` is a matrix, then all array results are returned as matrices.\n\n    Examples\n    --------\n    Fit a line, ``y = mx + c``, through some noisy data-points:\n\n    >>> x = np.array([0, 1, 2, 3])\n    >>> y = np.array([-1, 0.2, 0.9, 2.1])\n\n    By examining the coefficients, we see that the line should have a\n    gradient of roughly 1 and cut the y-axis at, more or less, -1.\n\n    We can rewrite the line equation as ``y = Ap``, where ``A = [[x 1]]``\n    and ``p = [[m], [c]]``.  Now use `lstsq` to solve for `p`:\n\n    >>> A = np.vstack([x, np.ones(len(x))]).T\n    >>> A\n    array([[ 0.,  1.],\n           [ 1.,  1.],\n           [ 2.,  1.],\n           [ 3.,  1.]])\n\n    >>> m, c = np.linalg.lstsq(A, y)[0]\n    >>> print m, c\n    1.0 -0.95\n\n    Plot the data along with the fitted line:\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x, y, \'o\', label=\'Original data\', markersize=10)\n    >>> plt.plot(x, m*x + c, \'r\', label=\'Fitted line\')\n    >>> plt.legend()\n    >>> plt.show()\n\n    '),
               ('numpy.linalg.linalg.norm',
                ['x', 'ord=None'],
                "\n    Matrix or vector norm.\n\n    This function is able to return one of seven different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,) or (M, N)\n        Input array.\n    ord : {non-zero int, inf, -inf, 'fro'}, optional\n        Order of the norm (see table under ``Notes``). inf means numpy's\n        `inf` object.\n\n    Returns\n    -------\n    n : float\n        Norm of the matrix or vector.\n\n    Notes\n    -----\n    For values of ``ord <= 0``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n\n    The following norms can be calculated:\n\n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    inf    max(sum(abs(x), axis=1))      max(abs(x))\n    -inf   min(sum(abs(x), axis=1))      min(abs(x))\n    0      --                            sum(x != 0)\n    1      max(sum(abs(x), axis=0))      as below\n    -1     min(sum(abs(x), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(x)**ord)**(1./ord)\n    =====  ============================  ==========================\n\n    The Frobenius norm is given by [1]_:\n\n        :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n\n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.arange(9) - 4\n    >>> a\n    array([-4, -3, -2, -1,  0,  1,  2,  3,  4])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4, -3, -2],\n           [-1,  0,  1],\n           [ 2,  3,  4]])\n\n    >>> LA.norm(a)\n    7.745966692414834\n    >>> LA.norm(b)\n    7.745966692414834\n    >>> LA.norm(b, 'fro')\n    7.745966692414834\n    >>> LA.norm(a, np.inf)\n    4\n    >>> LA.norm(b, np.inf)\n    9\n    >>> LA.norm(a, -np.inf)\n    0\n    >>> LA.norm(b, -np.inf)\n    2\n\n    >>> LA.norm(a, 1)\n    20\n    >>> LA.norm(b, 1)\n    7\n    >>> LA.norm(a, -1)\n    -4.6566128774142013e-010\n    >>> LA.norm(b, -1)\n    6\n    >>> LA.norm(a, 2)\n    7.745966692414834\n    >>> LA.norm(b, 2)\n    7.3484692283495345\n\n    >>> LA.norm(a, -2)\n    nan\n    >>> LA.norm(b, -2)\n    1.8570331885190563e-016\n    >>> LA.norm(a, 3)\n    5.8480354764257312\n    >>> LA.norm(a, -3)\n    nan\n\n    "),
               ('test_linalg.ifthen', ['a', 'b'], ''),
               ('test_linalg.imply', ['a', 'b'], ''),
               ('test_linalg.assert_almost_equal', ['a', 'b', '**kw'], ''),
               ('test_linalg.test_matrix_rank', [], ''),
               ('numpy.testing.print_coercion_tables.print_cancast_table', ['ntypes'], ''),
               ('numpy.testing.print_coercion_tables.print_coercion_table',
                ['ntypes',
                 'inputfirstvalue',
                 'inputsecondvalue',
                 'firstarray',
                 'use_promote_types=False'],
                ''),
               ('numpy.testing.utils.assert_',
                ['val', "msg=''"],
                '\n    Assert that works in release mode.\n\n    The Python built-in ``assert`` does not work when executing code in\n    optimized mode (the ``-O`` flag) - no byte-code is generated for it.\n\n    For documentation on usage, refer to the Python documentation.\n\n    '),
               ('numpy.testing.utils.gisnan',
                ['x'],
                'like isnan, but always raise an error if type not supported instead of\n    returning a TypeError object.\n\n    Notes\n    -----\n    isnan and other ufunc sometimes return a NotImplementedType object instead\n    of raising any exception. This function is a wrapper to make sure an\n    exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.'),
               ('numpy.testing.utils.gisfinite',
                ['x'],
                'like isfinite, but always raise an error if type not supported instead of\n    returning a TypeError object.\n\n    Notes\n    -----\n    isfinite and other ufunc sometimes return a NotImplementedType object instead\n    of raising any exception. This function is a wrapper to make sure an\n    exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.'),
               ('numpy.testing.utils.gisinf',
                ['x'],
                'like isinf, but always raise an error if type not supported instead of\n    returning a TypeError object.\n\n    Notes\n    -----\n    isinf and other ufunc sometimes return a NotImplementedType object instead\n    of raising any exception. This function is a wrapper to make sure an\n    exception is always raised.\n\n    This should be removed once this problem is solved at the Ufunc level.'),
               ('numpy.testing.utils.rand',
                ['*args'],
                'Returns an array of random numbers with the given shape.\n\n    This only uses the standard library, so it is useful for testing purposes.\n    '),
               ('numpy.testing.utils.jiffies',
                ["_proc_pid_stat='/proc/%s/stat'%os.getpid()", '_load_time=[]'],
                ' Return number of jiffies (1/100ths of a second) that this\n    process has been scheduled in user mode. See man 5 proc. '),
               ('numpy.testing.utils.memusage',
                ["_proc_pid_stat='/proc/%s/stat'%os.getpid()"],
                ' Return virtual memory size in bytes of the running python.\n        '),
               ('numpy.testing.utils.jiffies',
                ['_load_time=[]'],
                ' Return number of jiffies (1/100ths of a second) that this\n    process has been scheduled in user mode. [Emulation with time.time]. '),
               ('numpy.testing.utils.memusage',
                [],
                ' Return memory usage of running python. [Not implemented]'),
               ('numpy.testing.utils.GetPerformanceAttributes',
                ['object', 'counter', 'instance=None', 'inum=-1', 'format=None', 'machine=None'],
                ''),
               ('numpy.testing.utils.memusage', ["processName='python'", 'instance=0'], ''),
               ('numpy.testing.utils.build_err_msg',
                ['arrays',
                 'err_msg',
                 "header='Items are not equal:'",
                 'verbose=True',
                 "names=('ACTUAL', 'DESIRED')"],
                ''),
               ('numpy.testing.utils.assert_equal',
                ['actual', 'desired', "err_msg=''", 'verbose=True'],
                "\n    Raise an assertion if two objects are not equal.\n\n    Given two objects (scalars, lists, tuples, dictionaries or numpy arrays),\n    check that all elements of these objects are equal. An exception is raised\n    at the first conflicting values.\n\n    Parameters\n    ----------\n    actual : array_like\n        The object to check.\n    desired : array_like\n        The expected object.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal.\n\n    Examples\n    --------\n    >>> np.testing.assert_equal([4,5], [4,6])\n    ...\n    <type 'exceptions.AssertionError'>:\n    Items are not equal:\n    item=1\n     ACTUAL: 5\n     DESIRED: 6\n\n    "),
               ('numpy.testing.utils.print_assert_equal',
                ['test_string', 'actual', 'desired'],
                "\n    Test if two objects are equal, and print an error message if test fails.\n\n    The test is performed with ``actual == desired``.\n\n    Parameters\n    ----------\n    test_string : str\n        The message supplied to AssertionError.\n    actual : object\n        The object to test for equality against `desired`.\n    desired : object\n        The expected result.\n\n    Examples\n    --------\n    >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 1])\n    >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 2])\n    Traceback (most recent call last):\n    ...\n    AssertionError: Test XYZ of func xyz failed\n    ACTUAL:\n    [0, 1]\n    DESIRED:\n    [0, 2]\n\n    "),
               ('numpy.testing.utils.assert_almost_equal',
                ['actual', 'desired', 'decimal=7', "err_msg=''", 'verbose=True'],
                "\n    Raise an assertion if two items are not equal up to desired precision.\n\n    .. note:: It is recommended to use one of `assert_allclose`,\n              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`\n              instead of this function for more consistent floating point\n              comparisons.\n\n    The test is equivalent to ``abs(desired-actual) < 0.5 * 10**(-decimal)``.\n\n    Given two objects (numbers or ndarrays), check that all elements of these\n    objects are almost equal. An exception is raised at conflicting values.\n    For ndarrays this delegates to assert_array_almost_equal\n\n    Parameters\n    ----------\n    actual : array_like\n        The object to check.\n    desired : array_like\n        The expected object.\n    decimal : int, optional\n        Desired precision, default is 7.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n      If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    >>> import numpy.testing as npt\n    >>> npt.assert_almost_equal(2.3333333333333, 2.33333334)\n    >>> npt.assert_almost_equal(2.3333333333333, 2.33333334, decimal=10)\n    ...\n    <type 'exceptions.AssertionError'>:\n    Items are not equal:\n     ACTUAL: 2.3333333333333002\n     DESIRED: 2.3333333399999998\n\n    >>> npt.assert_almost_equal(np.array([1.0,2.3333333333333]),\n    ...                         np.array([1.0,2.33333334]), decimal=9)\n    ...\n    <type 'exceptions.AssertionError'>:\n    Arrays are not almost equal\n    <BLANKLINE>\n    (mismatch 50.0%)\n     x: array([ 1.        ,  2.33333333])\n     y: array([ 1.        ,  2.33333334])\n\n    "),
               ('numpy.testing.utils.assert_approx_equal',
                ['actual', 'desired', 'significant=7', "err_msg=''", 'verbose=True'],
                "\n    Raise an assertion if two items are not equal up to significant digits.\n\n    .. note:: It is recommended to use one of `assert_allclose`,\n              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`\n              instead of this function for more consistent floating point\n              comparisons.\n\n    Given two numbers, check that they are approximately equal.\n    Approximately equal is defined as the number of significant digits\n    that agree.\n\n    Parameters\n    ----------\n    actual : scalar\n        The object to check.\n    desired : scalar\n        The expected object.\n    significant : int, optional\n        Desired precision, default is 7.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n      If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    >>> np.testing.assert_approx_equal(0.12345677777777e-20, 0.1234567e-20)\n    >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345671e-20,\n                                       significant=8)\n    >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345672e-20,\n                                       significant=8)\n    ...\n    <type 'exceptions.AssertionError'>:\n    Items are not equal to 8 significant digits:\n     ACTUAL: 1.234567e-021\n     DESIRED: 1.2345672000000001e-021\n\n    the evaluated condition that raises the exception is\n\n    >>> abs(0.12345670e-20/1e-21 - 0.12345672e-20/1e-21) >= 10**-(8-1)\n    True\n\n    "),
               ('numpy.testing.utils.assert_array_compare',
                ['comparison', 'x', 'y', "err_msg=''", 'verbose=True', "header=''"],
                ''),
               ('numpy.testing.utils.assert_array_equal',
                ['x', 'y', "err_msg=''", 'verbose=True'],
                "\n    Raise an assertion if two array_like objects are not equal.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of these objects are equal. An exception is raised at\n    shape mismatch or conflicting values. In contrast to the standard usage\n    in numpy, NaNs are compared like numbers, no assertion is raised if\n    both objects have NaNs in the same positions.\n\n    The usual caution for verifying equality with floating point numbers is\n    advised.\n\n    Parameters\n    ----------\n    x : array_like\n        The actual object to check.\n    y : array_like\n        The desired, expected object.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired objects are not equal.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    The first assert does not raise an exception:\n\n    >>> np.testing.assert_array_equal([1.0,2.33333,np.nan],\n    ...                               [np.exp(0),2.33333, np.nan])\n\n    Assert fails with numerical inprecision with floats:\n\n    >>> np.testing.assert_array_equal([1.0,np.pi,np.nan],\n    ...                               [1, np.sqrt(np.pi)**2, np.nan])\n    ...\n    <type 'exceptions.ValueError'>:\n    AssertionError:\n    Arrays are not equal\n    <BLANKLINE>\n    (mismatch 50.0%)\n     x: array([ 1.        ,  3.14159265,         NaN])\n     y: array([ 1.        ,  3.14159265,         NaN])\n\n    Use `assert_allclose` or one of the nulp (number of floating point values)\n    functions for these cases instead:\n\n    >>> np.testing.assert_allclose([1.0,np.pi,np.nan],\n    ...                            [1, np.sqrt(np.pi)**2, np.nan],\n    ...                            rtol=1e-10, atol=0)\n\n    "),
               ('numpy.testing.utils.assert_array_almost_equal',
                ['x', 'y', 'decimal=6', "err_msg=''", 'verbose=True'],
                "\n    Raise an assertion if two objects are not equal up to desired precision.\n\n    .. note:: It is recommended to use one of `assert_allclose`,\n              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`\n              instead of this function for more consistent floating point\n              comparisons.\n\n    The test verifies identical shapes and verifies values with\n    ``abs(desired-actual) < 0.5 * 10**(-decimal)``.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of these objects are almost equal. An exception is raised at\n    shape mismatch or conflicting values. In contrast to the standard usage\n    in numpy, NaNs are compared like numbers, no assertion is raised if\n    both objects have NaNs in the same positions.\n\n    Parameters\n    ----------\n    x : array_like\n        The actual object to check.\n    y : array_like\n        The desired, expected object.\n    decimal : int, optional\n        Desired precision, default is 6.\n    err_msg : str, optional\n      The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_allclose: Compare two array_like objects for equality with desired\n                     relative and/or absolute precision.\n    assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal\n\n    Examples\n    --------\n    the first assert does not raise an exception\n\n    >>> np.testing.assert_array_almost_equal([1.0,2.333,np.nan],\n                                             [1.0,2.333,np.nan])\n\n    >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],\n    ...                                      [1.0,2.33339,np.nan], decimal=5)\n    ...\n    <type 'exceptions.AssertionError'>:\n    AssertionError:\n    Arrays are not almost equal\n    <BLANKLINE>\n    (mismatch 50.0%)\n     x: array([ 1.     ,  2.33333,      NaN])\n     y: array([ 1.     ,  2.33339,      NaN])\n\n    >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],\n    ...                                      [1.0,2.33333, 5], decimal=5)\n    <type 'exceptions.ValueError'>:\n    ValueError:\n    Arrays are not almost equal\n     x: array([ 1.     ,  2.33333,      NaN])\n     y: array([ 1.     ,  2.33333,  5.     ])\n\n    "),
               ('numpy.testing.utils.assert_array_less',
                ['x', 'y', "err_msg=''", 'verbose=True'],
                "\n    Raise an assertion if two array_like objects are not ordered by less than.\n\n    Given two array_like objects, check that the shape is equal and all\n    elements of the first object are strictly smaller than those of the\n    second object. An exception is raised at shape mismatch or incorrectly\n    ordered values. Shape mismatch does not raise if an object has zero\n    dimension. In contrast to the standard usage in numpy, NaNs are\n    compared, no assertion is raised if both objects have NaNs in the same\n    positions.\n\n\n\n    Parameters\n    ----------\n    x : array_like\n      The smaller object to check.\n    y : array_like\n      The larger object to compare.\n    err_msg : string\n      The error message to be printed in case of failure.\n    verbose : bool\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n      If actual and desired objects are not equal.\n\n    See Also\n    --------\n    assert_array_equal: tests objects for equality\n    assert_array_almost_equal: test objects for equality up to precision\n\n\n\n    Examples\n    --------\n    >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1.1, 2.0, np.nan])\n    >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1, 2.0, np.nan])\n    ...\n    <type 'exceptions.ValueError'>:\n    Arrays are not less-ordered\n    (mismatch 50.0%)\n     x: array([  1.,   1.,  NaN])\n     y: array([  1.,   2.,  NaN])\n\n    >>> np.testing.assert_array_less([1.0, 4.0], 3)\n    ...\n    <type 'exceptions.ValueError'>:\n    Arrays are not less-ordered\n    (mismatch 50.0%)\n     x: array([ 1.,  4.])\n     y: array(3)\n\n    >>> np.testing.assert_array_less([1.0, 2.0, 3.0], [4])\n    ...\n    <type 'exceptions.ValueError'>:\n    Arrays are not less-ordered\n    (shapes (3,), (1,) mismatch)\n     x: array([ 1.,  2.,  3.])\n     y: array([4])\n\n    "),
               ('numpy.testing.utils.runstring', ['astr', 'dict'], ''),
               ('numpy.testing.utils.assert_string_equal',
                ['actual', 'desired'],
                '\n    Test if two strings are equal.\n\n    If the given strings are equal, `assert_string_equal` does nothing.\n    If they are not equal, an AssertionError is raised, and the diff\n    between the strings is shown.\n\n    Parameters\n    ----------\n    actual : str\n        The string to test for equality against the expected string.\n    desired : str\n        The expected string.\n\n    Examples\n    --------\n    >>> np.testing.assert_string_equal(\'abc\', \'abc\')\n    >>> np.testing.assert_string_equal(\'abc\', \'abcd\')\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n    ...\n    AssertionError: Differences in strings:\n    - abc+ abcd?    +\n\n    '),
               ('numpy.testing.utils.rundocs',
                ['filename=None', 'raise_on_error=True'],
                '\n    Run doctests found in the given file.\n\n    By default `rundocs` raises an AssertionError on failure.\n\n    Parameters\n    ----------\n    filename : str\n        The path to the file for which the doctests are run.\n    raise_on_error : bool\n        Whether to raise an AssertionError when a doctest fails. Default is\n        True.\n\n    Notes\n    -----\n    The doctests can be run by the user/developer by adding the ``doctests``\n    argument to the ``test()`` call. For example, to run all tests (including\n    doctests) for `numpy.lib`::\n\n      >>> np.lib.test(doctests=True)\n\n    '),
               ('numpy.testing.utils.raises', ['*args', '**kwargs'], ''),
               ('numpy.testing.utils.assert_raises',
                ['*args', '**kwargs'],
                '\n    assert_raises(exception_class, callable, *args, **kwargs)\n\n    Fail unless an exception of class exception_class is thrown\n    by callable when invoked with arguments args and keyword\n    arguments kwargs. If a different type of exception is\n    thrown, it will not be caught, and the test case will be\n    deemed to have suffered an error, exactly as for an\n    unexpected exception.\n\n    '),
               ('numpy.testing.utils.decorate_methods',
                ['cls', 'decorator', 'testmatch=None'],
                "\n    Apply a decorator to all methods in a class matching a regular expression.\n\n    The given decorator is applied to all public methods of `cls` that are\n    matched by the regular expression `testmatch`\n    (``testmatch.search(methodname)``). Methods that are private, i.e. start\n    with an underscore, are ignored.\n\n    Parameters\n    ----------\n    cls : class\n        Class whose methods to decorate.\n    decorator : function\n        Decorator to apply to methods\n    testmatch : compiled regexp or str, optional\n        The regular expression. Default value is None, in which case the\n        nose default (``re.compile(r'(?:^|[\\b_\\.%s-])[Tt]est' % os.sep)``)\n        is used.\n        If `testmatch` is a string, it is compiled to a regular expression\n        first.\n\n    "),
               ('numpy.testing.utils.measure',
                ['code_str', 'times=1', 'label=None'],
                '\n    Return elapsed time for executing code in the namespace of the caller.\n\n    The supplied code string is compiled with the Python builtin ``compile``.\n    The precision of the timing is 10 milli-seconds. If the code will execute\n    fast on this timescale, it can be executed many times to get reasonable\n    timing accuracy.\n\n    Parameters\n    ----------\n    code_str : str\n        The code to be timed.\n    times : int, optional\n        The number of times the code is executed. Default is 1. The code is\n        only compiled once.\n    label : str, optional\n        A label to identify `code_str` with. This is passed into ``compile``\n        as the second argument (for run-time error messages).\n\n    Returns\n    -------\n    elapsed : float\n        Total elapsed time in seconds for executing `code_str` `times` times.\n\n    Examples\n    --------\n    >>> etime = np.testing.measure(\'for i in range(1000): np.sqrt(i**2)\',\n    ...                            times=times)\n    >>> print "Time for a single execution : ", etime / times, "s"\n    Time for a single execution :  0.005 s\n\n    '),
               ('numpy.testing.utils._assert_valid_refcount',
                ['op'],
                "\n    Check that ufuncs don't mishandle refcount of object `1`.\n    Used in a few regression tests.\n    "),
               ('numpy.testing.utils.assert_allclose',
                ['actual', 'desired', 'rtol=1e-07', 'atol=0', "err_msg=''", 'verbose=True'],
                '\n    Raise an assertion if two objects are not equal up to desired tolerance.\n\n    The test is equivalent to ``allclose(actual, desired, rtol, atol)``.\n    It compares the difference between `actual` and `desired` to\n    ``atol + rtol * abs(desired)``.\n\n    Parameters\n    ----------\n    actual : array_like\n        Array obtained.\n    desired : array_like\n        Array desired.\n    rtol : float, optional\n        Relative tolerance.\n    atol : float, optional\n        Absolute tolerance.\n    err_msg : str, optional\n        The error message to be printed in case of failure.\n    verbose : bool, optional\n        If True, the conflicting values are appended to the error message.\n\n    Raises\n    ------\n    AssertionError\n        If actual and desired are not equal up to specified precision.\n\n    See Also\n    --------\n    assert_array_almost_equal_nulp, assert_array_max_ulp\n\n    Examples\n    --------\n    >>> x = [1e-5, 1e-3, 1e-1]\n    >>> y = np.arccos(np.cos(x))\n    >>> assert_allclose(x, y, rtol=1e-5, atol=0)\n\n    '),
               ('numpy.testing.utils.assert_array_almost_equal_nulp',
                ['x', 'y', 'nulp=1'],
                '\n    Compare two arrays relatively to their spacing.\n\n    This is a relatively robust method to compare two arrays whose amplitude\n    is variable.\n\n    Parameters\n    ----------\n    x, y : array_like\n        Input arrays.\n    nulp : int, optional\n        The maximum number of unit in the last place for tolerance (see Notes).\n        Default is 1.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    AssertionError\n        If the spacing between `x` and `y` for one or more elements is larger\n        than `nulp`.\n\n    See Also\n    --------\n    assert_array_max_ulp : Check that all items of arrays differ in at most\n        N Units in the Last Place.\n    spacing : Return the distance between x and the nearest adjacent number.\n\n    Notes\n    -----\n    An assertion is raised if the following condition is not met::\n\n        abs(x - y) <= nulps * spacing(max(abs(x), abs(y)))\n\n    Examples\n    --------\n    >>> x = np.array([1., 1e-10, 1e-20])\n    >>> eps = np.finfo(x.dtype).eps\n    >>> np.testing.assert_array_almost_equal_nulp(x, x*eps/2 + x)\n\n    >>> np.testing.assert_array_almost_equal_nulp(x, x*eps + x)\n    ------------------------------------------------------------\n    Traceback (most recent call last):\n      ...\n    AssertionError: X and Y are not equal to 1 ULP (max is 2)\n\n    '),
               ('numpy.testing.utils.assert_array_max_ulp',
                ['a', 'b', 'maxulp=1', 'dtype=None'],
                '\n    Check that all items of arrays differ in at most N Units in the Last Place.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to be compared.\n    maxulp : int, optional\n        The maximum number of units in the last place that elements of `a` and\n        `b` can differ. Default is 1.\n    dtype : dtype, optional\n        Data-type to convert `a` and `b` to if given. Default is None.\n\n    Returns\n    -------\n    ret : ndarray\n        Array containing number of representable floating point numbers between\n        items in `a` and `b`.\n\n    Raises\n    ------\n    AssertionError\n        If one or more elements differ by more than `maxulp`.\n\n    See Also\n    --------\n    assert_array_almost_equal_nulp : Compare two arrays relatively to their\n        spacing.\n\n    Examples\n    --------\n    >>> a = np.linspace(0., 1., 100)\n    >>> res = np.testing.assert_array_max_ulp(a, np.arcsin(np.sin(a)))\n\n    '),
               ('numpy.testing.utils.nulp_diff',
                ['x', 'y', 'dtype=None'],
                'For each item in x and y, return the number of representable floating\n    points between them.\n\n    Parameters\n    ----------\n    x : array_like\n        first input array\n    y : array_like\n        second input array\n\n    Returns\n    -------\n    nulp: array_like\n        number of representable floating point numbers between each item in x\n        and y.\n\n    Examples\n    --------\n    # By definition, epsilon is the smallest number such as 1 + eps != 1, so\n    # there should be exactly one ULP between 1 and 1 + eps\n    >>> nulp_diff(1, 1 + np.finfo(x.dtype).eps)\n    1.0\n    '),
               ('numpy.testing.utils._integer_repr', ['x', 'vdt', 'comp'], ''),
               ('numpy.testing.utils.integer_repr',
                ['x'],
                'Return the signed-magnitude interpretation of the binary representation of\n    x.'),
               ('numpy.testing.utils.assert_warns',
                ['warning_class', 'func', '*args', '**kw'],
                '\n    Fail unless the given callable throws the specified warning.\n\n    A warning of class warning_class should be thrown by the callable when\n    invoked with arguments args and keyword arguments kwargs.\n    If a different type of warning is thrown, it will not be caught, and the\n    test case will be deemed to have suffered an error.\n\n    Parameters\n    ----------\n    warning_class : class\n        The class defining the warning that `func` is expected to throw.\n    func : callable\n        The callable to test.\n    \\*args : Arguments\n        Arguments passed to `func`.\n    \\*\\*kwargs : Kwargs\n        Keyword arguments passed to `func`.\n\n    Returns\n    -------\n    None\n\n    '),
               ('numpy.testing.numpytest.output_exception', ['printstream=sys.stdout'], ''),
               ('numpy.testing.numpytest.importall',
                ['package'],
                '\n    Try recursively to import all subpackages under package.\n    '),
               ('numpy.testing.decorators.slow',
                ['t'],
                "\n    Label a test as 'slow'.\n\n    The exact definition of a slow test is obviously both subjective and\n    hardware-dependent, but in general any individual test that requires more\n    than a second or two should be labeled as slow (the whole suite consits of\n    thousands of tests, so even a second is significant).\n\n    Parameters\n    ----------\n    t : callable\n        The test to label as slow.\n\n    Returns\n    -------\n    t : callable\n        The decorated test `t`.\n\n    Examples\n    --------\n    The `numpy.testing` module includes ``import decorators as dec``.\n    A test can be decorated as slow like this::\n\n      from numpy.testing import *\n\n      @dec.slow\n      def test_big(self):\n          print 'Big, slow test'\n\n    "),
               ('numpy.testing.decorators.setastest',
                ['tf=True'],
                "\n    Signals to nose that this function is or is not a test.\n\n    Parameters\n    ----------\n    tf : bool\n        If True, specifies that the decorated callable is a test.\n        If False, specifies that the decorated callable is not a test.\n        Default is True.\n\n    Notes\n    -----\n    This decorator can't use the nose namespace, because it can be\n    called from a non-test module. See also ``istest`` and ``nottest`` in\n    ``nose.tools``.\n\n    Examples\n    --------\n    `setastest` can be used in the following way::\n\n      from numpy.testing.decorators import setastest\n\n      @setastest(False)\n      def func_with_test_in_name(arg1, arg2):\n          pass\n\n    "),
               ('numpy.testing.decorators.skipif',
                ['skip_condition', 'msg=None'],
                '\n    Make function raise SkipTest exception if a given condition is true.\n\n    If the condition is a callable, it is used at runtime to dynamically\n    make the decision. This is useful for tests that may require costly\n    imports, to delay the cost until the test suite is actually executed.\n\n    Parameters\n    ----------\n    skip_condition : bool or callable\n        Flag to determine whether to skip the decorated test.\n    msg : str, optional\n        Message to give on raising a SkipTest exception. Default is None.\n\n    Returns\n    -------\n    decorator : function\n        Decorator which, when applied to a function, causes SkipTest\n        to be raised when `skip_condition` is True, and the function\n        to be called normally otherwise.\n\n    Notes\n    -----\n    The decorator itself is decorated with the ``nose.tools.make_decorator``\n    function in order to transmit function name, and various other metadata.\n\n    '),
               ('numpy.testing.decorators.knownfailureif',
                ['fail_condition', 'msg=None'],
                '\n    Make function raise KnownFailureTest exception if given condition is true.\n\n    If the condition is a callable, it is used at runtime to dynamically\n    make the decision. This is useful for tests that may require costly\n    imports, to delay the cost until the test suite is actually executed.\n\n    Parameters\n    ----------\n    fail_condition : bool or callable\n        Flag to determine whether to mark the decorated test as a known\n        failure (if True) or not (if False).\n    msg : str, optional\n        Message to give on raising a KnownFailureTest exception.\n        Default is None.\n\n    Returns\n    -------\n    decorator : function\n        Decorator, which, when applied to a function, causes SkipTest\n        to be raised when `skip_condition` is True, and the function\n        to be called normally otherwise.\n\n    Notes\n    -----\n    The decorator itself is decorated with the ``nose.tools.make_decorator``\n    function in order to transmit function name, and various other metadata.\n\n    '),
               ('numpy.testing.decorators.deprecated',
                ['conditional=True'],
                "\n    Filter deprecation warnings while running the test suite.\n\n    This decorator can be used to filter DeprecationWarning's, to avoid\n    printing them during the test suite run, while checking that the test\n    actually raises a DeprecationWarning.\n\n    Parameters\n    ----------\n    conditional : bool or callable, optional\n        Flag to determine whether to mark test as deprecated or not. If the\n        condition is a callable, it is used at runtime to dynamically make the\n        decision. Default is True.\n\n    Returns\n    -------\n    decorator : function\n        The `deprecated` decorator itself.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    "),
               ('numpy.testing.nosetester.get_package_name',
                ['filepath'],
                '\n    Given a path where a package is installed, determine its name.\n\n    Parameters\n    ----------\n    filepath : str\n        Path to a file. If the determination fails, "numpy" is returned.\n\n    Examples\n    --------\n    >>> np.testing.nosetester.get_package_name(\'nonsense\')\n    \'numpy\'\n\n    '),
               ('numpy.testing.nosetester.import_nose',
                [],
                ' Import nose only when needed.\n    '),
               ('numpy.testing.nosetester.run_module_suite', ['file_to_run=None'], ''),
               ('numpy.testing.nosetester._docmethod', ['meth', 'testtype'], ''),
               ('numpy.testing.nosetester.check_random_directive',
                [],
                '\n    >>> 2+2\n    <BadExample object at 0x084D05AC>  #random: may vary on your system\n    '),
               ('numpy.testing.nosetester.check_implicit_np',
                [],
                '\n    >>> np.array([1,2,3])\n    array([1, 2, 3])\n    '),
               ('numpy.testing.nosetester.check_whitespace_enabled',
                [],
                '\n    # whitespace after the 3\n    >>> 1+2\n    3\n\n    # whitespace before the 7\n    >>> 3+4\n     7\n    '),
               ('numpy.testing.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.testing.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('test_decorators.test_slow', [], ''),
               ('test_decorators.test_setastest', [], ''),
               ('test_decorators.test_skip_functions_hardcoded', [], ''),
               ('test_decorators.test_skip_functions_callable', [], ''),
               ('test_decorators.test_skip_generators_hardcoded', [], ''),
               ('test_decorators.test_skip_generators_callable', [], ''),
               ('numpy.oldnumeric.random_array.seed', ['x=0', 'y=0'], ''),
               ('numpy.oldnumeric.random_array.get_seed', [], ''),
               ('numpy.oldnumeric.random_array.random',
                ['shape=[]'],
                'random(n) or random([n, m, ...]) returns array of random numbers'),
               ('numpy.oldnumeric.random_array.uniform',
                ['minimum', 'maximum', 'shape=[]'],
                'uniform(minimum, maximum, shape=[]) returns array of given shape of random reals\n    in given range'),
               ('numpy.oldnumeric.random_array.randint',
                ['minimum', 'maximum=None', 'shape=[]'],
                'randint(min, max, shape=[]) = random integers >=min, < max\n    If max not given, random integers >= 0, <min'),
               ('numpy.oldnumeric.random_array.random_integers',
                ['maximum', 'minimum=1', 'shape=[]'],
                'random_integers(max, min=1, shape=[]) = random integers in range min-max inclusive'),
               ('numpy.oldnumeric.random_array.permutation',
                ['n'],
                'permutation(n) = a permutation of indices range(n)'),
               ('numpy.oldnumeric.random_array.standard_normal',
                ['shape=[]'],
                'standard_normal(n) or standard_normal([n, m, ...]) returns array of\n           random numbers normally distributed with mean 0 and standard\n           deviation 1'),
               ('numpy.oldnumeric.random_array.normal',
                ['mean', 'std', 'shape=[]'],
                'normal(mean, std, n) or normal(mean, std, [n, m, ...]) returns\n    array of random numbers randomly distributed with specified mean and\n    standard deviation'),
               ('numpy.oldnumeric.random_array.multivariate_normal',
                ['mean', 'cov', 'shape=[]'],
                'multivariate_normal(mean, cov) or multivariate_normal(mean, cov, [m, n, ...])\n    returns an array containing multivariate normally distributed random numbers\n    with specified mean and covariance.\n\n    mean must be a 1 dimensional array. cov must be a square two dimensional\n    array with the same number of rows and columns as mean has elements.\n\n    The first form returns a single 1-D array containing a multivariate\n    normal.\n\n    The second form returns an array of shape (m, n, ..., cov.shape[0]).\n    In this case, output[i,j,...,:] is a 1-D array containing a multivariate\n    normal.'),
               ('numpy.oldnumeric.random_array.exponential',
                ['mean', 'shape=[]'],
                'exponential(mean, n) or exponential(mean, [n, m, ...]) returns array\n      of random numbers exponentially distributed with specified mean'),
               ('numpy.oldnumeric.random_array.beta',
                ['a', 'b', 'shape=[]'],
                'beta(a, b) or beta(a, b, [n, m, ...]) returns array of beta distributed random numbers.'),
               ('numpy.oldnumeric.random_array.gamma',
                ['a', 'r', 'shape=[]'],
                'gamma(a, r) or gamma(a, r, [n, m, ...]) returns array of gamma distributed random numbers.'),
               ('numpy.oldnumeric.random_array.F',
                ['dfn', 'dfd', 'shape=[]'],
                'F(dfn, dfd) or F(dfn, dfd, [n, m, ...]) returns array of F distributed random numbers with dfn degrees of freedom in the numerator and dfd degrees of freedom in the denominator.'),
               ('numpy.oldnumeric.random_array.noncentral_F',
                ['dfn', 'dfd', 'nconc', 'shape=[]'],
                'noncentral_F(dfn, dfd, nonc) or noncentral_F(dfn, dfd, nonc, [n, m, ...]) returns array of noncentral F distributed random numbers with dfn degrees of freedom in the numerator and dfd degrees of freedom in the denominator, and noncentrality parameter nconc.'),
               ('numpy.oldnumeric.random_array.chi_square',
                ['df', 'shape=[]'],
                'chi_square(df) or chi_square(df, [n, m, ...]) returns array of chi squared distributed random numbers with df degrees of freedom.'),
               ('numpy.oldnumeric.random_array.noncentral_chi_square',
                ['df', 'nconc', 'shape=[]'],
                'noncentral_chi_square(df, nconc) or chi_square(df, nconc, [n, m, ...]) returns array of noncentral chi squared distributed random numbers with df degrees of freedom and noncentrality parameter.'),
               ('numpy.oldnumeric.random_array.binomial',
                ['trials', 'p', 'shape=[]'],
                'binomial(trials, p) or binomial(trials, p, [n, m, ...]) returns array of binomially distributed random integers.\n\n           trials is the number of trials in the binomial distribution.\n           p is the probability of an event in each trial of the binomial distribution.'),
               ('numpy.oldnumeric.random_array.negative_binomial',
                ['trials', 'p', 'shape=[]'],
                'negative_binomial(trials, p) or negative_binomial(trials, p, [n, m, ...]) returns\n           array of negative binomially distributed random integers.\n\n           trials is the number of trials in the negative binomial distribution.\n           p is the probability of an event in each trial of the negative binomial distribution.'),
               ('numpy.oldnumeric.random_array.multinomial',
                ['trials', 'probs', 'shape=[]'],
                'multinomial(trials, probs) or multinomial(trials, probs, [n, m, ...]) returns\n           array of multinomial distributed integer vectors.\n\n           trials is the number of trials in each multinomial distribution.\n           probs is a one dimensional array. There are len(prob)+1 events.\n           prob[i] is the probability of the i-th event, 0<=i<len(prob).\n           The probability of event len(prob) is 1.-np.sum(prob).\n\n       The first form returns a single 1-D array containing one multinomially\n           distributed vector.\n\n           The second form returns an array of shape (m, n, ..., len(probs)).\n           In this case, output[i,j,...,:] is a 1-D array containing a multinomially\n           distributed integer 1-D array.'),
               ('numpy.oldnumeric.random_array.poisson',
                ['mean', 'shape=[]'],
                'poisson(mean) or poisson(mean, [n, m, ...]) returns array of poisson\n           distributed random integers with specified mean.'),
               ('numpy.oldnumeric.random_array.mean_var_test',
                ['x', 'type', 'mean', 'var', 'skew=[]'],
                ''),
               ('numpy.oldnumeric.random_array.test', [], ''),
               ('numpy.oldnumeric._move_axis_to_0', ['a', 'axis'], ''),
               ('numpy.oldnumeric.compat.DumpArray', ['m', 'fp'], ''),
               ('numpy.oldnumeric.compat.LoadArray', ['fp'], ''),
               ('numpy.oldnumeric.compat.array_constructor',
                ['shape', 'typecode', 'thestr', 'Endian=LittleEndian'],
                ''),
               ('numpy.oldnumeric.compat.pickle_array', ['a'], ''),
               ('numpy.oldnumeric.compat.loads', ['astr'], ''),
               ('numpy.oldnumeric.compat.load', ['fp'], ''),
               ('numpy.oldnumeric.compat._LoadArray', ['fp'], ''),
               ('numpy.oldnumeric.rng.ranf',
                [],
                'ranf() = a random number from the standard generator.'),
               ('numpy.oldnumeric.rng.random_sample',
                ['*n'],
                'random_sample(n) = array of n random numbers;\n\n    random_sample(n1, n2, ...)= random array of shape (n1, n2, ..)'),
               ('numpy.oldnumeric.array_printer.array2string',
                ['a',
                 'max_line_width=None',
                 'precision=None',
                 'suppress_small=None',
                 "separator=' '",
                 'array_output=0'],
                ''),
               ('numpy.oldnumeric.precision._get_precisions', ['typecodes'], ''),
               ('numpy.oldnumeric.precision._fill_table', ['typecodes', 'table={}'], ''),
               ('numpy.oldnumeric.precision._lookup', ['table', 'key', 'required_bits'], ''),
               ('numpy.oldnumeric.linear_algebra.solve_linear_equations', ['a', 'b'], ''),
               ('numpy.oldnumeric.linear_algebra.inverse', ['a'], ''),
               ('numpy.oldnumeric.linear_algebra.cholesky_decomposition', ['a'], ''),
               ('numpy.oldnumeric.linear_algebra.eigenvalues', ['a'], ''),
               ('numpy.oldnumeric.linear_algebra.Heigenvalues', ['a', "UPLO='L'"], ''),
               ('numpy.oldnumeric.linear_algebra.eigenvectors', ['A'], ''),
               ('numpy.oldnumeric.linear_algebra.Heigenvectors', ['A'], ''),
               ('numpy.oldnumeric.linear_algebra.generalized_inverse', ['a', 'rcond=1e-10'], ''),
               ('numpy.oldnumeric.linear_algebra.determinant', ['a'], ''),
               ('numpy.oldnumeric.linear_algebra.linear_least_squares',
                ['a', 'b', 'rcond=1e-10'],
                'returns x,resids,rank,s\nwhere x minimizes 2-norm(|b - Ax|)\n      resids is the sum square residuals\n      rank is the rank of A\n      s is the rank of the singular values of A in descending order\n\nIf b is a matrix then x is also a matrix with corresponding columns.\nIf the rank of A is less than the number of columns of A or greater than\nthe number of rows, then residuals will be returned as an empty array\notherwise resids = sum((b-dot(A,x)**2).\nSingular values less than s[0]*rcond are treated as zero.\n'),
               ('numpy.oldnumeric.linear_algebra.singular_value_decomposition',
                ['A', 'full_matrices=0'],
                ''),
               ('numpy.oldnumeric.arrayfns.array_set', ['vals1', 'indices', 'vals2'], ''),
               ('numpy.oldnumeric.arrayfns.index_sort', ['arr'], ''),
               ('numpy.oldnumeric.arrayfns.interp',
                ['y', 'x', 'z', 'typ=None'],
                'y(z) interpolated by treating y(x) as piecewise function\n    '),
               ('numpy.oldnumeric.arrayfns.nz', ['x'], ''),
               ('numpy.oldnumeric.arrayfns.reverse', ['x', 'n'], ''),
               ('numpy.oldnumeric.arrayfns.span', ['lo', 'hi', 'num', 'd2=0'], ''),
               ('numpy.oldnumeric.arrayfns.zmin_zmax', ['z', 'ireg'], ''),
               ('numpy.oldnumeric.arrayfns.find_mask', ['fs', 'node_edges'], ''),
               ('numpy.oldnumeric.arrayfns.to_corners', ['arr', 'nv', 'nvsum'], ''),
               ('numpy.oldnumeric.arrayfns.construct3', ['mask', 'itype'], ''),
               ('numpy.oldnumeric.matrix._eval', ['astr'], ''),
               ('numpy.oldnumeric.matrix._convert_from_string', ['data'], ''),
               ('numpy.oldnumeric.matrix._binary', ['num'], ''),
               ('numpy.oldnumeric.rng_stats.average', ['data'], ''),
               ('numpy.oldnumeric.rng_stats.variance', ['data'], ''),
               ('numpy.oldnumeric.rng_stats.standardDeviation', ['data'], ''),
               ('numpy.oldnumeric.rng_stats.histogram', ['data', 'nbins', 'range=None'], ''),
               ('numpy.oldnumeric.alter_code2.replacetypechars', ['astr'], ''),
               ('numpy.oldnumeric.alter_code2.changeimports', ['fstr', 'name', 'newname'], ''),
               ('numpy.oldnumeric.alter_code2.replaceattr', ['astr'], ''),
               ('numpy.oldnumeric.alter_code2.replaceother', ['astr'], ''),
               ('numpy.oldnumeric.alter_code2.fromstr', ['filestr'], ''),
               ('numpy.oldnumeric.alter_code2.makenewfile', ['name', 'filestr'], ''),
               ('numpy.oldnumeric.alter_code2.getandcopy', ['name'], ''),
               ('numpy.oldnumeric.alter_code2.convertfile',
                ['filename'],
                'Convert the filename given from using Numeric to using NumPy\n\n    Copies the file to filename.orig and then over-writes the file\n    with the updated code\n    '),
               ('numpy.oldnumeric.alter_code2.fromargs', ['args'], ''),
               ('numpy.oldnumeric.alter_code2.convertall',
                ['direc=os.path.curdir'],
                'Convert all .py files to use NumPy (from Numeric) in the directory given\n\n    For each file, a backup of <usesnumeric>.py is made as\n    <usesnumeric>.py.orig.  A new file named <usesnumeric>.py\n    is then written with the updated code.\n    '),
               ('numpy.oldnumeric.alter_code2._func', ['arg', 'dirname', 'fnames'], ''),
               ('numpy.oldnumeric.alter_code2.converttree',
                ['direc=os.path.curdir'],
                'Convert all .py files in the tree given\n\n    '),
               ('numpy.oldnumeric.typeconv.convtypecode', ['typecode', 'dtype=None'], ''),
               ('numpy.oldnumeric.typeconv.convtypecode2', ['typecode', 'dtype=None'], ''),
               ('numpy.oldnumeric.fix_default_axis._add_axis', ['fstr', 'name', 'repl'], ''),
               ('numpy.oldnumeric.fix_default_axis._import_change', ['fstr', 'names'], ''),
               ('numpy.oldnumeric.fix_default_axis.add_axis',
                ['fstr', 'import_change=False'],
                ''),
               ('numpy.oldnumeric.fix_default_axis.makenewfile', ['name', 'filestr'], ''),
               ('numpy.oldnumeric.fix_default_axis.getfile', ['name'], ''),
               ('numpy.oldnumeric.fix_default_axis.copyfile', ['name', 'fstr'], ''),
               ('numpy.oldnumeric.fix_default_axis.convertfile',
                ['filename', 'import_change=False'],
                'Convert the filename given from using Numeric to using NumPy\n\n    Copies the file to filename.orig and then over-writes the file\n    with the updated code\n    '),
               ('numpy.oldnumeric.fix_default_axis.fromargs', ['args'], ''),
               ('numpy.oldnumeric.fix_default_axis.convertall',
                ['direc=os.path.curdir', 'import_change=False'],
                'Convert all .py files in the directory given\n\n    For each file, a backup of <usesnumeric>.py is made as\n    <usesnumeric>.py.orig.  A new file named <usesnumeric>.py\n    is then written with the updated code.\n    '),
               ('numpy.oldnumeric.fix_default_axis._func', ['arg', 'dirname', 'fnames'], ''),
               ('numpy.oldnumeric.fix_default_axis.converttree',
                ['direc=os.path.curdir', 'import_change=False'],
                'Convert all .py files in the tree given\n\n    '),
               ('numpy.oldnumeric.alter_code1.fixtypechars', ['fstr'], ''),
               ('numpy.oldnumeric.alter_code1.changeimports', ['fstr', 'name', 'newname'], ''),
               ('numpy.oldnumeric.alter_code1.fixistesting', ['astr'], ''),
               ('numpy.oldnumeric.alter_code1.replaceattr', ['astr'], ''),
               ('numpy.oldnumeric.alter_code1.replaceother', ['astr'], ''),
               ('numpy.oldnumeric.alter_code1.fromstr', ['filestr'], ''),
               ('numpy.oldnumeric.alter_code1.makenewfile', ['name', 'filestr'], ''),
               ('numpy.oldnumeric.alter_code1.convertfile',
                ['filename', 'orig=1'],
                'Convert the filename given from using Numeric to using NumPy\n\n    Copies the file to filename.orig and then over-writes the file\n    with the updated code\n    '),
               ('numpy.oldnumeric.alter_code1.fromargs', ['args'], ''),
               ('numpy.oldnumeric.alter_code1.convertall',
                ['direc=os.path.curdir', 'orig=1'],
                'Convert all .py files to use numpy.oldnumeric (from Numeric) in the directory given\n\n    For each changed file, a backup of <usesnumeric>.py is made as\n    <usesnumeric>.py.orig.  A new file named <usesnumeric>.py\n    is then written with the updated code.\n    '),
               ('numpy.oldnumeric.alter_code1.convertsrc',
                ['direc=os.path.curdir', 'ext=None', 'orig=1'],
                'Replace Numeric/arrayobject.h with numpy/oldnumeric.h in all files in the\n    directory with extension give by list ext (if ext is None, then all files are\n    replaced).'),
               ('numpy.oldnumeric.alter_code1._func', ['arg', 'dirname', 'fnames'], ''),
               ('numpy.oldnumeric.alter_code1.converttree',
                ['direc=os.path.curdir'],
                'Convert all .py files and source code files in the tree given\n    '),
               ('numpy.oldnumeric.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.oldnumeric.ma.default_fill_value',
                ['obj'],
                'Function to calculate default fill value for an object.'),
               ('numpy.oldnumeric.ma.minimum_fill_value',
                ['obj'],
                'Function to calculate default fill value suitable for taking minima.'),
               ('numpy.oldnumeric.ma.maximum_fill_value',
                ['obj'],
                'Function to calculate default fill value suitable for taking maxima.'),
               ('numpy.oldnumeric.ma.set_fill_value',
                ['a', 'fill_value'],
                'Set fill value of a if it is a masked array.'),
               ('numpy.oldnumeric.ma.getmask',
                ['a'],
                'Mask of values in a; could be nomask.\n       Returns nomask if a is not a masked array.\n       To get an array for sure use getmaskarray.'),
               ('numpy.oldnumeric.ma.getmaskarray',
                ['a'],
                'Mask of values in a; an array of zeros if mask is nomask\n     or not a masked array, and is a byte-sized integer.\n     Do not try to add up entries, for example.\n    '),
               ('numpy.oldnumeric.ma.is_mask',
                ['m'],
                'Is m a legal mask? Does not check contents, only type.\n    '),
               ('numpy.oldnumeric.ma.make_mask',
                ['m', 'copy=0', 'flag=0'],
                'make_mask(m, copy=0, flag=0)\n       return m as a mask, creating a copy if necessary or requested.\n       Can accept any sequence of integers or nomask. Does not check\n       that contents must be 0s and 1s.\n       if flag, return nomask if m contains no true elements.\n    '),
               ('numpy.oldnumeric.ma.make_mask_none',
                ['s'],
                'Return a mask of all zeros of shape s.'),
               ('numpy.oldnumeric.ma.mask_or',
                ['m1', 'm2'],
                'Logical or of the mask candidates m1 and m2, treating nomask as false.\n       Result may equal m1 or m2 if the other is nomask.\n     '),
               ('numpy.oldnumeric.ma.filled',
                ['a', 'value=None'],
                'a as a contiguous numeric array with any masked areas replaced by value\n    if value is None or the special element "masked", get_fill_value(a)\n    is used instead.\n\n    If a is already a contiguous numeric array, a itself is returned.\n\n    filled(a) can be used to be sure that the result is numeric when\n    passing an object a to other software ignorant of MA, in particular to\n    numeric itself.\n    '),
               ('numpy.oldnumeric.ma.get_fill_value',
                ['a'],
                '\n    The fill value of a, if it has one; otherwise, the default fill value\n    for that type.\n    '),
               ('numpy.oldnumeric.ma.common_fill_value',
                ['a', 'b'],
                'The common fill_value of a and b, if there is one, or None'),
               ('numpy.oldnumeric.ma.nonzero',
                ['a'],
                'returns the indices of the elements of a which are not zero\n    and not masked\n    '),
               ('numpy.oldnumeric.ma.rank', ['object'], ''),
               ('numpy.oldnumeric.ma.shape', ['object'], ''),
               ('numpy.oldnumeric.ma.size', ['object', 'axis=None'], ''),
               ('numpy.oldnumeric.ma.isMaskedArray',
                ['x'],
                'Is x a masked array, that is, an instance of MaskedArray?'),
               ('numpy.oldnumeric.ma.allclose',
                ['a', 'b', 'fill_value=1', 'rtol=1e-05', 'atol=1e-08'],
                ' Returns true if all components of a and b are equal\n        subject to given tolerances.\n        If fill_value is 1, masked values considered equal.\n        If fill_value is 0, masked values considered unequal.\n        The relative error rtol should be positive and << 1.0\n        The absolute error atol comes into play for those elements\n        of b that are very small or zero; it says how small a must be also.\n    '),
               ('numpy.oldnumeric.ma.allequal',
                ['a', 'b', 'fill_value=1'],
                '\n        True if all entries of  a and b are equal, using\n        fill_value as a truth value where either or both are masked.\n    '),
               ('numpy.oldnumeric.ma.masked_values',
                ['data', 'value', 'rtol=1e-05', 'atol=1e-08', 'copy=1'],
                '\n       masked_values(data, value, rtol=1.e-5, atol=1.e-8)\n       Create a masked array; mask is nomask if possible.\n       If copy==0, and otherwise possible, result\n       may share data values with original array.\n       Let d = filled(data, value). Returns d\n       masked where abs(data-value)<= atol + rtol * abs(value)\n       if d is of a floating point type. Otherwise returns\n       masked_object(d, value, copy)\n    '),
               ('numpy.oldnumeric.ma.masked_object',
                ['data', 'value', 'copy=1'],
                'Create array masked where exactly data equal to value'),
               ('numpy.oldnumeric.ma.arange',
                ['start', 'stop=None', 'step=1', 'dtype=None'],
                'Just like range() except it returns a array whose type can be specified\n    by the keyword argument dtype.\n    '),
               ('numpy.oldnumeric.ma.fromstring',
                ['s', 't'],
                'Construct a masked array from a string. Result will have no mask.'),
               ('numpy.oldnumeric.ma.left_shift', ['a', 'n'], 'Left shift n bits'),
               ('numpy.oldnumeric.ma.right_shift', ['a', 'n'], 'Right shift n bits'),
               ('numpy.oldnumeric.ma.resize',
                ['a', 'new_shape'],
                "resize(a, new_shape) returns a new array with the specified shape.\n    The original array's total size can be any size."),
               ('numpy.oldnumeric.ma.new_repeat',
                ['a', 'repeats', 'axis=None'],
                'repeat elements of a repeats times along axis\n       repeats is a sequence of length a.shape[axis]\n       telling how many times to repeat each element.\n    '),
               ('numpy.oldnumeric.ma.identity',
                ['n'],
                'identity(n) returns the identity matrix of shape n x n.\n    '),
               ('numpy.oldnumeric.ma.indices',
                ['dimensions', 'dtype=None'],
                'indices(dimensions,dtype=None) returns an array representing a grid\n    of indices with row-only, and column-only variation.\n    '),
               ('numpy.oldnumeric.ma.zeros',
                ['shape', 'dtype=float'],
                'zeros(n, dtype=float) =\n     an array of all zeros of the given length or shape.'),
               ('numpy.oldnumeric.ma.ones',
                ['shape', 'dtype=float'],
                'ones(n, dtype=float) =\n     an array of all ones of the given length or shape.'),
               ('numpy.oldnumeric.ma.count',
                ['a', 'axis=None'],
                'Count of the non-masked elements in a, or along a certain axis.'),
               ('numpy.oldnumeric.ma.power', ['a', 'b', 'third=None'], 'a**b'),
               ('numpy.oldnumeric.ma.masked_array',
                ['a', 'mask=nomask', 'fill_value=None'],
                'masked_array(a, mask=nomask) =\n       array(a, mask=mask, copy=0, fill_value=fill_value)\n    '),
               ('numpy.oldnumeric.ma.sum', ['target', 'axis=None', 'dtype=None'], ''),
               ('numpy.oldnumeric.ma.product', ['target', 'axis=None', 'dtype=None'], ''),
               ('numpy.oldnumeric.ma.new_average',
                ['a', 'axis=None', 'weights=None', 'returned=0'],
                "average(a, axis=None, weights=None)\n       Computes average along indicated axis.\n       If axis is None, average over the entire array\n       Inputs can be integer or floating types; result is of type float.\n\n       If weights are given, result is sum(a*weights,axis=0)/(sum(weights,axis=0)*1.0)\n       weights must have a's shape or be the 1-d with length the size\n       of a in the given axis.\n\n       If returned, return a tuple: the result and the sum of the weights\n       or count of values. Results will have the same shape.\n\n       masked values in the weights will be set to 0.0\n    "),
               ('numpy.oldnumeric.ma.where',
                ['condition', 'x', 'y'],
                'where(condition, x, y) is x where condition is nonzero, y otherwise.\n       condition must be convertible to an integer array.\n       Answer is always the shape of condition.\n       The type depends on x and y. It is integer if both x and y are\n       the value masked.\n    '),
               ('numpy.oldnumeric.ma.choose',
                ['indices', 't', 'out=None', "mode='raise'"],
                'Returns array shaped like indices with elements chosen from t'),
               ('numpy.oldnumeric.ma.masked_where',
                ['condition', 'x', 'copy=1'],
                'Return x as an array masked where condition is true.\n       Also masked where x or condition masked.\n    '),
               ('numpy.oldnumeric.ma.masked_greater',
                ['x', 'value', 'copy=1'],
                'masked_greater(x, value) = x masked where x > value'),
               ('numpy.oldnumeric.ma.masked_greater_equal',
                ['x', 'value', 'copy=1'],
                'masked_greater_equal(x, value) = x masked where x >= value'),
               ('numpy.oldnumeric.ma.masked_less',
                ['x', 'value', 'copy=1'],
                'masked_less(x, value) = x masked where x < value'),
               ('numpy.oldnumeric.ma.masked_less_equal',
                ['x', 'value', 'copy=1'],
                'masked_less_equal(x, value) = x masked where x <= value'),
               ('numpy.oldnumeric.ma.masked_not_equal',
                ['x', 'value', 'copy=1'],
                'masked_not_equal(x, value) = x masked where x != value'),
               ('numpy.oldnumeric.ma.masked_equal',
                ['x', 'value', 'copy=1'],
                'masked_equal(x, value) = x masked where x == value\n       For floating point consider masked_values(x, value) instead.\n    '),
               ('numpy.oldnumeric.ma.masked_inside',
                ['x', 'v1', 'v2', 'copy=1'],
                'x with mask of all values of x that are inside [v1,v2]\n       v1 and v2 can be given in either order.\n    '),
               ('numpy.oldnumeric.ma.masked_outside',
                ['x', 'v1', 'v2', 'copy=1'],
                'x with mask of all values of x that are outside [v1,v2]\n       v1 and v2 can be given in either order.\n    '),
               ('numpy.oldnumeric.ma.reshape', ['a', '*newshape'], 'Copy of a with a new shape.'),
               ('numpy.oldnumeric.ma.ravel',
                ['a'],
                'a as one-dimensional, may share data and mask'),
               ('numpy.oldnumeric.ma.concatenate',
                ['arrays', 'axis=0'],
                'Concatenate the arrays along the given axis'),
               ('numpy.oldnumeric.ma.swapaxes', ['a', 'axis1', 'axis2'], ''),
               ('numpy.oldnumeric.ma.new_take',
                ['a', 'indices', 'axis=None', 'out=None', "mode='raise'"],
                'returns selection of items from a.'),
               ('numpy.oldnumeric.ma.transpose',
                ['a', 'axes=None'],
                'reorder dimensions per tuple axes'),
               ('numpy.oldnumeric.ma.put',
                ['a', 'indices', 'values', "mode='raise'"],
                'sets storage-indexed locations to corresponding values.\n\n    Values and indices are filled if necessary.\n\n    '),
               ('numpy.oldnumeric.ma.putmask',
                ['a', 'mask', 'values'],
                'putmask(a, mask, values) sets a where mask is true.'),
               ('numpy.oldnumeric.ma.inner',
                ['a', 'b'],
                'inner(a,b) returns the dot product of two arrays, which has\n    shape a.shape[:-1] + b.shape[:-1] with elements computed by summing the\n    product of the elements from the last dimensions of a and b.\n    Masked elements are replace by zeros.\n    '),
               ('numpy.oldnumeric.ma.outer',
                ['a', 'b'],
                'outer(a,b) = {a[i]*b[j]}, has shape (len(a),len(b))'),
               ('numpy.oldnumeric.ma.dot',
                ['a', 'b'],
                'dot(a,b) returns matrix-multiplication between a and b.  The product-sum\n    is over the last dimension of a and the second-to-last dimension of b.\n    Masked values are replaced by zeros. See also innerproduct.\n    '),
               ('numpy.oldnumeric.ma.compress',
                ['condition', 'x', 'dimension=-1', 'out=None'],
                'Select those parts of x for which condition is true.\n       Masked values in condition are considered false.\n    '),
               ('numpy.oldnumeric.ma.sort',
                ['x', 'axis=-1', 'fill_value=None'],
                "If x does not have a mask, return a masked array formed from the\n       result of numeric.sort(x, axis).\n       Otherwise, fill x with fill_value. Sort it.\n       Set a mask where the result is equal to fill_value.\n       Note that this may have unintended consequences if the data contains the\n       fill value at a non-masked site.\n\n       If fill_value is not given the default fill value for x's type will be\n       used.\n    "),
               ('numpy.oldnumeric.ma.diagonal',
                ['a', 'k=0', 'axis1=0', 'axis2=1'],
                "diagonal(a,k=0,axis1=0, axis2=1) = the k'th diagonal of a"),
               ('numpy.oldnumeric.ma.trace',
                ['a', 'offset=0', 'axis1=0', 'axis2=1', 'dtype=None', 'out=None'],
                'trace(a,offset=0, axis1=0, axis2=1) returns the sum along diagonals\n    (defined by the last two dimenions) of the array.\n    '),
               ('numpy.oldnumeric.ma.argsort',
                ['x', 'axis=-1', 'out=None', 'fill_value=None'],
                'Treating masked values as if they have the value fill_value,\n       return sort indices for sorting along given axis.\n       if fill_value is None, use get_fill_value(x)\n       Returns a numpy array.\n    '),
               ('numpy.oldnumeric.ma.argmin',
                ['x', 'axis=-1', 'out=None', 'fill_value=None'],
                'Treating masked values as if they have the value fill_value,\n       return indices for minimum values along given axis.\n       if fill_value is None, use get_fill_value(x).\n       Returns a numpy array if x has more than one dimension.\n       Otherwise, returns a scalar index.\n    '),
               ('numpy.oldnumeric.ma.argmax',
                ['x', 'axis=-1', 'out=None', 'fill_value=None'],
                'Treating masked values as if they have the value fill_value,\n       return sort indices for maximum along given axis.\n       if fill_value is None, use -get_fill_value(x) if it exists.\n       Returns a numpy array if x has more than one dimension.\n       Otherwise, returns a scalar index.\n    '),
               ('numpy.oldnumeric.ma.fromfunction',
                ['f', 's'],
                'apply f to s to create array as in umath.'),
               ('numpy.oldnumeric.ma.asarray',
                ['data', 'dtype=None'],
                'asarray(data, dtype) = array(data, dtype, copy=0)\n    '),
               ('numpy.oldnumeric.ma._m', ['f'], ''),
               ('numpy.oldnumeric.ma.not_implemented', ['*args', '**kwds'], ''),
               ('numpy.oldnumeric.ma._choose', ['self', '*args', '**kwds'], ''),
               ('numpy.oldnumeric.ma._clip', ['self', 'a_min', 'a_max', 'out=None'], ''),
               ('numpy.oldnumeric.ma._compress', ['self', 'cond', 'axis=None', 'out=None'], ''),
               ('numpy.oldnumeric.ma._cumprod',
                ['self', 'axis=None', 'dtype=None', 'out=None'],
                ''),
               ('numpy.oldnumeric.ma._cumsum',
                ['self', 'axis=None', 'dtype=None', 'out=None'],
                ''),
               ('numpy.oldnumeric.ma._max', ['a', 'axis=None', 'out=None'], ''),
               ('numpy.oldnumeric.ma._min', ['a', 'axis=None', 'out=None'], ''),
               ('numpy.oldnumeric.ma._ptp', ['a', 'axis=None', 'out=None'], ''),
               ('numpy.oldnumeric.ma._squeeze', ['self'], ''),
               ('numpy.oldnumeric.ma._swapaxes', ['self', 'axis1', 'axis2'], ''),
               ('numpy.oldnumeric.ma._var', ['self', 'axis=None', 'dtype=None', 'out=None'], ''),
               ('numpy.oldnumeric.ma._std', ['self', 'axis=None', 'dtype=None', 'out=None'], ''),
               ('numpy.oldnumeric.ma.repeat', ['a', 'repeats', 'axis=0'], ''),
               ('numpy.oldnumeric.ma.average', ['a', 'axis=0', 'weights=None', 'returned=0'], ''),
               ('numpy.oldnumeric.ma.take', ['a', 'indices', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.take', ['a', 'indicies', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.repeat', ['a', 'repeats', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.sum', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.product', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.sometrue', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.alltrue', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.cumsum', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.cumproduct', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.functions.argmax', ['x', 'axis=-1'], ''),
               ('numpy.oldnumeric.functions.argmin', ['x', 'axis=-1'], ''),
               ('numpy.oldnumeric.functions.compress', ['condition', 'm', 'axis=-1'], ''),
               ('numpy.oldnumeric.functions.fromfunction', ['args', 'dimensions'], ''),
               ('numpy.oldnumeric.functions.ones',
                ['shape', "typecode='l'", 'savespace=0', 'dtype=None'],
                'ones(shape, dtype=int) returns an array of the given\n    dimensions which is initialized to all ones.\n    '),
               ('numpy.oldnumeric.functions.zeros',
                ['shape', "typecode='l'", 'savespace=0', 'dtype=None'],
                'zeros(shape, dtype=int) returns an array of the given\n    dimensions which is initialized to all zeros\n    '),
               ('numpy.oldnumeric.functions.identity',
                ['n', "typecode='l'", 'dtype=None'],
                'identity(n) returns the identity 2-d array of shape n x n.\n    '),
               ('numpy.oldnumeric.functions.empty', ['shape', "typecode='l'", 'dtype=None'], ''),
               ('numpy.oldnumeric.functions.array',
                ['sequence', 'typecode=None', 'copy=1', 'savespace=0', 'dtype=None'],
                ''),
               ('numpy.oldnumeric.functions.sarray',
                ['a', 'typecode=None', 'copy=False', 'dtype=None'],
                ''),
               ('numpy.oldnumeric.functions.asarray', ['a', 'typecode=None', 'dtype=None'], ''),
               ('numpy.oldnumeric.functions.nonzero', ['a'], ''),
               ('numpy.oldnumeric.functions.reshape', ['a', 'shape'], ''),
               ('numpy.oldnumeric.functions.arange',
                ['start', 'stop=None', 'step=1', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.oldnumeric.functions.fromstring',
                ['string', "typecode='l'", 'count=-1', 'dtype=None'],
                ''),
               ('numpy.oldnumeric.functions.ravel', ['m'], ''),
               ('numpy.oldnumeric.functions.trace', ['a', 'offset=0', 'axis1=0', 'axis2=1'], ''),
               ('numpy.oldnumeric.functions.indices',
                ['dimensions', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.oldnumeric.functions.where', ['condition', 'x', 'y'], ''),
               ('numpy.oldnumeric.functions.cross_product',
                ['a', 'b', 'axis1=-1', 'axis2=-1'],
                ''),
               ('numpy.oldnumeric.functions.average',
                ['a', 'axis=0', 'weights=None', 'returned=False'],
                ''),
               ('numpy.oldnumeric.setup.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.oldnumeric.mlab.eye',
                ['N', 'M=None', 'k=0', 'typecode=None', 'dtype=None'],
                ' eye returns a N-by-M 2-d array where the  k-th diagonal is all ones,\n        and everything else is zeros.\n    '),
               ('numpy.oldnumeric.mlab.tri',
                ['N', 'M=None', 'k=0', 'typecode=None', 'dtype=None'],
                ' returns a N-by-M array where all the diagonals starting from\n        lower left corner up to the k-th are all ones.\n    '),
               ('numpy.oldnumeric.mlab.trapz', ['y', 'x=None', 'axis=-1'], ''),
               ('numpy.oldnumeric.mlab.ptp', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.cumprod', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.max', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.min', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.prod', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.std', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.mean', ['x', 'axis=0'], ''),
               ('numpy.oldnumeric.mlab.cov', ['m', 'y=None', 'rowvar=0', 'bias=0'], ''),
               ('numpy.oldnumeric.mlab.corrcoef', ['x', 'y=None'], ''),
               ('numpy.polynomial.laguerre.poly2lag',
                ['pol'],
                '\n    poly2lag(pol)\n\n    Convert a polynomial to a Laguerre series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the "standard" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Laguerre series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-d array containing the polynomial coefficients\n\n    Returns\n    -------\n    cs : ndarray\n        1-d array containing the coefficients of the equivalent Laguerre\n        series.\n\n    See Also\n    --------\n    lag2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import poly2lag\n    >>> poly2lag(np.arange(4))\n    array([ 23., -63.,  58., -18.])\n\n    '),
               ('numpy.polynomial.laguerre.lag2poly',
                ['cs'],
                '\n    Convert a Laguerre series to a polynomial.\n\n    Convert an array representing the coefficients of a Laguerre series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the "standard" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array containing the Laguerre series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-d array containing the coefficients of the equivalent polynomial\n        (relative to the "standard" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2lag\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lag2poly\n    >>> lag2poly([ 23., -63.,  58., -18.])\n    array([ 0.,  1.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.laguerre.lagline',
                ['off', 'scl'],
                "\n    Laguerre series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Laguerre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    polyline, chebline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagline, lagval\n    >>> lagval(0,lagline(3, 2))\n    3.0\n    >>> lagval(1,lagline(3, 2))\n    5.0\n\n    "),
               ('numpy.polynomial.laguerre.lagfromroots',
                ['roots'],
                '\n    Generate a Laguerre series with the given roots.\n\n    Return the array of coefficients for the P-series whose roots (a.k.a.\n    "zeros") are given by *roots*.  The returned array of coefficients is\n    ordered from lowest order "term" to highest, and zeros of multiplicity\n    greater than one must be included in *roots* a number of times equal\n    to their multiplicity (e.g., if `2` is a root of multiplicity three,\n    then [2,2,2] must be in *roots*).\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-d array of the Laguerre series coefficients, ordered from low to\n        high.  If all roots are real, ``out.dtype`` is a float type;\n        otherwise, ``out.dtype`` is a complex type, even if all the\n        coefficients in the result are real (see Examples below).\n\n    See Also\n    --------\n    polyfromroots, chebfromroots\n\n    Notes\n    -----\n    What is returned are the :math:`c_i` such that:\n\n    .. math::\n\n        \\sum_{i=0}^{n} c_i*P_i(x) = \\prod_{i=0}^{n} (x - roots[i])\n\n    where ``n == len(roots)`` and :math:`P_i(x)` is the `i`-th Laguerre\n    (basis) polynomial over the domain `[-1,1]`.  Note that, unlike\n    `polyfromroots`, due to the nature of the Laguerre basis set, the\n    above identity *does not* imply :math:`c_n = 1` identically (see\n    Examples).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagfromroots, lagval\n    >>> coef = lagfromroots((-1, 0, 1))\n    >>> lagval((-1, 0, 1), coef)\n    array([ 0.,  0.,  0.])\n    >>> coef = lagfromroots((-1j, 1j))\n    >>> lagval((-1j, 1j), coef)\n    array([ 0.+0.j,  0.+0.j])\n\n    '),
               ('numpy.polynomial.laguerre.lagadd',
                ['c1', 'c2'],
                '\n    Add one Laguerre series to another.\n\n    Returns the sum of two Laguerre series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Laguerre series of their sum.\n\n    See Also\n    --------\n    lagsub, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Laguerre series\n    is a Laguerre series (without having to "reproject" the result onto\n    the basis set) so addition, just like that of "standard" polynomials,\n    is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagadd\n    >>> lagadd([1, 2, 3], [1, 2, 3, 4])\n    array([ 2.,  4.,  6.,  4.])\n\n\n    '),
               ('numpy.polynomial.laguerre.lagsub',
                ['c1', 'c2'],
                '\n    Subtract one Laguerre series from another.\n\n    Returns the difference of two Laguerre series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Laguerre series coefficients representing their difference.\n\n    See Also\n    --------\n    lagadd, lagmul, lagdiv, lagpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Laguerre\n    series is a Laguerre series (without having to "reproject" the result\n    onto the basis set) so subtraction, just like that of "standard"\n    polynomials, is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagsub\n    >>> lagsub([1, 2, 3, 4], [1, 2, 3])\n    array([ 0.,  0.,  0.,  4.])\n\n    '),
               ('numpy.polynomial.laguerre.lagmulx',
                ['cs'],
                'Multiply a Laguerre series by x.\n\n    Multiply the Laguerre series `cs` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Laguerre\n    polynomials in the form\n\n    .. math::\n\n    xP_i(x) = (-(i + 1)*P_{i + 1}(x) + (2i + 1)P_{i}(x) - iP_{i - 1}(x))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagmulx\n    >>> lagmulx([1, 2, 3])\n    array([ -1.,  -1.,  11.,  -9.])\n\n    '),
               ('numpy.polynomial.laguerre.lagmul',
                ['c1', 'c2'],
                '\n    Multiply one Laguerre series by another.\n\n    Returns the product of two Laguerre series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order "term" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Laguerre series coefficients representing their product.\n\n    See Also\n    --------\n    lagadd, lagsub, lagdiv, lagpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Laguerre polynomial basis set.  Thus, to express\n    the product as a Laguerre series, it is necessary to "re-project" the\n    product onto said basis set, which may produce "un-intuitive" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagmul\n    >>> lagmul([1, 2, 3], [0, 1, 2])\n    array([  8., -13.,  38., -51.,  36.])\n\n    '),
               ('numpy.polynomial.laguerre.lagdiv',
                ['c1', 'c2'],
                '\n    Divide one Laguerre series by another.\n\n    Returns the quotient-with-remainder of two Laguerre series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Laguerre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Laguerre series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmul, lagpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Laguerre series by another\n    results in quotient and remainder terms that are not in the Laguerre\n    polynomial basis set.  Thus, to express these results as a Laguerre\n    series, it is necessary to "re-project" the results onto the Laguerre\n    basis set, which may produce "un-intuitive" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagdiv\n    >>> lagdiv([  8., -13.,  38., -51.,  36.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 0.]))\n    >>> lagdiv([  9., -12.,  38., -51.,  36.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 1.,  1.]))\n\n    '),
               ('numpy.polynomial.laguerre.lagpow',
                ['cs', 'pow', 'maxpower=16'],
                'Raise a Laguerre series to a power.\n\n    Returns the Laguerre series `cs` raised to the power `pow`. The\n    arguement `cs` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    cs : array_like\n        1d array of Laguerre series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to umanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Laguerre series of power.\n\n    See Also\n    --------\n    lagadd, lagsub, lagmul, lagdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagpow\n    >>> lagpow([1, 2, 3], 2)\n    array([ 14., -16.,  56., -72.,  54.])\n\n    '),
               ('numpy.polynomial.laguerre.lagder',
                ['cs', 'm=1', 'scl=1'],
                '\n    Differentiate a Laguerre series.\n\n    Returns the series `cs` differentiated `m` times.  At each iteration the\n    result is multiplied by `scl` (the scaling factor is for use in a linear\n    change of variable).  The argument `cs` is the sequence of coefficients\n    from lowest order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    cs: array_like\n        1-d array of Laguerre series coefficients ordered from low to high.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n\n    Returns\n    -------\n    der : ndarray\n        Laguerre series of the derivative.\n\n    See Also\n    --------\n    lagint\n\n    Notes\n    -----\n    In general, the result of differentiating a Laguerre series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be "un-intuitive," albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagder\n    >>> lagder([ 1.,  1.,  1., -3.])\n    array([ 1.,  2.,  3.])\n    >>> lagder([ 1.,  0.,  0., -4.,  3.], m=2)\n    array([ 1.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.laguerre.lagint',
                ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'],
                '\n    Integrate a Laguerre series.\n\n    Returns a Laguerre series that is the Laguerre series `cs`, integrated\n    `m` times from `lbnd` to `x`.  At each iteration the resulting series\n    is **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  ("Buyer\n    beware": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `cs` is a sequence of\n    coefficients, from lowest order Laguerre series "term" to highest,\n    e.g., [1,2,3] represents the series :math:`P_0(x) + 2P_1(x) + 3P_2(x)`.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Laguerre series coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n\n    Returns\n    -------\n    S : ndarray\n        Laguerre series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.isscalar(lbnd) == False``, or\n        ``np.isscalar(scl) == False``.\n\n    See Also\n    --------\n    lagder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to :math:`1/a`\n    - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be "re-projected" onto the C-series basis set.  Thus, typically,\n    the result of this function is "un-intuitive," albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagint\n    >>> lagint([1,2,3])\n    array([ 1.,  1.,  1., -3.])\n    >>> lagint([1,2,3], m=2)\n    array([ 1.,  0.,  0., -4.,  3.])\n    >>> lagint([1,2,3], k=1)\n    array([ 2.,  1.,  1., -3.])\n    >>> lagint([1,2,3], lbnd=-1)\n    array([ 11.5,   1. ,   1. ,  -3. ])\n    >>> lagint([1,2], m=2, k=[1,2], lbnd=-1)\n    array([ 11.16666667,  -5.        ,  -3.        ,   2.        ])\n\n    '),
               ('numpy.polynomial.laguerre.lagval',
                ['x', 'cs'],
                'Evaluate a Laguerre series.\n\n    If `cs` is of length `n`, this function returns :\n\n    ``p(x) = cs[0]*P_0(x) + cs[1]*P_1(x) + ... + cs[n-1]*P_{n-1}(x)``\n\n    If x is a sequence or array then p(x) will have the same shape as x.\n    If r is a ring_like object that supports multiplication and addition\n    by the values in `cs`, then an object of the same type is returned.\n\n    Parameters\n    ----------\n    x : array_like, ring_like\n        Array of numbers or objects that support multiplication and\n        addition with themselves and with the elements of `cs`.\n    cs : array_like\n        1-d array of Laguerre coefficients ordered from low to high.\n\n    Returns\n    -------\n    values : ndarray, ring_like\n        If the return is an ndarray then it has the same shape as `x`.\n\n    See Also\n    --------\n    lagfit\n\n    Examples\n    --------\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagval\n    >>> coef = [1,2,3]\n    >>> lagval(1, coef)\n    -0.5\n    >>> lagval([[1,2],[3,4]], coef)\n    array([[-0.5, -4. ],\n           [-4.5, -2. ]])\n\n    '),
               ('numpy.polynomial.laguerre.lagvander',
                ['x', 'deg'],
                "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points `x`.\n    This isn't a true Vandermonde matrix because `x` can be an arbitrary\n    ndarray and the Laguerre polynomials aren't powers. If ``V`` is the\n    returned matrix and `x` is a 2d array, then the elements of ``V`` are\n    ``V[i,j,k] = P_k(x[i,j])``, where ``P_k`` is the Laguerre polynomial\n    of degree ``k``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The values are converted to double or complex\n        doubles. If x is scalar it is converted to a 1D array.\n    deg : integer\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : Vandermonde matrix.\n        The shape of the returned matrix is ``x.shape + (deg+1,)``. The last\n        index is the degree.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagvander\n    >>> x = np.array([0, 1, 2])\n    >>> lagvander(x, 3)\n    array([[ 1.        ,  1.        ,  1.        ,  1.        ],\n           [ 1.        ,  0.        , -0.5       , -0.66666667],\n           [ 1.        , -1.        , -1.        , -0.33333333]])\n\n    "),
               ('numpy.polynomial.laguerre.lagfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                '\n    Least squares fit of Laguerre series to data.\n\n    Return the coefficients of a Laguerre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int\n        Degree of the fitting polynomial\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the contribution of each point\n        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n        weights are chosen so that the errors of the products ``w[i]*y[i]``\n        all have the same variance.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Laguerre coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : present when `full` = True\n        Residuals of the least-squares fit, the effective rank of the\n        scaled Vandermonde matrix and its singular values, and the\n        specified value of `rcond`. For more details, see `linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if `full` = False.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', RankWarning)\n\n    See Also\n    --------\n    chebfit, legfit, polyfit, hermfit, hermefit\n    lagval : Evaluates a Laguerre series.\n    lagvander : pseudo Vandermonde matrix of Laguerre series.\n    lagweight : Laguerre weight function.\n    linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Laguerre series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `RankWarning` will be issued. This means that the\n    coeficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Laguerre series are probably most useful when the data can\n    be approximated by ``sqrt(w(x)) * p(x)``, where `w(x)` is the Laguerre\n    weight. In that case the wieght ``sqrt(w(x[i])`` should be used\n    together with data values ``y[i]/sqrt(w(x[i])``. The weight function is\n    available as `lagweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Curve fitting",\n           http://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagfit, lagval\n    >>> x = np.linspace(0, 10)\n    >>> err = np.random.randn(len(x))/10\n    >>> y = lagval(x, [1, 2, 3]) + err\n    >>> lagfit(x, y, 2)\n    array([ 0.96971004,  2.00193749,  3.00288744])\n\n    '),
               ('numpy.polynomial.laguerre.lagcompanion',
                ['cs'],
                'Return the companion matrix of cs.\n\n    The unscaled companion matrix of the Laguerre polynomials is already\n    symmetric when `cs` represents a single Laguerre polynomial, so no\n    further scaling is needed.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Laguerre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Companion matrix of dimensions (deg, deg).\n\n    '),
               ('numpy.polynomial.laguerre.lagroots',
                ['cs'],
                '\n    Compute the roots of a Laguerre series.\n\n    Return the roots (a.k.a "zeros") of the Laguerre series represented by\n    `cs`, which is the sequence of coefficients from lowest order "term"\n    to highest, e.g., [1,2,3] is the series ``L_0 + 2*L_1 + 3*L_2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Laguerre series coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots.  If all the roots are real, then so is the\n        dtype of ``out``; otherwise, ``out``\'s dtype is complex.\n\n    See Also\n    --------\n    polyroots\n    chebroots\n\n    Notes\n    -----\n    Algorithm(s) used:\n\n    Remember: because the Laguerre series basis set is different from the\n    "standard" basis set, the results of this function *may* not be what\n    one is expecting.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.laguerre import lagroots, lagfromroots\n    >>> coef = lagfromroots([0, 1, 2])\n    >>> coef\n    array([  2.,  -8.,  12.,  -6.])\n    >>> lagroots(coef)\n    array([ -4.44089210e-16,   1.00000000e+00,   2.00000000e+00])\n\n    '),
               ('numpy.polynomial.hermite.poly2herm',
                ['pol'],
                '\n    poly2herm(pol)\n\n    Convert a polynomial to a Hermite series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the "standard" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Hermite series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-d array containing the polynomial coefficients\n\n    Returns\n    -------\n    cs : ndarray\n        1-d array containing the coefficients of the equivalent Hermite\n        series.\n\n    See Also\n    --------\n    herm2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import poly2herme\n    >>> poly2herm(np.arange(4))\n    array([ 1.   ,  2.75 ,  0.5  ,  0.375])\n\n    '),
               ('numpy.polynomial.hermite.herm2poly',
                ['cs'],
                '\n    Convert a Hermite series to a polynomial.\n\n    Convert an array representing the coefficients of a Hermite series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the "standard" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array containing the Hermite series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-d array containing the coefficients of the equivalent polynomial\n        (relative to the "standard" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2herm\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import herm2poly\n    >>> herm2poly([ 1.   ,  2.75 ,  0.5  ,  0.375])\n    array([ 0.,  1.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.hermite.hermline',
                ['off', 'scl'],
                "\n    Hermite series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    polyline, chebline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermline, hermval\n    >>> hermval(0,hermline(3, 2))\n    3.0\n    >>> hermval(1,hermline(3, 2))\n    5.0\n\n    "),
               ('numpy.polynomial.hermite.hermfromroots',
                ['roots'],
                '\n    Generate a Hermite series with the given roots.\n\n    Return the array of coefficients for the P-series whose roots (a.k.a.\n    "zeros") are given by *roots*.  The returned array of coefficients is\n    ordered from lowest order "term" to highest, and zeros of multiplicity\n    greater than one must be included in *roots* a number of times equal\n    to their multiplicity (e.g., if `2` is a root of multiplicity three,\n    then [2,2,2] must be in *roots*).\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-d array of the Hermite series coefficients, ordered from low to\n        high.  If all roots are real, ``out.dtype`` is a float type;\n        otherwise, ``out.dtype`` is a complex type, even if all the\n        coefficients in the result are real (see Examples below).\n\n    See Also\n    --------\n    polyfromroots, chebfromroots\n\n    Notes\n    -----\n    What is returned are the :math:`c_i` such that:\n\n    .. math::\n\n        \\sum_{i=0}^{n} c_i*P_i(x) = \\prod_{i=0}^{n} (x - roots[i])\n\n    where ``n == len(roots)`` and :math:`P_i(x)` is the `i`-th Hermite\n    (basis) polynomial over the domain `[-1,1]`.  Note that, unlike\n    `polyfromroots`, due to the nature of the Hermite basis set, the\n    above identity *does not* imply :math:`c_n = 1` identically (see\n    Examples).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermfromroots, hermval\n    >>> coef = hermfromroots((-1, 0, 1))\n    >>> hermval((-1, 0, 1), coef)\n    array([ 0.,  0.,  0.])\n    >>> coef = hermfromroots((-1j, 1j))\n    >>> hermval((-1j, 1j), coef)\n    array([ 0.+0.j,  0.+0.j])\n\n    '),
               ('numpy.polynomial.hermite.hermadd',
                ['c1', 'c2'],
                '\n    Add one Hermite series to another.\n\n    Returns the sum of two Hermite series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Hermite series of their sum.\n\n    See Also\n    --------\n    hermsub, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Hermite series\n    is a Hermite series (without having to "reproject" the result onto\n    the basis set) so addition, just like that of "standard" polynomials,\n    is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermadd\n    >>> hermadd([1, 2, 3], [1, 2, 3, 4])\n    array([ 2.,  4.,  6.,  4.])\n\n    '),
               ('numpy.polynomial.hermite.hermsub',
                ['c1', 'c2'],
                '\n    Subtract one Hermite series from another.\n\n    Returns the difference of two Hermite series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their difference.\n\n    See Also\n    --------\n    hermadd, hermmul, hermdiv, hermpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Hermite\n    series is a Hermite series (without having to "reproject" the result\n    onto the basis set) so subtraction, just like that of "standard"\n    polynomials, is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermsub\n    >>> hermsub([1, 2, 3, 4], [1, 2, 3])\n    array([ 0.,  0.,  0.,  4.])\n\n    '),
               ('numpy.polynomial.hermite.hermmulx',
                ['cs'],
                'Multiply a Hermite series by x.\n\n    Multiply the Hermite series `cs` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Hermite\n    polynomials in the form\n\n    .. math::\n\n    xP_i(x) = (P_{i + 1}(x)/2 + i*P_{i - 1}(x))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermmulx\n    >>> hermmulx([1, 2, 3])\n    array([ 2. ,  6.5,  1. ,  1.5])\n\n    '),
               ('numpy.polynomial.hermite.hermmul',
                ['c1', 'c2'],
                '\n    Multiply one Hermite series by another.\n\n    Returns the product of two Hermite series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order "term" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their product.\n\n    See Also\n    --------\n    hermadd, hermsub, hermdiv, hermpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Hermite polynomial basis set.  Thus, to express\n    the product as a Hermite series, it is necessary to "re-project" the\n    product onto said basis set, which may produce "un-intuitive" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermmul\n    >>> hermmul([1, 2, 3], [0, 1, 2])\n    array([ 52.,  29.,  52.,   7.,   6.])\n\n    '),
               ('numpy.polynomial.hermite.hermdiv',
                ['c1', 'c2'],
                '\n    Divide one Hermite series by another.\n\n    Returns the quotient-with-remainder of two Hermite series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Hermite series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmul, hermpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Hermite series by another\n    results in quotient and remainder terms that are not in the Hermite\n    polynomial basis set.  Thus, to express these results as a Hermite\n    series, it is necessary to "re-project" the results onto the Hermite\n    basis set, which may produce "un-intuitive" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermdiv\n    >>> hermdiv([ 52.,  29.,  52.,   7.,   6.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 0.]))\n    >>> hermdiv([ 54.,  31.,  52.,   7.,   6.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 2.,  2.]))\n    >>> hermdiv([ 53.,  30.,  52.,   7.,   6.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 1.,  1.]))\n\n    '),
               ('numpy.polynomial.hermite.hermpow',
                ['cs', 'pow', 'maxpower=16'],
                'Raise a Hermite series to a power.\n\n    Returns the Hermite series `cs` raised to the power `pow`. The\n    arguement `cs` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    cs : array_like\n        1d array of Hermite series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to umanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Hermite series of power.\n\n    See Also\n    --------\n    hermadd, hermsub, hermmul, hermdiv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermpow\n    >>> hermpow([1, 2, 3], 2)\n    array([ 81.,  52.,  82.,  12.,   9.])\n\n    '),
               ('numpy.polynomial.hermite.hermder',
                ['cs', 'm=1', 'scl=1'],
                '\n    Differentiate a Hermite series.\n\n    Returns the series `cs` differentiated `m` times.  At each iteration the\n    result is multiplied by `scl` (the scaling factor is for use in a linear\n    change of variable).  The argument `cs` is the sequence of coefficients\n    from lowest order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    cs: array_like\n        1-d array of Hermite series coefficients ordered from low to high.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n\n    Returns\n    -------\n    der : ndarray\n        Hermite series of the derivative.\n\n    See Also\n    --------\n    hermint\n\n    Notes\n    -----\n    In general, the result of differentiating a Hermite series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be "un-intuitive," albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermder\n    >>> hermder([ 1. ,  0.5,  0.5,  0.5])\n    array([ 1.,  2.,  3.])\n    >>> hermder([-0.5,  1./2.,  1./8.,  1./12.,  1./16.], m=2)\n    array([ 1.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.hermite.hermint',
                ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'],
                '\n    Integrate a Hermite series.\n\n    Returns a Hermite series that is the Hermite series `cs`, integrated\n    `m` times from `lbnd` to `x`.  At each iteration the resulting series\n    is **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  ("Buyer\n    beware": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `cs` is a sequence of\n    coefficients, from lowest order Hermite series "term" to highest,\n    e.g., [1,2,3] represents the series :math:`P_0(x) + 2P_1(x) + 3P_2(x)`.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Hermite series coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n\n    Returns\n    -------\n    S : ndarray\n        Hermite series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.isscalar(lbnd) == False``, or\n        ``np.isscalar(scl) == False``.\n\n    See Also\n    --------\n    hermder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to :math:`1/a`\n    - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be "re-projected" onto the C-series basis set.  Thus, typically,\n    the result of this function is "un-intuitive," albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermint\n    >>> hermint([1,2,3]) # integrate once, value 0 at 0.\n    array([ 1. ,  0.5,  0.5,  0.5])\n    >>> hermint([1,2,3], m=2) # integrate twice, value & deriv 0 at 0 \n    array([-0.5       ,  0.5       ,  0.125     ,  0.08333333,  0.0625    ])\n    >>> hermint([1,2,3], k=1) # integrate once, value 1 at 0.\n    array([ 2. ,  0.5,  0.5,  0.5])\n    >>> hermint([1,2,3], lbnd=-1) # integrate once, value 0 at -1\n    array([-2. ,  0.5,  0.5,  0.5])\n    >>> hermint([1,2,3], m=2, k=[1,2], lbnd=-1)\n    array([ 1.66666667, -0.5       ,  0.125     ,  0.08333333,  0.0625    ])\n\n    '),
               ('numpy.polynomial.hermite.hermval',
                ['x', 'cs'],
                'Evaluate a Hermite series.\n\n    If `cs` is of length `n`, this function returns :\n\n    ``p(x) = cs[0]*P_0(x) + cs[1]*P_1(x) + ... + cs[n-1]*P_{n-1}(x)``\n\n    If x is a sequence or array then p(x) will have the same shape as x.\n    If r is a ring_like object that supports multiplication and addition\n    by the values in `cs`, then an object of the same type is returned.\n\n    Parameters\n    ----------\n    x : array_like, ring_like\n        Array of numbers or objects that support multiplication and\n        addition with themselves and with the elements of `cs`.\n    cs : array_like\n        1-d array of Hermite coefficients ordered from low to high.\n\n    Returns\n    -------\n    values : ndarray, ring_like\n        If the return is an ndarray then it has the same shape as `x`.\n\n    See Also\n    --------\n    hermfit\n\n    Examples\n    --------\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermval\n    >>> coef = [1,2,3]\n    >>> hermval(1, coef)\n    11.0\n    >>> hermval([[1,2],[3,4]], coef)\n    array([[  11.,   51.],\n           [ 115.,  203.]])\n\n    '),
               ('numpy.polynomial.hermite.hermvander',
                ['x', 'deg'],
                "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points `x`.\n    This isn't a true Vandermonde matrix because `x` can be an arbitrary\n    ndarray and the Hermite polynomials aren't powers. If ``V`` is the\n    returned matrix and `x` is a 2d array, then the elements of ``V`` are\n    ``V[i,j,k] = P_k(x[i,j])``, where ``P_k`` is the Hermite polynomial\n    of degree ``k``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The values are converted to double or complex\n        doubles. If x is scalar it is converted to a 1D array.\n    deg : integer\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : Vandermonde matrix.\n        The shape of the returned matrix is ``x.shape + (deg+1,)``. The last\n        index is the degree.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermvander\n    >>> x = np.array([-1, 0, 1])\n    >>> hermvander(x, 3)\n    array([[ 1., -2.,  2.,  4.],\n           [ 1.,  0., -2., -0.],\n           [ 1.,  2.,  2., -4.]])\n\n    "),
               ('numpy.polynomial.hermite.hermfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                '\n    Least squares fit of Hermite series to data.\n\n    Return the coefficients of a Hermite series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * H_1(x) + ... + c_n * H_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int\n        Degree of the fitting polynomial\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the contribution of each point\n        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n        weights are chosen so that the errors of the products ``w[i]*y[i]``\n        all have the same variance.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Hermite coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : present when `full` = True\n        Residuals of the least-squares fit, the effective rank of the\n        scaled Vandermonde matrix and its singular values, and the\n        specified value of `rcond`. For more details, see `linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if `full` = False.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', RankWarning)\n\n    See Also\n    --------\n    chebfit, legfit, lagfit, polyfit, hermefit\n    hermval : Evaluates a Hermite series.\n    hermvander : Vandermonde matrix of Hermite series.\n    hermweight : Hermite weight function\n    linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Hermite series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `RankWarning` will be issued. This means that the\n    coeficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Hermite series are probably most useful when the data can be\n    approximated by ``sqrt(w(x)) * p(x)``, where `w(x)` is the Hermite\n    weight. In that case the wieght ``sqrt(w(x[i])`` should be used\n    together with data values ``y[i]/sqrt(w(x[i])``. The weight function is\n    available as `hermweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Curve fitting",\n           http://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermfit, hermval\n    >>> x = np.linspace(-10, 10)\n    >>> err = np.random.randn(len(x))/10\n    >>> y = hermval(x, [1, 2, 3]) + err\n    >>> hermfit(x, y, 2)\n    array([ 0.97902637,  1.99849131,  3.00006   ])\n\n    '),
               ('numpy.polynomial.hermite.hermcompanion',
                ['cs'],
                'Return the scaled companion matrix of cs.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `cs` represents a single Hermite polynomial. This\n    provides better eigenvalue estimates than the unscaled case and in the\n    single polynomial case the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    '),
               ('numpy.polynomial.hermite.hermroots',
                ['cs'],
                '\n    Compute the roots of a Hermite series.\n\n    Return the roots (a.k.a "zeros") of the Hermite series represented by\n    `cs`, which is the sequence of coefficients from lowest order "term"\n    to highest, e.g., [1,2,3] is the series ``L_0 + 2*L_1 + 3*L_2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Hermite series coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots.  If all the roots are real, then so is the\n        dtype of ``out``; otherwise, ``out``\'s dtype is complex.\n\n    See Also\n    --------\n    polyroots\n    chebroots\n\n    Notes\n    -----\n    Algorithm(s) used:\n\n    Remember: because the Hermite series basis set is different from the\n    "standard" basis set, the results of this function *may* not be what\n    one is expecting.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite import hermroots, hermfromroots\n    >>> coef = hermfromroots([-1, 0, 1])\n    >>> coef\n    array([ 0.   ,  0.25 ,  0.   ,  0.125])\n    >>> hermroots(coef)\n    array([ -1.00000000e+00,  -1.38777878e-17,   1.00000000e+00])\n\n    '),
               ('numpy.polynomial.polyline', ['off', 'scl'], ''),
               ('numpy.polynomial.polyfromroots', ['roots'], ''),
               ('numpy.polynomial.polyadd', ['c1', 'c2'], ''),
               ('numpy.polynomial.polysub', ['c1', 'c2'], ''),
               ('numpy.polynomial.polymulx', ['cs'], ''),
               ('numpy.polynomial.polymul', ['c1', 'c2'], ''),
               ('numpy.polynomial.polydiv', ['c1', 'c2'], ''),
               ('numpy.polynomial.polypow', ['cs', 'pow', 'maxpower=None'], ''),
               ('numpy.polynomial.polyder', ['cs', 'm=1', 'scl=1'], ''),
               ('numpy.polynomial.polyint', ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'], ''),
               ('numpy.polynomial.polyval', ['x', 'cs'], ''),
               ('numpy.polynomial.polyvander', ['x', 'deg'], ''),
               ('numpy.polynomial.polyfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                ''),
               ('numpy.polynomial.polyroots', ['cs'], ''),
               ('numpy.polynomial.poly2cheb', ['pol'], ''),
               ('numpy.polynomial.cheb2poly', ['cs'], ''),
               ('numpy.polynomial.chebline', ['off', 'scl'], ''),
               ('numpy.polynomial.chebfromroots', ['roots'], ''),
               ('numpy.polynomial.chebadd', ['c1', 'c2'], ''),
               ('numpy.polynomial.chebsub', ['c1', 'c2'], ''),
               ('numpy.polynomial.chebmulx', ['cs'], ''),
               ('numpy.polynomial.chebmul', ['c1', 'c2'], ''),
               ('numpy.polynomial.chebdiv', ['c1', 'c2'], ''),
               ('numpy.polynomial.chebpow', ['cs', 'pow', 'maxpower=16'], ''),
               ('numpy.polynomial.chebder', ['cs', 'm=1', 'scl=1'], ''),
               ('numpy.polynomial.chebint', ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'], ''),
               ('numpy.polynomial.chebval', ['x', 'cs'], ''),
               ('numpy.polynomial.chebvander', ['x', 'deg'], ''),
               ('numpy.polynomial.chebfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                ''),
               ('numpy.polynomial.chebroots', ['cs'], ''),
               ('numpy.polynomial.chebpts1', ['npts'], ''),
               ('numpy.polynomial.chebpts2', ['npts'], ''),
               ('numpy.polynomial.poly2leg', ['pol'], ''),
               ('numpy.polynomial.leg2poly', ['cs'], ''),
               ('numpy.polynomial.legline', ['off', 'scl'], ''),
               ('numpy.polynomial.legfromroots', ['roots'], ''),
               ('numpy.polynomial.legadd', ['c1', 'c2'], ''),
               ('numpy.polynomial.legsub', ['c1', 'c2'], ''),
               ('numpy.polynomial.legmulx', ['cs'], ''),
               ('numpy.polynomial.legmul', ['c1', 'c2'], ''),
               ('numpy.polynomial.legdiv', ['c1', 'c2'], ''),
               ('numpy.polynomial.legpow', ['cs', 'pow', 'maxpower=16'], ''),
               ('numpy.polynomial.legder', ['cs', 'm=1', 'scl=1'], ''),
               ('numpy.polynomial.legint', ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'], ''),
               ('numpy.polynomial.legval', ['x', 'cs'], ''),
               ('numpy.polynomial.legvander', ['x', 'deg'], ''),
               ('numpy.polynomial.legfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                ''),
               ('numpy.polynomial.legroots', ['cs'], ''),
               ('numpy.polynomial.trimseq', ['seq'], ''),
               ('numpy.polynomial.as_series', ['alist', 'trim=True'], ''),
               ('numpy.polynomial.trimcoef', ['c', 'tol=0'], ''),
               ('numpy.polynomial.getdomain', ['x'], ''),
               ('numpy.polynomial.mapdomain', ['x', 'old', 'new'], ''),
               ('numpy.polynomial.polyutils.any', ['iterable'], ''),
               ('numpy.polynomial.polyutils.trimseq',
                ['seq'],
                'Remove small Poly series coefficients.\n\n    Parameters\n    ----------\n    seq : sequence\n        Sequence of Poly series coefficients. This routine fails for\n        empty sequences.\n\n    Returns\n    -------\n    series : sequence\n        Subsequence with trailing zeros removed. If the resulting sequence\n        would be empty, return the first element. The returned sequence may\n        or may not be a view.\n\n    Notes\n    -----\n    Do not lose the type info if the sequence contains unknown objects.\n\n    '),
               ('numpy.polynomial.polyutils.as_series',
                ['alist', 'trim=True'],
                '\n    Return argument as a list of 1-d arrays.\n\n    The returned list contains array(s) of dtype double, complex double, or\n    object.  A 1-d argument of shape ``(N,)`` is parsed into ``N`` arrays of\n    size one; a 2-d argument of shape ``(M,N)`` is parsed into ``M`` arrays\n    of size ``N`` (i.e., is "parsed by row"); and a higher dimensional array\n    raises a Value Error if it is not first reshaped into either a 1-d or 2-d\n    array.\n\n    Parameters\n    ----------\n    a : array_like\n        A 1- or 2-d array_like\n    trim : boolean, optional\n        When True, trailing zeros are removed from the inputs.\n        When False, the inputs are passed through intact.\n\n    Returns\n    -------\n    [a1, a2,...] : list of 1d-arrays\n        A copy of the input data as a list of 1-d arrays.\n\n    Raises\n    ------\n    ValueError :\n        Raised when `as_series` cannot convert its input to 1-d arrays, or at\n        least one of the resulting arrays is empty.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> a = np.arange(4)\n    >>> P.as_series(a)\n    [array([ 0.]), array([ 1.]), array([ 2.]), array([ 3.])]\n    >>> b = np.arange(6).reshape((2,3))\n    >>> P.as_series(b)\n    [array([ 0.,  1.,  2.]), array([ 3.,  4.,  5.])]\n\n    '),
               ('numpy.polynomial.polyutils.trimcoef',
                ['c', 'tol=0'],
                '\n    Remove "small" "trailing" coefficients from a polynomial.\n\n    "Small" means "small in absolute value" and is controlled by the\n    parameter `tol`; "trailing" means highest order coefficient(s), e.g., in\n    ``[0, 1, 1, 0, 0]`` (which represents ``0 + x + x**2 + 0*x**3 + 0*x**4``)\n    both the 3-rd and 4-th order coefficients would be "trimmed."\n\n    Parameters\n    ----------\n    c : array_like\n        1-d array of coefficients, ordered from lowest order to highest.\n    tol : number, optional\n        Trailing (i.e., highest order) elements with absolute value less\n        than or equal to `tol` (default value is zero) are removed.\n\n    Returns\n    -------\n    trimmed : ndarray\n        1-d array with trailing zeros removed.  If the resulting series\n        would be empty, a series containing a single zero is returned.\n\n    Raises\n    ------\n    ValueError\n        If `tol` < 0\n\n    See Also\n    --------\n    trimseq\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> P.trimcoef((0,0,3,0,5,0,0))\n    array([ 0.,  0.,  3.,  0.,  5.])\n    >>> P.trimcoef((0,0,1e-3,0,1e-5,0,0),1e-3) # item == tol is trimmed\n    array([ 0.])\n    >>> i = complex(0,1) # works for complex\n    >>> P.trimcoef((3e-4,1e-3*(1-i),5e-4,2e-5*(1+i)), 1e-3)\n    array([ 0.0003+0.j   ,  0.0010-0.001j])\n\n    '),
               ('numpy.polynomial.polyutils.getdomain',
                ['x'],
                '\n    Return a domain suitable for given abscissae.\n\n    Find a domain suitable for a polynomial or Chebyshev series\n    defined at the values supplied.\n\n    Parameters\n    ----------\n    x : array_like\n        1-d array of abscissae whose domain will be determined.\n\n    Returns\n    -------\n    domain : ndarray\n        1-d array containing two values.  If the inputs are complex, then\n        the two returned points are the lower left and upper right corners\n        of the smallest rectangle (aligned with the axes) in the complex\n        plane containing the points `x`. If the inputs are real, then the\n        two points are the ends of the smallest interval containing the\n        points `x`.\n\n    See Also\n    --------\n    mapparms, mapdomain\n\n    Examples\n    --------\n    >>> from numpy.polynomial import polyutils as pu\n    >>> points = np.arange(4)**2 - 5; points\n    array([-5, -4, -1,  4])\n    >>> pu.getdomain(points)\n    array([-5.,  4.])\n    >>> c = np.exp(complex(0,1)*np.pi*np.arange(12)/6) # unit circle\n    >>> pu.getdomain(c)\n    array([-1.-1.j,  1.+1.j])\n\n    '),
               ('numpy.polynomial.polyutils.mapparms',
                ['old', 'new'],
                '\n    Linear map parameters between domains.\n\n    Return the parameters of the linear map ``offset + scale*x`` that maps\n    `old` to `new` such that ``old[i] -> new[i]``, ``i = 0, 1``.\n\n    Parameters\n    ----------\n    old, new : array_like\n        Domains. Each domain must (successfully) convert to a 1-d array\n        containing precisely two values.\n\n    Returns\n    -------\n    offset, scale : scalars\n        The map ``L(x) = offset + scale*x`` maps the first domain to the\n        second.\n\n    See Also\n    --------\n    getdomain, mapdomain\n\n    Notes\n    -----\n    Also works for complex numbers, and thus can be used to calculate the\n    parameters required to map any line in the complex plane to any other\n    line therein.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> P.mapparms((-1,1),(-1,1))\n    (0.0, 1.0)\n    >>> P.mapparms((1,-1),(-1,1))\n    (0.0, -1.0)\n    >>> i = complex(0,1)\n    >>> P.mapparms((-i,-1),(1,i))\n    ((1+1j), (1+0j))\n\n    '),
               ('numpy.polynomial.polyutils.mapdomain',
                ['x', 'old', 'new'],
                '\n    Apply linear map to input points.\n\n    The linear map ``offset + scale*x`` that maps the domain `old` to\n    the domain `new` is applied to the points `x`.\n\n    Parameters\n    ----------\n    x : array_like\n        Points to be mapped. If `x` is a subtype of ndarray the subtype\n        will be preserved.\n    old, new : array_like\n        The two domains that determine the map.  Each must (successfully)\n        convert to 1-d arrays containing precisely two values.\n\n    Returns\n    -------\n    x_out : ndarray\n        Array of points of the same shape as `x`, after application of the\n        linear map between the two domains.\n\n    See Also\n    --------\n    getdomain, mapparms\n\n    Notes\n    -----\n    Effectively, this implements:\n\n    .. math ::\n        x\\_out = new[0] + m(x - old[0])\n\n    where\n\n    .. math ::\n        m = \\frac{new[1]-new[0]}{old[1]-old[0]}\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> old_domain = (-1,1)\n    >>> new_domain = (0,2*np.pi)\n    >>> x = np.linspace(-1,1,6); x\n    array([-1. , -0.6, -0.2,  0.2,  0.6,  1. ])\n    >>> x_out = P.mapdomain(x, old_domain, new_domain); x_out\n    array([ 0.        ,  1.25663706,  2.51327412,  3.76991118,  5.02654825,\n            6.28318531])\n    >>> x - P.mapdomain(x_out, new_domain, old_domain)\n    array([ 0.,  0.,  0.,  0.,  0.,  0.])\n\n    Also works for complex numbers (and thus can be used to map any line in\n    the complex plane to any other line therein).\n\n    >>> i = complex(0,1)\n    >>> old = (-1 - i, 1 + i)\n    >>> new = (-1 + i, 1 - i)\n    >>> z = np.linspace(old[0], old[1], 6); z\n    array([-1.0-1.j , -0.6-0.6j, -0.2-0.2j,  0.2+0.2j,  0.6+0.6j,  1.0+1.j ])\n    >>> new_z = P.mapdomain(z, old, new); new_z\n    array([-1.0+1.j , -0.6+0.6j, -0.2+0.2j,  0.2-0.2j,  0.6-0.6j,  1.0-1.j ])\n\n    '),
               ('numpy.polynomial.legendre.poly2leg',
                ['pol'],
                '\n    Convert a polynomial to a Legendre series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the "standard" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Legendre series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-d array containing the polynomial coefficients\n\n    Returns\n    -------\n    cs : ndarray\n        1-d array containing the coefficients of the equivalent Legendre\n        series.\n\n    See Also\n    --------\n    leg2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> p = P.Polynomial(np.arange(4))\n    >>> p\n    Polynomial([ 0.,  1.,  2.,  3.], [-1.,  1.])\n    >>> c = P.Legendre(P.poly2leg(p.coef))\n    >>> c\n    Legendre([ 1.  ,  3.25,  1.  ,  0.75], [-1.,  1.])\n\n    '),
               ('numpy.polynomial.legendre.leg2poly',
                ['cs'],
                '\n    Convert a Legendre series to a polynomial.\n\n    Convert an array representing the coefficients of a Legendre series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the "standard" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array containing the Legendre series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-d array containing the coefficients of the equivalent polynomial\n        (relative to the "standard" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2leg\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> c = P.Legendre(range(4))\n    >>> c\n    Legendre([ 0.,  1.,  2.,  3.], [-1.,  1.])\n    >>> p = c.convert(kind=P.Polynomial)\n    >>> p\n    Polynomial([-1. , -3.5,  3. ,  7.5], [-1.,  1.])\n    >>> P.leg2poly(range(4))\n    array([-1. , -3.5,  3. ,  7.5])\n\n\n    '),
               ('numpy.polynomial.legendre.legline',
                ['off', 'scl'],
                "\n    Legendre series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Legendre series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    polyline, chebline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legline(3,2)\n    array([3, 2])\n    >>> L.legval(-3, L.legline(3,2)) # should be -3\n    -3.0\n\n    "),
               ('numpy.polynomial.legendre.legfromroots',
                ['roots'],
                '\n    Generate a Legendre series with the given roots.\n\n    Return the array of coefficients for the P-series whose roots (a.k.a.\n    "zeros") are given by *roots*.  The returned array of coefficients is\n    ordered from lowest order "term" to highest, and zeros of multiplicity\n    greater than one must be included in *roots* a number of times equal\n    to their multiplicity (e.g., if `2` is a root of multiplicity three,\n    then [2,2,2] must be in *roots*).\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-d array of the Legendre series coefficients, ordered from low to\n        high.  If all roots are real, ``out.dtype`` is a float type;\n        otherwise, ``out.dtype`` is a complex type, even if all the\n        coefficients in the result are real (see Examples below).\n\n    See Also\n    --------\n    polyfromroots, chebfromroots\n\n    Notes\n    -----\n    What is returned are the :math:`c_i` such that:\n\n    .. math::\n\n        \\sum_{i=0}^{n} c_i*P_i(x) = \\prod_{i=0}^{n} (x - roots[i])\n\n    where ``n == len(roots)`` and :math:`P_i(x)` is the `i`-th Legendre\n    (basis) polynomial over the domain `[-1,1]`.  Note that, unlike\n    `polyfromroots`, due to the nature of the Legendre basis set, the\n    above identity *does not* imply :math:`c_n = 1` identically (see\n    Examples).\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as L\n    >>> L.legfromroots((-1,0,1)) # x^3 - x relative to the standard basis\n    array([ 0. , -0.4,  0. ,  0.4])\n    >>> j = complex(0,1)\n    >>> L.legfromroots((-j,j)) # x^2 + 1 relative to the standard basis\n    array([ 1.33333333+0.j,  0.00000000+0.j,  0.66666667+0.j])\n\n    '),
               ('numpy.polynomial.legendre.legadd',
                ['c1', 'c2'],
                '\n    Add one Legendre series to another.\n\n    Returns the sum of two Legendre series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Legendre series of their sum.\n\n    See Also\n    --------\n    legsub, legmul, legdiv, legpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Legendre series\n    is a Legendre series (without having to "reproject" the result onto\n    the basis set) so addition, just like that of "standard" polynomials,\n    is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legadd(c1,c2)\n    array([ 4.,  4.,  4.])\n\n    '),
               ('numpy.polynomial.legendre.legsub',
                ['c1', 'c2'],
                '\n    Subtract one Legendre series from another.\n\n    Returns the difference of two Legendre series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Legendre series coefficients representing their difference.\n\n    See Also\n    --------\n    legadd, legmul, legdiv, legpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Legendre\n    series is a Legendre series (without having to "reproject" the result\n    onto the basis set) so subtraction, just like that of "standard"\n    polynomials, is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legsub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> L.legsub(c2,c1) # -C.legsub(c1,c2)\n    array([ 2.,  0., -2.])\n\n    '),
               ('numpy.polynomial.legendre.legmulx',
                ['cs'],
                'Multiply a Legendre series by x.\n\n    Multiply the Legendre series `cs` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Legendre\n    polynomials in the form\n\n    .. math::\n\n      xP_i(x) = ((i + 1)*P_{i + 1}(x) + i*P_{i - 1}(x))/(2i + 1)\n\n    '),
               ('numpy.polynomial.legendre.legmul',
                ['c1', 'c2'],
                '\n    Multiply one Legendre series by another.\n\n    Returns the product of two Legendre series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order "term" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Legendre series coefficients representing their product.\n\n    See Also\n    --------\n    legadd, legsub, legdiv, legpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Legendre polynomial basis set.  Thus, to express\n    the product as a Legendre series, it is necessary to "re-project" the\n    product onto said basis set, which may produce "un-intuitive" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2)\n    >>> P.legmul(c1,c2) # multiplication requires "reprojection"\n    array([  4.33333333,  10.4       ,  11.66666667,   3.6       ])\n\n    '),
               ('numpy.polynomial.legendre.legdiv',
                ['c1', 'c2'],
                '\n    Divide one Legendre series by another.\n\n    Returns the quotient-with-remainder of two Legendre series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-D arrays of Legendre series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    quo, rem : ndarrays\n        Of Legendre series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    legadd, legsub, legmul, legpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Legendre series by another\n    results in quotient and remainder terms that are not in the Legendre\n    polynomial basis set.  Thus, to express these results as a Legendre\n    series, it is necessary to "re-project" the results onto the Legendre\n    basis set, which may produce "un-intuitive" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> L.legdiv(c1,c2) # quotient "intuitive," remainder not\n    (array([ 3.]), array([-8., -4.]))\n    >>> c2 = (0,1,2,3)\n    >>> L.legdiv(c2,c1) # neither "intuitive"\n    (array([-0.07407407,  1.66666667]), array([-1.03703704, -2.51851852]))\n\n    '),
               ('numpy.polynomial.legendre.legpow',
                ['cs', 'pow', 'maxpower=16'],
                'Raise a Legendre series to a power.\n\n    Returns the Legendre series `cs` raised to the power `pow`. The\n    arguement `cs` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    cs : array_like\n        1d array of Legendre series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to umanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Legendre series of power.\n\n    See Also\n    --------\n    legadd, legsub, legmul, legdiv\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.legendre.legder',
                ['cs', 'm=1', 'scl=1'],
                '\n    Differentiate a Legendre series.\n\n    Returns the series `cs` differentiated `m` times.  At each iteration the\n    result is multiplied by `scl` (the scaling factor is for use in a linear\n    change of variable).  The argument `cs` is the sequence of coefficients\n    from lowest order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-D array of Legendre series coefficients ordered from low to high.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n\n    Returns\n    -------\n    der : ndarray\n        Legendre series of the derivative.\n\n    See Also\n    --------\n    legint\n\n    Notes\n    -----\n    In general, the result of differentiating a Legendre series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be "un-intuitive," albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> cs = (1,2,3,4)\n    >>> L.legder(cs)\n    array([  6.,   9.,  20.])\n    >>> L.legder(cs,3)\n    array([ 60.])\n    >>> L.legder(cs,scl=-1)\n    array([ -6.,  -9., -20.])\n    >>> L.legder(cs,2,-1)\n    array([  9.,  60.])\n\n    '),
               ('numpy.polynomial.legendre.legint',
                ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'],
                '\n    Integrate a Legendre series.\n\n    Returns a Legendre series that is the Legendre series `cs`, integrated\n    `m` times from `lbnd` to `x`.  At each iteration the resulting series\n    is **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  ("Buyer\n    beware": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `cs` is a sequence of\n    coefficients, from lowest order Legendre series "term" to highest,\n    e.g., [1,2,3] represents the series :math:`P_0(x) + 2P_1(x) + 3P_2(x)`.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n\n    Returns\n    -------\n    S : ndarray\n        Legendre series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.isscalar(lbnd) == False``, or\n        ``np.isscalar(scl) == False``.\n\n    See Also\n    --------\n    legder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to :math:`1/a`\n    - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be "re-projected" onto the C-series basis set.  Thus, typically,\n    the result of this function is "un-intuitive," albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import legendre as L\n    >>> cs = (1,2,3)\n    >>> L.legint(cs)\n    array([ 0.33333333,  0.4       ,  0.66666667,  0.6       ])\n    >>> L.legint(cs,3)\n    array([  1.66666667e-02,  -1.78571429e-02,   4.76190476e-02,\n            -1.73472348e-18,   1.90476190e-02,   9.52380952e-03])\n    >>> L.legint(cs, k=3)\n    array([ 3.33333333,  0.4       ,  0.66666667,  0.6       ])\n    >>> L.legint(cs, lbnd=-2)\n    array([ 7.33333333,  0.4       ,  0.66666667,  0.6       ])\n    >>> L.legint(cs, scl=2)\n    array([ 0.66666667,  0.8       ,  1.33333333,  1.2       ])\n\n    '),
               ('numpy.polynomial.legendre.legval',
                ['x', 'cs'],
                'Evaluate a Legendre series.\n\n    If `cs` is of length `n`, this function returns :\n\n    ``p(x) = cs[0]*P_0(x) + cs[1]*P_1(x) + ... + cs[n-1]*P_{n-1}(x)``\n\n    If x is a sequence or array then p(x) will have the same shape as x.\n    If r is a ring_like object that supports multiplication and addition\n    by the values in `cs`, then an object of the same type is returned.\n\n    Parameters\n    ----------\n    x : array_like, ring_like\n        Array of numbers or objects that support multiplication and\n        addition with themselves and with the elements of `cs`.\n    cs : array_like\n        1-d array of Legendre coefficients ordered from low to high.\n\n    Returns\n    -------\n    values : ndarray, ring_like\n        If the return is an ndarray then it has the same shape as `x`.\n\n    See Also\n    --------\n    legfit\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.legendre.legvander',
                ['x', 'deg'],
                "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points `x`.\n    This isn't a true Vandermonde matrix because `x` can be an arbitrary\n    ndarray and the Legendre polynomials aren't powers. If ``V`` is the\n    returned matrix and `x` is a 2d array, then the elements of ``V`` are\n    ``V[i,j,k] = P_k(x[i,j])``, where ``P_k`` is the Legendre polynomial\n    of degree ``k``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The values are converted to double or complex\n        doubles. If x is scalar it is converted to a 1D array.\n    deg : integer\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : Vandermonde matrix.\n        The shape of the returned matrix is ``x.shape + (deg+1,)``. The last\n        index is the degree.\n\n    "),
               ('numpy.polynomial.legendre.legfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                '\n    Least squares fit of Legendre series to data.\n\n    Return the coefficients of a Legendre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int\n        Degree of the fitting polynomial\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the contribution of each point\n        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n        weights are chosen so that the errors of the products ``w[i]*y[i]``\n        all have the same variance.  The default value is None.\n\n        .. versionadded:: 1.5.0\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Legendre coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : present when `full` = True\n        Residuals of the least-squares fit, the effective rank of the\n        scaled Vandermonde matrix and its singular values, and the\n        specified value of `rcond`. For more details, see `linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if `full` = False.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', RankWarning)\n\n    See Also\n    --------\n    chebfit, polyfit, lagfit, hermfit, hermefit\n    legval : Evaluates a Legendre series.\n    legvander : Vandermonde matrix of Legendre series.\n    legweight : Legendre weight function (= 1).\n    linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Legendre series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where :math:`w_j` are the weights. This problem is solved by setting up\n    as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `RankWarning` will be issued. This means that the\n    coeficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Legendre series are usually better conditioned than fits\n    using power series, but much can depend on the distribution of the\n    sample points and the smoothness of the data. If the quality of the fit\n    is inadequate splines may be a good alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Curve fitting",\n           http://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.legendre.legcompanion',
                ['cs'],
                'Return the scaled companion matrix of cs.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `cs` represents a single Legendre polynomial. This\n    provides better eigenvalue estimates than the unscaled case and in the\n    single polynomial case the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    '),
               ('numpy.polynomial.legendre.legroots',
                ['cs'],
                '\n    Compute the roots of a Legendre series.\n\n    Returns the roots (a.k.a "zeros") of the Legendre series represented by\n    `cs`, which is the sequence of coefficients from lowest order "term"\n    to highest, e.g., [1,2,3] is the series ``L_0 + 2*L_1 + 3*L_2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients ordered from low to high.\n    maxiter : int, optional\n        Maximum number of iterations of Newton to use in refining the\n        roots.\n\n    Returns\n    -------\n    out : ndarray\n        Sorted array of the roots. If all the roots are real, then so is\n        the dtype of ``out``; otherwise, ``out``\'s dtype is complex.\n\n    See Also\n    --------\n    polyroots\n    chebroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the real interval [-1, 1] in the complex plane\n    may have large errors due to the numerical instability of the Lengendre\n    series for such values. Roots with multiplicity greater than 1 will\n    also show larger errors as the value of the series near such points is\n    relatively insensitive to errors in the roots. Isolated roots near the\n    interval [-1, 1] can be improved by a few iterations of Newton\'s\n    method.\n\n    The Legendre series basis polynomials aren\'t powers of ``x`` so the\n    results of this function may seem unintuitive.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.legendre as leg\n    >>> leg.legroots((1, 2, 3, 4)) # 4L_3 + 3L_2 + 2L_1 + 1L_0 has only real roots\n    array([-0.85099543, -0.11407192,  0.51506735])\n\n    '),
               ('numpy.polynomial.chebyshev._cseries_to_zseries',
                ['cs'],
                'Covert Chebyshev series to z-series.\n\n    Covert a Chebyshev series to the equivalent z-series. The result is\n    never an empty array. The dtype of the return is the same as that of\n    the input. No checks are run on the arguments as this routine is for\n    internal use.\n\n    Parameters\n    ----------\n    cs : 1-d ndarray\n        Chebyshev coefficients, ordered from low to high\n\n    Returns\n    -------\n    zs : 1-d ndarray\n        Odd length symmetric z-series, ordered from  low to high.\n\n    '),
               ('numpy.polynomial.chebyshev._zseries_to_cseries',
                ['zs'],
                'Covert z-series to a Chebyshev series.\n\n    Covert a z series to the equivalent Chebyshev series. The result is\n    never an empty array. The dtype of the return is the same as that of\n    the input. No checks are run on the arguments as this routine is for\n    internal use.\n\n    Parameters\n    ----------\n    zs : 1-d ndarray\n        Odd length symmetric z-series, ordered from  low to high.\n\n    Returns\n    -------\n    cs : 1-d ndarray\n        Chebyshev coefficients, ordered from  low to high.\n\n    '),
               ('numpy.polynomial.chebyshev._zseries_mul',
                ['z1', 'z2'],
                'Multiply two z-series.\n\n    Multiply two z-series to produce a z-series.\n\n    Parameters\n    ----------\n    z1, z2 : 1-d ndarray\n        The arrays must be 1-d but this is not checked.\n\n    Returns\n    -------\n    product : 1-d ndarray\n        The product z-series.\n\n    Notes\n    -----\n    This is simply convolution. If symmetic/anti-symmetric z-series are\n    denoted by S/A then the following rules apply:\n\n    S*S, A*A -> S\n    S*A, A*S -> A\n\n    '),
               ('numpy.polynomial.chebyshev._zseries_div',
                ['z1', 'z2'],
                'Divide the first z-series by the second.\n\n    Divide `z1` by `z2` and return the quotient and remainder as z-series.\n    Warning: this implementation only applies when both z1 and z2 have the\n    same symmetry, which is sufficient for present purposes.\n\n    Parameters\n    ----------\n    z1, z2 : 1-d ndarray\n        The arrays must be 1-d and have the same symmetry, but this is not\n        checked.\n\n    Returns\n    -------\n\n    (quotient, remainder) : 1-d ndarrays\n        Quotient and remainder as z-series.\n\n    Notes\n    -----\n    This is not the same as polynomial division on account of the desired form\n    of the remainder. If symmetic/anti-symmetric z-series are denoted by S/A\n    then the following rules apply:\n\n    S/S -> S,S\n    A/A -> S,A\n\n    The restriction to types of the same symmetry could be fixed but seems like\n    uneeded generality. There is no natural form for the remainder in the case\n    where there is no symmetry.\n\n    '),
               ('numpy.polynomial.chebyshev._zseries_der',
                ['zs'],
                'Differentiate a z-series.\n\n    The derivative is with respect to x, not z. This is achieved using the\n    chain rule and the value of dx/dz given in the module notes.\n\n    Parameters\n    ----------\n    zs : z-series\n        The z-series to differentiate.\n\n    Returns\n    -------\n    derivative : z-series\n        The derivative\n\n    Notes\n    -----\n    The zseries for x (ns) has been multiplied by two in order to avoid\n    using floats that are incompatible with Decimal and likely other\n    specialized scalar types. This scaling has been compensated by\n    multiplying the value of zs by two also so that the two cancels in the\n    division.\n\n    '),
               ('numpy.polynomial.chebyshev._zseries_int',
                ['zs'],
                'Integrate a z-series.\n\n    The integral is with respect to x, not z. This is achieved by a change\n    of variable using dx/dz given in the module notes.\n\n    Parameters\n    ----------\n    zs : z-series\n        The z-series to integrate\n\n    Returns\n    -------\n    integral : z-series\n        The indefinite integral\n\n    Notes\n    -----\n    The zseries for x (ns) has been multiplied by two in order to avoid\n    using floats that are incompatible with Decimal and likely other\n    specialized scalar types. This scaling has been compensated by\n    dividing the resulting zs by two.\n\n    '),
               ('numpy.polynomial.chebyshev.poly2cheb',
                ['pol'],
                '\n    Convert a polynomial to a Chebyshev series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the "standard" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Chebyshev series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-d array containing the polynomial coefficients\n\n    Returns\n    -------\n    cs : ndarray\n        1-d array containing the coefficients of the equivalent Chebyshev\n        series.\n\n    See Also\n    --------\n    cheb2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> p = P.Polynomial(range(4))\n    >>> p\n    Polynomial([ 0.,  1.,  2.,  3.], [-1.,  1.])\n    >>> c = p.convert(kind=P.Chebyshev)\n    >>> c\n    Chebyshev([ 1.  ,  3.25,  1.  ,  0.75], [-1.,  1.])\n    >>> P.poly2cheb(range(4))\n    array([ 1.  ,  3.25,  1.  ,  0.75])\n\n    '),
               ('numpy.polynomial.chebyshev.cheb2poly',
                ['cs'],
                '\n    Convert a Chebyshev series to a polynomial.\n\n    Convert an array representing the coefficients of a Chebyshev series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the "standard" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array containing the Chebyshev series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-d array containing the coefficients of the equivalent polynomial\n        (relative to the "standard" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2cheb\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c = P.Chebyshev(range(4))\n    >>> c\n    Chebyshev([ 0.,  1.,  2.,  3.], [-1.,  1.])\n    >>> p = c.convert(kind=P.Polynomial)\n    >>> p\n    Polynomial([ -2.,  -8.,   4.,  12.], [-1.,  1.])\n    >>> P.cheb2poly(range(4))\n    array([ -2.,  -8.,   4.,  12.])\n\n    '),
               ('numpy.polynomial.chebyshev.chebline',
                ['off', 'scl'],
                "\n    Chebyshev series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Chebyshev series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    polyline\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebline(3,2)\n    array([3, 2])\n    >>> C.chebval(-3, C.chebline(3,2)) # should be -3\n    -3.0\n\n    "),
               ('numpy.polynomial.chebyshev.chebfromroots',
                ['roots'],
                '\n    Generate a Chebyshev series with the given roots.\n\n    Return the array of coefficients for the C-series whose roots (a.k.a.\n    "zeros") are given by *roots*.  The returned array of coefficients is\n    ordered from lowest order "term" to highest, and zeros of multiplicity\n    greater than one must be included in *roots* a number of times equal\n    to their multiplicity (e.g., if `2` is a root of multiplicity three,\n    then [2,2,2] must be in *roots*).\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-d array of the C-series\' coefficients, ordered from low to\n        high.  If all roots are real, ``out.dtype`` is a float type;\n        otherwise, ``out.dtype`` is a complex type, even if all the\n        coefficients in the result are real (see Examples below).\n\n    See Also\n    --------\n    polyfromroots\n\n    Notes\n    -----\n    What is returned are the :math:`c_i` such that:\n\n    .. math::\n\n        \\sum_{i=0}^{n} c_i*T_i(x) = \\prod_{i=0}^{n} (x - roots[i])\n\n    where ``n == len(roots)`` and :math:`T_i(x)` is the `i`-th Chebyshev\n    (basis) polynomial over the domain `[-1,1]`.  Note that, unlike\n    `polyfromroots`, due to the nature of the C-series basis set, the\n    above identity *does not* imply :math:`c_n = 1` identically (see\n    Examples).\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as C\n    >>> C.chebfromroots((-1,0,1)) # x^3 - x relative to the standard basis\n    array([ 0.  , -0.25,  0.  ,  0.25])\n    >>> j = complex(0,1)\n    >>> C.chebfromroots((-j,j)) # x^2 + 1 relative to the standard basis\n    array([ 1.5+0.j,  0.0+0.j,  0.5+0.j])\n\n    '),
               ('numpy.polynomial.chebyshev.chebadd',
                ['c1', 'c2'],
                '\n    Add one Chebyshev series to another.\n\n    Returns the sum of two Chebyshev series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Chebyshev series of their sum.\n\n    See Also\n    --------\n    chebsub, chebmul, chebdiv, chebpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Chebyshev series\n    is a Chebyshev series (without having to "reproject" the result onto\n    the basis set) so addition, just like that of "standard" polynomials,\n    is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebadd(c1,c2)\n    array([ 4.,  4.,  4.])\n\n    '),
               ('numpy.polynomial.chebyshev.chebsub',
                ['c1', 'c2'],
                '\n    Subtract one Chebyshev series from another.\n\n    Returns the difference of two Chebyshev series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Chebyshev series coefficients representing their difference.\n\n    See Also\n    --------\n    chebadd, chebmul, chebdiv, chebpow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Chebyshev\n    series is a Chebyshev series (without having to "reproject" the result\n    onto the basis set) so subtraction, just like that of "standard"\n    polynomials, is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebsub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> C.chebsub(c2,c1) # -C.chebsub(c1,c2)\n    array([ 2.,  0., -2.])\n\n    '),
               ('numpy.polynomial.chebyshev.chebmulx',
                ['cs'],
                'Multiply a Chebyshev series by x.\n\n    Multiply the polynomial `cs` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    Notes\n    -----\n    .. versionadded:: 1.5.0\n\n    '),
               ('numpy.polynomial.chebyshev.chebmul',
                ['c1', 'c2'],
                '\n    Multiply one Chebyshev series by another.\n\n    Returns the product of two Chebyshev series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order "term" to highest,\n    e.g., [1,2,3] represents the series ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Chebyshev series coefficients representing their product.\n\n    See Also\n    --------\n    chebadd, chebsub, chebdiv, chebpow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Chebyshev polynomial basis set.  Thus, to express\n    the product as a C-series, it is typically necessary to "re-project"\n    the product onto said basis set, which typically produces\n    "un-intuitive" (but correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebmul(c1,c2) # multiplication requires "reprojection"\n    array([  6.5,  12. ,  12. ,   4. ,   1.5])\n\n    '),
               ('numpy.polynomial.chebyshev.chebdiv',
                ['c1', 'c2'],
                '\n    Divide one Chebyshev series by another.\n\n    Returns the quotient-with-remainder of two Chebyshev series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order "term" to highest, e.g., [1,2,3] represents the series\n    ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Chebyshev series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Chebyshev series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmul, chebpow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one C-series by another\n    results in quotient and remainder terms that are not in the Chebyshev\n    polynomial basis set.  Thus, to express these results as C-series, it\n    is typically necessary to "re-project" the results onto said basis\n    set, which typically produces "un-intuitive" (but correct) results;\n    see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> C.chebdiv(c1,c2) # quotient "intuitive," remainder not\n    (array([ 3.]), array([-8., -4.]))\n    >>> c2 = (0,1,2,3)\n    >>> C.chebdiv(c2,c1) # neither "intuitive"\n    (array([ 0.,  2.]), array([-2., -4.]))\n\n    '),
               ('numpy.polynomial.chebyshev.chebpow',
                ['cs', 'pow', 'maxpower=16'],
                'Raise a Chebyshev series to a power.\n\n    Returns the Chebyshev series `cs` raised to the power `pow`. The\n    arguement `cs` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``T_0 + 2*T_1 + 3*T_2.``\n\n    Parameters\n    ----------\n    cs : array_like\n        1d array of chebyshev series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to umanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Chebyshev series of power.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmul, chebdiv\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.chebyshev.chebder',
                ['cs', 'm=1', 'scl=1'],
                '\n    Differentiate a Chebyshev series.\n\n    Returns the series `cs` differentiated `m` times.  At each iteration the\n    result is multiplied by `scl` (the scaling factor is for use in a linear\n    change of variable).  The argument `cs` is the sequence of coefficients\n    from lowest order "term" to highest, e.g., [1,2,3] represents the series\n    ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    cs: array_like\n        1-d array of Chebyshev series coefficients ordered from low to high.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n\n    Returns\n    -------\n    der : ndarray\n        Chebyshev series of the derivative.\n\n    See Also\n    --------\n    chebint\n\n    Notes\n    -----\n    In general, the result of differentiating a C-series needs to be\n    "re-projected" onto the C-series basis set. Thus, typically, the\n    result of this function is "un-intuitive," albeit correct; see Examples\n    section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> cs = (1,2,3,4)\n    >>> C.chebder(cs)\n    array([ 14.,  12.,  24.])\n    >>> C.chebder(cs,3)\n    array([ 96.])\n    >>> C.chebder(cs,scl=-1)\n    array([-14., -12., -24.])\n    >>> C.chebder(cs,2,-1)\n    array([ 12.,  96.])\n\n    '),
               ('numpy.polynomial.chebyshev.chebint',
                ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'],
                '\n    Integrate a Chebyshev series.\n\n    Returns, as a C-series, the input C-series `cs`, integrated `m` times\n    from `lbnd` to `x`.  At each iteration the resulting series is\n    **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  ("Buyer\n    beware": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `cs` is a sequence of\n    coefficients, from lowest order C-series "term" to highest, e.g.,\n    [1,2,3] represents the series :math:`T_0(x) + 2T_1(x) + 3T_2(x)`.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of C-series coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at zero\n        is the first value in the list, the value of the second integral\n        at zero is the second value, etc.  If ``k == []`` (the default),\n        all constants are set to zero.  If ``m == 1``, a single scalar can\n        be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n\n    Returns\n    -------\n    S : ndarray\n        C-series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 1``, ``len(k) > m``, ``np.isscalar(lbnd) == False``, or\n        ``np.isscalar(scl) == False``.\n\n    See Also\n    --------\n    chebder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to :math:`1/a`\n    - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be "re-projected" onto the C-series basis set.  Thus, typically,\n    the result of this function is "un-intuitive," albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial import chebyshev as C\n    >>> cs = (1,2,3)\n    >>> C.chebint(cs)\n    array([ 0.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(cs,3)\n    array([ 0.03125   , -0.1875    ,  0.04166667, -0.05208333,  0.01041667,\n            0.00625   ])\n    >>> C.chebint(cs, k=3)\n    array([ 3.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(cs,lbnd=-2)\n    array([ 8.5, -0.5,  0.5,  0.5])\n    >>> C.chebint(cs,scl=-2)\n    array([-1.,  1., -1., -1.])\n\n    '),
               ('numpy.polynomial.chebyshev.chebval',
                ['x', 'cs'],
                'Evaluate a Chebyshev series.\n\n    If `cs` is of length `n`, this function returns :\n\n    ``p(x) = cs[0]*T_0(x) + cs[1]*T_1(x) + ... + cs[n-1]*T_{n-1}(x)``\n\n    If x is a sequence or array then p(x) will have the same shape as x.\n    If r is a ring_like object that supports multiplication and addition\n    by the values in `cs`, then an object of the same type is returned.\n\n    Parameters\n    ----------\n    x : array_like, ring_like\n        Array of numbers or objects that support multiplication and\n        addition with themselves and with the elements of `cs`.\n    cs : array_like\n        1-d array of Chebyshev coefficients ordered from low to high.\n\n    Returns\n    -------\n    values : ndarray, ring_like\n        If the return is an ndarray then it has the same shape as `x`.\n\n    See Also\n    --------\n    chebfit\n\n    Examples\n    --------\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.chebyshev.chebvander',
                ['x', 'deg'],
                "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points `x`.\n    This isn't a true Vandermonde matrix because `x` can be an arbitrary\n    ndarray and the Chebyshev polynomials aren't powers. If ``V`` is the\n    returned matrix and `x` is a 2d array, then the elements of ``V`` are\n    ``V[i,j,k] = T_k(x[i,j])``, where ``T_k`` is the Chebyshev polynomial\n    of degree ``k``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The values are converted to double or complex\n        doubles. If x is scalar it is converted to a 1D array.\n    deg : integer\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : Vandermonde matrix.\n        The shape of the returned matrix is ``x.shape + (deg+1,)``. The last\n        index is the degree.\n\n    "),
               ('numpy.polynomial.chebyshev.chebfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                '\n    Least squares fit of Chebyshev series to data.\n\n    Return the coefficients of a Legendre series of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * T_1(x) + ... + c_n * T_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int\n        Degree of the fitting series\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the contribution of each point\n        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n        weights are chosen so that the errors of the products ``w[i]*y[i]``\n        all have the same variance.  The default value is None.\n\n        .. versionadded:: 1.5.0\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Chebyshev coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : present when `full` = True\n        Residuals of the least-squares fit, the effective rank of the\n        scaled Vandermonde matrix and its singular values, and the\n        specified value of `rcond`. For more details, see `linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if `full` = False.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', RankWarning)\n\n    See Also\n    --------\n    polyfit, legfit, lagfit, hermfit, hermefit\n    chebval : Evaluates a Chebyshev series.\n    chebvander : Vandermonde matrix of Chebyshev series.\n    chebweight : Chebyshev weight function.\n    linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the Chebyshev series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where :math:`w_j` are the weights. This problem is solved by setting up\n    as the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `RankWarning` will be issued. This means that the\n    coeficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using Chebyshev series are usually better conditioned than fits\n    using power series, but much can depend on the distribution of the\n    sample points and the smoothness of the data. If the quality of the fit\n    is inadequate splines may be a good alternative.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Curve fitting",\n           http://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.chebyshev.chebcompanion',
                ['cs'],
                'Return the scaled companion matrix of cs.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `cs` represents a single Chebyshev polynomial. This\n    provides better eigenvalue estimates than the unscaled case and in the\n    single polynomial case the eigenvalues are guaranteed to be real if\n    np.eigvalsh is used to obtain them.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    '),
               ('numpy.polynomial.chebyshev.chebroots',
                ['cs'],
                '\n    Compute the roots of a Chebyshev series.\n\n    Return the roots (a.k.a "zeros") of the C-series represented by `cs`,\n    which is the sequence of the C-series\' coefficients from lowest order\n    "term" to highest, e.g., [1,2,3] represents the C-series\n    ``T_0 + 2*T_1 + 3*T_2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of C-series coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots.  If all the roots are real, then so is the\n        dtype of ``out``; otherwise, ``out``\'s dtype is complex.\n\n    See Also\n    --------\n    polyroots\n\n    Notes\n    -----\n    Algorithm(s) used:\n\n    Remember: because the C-series basis set is different from the\n    "standard" basis set, the results of this function *may* not be what\n    one is expecting.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.chebyshev as cheb\n    >>> cheb.chebroots((-1, 1,-1, 1)) # T3 - T2 + T1 - T0 has real roots\n    array([ -5.00000000e-01,   2.60860684e-17,   1.00000000e+00])\n\n    '),
               ('numpy.polynomial.chebyshev.chebpts1',
                ['npts'],
                'Chebyshev points of the first kind.\n\n    Chebyshev points of the first kind are the set ``{cos(x_k)}``,\n    where ``x_k = pi*(k + .5)/npts`` for k in ``range(npts}``.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the second kind.\n\n    Notes\n    -----\n    .. versionadded:: 1.5.0\n\n    '),
               ('numpy.polynomial.chebyshev.chebpts2',
                ['npts'],
                'Chebyshev points of the second kind.\n\n    Chebyshev points of the second kind are the set ``{cos(x_k)}``,\n    where ``x_k = pi*/(npts - 1)`` for k in ``range(npts}``.\n\n    Parameters\n    ----------\n    npts : int\n        Number of sample points desired.\n\n    Returns\n    -------\n    pts : ndarray\n        The Chebyshev points of the second kind.\n\n    Notes\n    -----\n    .. versionadded:: 1.5.0\n\n    '),
               ('numpy.polynomial.polynomial.polyline',
                ['off', 'scl'],
                '\n    Returns an array representing a linear polynomial.\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The "y-intercept" and "slope" of the line, respectively.\n\n    Returns\n    -------\n    y : ndarray\n        This module\'s representation of the linear polynomial ``off +\n        scl*x``.\n\n    See Also\n    --------\n    chebline\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> P.polyline(1,-1)\n    array([ 1, -1])\n    >>> P.polyval(1, P.polyline(1,-1)) # should be 0\n    0.0\n\n    '),
               ('numpy.polynomial.polynomial.polyfromroots',
                ['roots'],
                '\n    Generate a polynomial with the given roots.\n\n    Return the array of coefficients for the polynomial whose leading\n    coefficient (i.e., that of the highest order term) is `1` and whose\n    roots (a.k.a. "zeros") are given by *roots*.  The returned array of\n    coefficients is ordered from lowest order term to highest, and zeros\n    of multiplicity greater than one must be included in *roots* a number\n    of times equal to their multiplicity (e.g., if `2` is a root of\n    multiplicity three, then [2,2,2] must be in *roots*).\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-d array of the polynomial\'s coefficients, ordered from low to\n        high.  If all roots are real, ``out.dtype`` is a float type;\n        otherwise, ``out.dtype`` is a complex type, even if all the\n        coefficients in the result are real (see Examples below).\n\n    See Also\n    --------\n    chebfromroots\n\n    Notes\n    -----\n    What is returned are the :math:`a_i` such that:\n\n    .. math::\n\n        \\sum_{i=0}^{n} a_ix^i = \\prod_{i=0}^{n} (x - roots[i])\n\n    where ``n == len(roots)``; note that this implies that `1` is always\n    returned for :math:`a_n`.\n\n    Examples\n    --------\n    >>> import numpy.polynomial as P\n    >>> P.polyfromroots((-1,0,1)) # x(x - 1)(x + 1) = x^3 - x\n    array([ 0., -1.,  0.,  1.])\n    >>> j = complex(0,1)\n    >>> P.polyfromroots((-j,j)) # complex returned, though values are real\n    array([ 1.+0.j,  0.+0.j,  1.+0.j])\n\n    '),
               ('numpy.polynomial.polynomial.polyadd',
                ['c1', 'c2'],
                '\n    Add one polynomial to another.\n\n    Returns the sum of two polynomials `c1` + `c2`.  The arguments are\n    sequences of coefficients from lowest order term to highest, i.e.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2"``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        The coefficient array representing their sum.\n\n    See Also\n    --------\n    polysub, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> sum = P.polyadd(c1,c2); sum\n    array([ 4.,  4.,  4.])\n    >>> P.polyval(2, sum) # 4 + 4(2) + 4(2**2)\n    28.0\n\n    '),
               ('numpy.polynomial.polynomial.polysub',
                ['c1', 'c2'],
                '\n    Subtract one polynomial from another.\n\n    Returns the difference of two polynomials `c1` - `c2`.  The arguments\n    are sequences of coefficients from lowest order term to highest, i.e.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of polynomial coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of coefficients representing their difference.\n\n    See Also\n    --------\n    polyadd, polymul, polydiv, polypow\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> P.polysub(c1,c2)\n    array([-2.,  0.,  2.])\n    >>> P.polysub(c2,c1) # -P.polysub(c1,c2)\n    array([ 2.,  0., -2.])\n\n    '),
               ('numpy.polynomial.polynomial.polymulx',
                ['cs'],
                'Multiply a polynomial by x.\n\n    Multiply the polynomial `cs` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of polynomial coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    Notes\n    -----\n    .. versionadded:: 1.5.0\n\n    '),
               ('numpy.polynomial.polynomial.polymul',
                ['c1', 'c2'],
                '\n    Multiply one polynomial by another.\n\n    Returns the product of two polynomials `c1` * `c2`.  The arguments are\n    sequences of coefficients, from lowest order term to highest, e.g.,\n    [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2.``\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of coefficients representing a polynomial, relative to the\n        "standard" basis, and ordered from lowest order term to highest.\n\n    Returns\n    -------\n    out : ndarray\n        Of the coefficients of their product.\n\n    See Also\n    --------\n    polyadd, polysub, polydiv, polypow\n\n    Examples\n    --------\n    >>> import numpy.polynomial as P\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> P.polymul(c1,c2)\n    array([  3.,   8.,  14.,   8.,   3.])\n\n    '),
               ('numpy.polynomial.polynomial.polydiv',
                ['c1', 'c2'],
                '\n    Divide one polynomial by another.\n\n    Returns the quotient-with-remainder of two polynomials `c1` / `c2`.\n    The arguments are sequences of coefficients, from lowest order term\n    to highest, e.g., [1,2,3] represents ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of coefficient series representing the quotient and remainder.\n\n    See Also\n    --------\n    polyadd, polysub, polymul, polypow\n\n    Examples\n    --------\n    >>> import numpy.polynomial as P\n    >>> c1 = (1,2,3)\n    >>> c2 = (3,2,1)\n    >>> P.polydiv(c1,c2)\n    (array([ 3.]), array([-8., -4.]))\n    >>> P.polydiv(c2,c1)\n    (array([ 0.33333333]), array([ 2.66666667,  1.33333333]))\n\n    '),
               ('numpy.polynomial.polynomial.polypow',
                ['cs', 'pow', 'maxpower=None'],
                'Raise a polynomial to a power.\n\n    Returns the polynomial `cs` raised to the power `pow`. The argument\n    `cs` is a sequence of coefficients ordered from low to high. i.e.,\n    [1,2,3] is the series  ``1 + 2*x + 3*x**2.``\n\n    Parameters\n    ----------\n    cs : array_like\n        1d array of chebyshev series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to umanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Chebyshev series of power.\n\n    See Also\n    --------\n    chebadd, chebsub, chebmul, chebdiv\n\n    Examples\n    --------\n\n    '),
               ('numpy.polynomial.polynomial.polyder',
                ['cs', 'm=1', 'scl=1'],
                '\n    Differentiate a polynomial.\n\n    Returns the polynomial `cs` differentiated `m` times.  At each\n    iteration the result is multiplied by `scl` (the scaling factor is for\n    use in a linear change of variable).  The argument `cs` is the sequence\n    of coefficients from lowest order term to highest, e.g., [1,2,3]\n    represents the polynomial ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    cs: array_like\n        1-d array of polynomial coefficients ordered from low to high.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change\n        of variable. (Default: 1)\n\n    Returns\n    -------\n    der : ndarray\n        Polynomial of the derivative.\n\n    See Also\n    --------\n    polyint\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> cs = (1,2,3,4) # 1 + 2x + 3x**2 + 4x**3\n    >>> P.polyder(cs) # (d/dx)(cs) = 2 + 6x + 12x**2\n    array([  2.,   6.,  12.])\n    >>> P.polyder(cs,3) # (d**3/dx**3)(cs) = 24\n    array([ 24.])\n    >>> P.polyder(cs,scl=-1) # (d/d(-x))(cs) = -2 - 6x - 12x**2\n    array([ -2.,  -6., -12.])\n    >>> P.polyder(cs,2,-1) # (d**2/d(-x)**2)(cs) = 6 + 24x\n    array([  6.,  24.])\n\n    '),
               ('numpy.polynomial.polynomial.polyint',
                ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'],
                '\n    Integrate a polynomial.\n\n    Returns the polynomial `cs`, integrated `m` times from `lbnd` to `x`.\n    At each iteration the resulting series is **multiplied** by `scl` and\n    an integration constant, `k`, is added.  The scaling factor is for use\n    in a linear change of variable.  ("Buyer beware": note that, depending\n    on what one is doing, one may want `scl` to be the reciprocal of what\n    one might expect; for more information, see the Notes section below.)\n    The argument `cs` is a sequence of coefficients, from lowest order\n    term to highest, e.g., [1,2,3] represents the polynomial\n    ``1 + 2*x + 3*x**2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of polynomial coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at zero\n        is the first value in the list, the value of the second integral\n        at zero is the second value, etc.  If ``k == []`` (the default),\n        all constants are set to zero.  If ``m == 1``, a single scalar can\n        be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n\n    Returns\n    -------\n    S : ndarray\n        Coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 1``, ``len(k) > m``.\n\n    See Also\n    --------\n    polyder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to :math:`1/a`\n    - perhaps not what one would have first thought.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> cs = (1,2,3)\n    >>> P.polyint(cs) # should return array([0, 1, 1, 1])\n    array([ 0.,  1.,  1.,  1.])\n    >>> P.polyint(cs,3) # should return array([0, 0, 0, 1/6, 1/12, 1/20])\n    array([ 0.        ,  0.        ,  0.        ,  0.16666667,  0.08333333,\n            0.05      ])\n    >>> P.polyint(cs,k=3) # should return array([3, 1, 1, 1])\n    array([ 3.,  1.,  1.,  1.])\n    >>> P.polyint(cs,lbnd=-2) # should return array([6, 1, 1, 1])\n    array([ 6.,  1.,  1.,  1.])\n    >>> P.polyint(cs,scl=-2) # should return array([0, -2, -2, -2])\n    array([ 0., -2., -2., -2.])\n\n    '),
               ('numpy.polynomial.polynomial.polyval',
                ['x', 'cs'],
                "\n    Evaluate a polynomial.\n\n    If `cs` is of length `n`, this function returns :\n\n    ``p(x) = cs[0] + cs[1]*x + ... + cs[n-1]*x**(n-1)``\n\n    If x is a sequence or array then p(x) will have the same shape as x.\n    If r is a ring_like object that supports multiplication and addition\n    by the values in `cs`, then an object of the same type is returned.\n\n    Parameters\n    ----------\n    x : array_like, ring_like\n        If x is a list or tuple, it is converted to an ndarray. Otherwise\n        it must support addition and multiplication with itself and the\n        elements of `cs`.\n    cs : array_like\n        1-d array of Chebyshev coefficients ordered from low to high.\n\n    Returns\n    -------\n    values : ndarray\n        The return array has the same shape as `x`.\n\n    See Also\n    --------\n    polyfit\n\n    Notes\n    -----\n    The evaluation uses Horner's method.\n\n    "),
               ('numpy.polynomial.polynomial.polyvander',
                ['x', 'deg'],
                "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points `x`.\n    This isn't a true Vandermonde matrix because `x` can be an arbitrary\n    ndarray. If ``V`` is the returned matrix and `x` is a 2d array, then\n    the elements of ``V`` are ``V[i,j,k] = x[i,j]**k``\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The values are converted to double or complex\n        doubles. If x is scalar it is converted to a 1D array.\n    deg : integer\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : Vandermonde matrix.\n        The shape of the returned matrix is ``x.shape + (deg+1,)``. The last\n        index is the degree.\n\n    "),
               ('numpy.polynomial.polynomial.polyfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                '\n    Least-squares fit of a polynomial to data.\n\n    Return the coefficients of a polynomial of degree `deg` that is the\n    least squares fit to the data values `y` given at points `x`. If `y` is\n    1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple\n    fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * x + ... + c_n * x^n,\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (`M`,)\n        x-coordinates of the `M` sample (data) points ``(x[i], y[i])``.\n    y : array_like, shape (`M`,) or (`M`, `K`)\n        y-coordinates of the sample points.  Several sets of sample points\n        sharing the same x-coordinates can be (independently) fit with one\n        call to `polyfit` by passing in for `y` a 2-D array that contains\n        one data set per column.\n    deg : int\n        Degree of the polynomial(s) to be fit.\n    rcond : float, optional\n        Relative condition number of the fit.  Singular values smaller\n        than `rcond`, relative to the largest singular value, will be\n        ignored.  The default value is ``len(x)*eps``, where `eps` is the\n        relative precision of the platform\'s float type, about 2e-16 in\n        most cases.\n    full : bool, optional\n        Switch determining the nature of the return value.  When ``False``\n        (the default) just the coefficients are returned; when ``True``,\n        diagnostic information from the singular value decomposition (used\n        to solve the fit\'s matrix equation) is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the contribution of each point\n        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n        weights are chosen so that the errors of the products ``w[i]*y[i]``\n        all have the same variance.  The default value is None.\n\n        .. versionadded:: 1.5.0\n\n    Returns\n    -------\n    coef : ndarray, shape (`deg` + 1,) or (`deg` + 1, `K`)\n        Polynomial coefficients ordered from low to high.  If `y` was 2-D,\n        the coefficients in column `k` of `coef` represent the polynomial\n        fit to the data in `y`\'s `k`-th column.\n\n    [residuals, rank, singular_values, rcond] : present when `full` == True\n        Sum of the squared residuals (SSR) of the least-squares fit; the\n        effective rank of the scaled Vandermonde matrix; its singular\n        values; and the specified value of `rcond`.  For more information,\n        see `linalg.lstsq`.\n\n    Raises\n    ------\n    RankWarning\n        Raised if the matrix in the least-squares fit is rank deficient.\n        The warning is only raised if `full` == False.  The warnings can\n        be turned off by:\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', RankWarning)\n\n    See Also\n    --------\n    chebfit, legfit, lagfit, hermfit, hermefit\n    polyval : Evaluates a polynomial.\n    polyvander : Vandermonde matrix for powers.\n    linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the polynomial `p` that minimizes\n    the sum of the weighted squared errors\n\n    .. math :: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) over-determined matrix equation:\n\n    .. math :: V(x) * c = w * y,\n\n    where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the\n    coefficients to be solved for, `w` are the weights, and `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected (and `full` == ``False``), a `RankWarning` will be raised.\n    This means that the coefficient values may be poorly determined.\n    Fitting to a lower order polynomial will usually get rid of the warning\n    (but may not be what you want, of course; if you have independent\n    reason(s) for choosing the degree which isn\'t working, you may have to:\n    a) reconsider those reasons, and/or b) reconsider the quality of your\n    data).  The `rcond` parameter can also be set to a value smaller than\n    its default, but the resulting fit may be spurious and have large\n    contributions from roundoff error.\n\n    Polynomial fits using double precision tend to "fail" at about\n    (polynomial) degree 20. Fits using Chebyshev or Legendre series are\n    generally better conditioned, but much can still depend on the\n    distribution of the sample points and the smoothness of the data.  If\n    the quality of the fit is inadequate, splines may be a good\n    alternative.\n\n    Examples\n    --------\n    >>> from numpy import polynomial as P\n    >>> x = np.linspace(-1,1,51) # x "data": [-1, -0.96, ..., 0.96, 1]\n    >>> y = x**3 - x + np.random.randn(len(x)) # x^3 - x + N(0,1) "noise"\n    >>> c, stats = P.polyfit(x,y,3,full=True)\n    >>> c # c[0], c[2] should be approx. 0, c[1] approx. -1, c[3] approx. 1\n    array([ 0.01909725, -1.30598256, -0.00577963,  1.02644286])\n    >>> stats # note the large SSR, explaining the rather poor results\n    [array([ 38.06116253]), 4, array([ 1.38446749,  1.32119158,  0.50443316,\n    0.28853036]), 1.1324274851176597e-014]\n\n    Same thing without the added noise\n\n    >>> y = x**3 - x\n    >>> c, stats = P.polyfit(x,y,3,full=True)\n    >>> c # c[0], c[2] should be "very close to 0", c[1] ~= -1, c[3] ~= 1\n    array([ -1.73362882e-17,  -1.00000000e+00,  -2.67471909e-16,\n             1.00000000e+00])\n    >>> stats # note the minuscule SSR\n    [array([  7.46346754e-31]), 4, array([ 1.38446749,  1.32119158,\n    0.50443316,  0.28853036]), 1.1324274851176597e-014]\n\n    '),
               ('numpy.polynomial.polynomial.polycompanion',
                ['cs'],
                'Return the companion matrix of cs.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of series coefficients ordered from low to high degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    '),
               ('numpy.polynomial.polynomial.polyroots',
                ['cs'],
                '\n    Compute the roots of a polynomial.\n\n    Return the roots (a.k.a. "zeros") of the "polynomial" `cs`, the\n    polynomial\'s coefficients from lowest order term to highest\n    (e.g., [1,2,3] represents the polynomial ``1 + 2*x + 3*x**2``).\n\n    Parameters\n    ----------\n    cs : array_like of shape (M,)\n        1-d array of polynomial coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots of the polynomial.  If all the roots are real,\n        then so is the dtype of ``out``; otherwise, ``out``\'s dtype is\n        complex.\n\n    See Also\n    --------\n    chebroots\n\n    Notes\n    -----\n    The root estimates are obtained as the eigenvalues of the companion\n    matrix, Roots far from the origin of the complex plane may have large\n    errors due to the numerical instability of the power series for such\n    values. Roots with multiplicity greater than 1 will also show larger\n    errors as the value of the series near such points is relatively\n    insensitive to errors in the roots. Isolated roots near the origin can\n    be improved by a few iterations of Newton\'s method.\n\n    Examples\n    --------\n    >>> import numpy.polynomial.polynomial as poly\n    >>> poly.polyroots(poly.polyfromroots((-1,0,1)))\n    array([-1.,  0.,  1.])\n    >>> poly.polyroots(poly.polyfromroots((-1,0,1))).dtype\n    dtype(\'float64\')\n    >>> j = complex(0,1)\n    >>> poly.polyroots(poly.polyfromroots((-j,0,j)))\n    array([  0.00000000e+00+0.j,   0.00000000e+00+1.j,   2.77555756e-17-1.j])\n\n    '),
               ('numpy.polynomial.hermite_e.poly2herme',
                ['pol'],
                '\n    poly2herme(pol)\n\n    Convert a polynomial to a Hermite series.\n\n    Convert an array representing the coefficients of a polynomial (relative\n    to the "standard" basis) ordered from lowest degree to highest, to an\n    array of the coefficients of the equivalent Hermite series, ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    pol : array_like\n        1-d array containing the polynomial coefficients\n\n    Returns\n    -------\n    cs : ndarray\n        1-d array containing the coefficients of the equivalent Hermite\n        series.\n\n    See Also\n    --------\n    herme2poly\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import poly2herme\n    >>> poly2herme(np.arange(4))\n    array([  2.,  10.,   2.,   3.])\n\n    '),
               ('numpy.polynomial.hermite_e.herme2poly',
                ['cs'],
                '\n    Convert a Hermite series to a polynomial.\n\n    Convert an array representing the coefficients of a Hermite series,\n    ordered from lowest degree to highest, to an array of the coefficients\n    of the equivalent polynomial (relative to the "standard" basis) ordered\n    from lowest to highest degree.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array containing the Hermite series coefficients, ordered\n        from lowest order term to highest.\n\n    Returns\n    -------\n    pol : ndarray\n        1-d array containing the coefficients of the equivalent polynomial\n        (relative to the "standard" basis) ordered from lowest order term\n        to highest.\n\n    See Also\n    --------\n    poly2herme\n\n    Notes\n    -----\n    The easy way to do conversions between polynomial basis sets\n    is to use the convert method of a class instance.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import herme2poly\n    >>> herme2poly([  2.,  10.,   2.,   3.])\n    array([ 0.,  1.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermeline',
                ['off', 'scl'],
                "\n    Hermite series whose graph is a straight line.\n\n\n\n    Parameters\n    ----------\n    off, scl : scalars\n        The specified line is given by ``off + scl*x``.\n\n    Returns\n    -------\n    y : ndarray\n        This module's representation of the Hermite series for\n        ``off + scl*x``.\n\n    See Also\n    --------\n    polyline, chebline\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeline\n    >>> from numpy.polynomial.hermite_e import hermeline, hermeval\n    >>> hermeval(0,hermeline(3, 2))\n    3.0\n    >>> hermeval(1,hermeline(3, 2))\n    5.0\n\n    "),
               ('numpy.polynomial.hermite_e.hermefromroots',
                ['roots'],
                '\n    Generate a Hermite series with the given roots.\n\n    Return the array of coefficients for the P-series whose roots (a.k.a.\n    "zeros") are given by *roots*.  The returned array of coefficients is\n    ordered from lowest order "term" to highest, and zeros of multiplicity\n    greater than one must be included in *roots* a number of times equal\n    to their multiplicity (e.g., if `2` is a root of multiplicity three,\n    then [2,2,2] must be in *roots*).\n\n    Parameters\n    ----------\n    roots : array_like\n        Sequence containing the roots.\n\n    Returns\n    -------\n    out : ndarray\n        1-d array of the Hermite series coefficients, ordered from low to\n        high.  If all roots are real, ``out.dtype`` is a float type;\n        otherwise, ``out.dtype`` is a complex type, even if all the\n        coefficients in the result are real (see Examples below).\n\n    See Also\n    --------\n    polyfromroots, chebfromroots\n\n    Notes\n    -----\n    What is returned are the :math:`c_i` such that:\n\n    .. math::\n\n        \\sum_{i=0}^{n} c_i*P_i(x) = \\prod_{i=0}^{n} (x - roots[i])\n\n    where ``n == len(roots)`` and :math:`P_i(x)` is the `i`-th Hermite\n    (basis) polynomial over the domain `[-1,1]`.  Note that, unlike\n    `polyfromroots`, due to the nature of the Hermite basis set, the\n    above identity *does not* imply :math:`c_n = 1` identically (see\n    Examples).\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermefromroots, hermeval\n    >>> coef = hermefromroots((-1, 0, 1))\n    >>> hermeval((-1, 0, 1), coef)\n    array([ 0.,  0.,  0.])\n    >>> coef = hermefromroots((-1j, 1j))\n    >>> hermeval((-1j, 1j), coef)\n    array([ 0.+0.j,  0.+0.j])\n\n    '),
               ('numpy.polynomial.hermite_e.hermeadd',
                ['c1', 'c2'],
                '\n    Add one Hermite series to another.\n\n    Returns the sum of two Hermite series `c1` + `c2`.  The arguments\n    are sequences of coefficients ordered from lowest order term to\n    highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the Hermite series of their sum.\n\n    See Also\n    --------\n    hermesub, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the sum of two Hermite series\n    is a Hermite series (without having to "reproject" the result onto\n    the basis set) so addition, just like that of "standard" polynomials,\n    is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeadd\n    >>> hermeadd([1, 2, 3], [1, 2, 3, 4])\n    array([ 2.,  4.,  6.,  4.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermesub',
                ['c1', 'c2'],
                '\n    Subtract one Hermite series from another.\n\n    Returns the difference of two Hermite series `c1` - `c2`.  The\n    sequences of coefficients are from lowest order term to highest, i.e.,\n    [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their difference.\n\n    See Also\n    --------\n    hermeadd, hermemul, hermediv, hermepow\n\n    Notes\n    -----\n    Unlike multiplication, division, etc., the difference of two Hermite\n    series is a Hermite series (without having to "reproject" the result\n    onto the basis set) so subtraction, just like that of "standard"\n    polynomials, is simply "component-wise."\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermesub\n    >>> hermesub([1, 2, 3, 4], [1, 2, 3])\n    array([ 0.,  0.,  0.,  4.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermemulx',
                ['cs'],
                'Multiply a Hermite series by x.\n\n    Multiply the Hermite series `cs` by x, where x is the independent\n    variable.\n\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Array representing the result of the multiplication.\n\n    Notes\n    -----\n    The multiplication uses the recursion relationship for Hermite\n    polynomials in the form\n\n    .. math::\n\n    xP_i(x) = (P_{i + 1}(x) + iP_{i - 1}(x)))\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermemulx\n    >>> hermemulx([1, 2, 3])\n    array([ 2.,  7.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermemul',
                ['c1', 'c2'],
                '\n    Multiply one Hermite series by another.\n\n    Returns the product of two Hermite series `c1` * `c2`.  The arguments\n    are sequences of coefficients, from lowest order "term" to highest,\n    e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    out : ndarray\n        Of Hermite series coefficients representing their product.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermediv, hermepow\n\n    Notes\n    -----\n    In general, the (polynomial) product of two C-series results in terms\n    that are not in the Hermite polynomial basis set.  Thus, to express\n    the product as a Hermite series, it is necessary to "re-project" the\n    product onto said basis set, which may produce "un-intuitive" (but\n    correct) results; see Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermemul\n    >>> hermemul([1, 2, 3], [0, 1, 2])\n    array([ 14.,  15.,  28.,   7.,   6.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermediv',
                ['c1', 'c2'],
                '\n    Divide one Hermite series by another.\n\n    Returns the quotient-with-remainder of two Hermite series\n    `c1` / `c2`.  The arguments are sequences of coefficients from lowest\n    order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    c1, c2 : array_like\n        1-d arrays of Hermite series coefficients ordered from low to\n        high.\n\n    Returns\n    -------\n    [quo, rem] : ndarrays\n        Of Hermite series coefficients representing the quotient and\n        remainder.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemul, hermepow\n\n    Notes\n    -----\n    In general, the (polynomial) division of one Hermite series by another\n    results in quotient and remainder terms that are not in the Hermite\n    polynomial basis set.  Thus, to express these results as a Hermite\n    series, it is necessary to "re-project" the results onto the Hermite\n    basis set, which may produce "un-intuitive" (but correct) results; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermediv\n    >>> hermediv([ 14.,  15.,  28.,   7.,   6.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 0.]))\n    >>> hermediv([ 15.,  17.,  28.,   7.,   6.], [0, 1, 2])\n    (array([ 1.,  2.,  3.]), array([ 1.,  2.]))\n\n    '),
               ('numpy.polynomial.hermite_e.hermepow',
                ['cs', 'pow', 'maxpower=16'],
                'Raise a Hermite series to a power.\n\n    Returns the Hermite series `cs` raised to the power `pow`. The\n    arguement `cs` is a sequence of coefficients ordered from low to high.\n    i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``\n\n    Parameters\n    ----------\n    cs : array_like\n        1d array of Hermite series coefficients ordered from low to\n        high.\n    pow : integer\n        Power to which the series will be raised\n    maxpower : integer, optional\n        Maximum power allowed. This is mainly to limit growth of the series\n        to umanageable size. Default is 16\n\n    Returns\n    -------\n    coef : ndarray\n        Hermite series of power.\n\n    See Also\n    --------\n    hermeadd, hermesub, hermemul, hermediv\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermepow\n    >>> hermepow([1, 2, 3], 2)\n    array([ 23.,  28.,  46.,  12.,   9.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermeder',
                ['cs', 'm=1', 'scl=1'],
                '\n    Differentiate a Hermite series.\n\n    Returns the series `cs` differentiated `m` times.  At each iteration the\n    result is multiplied by `scl` (the scaling factor is for use in a linear\n    change of variable).  The argument `cs` is the sequence of coefficients\n    from lowest order "term" to highest, e.g., [1,2,3] represents the series\n    ``P_0 + 2*P_1 + 3*P_2``.\n\n    Parameters\n    ----------\n    cs: array_like\n        1-d array of Hermite series coefficients ordered from low to high.\n    m : int, optional\n        Number of derivatives taken, must be non-negative. (Default: 1)\n    scl : scalar, optional\n        Each differentiation is multiplied by `scl`.  The end result is\n        multiplication by ``scl**m``.  This is for use in a linear change of\n        variable. (Default: 1)\n\n    Returns\n    -------\n    der : ndarray\n        Hermite series of the derivative.\n\n    See Also\n    --------\n    hermeint\n\n    Notes\n    -----\n    In general, the result of differentiating a Hermite series does not\n    resemble the same operation on a power series. Thus the result of this\n    function may be "un-intuitive," albeit correct; see Examples section\n    below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeder\n    >>> hermeder([ 1.,  1.,  1.,  1.])\n    array([ 1.,  2.,  3.])\n    >>> hermeder([-0.25,  1.,  1./2.,  1./3.,  1./4 ], m=2)\n    array([ 1.,  2.,  3.])\n\n    '),
               ('numpy.polynomial.hermite_e.hermeint',
                ['cs', 'm=1', 'k=[]', 'lbnd=0', 'scl=1'],
                '\n    Integrate a Hermite series.\n\n    Returns a Hermite series that is the Hermite series `cs`, integrated\n    `m` times from `lbnd` to `x`.  At each iteration the resulting series\n    is **multiplied** by `scl` and an integration constant, `k`, is added.\n    The scaling factor is for use in a linear change of variable.  ("Buyer\n    beware": note that, depending on what one is doing, one may want `scl`\n    to be the reciprocal of what one might expect; for more information,\n    see the Notes section below.)  The argument `cs` is a sequence of\n    coefficients, from lowest order Hermite series "term" to highest,\n    e.g., [1,2,3] represents the series :math:`P_0(x) + 2P_1(x) + 3P_2(x)`.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Hermite series coefficients, ordered from low to high.\n    m : int, optional\n        Order of integration, must be positive. (Default: 1)\n    k : {[], list, scalar}, optional\n        Integration constant(s).  The value of the first integral at\n        ``lbnd`` is the first value in the list, the value of the second\n        integral at ``lbnd`` is the second value, etc.  If ``k == []`` (the\n        default), all constants are set to zero.  If ``m == 1``, a single\n        scalar can be given instead of a list.\n    lbnd : scalar, optional\n        The lower bound of the integral. (Default: 0)\n    scl : scalar, optional\n        Following each integration the result is *multiplied* by `scl`\n        before the integration constant is added. (Default: 1)\n\n    Returns\n    -------\n    S : ndarray\n        Hermite series coefficients of the integral.\n\n    Raises\n    ------\n    ValueError\n        If ``m < 0``, ``len(k) > m``, ``np.isscalar(lbnd) == False``, or\n        ``np.isscalar(scl) == False``.\n\n    See Also\n    --------\n    hermeder\n\n    Notes\n    -----\n    Note that the result of each integration is *multiplied* by `scl`.\n    Why is this important to note?  Say one is making a linear change of\n    variable :math:`u = ax + b` in an integral relative to `x`.  Then\n    :math:`dx = du/a`, so one will need to set `scl` equal to :math:`1/a`\n    - perhaps not what one would have first thought.\n\n    Also note that, in general, the result of integrating a C-series needs\n    to be "re-projected" onto the C-series basis set.  Thus, typically,\n    the result of this function is "un-intuitive," albeit correct; see\n    Examples section below.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeint\n    >>> hermeint([1, 2, 3]) # integrate once, value 0 at 0.\n    array([ 1.,  1.,  1.,  1.])\n    >>> hermeint([1, 2, 3], m=2) # integrate twice, value & deriv 0 at 0 \n    array([-0.25      ,  1.        ,  0.5       ,  0.33333333,  0.25      ])\n    >>> hermeint([1, 2, 3], k=1) # integrate once, value 1 at 0.\n    array([ 2.,  1.,  1.,  1.])\n    >>> hermeint([1, 2, 3], lbnd=-1) # integrate once, value 0 at -1\n    array([-1.,  1.,  1.,  1.])\n    >>> hermeint([1, 2, 3], m=2, k=[1,2], lbnd=-1)\n    array([ 1.83333333,  0.        ,  0.5       ,  0.33333333,  0.25      ])\n\n    '),
               ('numpy.polynomial.hermite_e.hermeval',
                ['x', 'cs'],
                'Evaluate a Hermite series.\n\n    If `cs` is of length `n`, this function returns :\n\n    ``p(x) = cs[0]*P_0(x) + cs[1]*P_1(x) + ... + cs[n-1]*P_{n-1}(x)``\n\n    If x is a sequence or array then p(x) will have the same shape as x.\n    If r is a ring_like object that supports multiplication and addition\n    by the values in `cs`, then an object of the same type is returned.\n\n    Parameters\n    ----------\n    x : array_like, ring_like\n        Array of numbers or objects that support multiplication and\n        addition with themselves and with the elements of `cs`.\n    cs : array_like\n        1-d array of Hermite coefficients ordered from low to high.\n\n    Returns\n    -------\n    values : ndarray, ring_like\n        If the return is an ndarray then it has the same shape as `x`.\n\n    See Also\n    --------\n    hermefit\n\n    Examples\n    --------\n\n    Notes\n    -----\n    The evaluation uses Clenshaw recursion, aka synthetic division.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeval\n    >>> coef = [1,2,3]\n    >>> hermeval(1, coef)\n    3.0\n    >>> hermeval([[1,2],[3,4]], coef)\n    array([[  3.,  14.],\n           [ 31.,  54.]])\n\n    '),
               ('numpy.polynomial.hermite_e.hermevander',
                ['x', 'deg'],
                "Vandermonde matrix of given degree.\n\n    Returns the Vandermonde matrix of degree `deg` and sample points `x`.\n    This isn't a true Vandermonde matrix because `x` can be an arbitrary\n    ndarray and the Hermite polynomials aren't powers. If ``V`` is the\n    returned matrix and `x` is a 2d array, then the elements of ``V`` are\n    ``V[i,j,k] = P_k(x[i,j])``, where ``P_k`` is the Hermite polynomial\n    of degree ``k``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array of points. The values are converted to double or complex\n        doubles. If x is scalar it is converted to a 1D array.\n    deg : integer\n        Degree of the resulting matrix.\n\n    Returns\n    -------\n    vander : Vandermonde matrix.\n        The shape of the returned matrix is ``x.shape + (deg+1,)``. The last\n        index is the degree.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermevander\n    >>> x = np.array([-1, 0, 1])\n    >>> hermevander(x, 3)\n    array([[ 1., -1.,  0.,  2.],\n           [ 1.,  0., -1., -0.],\n           [ 1.,  1.,  0., -2.]])\n\n    "),
               ('numpy.polynomial.hermite_e.hermefit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False', 'w=None'],
                '\n    Least squares fit of Hermite series to data.\n\n    Return the coefficients of a HermiteE series of degree `deg` that is\n    the least squares fit to the data values `y` given at points `x`. If\n    `y` is 1-D the returned coefficients will also be 1-D. If `y` is 2-D\n    multiple fits are done, one for each column of `y`, and the resulting\n    coefficients are stored in the corresponding columns of a 2-D return.\n    The fitted polynomial(s) are in the form\n\n    .. math::  p(x) = c_0 + c_1 * He_1(x) + ... + c_n * He_n(x),\n\n    where `n` is `deg`.\n\n    Parameters\n    ----------\n    x : array_like, shape (M,)\n        x-coordinates of the M sample points ``(x[i], y[i])``.\n    y : array_like, shape (M,) or (M, K)\n        y-coordinates of the sample points. Several data sets of sample\n        points sharing the same x-coordinates can be fitted at once by\n        passing in a 2D-array that contains one dataset per column.\n    deg : int\n        Degree of the fitting polynomial\n    rcond : float, optional\n        Relative condition number of the fit. Singular values smaller than\n        this relative to the largest singular value will be ignored. The\n        default value is len(x)*eps, where eps is the relative precision of\n        the float type, about 2e-16 in most cases.\n    full : bool, optional\n        Switch determining nature of return value. When it is False (the\n        default) just the coefficients are returned, when True diagnostic\n        information from the singular value decomposition is also returned.\n    w : array_like, shape (`M`,), optional\n        Weights. If not None, the contribution of each point\n        ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the\n        weights are chosen so that the errors of the products ``w[i]*y[i]``\n        all have the same variance.  The default value is None.\n\n    Returns\n    -------\n    coef : ndarray, shape (M,) or (M, K)\n        Hermite coefficients ordered from low to high. If `y` was 2-D,\n        the coefficients for the data in column k  of `y` are in column\n        `k`.\n\n    [residuals, rank, singular_values, rcond] : present when `full` = True\n        Residuals of the least-squares fit, the effective rank of the\n        scaled Vandermonde matrix and its singular values, and the\n        specified value of `rcond`. For more details, see `linalg.lstsq`.\n\n    Warns\n    -----\n    RankWarning\n        The rank of the coefficient matrix in the least-squares fit is\n        deficient. The warning is only raised if `full` = False.  The\n        warnings can be turned off by\n\n        >>> import warnings\n        >>> warnings.simplefilter(\'ignore\', RankWarning)\n\n    See Also\n    --------\n    chebfit, legfit, polyfit, hermfit, polyfit\n    hermeval : Evaluates a Hermite series.\n    hermevander : pseudo Vandermonde matrix of Hermite series.\n    hermeweight : HermiteE weight function.\n    linalg.lstsq : Computes a least-squares fit from the matrix.\n    scipy.interpolate.UnivariateSpline : Computes spline fits.\n\n    Notes\n    -----\n    The solution is the coefficients of the HermiteE series `p` that\n    minimizes the sum of the weighted squared errors\n\n    .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,\n\n    where the :math:`w_j` are the weights. This problem is solved by\n    setting up the (typically) overdetermined matrix equation\n\n    .. math:: V(x) * c = w * y,\n\n    where `V` is the pseudo Vandermonde matrix of `x`, the elements of `c`\n    are the coefficients to be solved for, and the elements of `y` are the\n    observed values.  This equation is then solved using the singular value\n    decomposition of `V`.\n\n    If some of the singular values of `V` are so small that they are\n    neglected, then a `RankWarning` will be issued. This means that the\n    coeficient values may be poorly determined. Using a lower order fit\n    will usually get rid of the warning.  The `rcond` parameter can also be\n    set to a value smaller than its default, but the resulting fit may be\n    spurious and have large contributions from roundoff error.\n\n    Fits using HermiteE series are probably most useful when the data can\n    be approximated by ``sqrt(w(x)) * p(x)``, where `w(x)` is the HermiteE\n    weight. In that case the wieght ``sqrt(w(x[i])`` should be used\n    together with data values ``y[i]/sqrt(w(x[i])``. The weight function is\n    available as `hermeweight`.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Curve fitting",\n           http://en.wikipedia.org/wiki/Curve_fitting\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermefik, hermeval\n    >>> x = np.linspace(-10, 10)\n    >>> err = np.random.randn(len(x))/10\n    >>> y = hermeval(x, [1, 2, 3]) + err\n    >>> hermefit(x, y, 2)\n    array([ 1.01690445,  1.99951418,  2.99948696])\n\n    '),
               ('numpy.polynomial.hermite_e.hermecompanion',
                ['cs'],
                'Return the scaled companion matrix of cs.\n\n    The basis polynomials are scaled so that the companion matrix is\n    symmetric when `cs` represents a single HermiteE polynomial. This\n    provides better eigenvalue estimates than the unscaled case and in the\n    single polynomial case the eigenvalues are guaranteed to be real if\n    `numpy.linalg.eigvalsh` is used to obtain them.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of Legendre series coefficients ordered from low to high\n        degree.\n\n    Returns\n    -------\n    mat : ndarray\n        Scaled companion matrix of dimensions (deg, deg).\n\n    '),
               ('numpy.polynomial.hermite_e.hermeroots',
                ['cs'],
                '\n    Compute the roots of a Hermite series.\n\n    Return the roots (a.k.a "zeros") of the HermiteE series represented by\n    `cs`, which is the sequence of coefficients from lowest order "term"\n    to highest, e.g., [1,2,3] is the series ``L_0 + 2*L_1 + 3*L_2``.\n\n    Parameters\n    ----------\n    cs : array_like\n        1-d array of HermiteE series coefficients ordered from low to high.\n\n    Returns\n    -------\n    out : ndarray\n        Array of the roots.  If all the roots are real, then so is the\n        dtype of ``out``; otherwise, ``out``\'s dtype is complex.\n\n    See Also\n    --------\n    polyroots\n    chebroots\n\n    Notes\n    -----\n    Algorithm(s) used:\n\n    Remember: because the Hermite series basis set is different from the\n    "standard" basis set, the results of this function *may* not be what\n    one is expecting.\n\n    Examples\n    --------\n    >>> from numpy.polynomial.hermite_e import hermeroots, hermefromroots\n    >>> coef = hermefromroots([-1, 0, 1])\n    >>> coef\n    array([ 0.,  2.,  0.,  1.])\n    >>> hermeroots(coef)\n    array([-1.,  0.,  1.])\n\n    '),
               ('numpy.polynomial.setup.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('test_legendre.trim', ['x'], ''),
               ('test_legendre.assert_poly_almost_equal', ['p1', 'p2'], ''),
               ('test_hermite.trim', ['x'], ''),
               ('test_hermite.assert_poly_almost_equal', ['p1', 'p2'], ''),
               ('test_hermite_e.trim', ['x'], ''),
               ('test_hermite_e.assert_poly_almost_equal', ['p1', 'p2'], ''),
               ('test_polynomial.trim', ['x'], ''),
               ('test_chebyshev.trim', ['x'], ''),
               ('test_laguerre.trim', ['x'], ''),
               ('test_laguerre.assert_poly_almost_equal', ['p1', 'p2'], ''),
               ('numpy.core.shape_base.atleast_1d',
                ['*arys'],
                '\n    Convert inputs to arrays with at least one dimension.\n\n    Scalar inputs are converted to 1-dimensional arrays, whilst\n    higher-dimensional inputs are preserved.\n\n    Parameters\n    ----------\n    array1, array2, ... : array_like\n        One or more input arrays.\n\n    Returns\n    -------\n    ret : ndarray\n        An array, or sequence of arrays, each with ``a.ndim >= 1``.\n        Copies are made only if necessary.\n\n    See Also\n    --------\n    atleast_2d, atleast_3d\n\n    Examples\n    --------\n    >>> np.atleast_1d(1.0)\n    array([ 1.])\n\n    >>> x = np.arange(9.0).reshape(3,3)\n    >>> np.atleast_1d(x)\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4.,  5.],\n           [ 6.,  7.,  8.]])\n    >>> np.atleast_1d(x) is x\n    True\n\n    >>> np.atleast_1d(1, [3, 4])\n    [array([1]), array([3, 4])]\n\n    '),
               ('numpy.core.shape_base.atleast_2d',
                ['*arys'],
                '\n    View inputs as arrays with at least two dimensions.\n\n    Parameters\n    ----------\n    array1, array2, ... : array_like\n        One or more array-like sequences.  Non-array inputs are converted\n        to arrays.  Arrays that already have two or more dimensions are\n        preserved.\n\n    Returns\n    -------\n    res, res2, ... : ndarray\n        An array, or tuple of arrays, each with ``a.ndim >= 2``.\n        Copies are avoided where possible, and views with two or more\n        dimensions are returned.\n\n    See Also\n    --------\n    atleast_1d, atleast_3d\n\n    Examples\n    --------\n    >>> np.atleast_2d(3.0)\n    array([[ 3.]])\n\n    >>> x = np.arange(3.0)\n    >>> np.atleast_2d(x)\n    array([[ 0.,  1.,  2.]])\n    >>> np.atleast_2d(x).base is x\n    True\n\n    >>> np.atleast_2d(1, [1, 2], [[1, 2]])\n    [array([[1]]), array([[1, 2]]), array([[1, 2]])]\n\n    '),
               ('numpy.core.shape_base.atleast_3d',
                ['*arys'],
                '\n    View inputs as arrays with at least three dimensions.\n\n    Parameters\n    ----------\n    array1, array2, ... : array_like\n        One or more array-like sequences.  Non-array inputs are converted to\n        arrays.  Arrays that already have three or more dimensions are\n        preserved.\n\n    Returns\n    -------\n    res1, res2, ... : ndarray\n        An array, or tuple of arrays, each with ``a.ndim >= 3``.  Copies are\n        avoided where possible, and views with three or more dimensions are\n        returned.  For example, a 1-D array of shape ``(N,)`` becomes a view\n        of shape ``(1, N, 1)``, and a 2-D array of shape ``(M, N)`` becomes a\n        view of shape ``(M, N, 1)``.\n\n    See Also\n    --------\n    atleast_1d, atleast_2d\n\n    Examples\n    --------\n    >>> np.atleast_3d(3.0)\n    array([[[ 3.]]])\n\n    >>> x = np.arange(3.0)\n    >>> np.atleast_3d(x).shape\n    (1, 3, 1)\n\n    >>> x = np.arange(12.0).reshape(4,3)\n    >>> np.atleast_3d(x).shape\n    (4, 3, 1)\n    >>> np.atleast_3d(x).base is x\n    True\n\n    >>> for arr in np.atleast_3d([1, 2], [[1, 2]], [[[1, 2]]]):\n    ...     print arr, arr.shape\n    ...\n    [[[1]\n      [2]]] (1, 2, 1)\n    [[[1]\n      [2]]] (1, 2, 1)\n    [[[1 2]]] (1, 1, 2)\n\n    '),
               ('numpy.core.shape_base.vstack',
                ['tup'],
                '\n    Stack arrays in sequence vertically (row wise).\n\n    Take a sequence of arrays and stack them vertically to make a single\n    array. Rebuild arrays divided by `vsplit`.\n\n    Parameters\n    ----------\n    tup : sequence of ndarrays\n        Tuple containing arrays to be stacked. The arrays must have the same\n        shape along all but the first axis.\n\n    Returns\n    -------\n    stacked : ndarray\n        The array formed by stacking the given arrays.\n\n    See Also\n    --------\n    hstack : Stack arrays in sequence horizontally (column wise).\n    dstack : Stack arrays in sequence depth wise (along third dimension).\n    concatenate : Join a sequence of arrays together.\n    vsplit : Split array into a list of multiple sub-arrays vertically.\n\n    Notes\n    -----\n    Equivalent to ``np.concatenate(tup, axis=0)`` if `tup` contains arrays that\n    are at least 2-dimensional.\n\n    Examples\n    --------\n    >>> a = np.array([1, 2, 3])\n    >>> b = np.array([2, 3, 4])\n    >>> np.vstack((a,b))\n    array([[1, 2, 3],\n           [2, 3, 4]])\n\n    >>> a = np.array([[1], [2], [3]])\n    >>> b = np.array([[2], [3], [4]])\n    >>> np.vstack((a,b))\n    array([[1],\n           [2],\n           [3],\n           [2],\n           [3],\n           [4]])\n\n    '),
               ('numpy.core.shape_base.hstack',
                ['tup'],
                '\n    Stack arrays in sequence horizontally (column wise).\n\n    Take a sequence of arrays and stack them horizontally to make\n    a single array. Rebuild arrays divided by `hsplit`.\n\n    Parameters\n    ----------\n    tup : sequence of ndarrays\n        All arrays must have the same shape along all but the second axis.\n\n    Returns\n    -------\n    stacked : ndarray\n        The array formed by stacking the given arrays.\n\n    See Also\n    --------\n    vstack : Stack arrays in sequence vertically (row wise).\n    dstack : Stack arrays in sequence depth wise (along third axis).\n    concatenate : Join a sequence of arrays together.\n    hsplit : Split array along second axis.\n\n    Notes\n    -----\n    Equivalent to ``np.concatenate(tup, axis=1)``\n\n    Examples\n    --------\n    >>> a = np.array((1,2,3))\n    >>> b = np.array((2,3,4))\n    >>> np.hstack((a,b))\n    array([1, 2, 3, 2, 3, 4])\n    >>> a = np.array([[1],[2],[3]])\n    >>> b = np.array([[2],[3],[4]])\n    >>> np.hstack((a,b))\n    array([[1, 2],\n           [2, 3],\n           [3, 4]])\n\n    '),
               ('numpy.core.scons_support.check_api_version', ['apiversion'], ''),
               ('numpy.core.scons_support.split_ext', ['string'], ''),
               ('numpy.core.scons_support.do_generate_numpy_api',
                ['target', 'source', 'env'],
                ''),
               ('numpy.core.scons_support.do_generate_ufunc_api',
                ['target', 'source', 'env'],
                ''),
               ('numpy.core.scons_support.generate_api_emitter',
                ['target', 'source', 'env'],
                'Returns the list of targets generated by the code generator for array\n    api and ufunc api.'),
               ('numpy.core.scons_support.do_generate_from_template',
                ['targetfile', 'sourcefile', 'env'],
                ''),
               ('numpy.core.scons_support.generate_from_template',
                ['target', 'source', 'env'],
                ''),
               ('numpy.core.scons_support.generate_from_template_emitter',
                ['target', 'source', 'env'],
                ''),
               ('numpy.core.scons_support.do_generate_umath',
                ['targetfile', 'sourcefile', 'env'],
                ''),
               ('numpy.core.scons_support.generate_umath', ['target', 'source', 'env'], ''),
               ('numpy.core.scons_support.generate_umath_emitter',
                ['target', 'source', 'env'],
                ''),
               ('numpy.core.scons_support.CheckGCC4', ['context'], ''),
               ('numpy.core.scons_support.CheckBrokenMathlib', ['context', 'mathlib'], ''),
               ('numpy.core.scons_support.check_mlib',
                ['config', 'mlib'],
                'Return 1 if mlib is available and usable by numpy, 0 otherwise.\n\n    mlib can be a string (one library), or a list of libraries.'),
               ('numpy.core.scons_support.check_mlibs', ['config', 'mlibs'], ''),
               ('numpy.core.scons_support.is_npy_no_signal',
                [],
                'Return True if the NPY_NO_SIGNAL symbol must be defined in configuration\n    header.'),
               ('numpy.core.scons_support.define_no_smp',
                [],
                'Returns True if we should define NPY_NOSMP, False otherwise.'),
               ('numpy.core.scons_support.CheckInline', ['context'], ''),
               ('numpy.core.scons_support.CheckLongDoubleRepresentation', ['context'], ''),
               ('numpy.core._internal._makenames_list', ['adict'], ''),
               ('numpy.core._internal._usefields', ['adict', 'align'], ''),
               ('numpy.core._internal._array_descr', ['descriptor'], ''),
               ('numpy.core._internal._reconstruct', ['subtype', 'shape', 'dtype'], ''),
               ('numpy.core._internal._split',
                ['input'],
                'Split the input formats string into field formats without splitting\n       the tuple used to specify multi-dimensional arrays.'),
               ('numpy.core._internal._datetimestring', ['astr'], ''),
               ('numpy.core._internal._commastring', ['astr'], ''),
               ('numpy.core._internal._getintp_ctype', [], ''),
               ('numpy.core._internal._newnames', ['datatype', 'order'], ''),
               ('numpy.core._internal._index_fields', ['ary', 'fields'], ''),
               ('numpy.core._internal._dtype_from_pep3118',
                ['spec', "byteorder='@'", 'is_subdtype=False'],
                ''),
               ('numpy.core._internal._add_trailing_padding',
                ['value', 'padding'],
                'Inject the specified number of padding bytes at the end of a dtype'),
               ('numpy.core._internal._prod', ['a'], ''),
               ('numpy.core._internal._gcd',
                ['a', 'b'],
                'Calculate the greatest common divisor of a and b'),
               ('numpy.core.arrayprint.product', ['x', 'y'], ''),
               ('numpy.core.arrayprint.set_printoptions',
                ['precision=None',
                 'threshold=None',
                 'edgeitems=None',
                 'linewidth=None',
                 'suppress=None',
                 'nanstr=None',
                 'infstr=None'],
                "\n    Set printing options.\n\n    These options determine the way floating point numbers, arrays and\n    other NumPy objects are displayed.\n\n    Parameters\n    ----------\n    precision : int, optional\n        Number of digits of precision for floating point output (default 8).\n    threshold : int, optional\n        Total number of array elements which trigger summarization\n        rather than full repr (default 1000).\n    edgeitems : int, optional\n        Number of array items in summary at beginning and end of\n        each dimension (default 3).\n    linewidth : int, optional\n        The number of characters per line for the purpose of inserting\n        line breaks (default 75).\n    suppress : bool, optional\n        Whether or not suppress printing of small floating point values\n        using scientific notation (default False).\n    nanstr : str, optional\n        String representation of floating point not-a-number (default nan).\n    infstr : str, optional\n        String representation of floating point infinity (default inf).\n\n    See Also\n    --------\n    get_printoptions, set_string_function\n\n    Examples\n    --------\n    Floating point precision can be set:\n\n    >>> np.set_printoptions(precision=4)\n    >>> print np.array([1.123456789])\n    [ 1.1235]\n\n    Long arrays can be summarised:\n\n    >>> np.set_printoptions(threshold=5)\n    >>> print np.arange(10)\n    [0 1 2 ..., 7 8 9]\n\n    Small results can be suppressed:\n\n    >>> eps = np.finfo(float).eps\n    >>> x = np.arange(4.)\n    >>> x**2 - (x + eps)**2\n    array([ -4.9304e-32,  -4.4409e-16,   0.0000e+00,   0.0000e+00])\n    >>> np.set_printoptions(suppress=True)\n    >>> x**2 - (x + eps)**2\n    array([-0., -0.,  0.,  0.])\n\n    To put back the default options, you can use:\n\n    >>> np.set_printoptions(edgeitems=3,infstr='Inf',\n    ... linewidth=75, nanstr='NaN', precision=8,\n    ... suppress=False, threshold=1000)\n    "),
               ('numpy.core.arrayprint.get_printoptions',
                [],
                '\n    Return the current print options.\n\n    Returns\n    -------\n    print_opts : dict\n        Dictionary of current print options with keys\n\n          - precision : int\n          - threshold : int\n          - edgeitems : int\n          - linewidth : int\n          - suppress : bool\n          - nanstr : str\n          - infstr : str\n\n        For a full description of these options, see `set_printoptions`.\n\n    See Also\n    --------\n    set_printoptions, set_string_function\n\n    '),
               ('numpy.core.arrayprint._leading_trailing', ['a'], ''),
               ('numpy.core.arrayprint._boolFormatter', ['x'], ''),
               ('numpy.core.arrayprint._array2string',
                ['a',
                 'max_line_width',
                 'precision',
                 'suppress_small',
                 "separator=' '",
                 "prefix=''"],
                ''),
               ('numpy.core.arrayprint._convert_arrays', ['obj'], ''),
               ('numpy.core.arrayprint.array2string',
                ['a',
                 'max_line_width=None',
                 'precision=None',
                 'suppress_small=None',
                 "separator=' '",
                 "prefix=''",
                 'style=repr'],
                '\n    Return a string representation of an array.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n    max_line_width : int, optional\n        The maximum number of columns the string should span. Newline\n        characters splits the string appropriately after array elements.\n    precision : int, optional\n        Floating point precision. Default is the current printing\n        precision (usually 8), which can be altered using `set_printoptions`.\n    suppress_small : bool, optional\n        Represent very small numbers as zero. A number is "very small" if it\n        is smaller than the current printing precision.\n    separator : str, optional\n        Inserted between elements.\n    prefix : str, optional\n        An array is typically printed as::\n\n          \'prefix(\' + array2string(a) + \')\'\n\n        The length of the prefix string is used to align the\n        output correctly.\n    style : function, optional\n        A function that accepts an ndarray and returns a string.  Used only\n        when the shape of `a` is equal to ().\n\n    Returns\n    -------\n    array_str : str\n        String representation of the array.\n\n    See Also\n    --------\n    array_str, array_repr, set_printoptions\n\n    Examples\n    --------\n    >>> x = np.array([1e-16,1,2,3])\n    >>> print np.array2string(x, precision=2, separator=\',\',\n    ...                       suppress_small=True)\n    [ 0., 1., 2., 3.]\n\n    '),
               ('numpy.core.arrayprint._extendLine',
                ['s', 'line', 'word', 'max_line_len', 'next_line_prefix'],
                ''),
               ('numpy.core.arrayprint._formatArray',
                ['a',
                 'format_function',
                 'rank',
                 'max_line_len',
                 'next_line_prefix',
                 'separator',
                 'edge_items',
                 'summary_insert'],
                'formatArray is designed for two modes of operation:\n\n    1. Full output\n\n    2. Summarized output\n\n    '),
               ('numpy.core.arrayprint._digits', ['x', 'precision', 'format'], ''),
               ('numpy.core.arrayprint._formatInteger', ['x', 'format'], ''),
               ('numpy.core.function_base.linspace',
                ['start', 'stop', 'num=50', 'endpoint=True', 'retstep=False'],
                "\n    Return evenly spaced numbers over a specified interval.\n\n    Returns `num` evenly spaced samples, calculated over the\n    interval [`start`, `stop` ].\n\n    The endpoint of the interval can optionally be excluded.\n\n    Parameters\n    ----------\n    start : scalar\n        The starting value of the sequence.\n    stop : scalar\n        The end value of the sequence, unless `endpoint` is set to False.\n        In that case, the sequence consists of all but the last of ``num + 1``\n        evenly spaced samples, so that `stop` is excluded.  Note that the step\n        size changes when `endpoint` is False.\n    num : int, optional\n        Number of samples to generate. Default is 50.\n    endpoint : bool, optional\n        If True, `stop` is the last sample. Otherwise, it is not included.\n        Default is True.\n    retstep : bool, optional\n        If True, return (`samples`, `step`), where `step` is the spacing\n        between samples.\n\n    Returns\n    -------\n    samples : ndarray\n        There are `num` equally spaced samples in the closed interval\n        ``[start, stop]`` or the half-open interval ``[start, stop)``\n        (depending on whether `endpoint` is True or False).\n    step : float (only if `retstep` is True)\n        Size of spacing between samples.\n\n\n    See Also\n    --------\n    arange : Similiar to `linspace`, but uses a step size (instead of the\n             number of samples).\n    logspace : Samples uniformly distributed in log space.\n\n    Examples\n    --------\n    >>> np.linspace(2.0, 3.0, num=5)\n        array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ])\n    >>> np.linspace(2.0, 3.0, num=5, endpoint=False)\n        array([ 2. ,  2.2,  2.4,  2.6,  2.8])\n    >>> np.linspace(2.0, 3.0, num=5, retstep=True)\n        (array([ 2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)\n\n    Graphical illustration:\n\n    >>> import matplotlib.pyplot as plt\n    >>> N = 8\n    >>> y = np.zeros(N)\n    >>> x1 = np.linspace(0, 10, N, endpoint=True)\n    >>> x2 = np.linspace(0, 10, N, endpoint=False)\n    >>> plt.plot(x1, y, 'o')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.plot(x2, y + 0.5, 'o')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.ylim([-0.5, 1])\n    (-0.5, 1)\n    >>> plt.show()\n\n    "),
               ('numpy.core.function_base.logspace',
                ['start', 'stop', 'num=50', 'endpoint=True', 'base=10.0'],
                "\n    Return numbers spaced evenly on a log scale.\n\n    In linear space, the sequence starts at ``base ** start``\n    (`base` to the power of `start`) and ends with ``base ** stop``\n    (see `endpoint` below).\n\n    Parameters\n    ----------\n    start : float\n        ``base ** start`` is the starting value of the sequence.\n    stop : float\n        ``base ** stop`` is the final value of the sequence, unless `endpoint`\n        is False.  In that case, ``num + 1`` values are spaced over the\n        interval in log-space, of which all but the last (a sequence of\n        length ``num``) are returned.\n    num : integer, optional\n        Number of samples to generate.  Default is 50.\n    endpoint : boolean, optional\n        If true, `stop` is the last sample. Otherwise, it is not included.\n        Default is True.\n    base : float, optional\n        The base of the log space. The step size between the elements in\n        ``ln(samples) / ln(base)`` (or ``log_base(samples)``) is uniform.\n        Default is 10.0.\n\n    Returns\n    -------\n    samples : ndarray\n        `num` samples, equally spaced on a log scale.\n\n    See Also\n    --------\n    arange : Similiar to linspace, with the step size specified instead of the\n             number of samples. Note that, when used with a float endpoint, the\n             endpoint may or may not be included.\n    linspace : Similar to logspace, but with the samples uniformly distributed\n               in linear space, instead of log space.\n\n    Notes\n    -----\n    Logspace is equivalent to the code\n\n    >>> y = np.linspace(start, stop, num=num, endpoint=endpoint)\n    ... # doctest: +SKIP\n    >>> power(base, y)\n    ... # doctest: +SKIP\n\n    Examples\n    --------\n    >>> np.logspace(2.0, 3.0, num=4)\n        array([  100.        ,   215.443469  ,   464.15888336,  1000.        ])\n    >>> np.logspace(2.0, 3.0, num=4, endpoint=False)\n        array([ 100.        ,  177.827941  ,  316.22776602,  562.34132519])\n    >>> np.logspace(2.0, 3.0, num=4, base=2.0)\n        array([ 4.        ,  5.0396842 ,  6.34960421,  8.        ])\n\n    Graphical illustration:\n\n    >>> import matplotlib.pyplot as plt\n    >>> N = 10\n    >>> x1 = np.logspace(0.1, 1, N, endpoint=True)\n    >>> x2 = np.logspace(0.1, 1, N, endpoint=False)\n    >>> y = np.zeros(N)\n    >>> plt.plot(x1, y, 'o')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.plot(x2, y + 0.5, 'o')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.ylim([-0.5, 1])\n    (-0.5, 1)\n    >>> plt.show()\n\n    "),
               ('numpy.core.getlimits._frz', ['a'], 'fix rank-0 --> rank-1'),
               ('numpy.core._mx_datetime_parser.utc_offset',
                ['zone'],
                ' utc_offset(zonestring)\n\n        Return the UTC time zone offset in minutes.\n\n        zone must be string and can either be given as +-HH:MM,\n        +-HHMM, +-HH numeric offset or as time zone\n        abbreviation. Daylight saving time must be encoded into the\n        zone offset.\n\n        Timezone abbreviations are treated case-insensitive.\n\n    '),
               ('numpy.core._mx_datetime_parser.add_century',
                ['year'],
                ' Sliding window approach to the Y2K problem: adds a suitable\n        century to the given year and returns it as integer.\n\n        The window used depends on the current year. If adding the current\n        century to the given year gives a year within the range\n        current_year-70...current_year+30 [both inclusive], then the\n        current century is added. Otherwise the century (current + 1 or\n        - 1) producing the least difference is chosen.\n\n    '),
               ('numpy.core._mx_datetime_parser._parse_date',
                ['text'],
                "\n    Parses the date part given in text and returns a tuple\n    (text,day,month,year,style) with the following meanings:\n\n    * text gives the original text without the date part\n\n    * day,month,year give the parsed date\n\n    * style gives information about which parser was successful:\n      'euro' - the European date parser\n      'us' - the US date parser\n      'altus' - the alternative US date parser (with '-' instead of '/')\n      'iso' - the ISO date parser\n      'altiso' - the alternative ISO date parser (without '-')\n      'usiso' - US style ISO date parser (yyyy/mm/dd)\n      'lit' - the US literal date parser\n      'altlit' - the alternative US literal date parser\n      'eurlit' - the Eurpean literal date parser\n      'unknown' - no date part was found, defaultdate was used\n\n    Formats may be set to a tuple of style strings specifying which of the above\n    parsers to use and in which order to try them.\n    Default is to try all of them in the above order.\n\n    ``defaultdate`` provides the defaults to use in case no date part is found.\n    Most other parsers default to the current year January 1 if some of these\n    date parts are missing.\n\n    If ``'unknown'`` is not given in formats and the date cannot be parsed,\n    a :exc:`ValueError` is raised.\n\n    "),
               ('numpy.core._mx_datetime_parser._parse_time',
                ['text'],
                " Parses a time part given in text and returns a tuple\n        (text,hour,minute,second,offset,style) with the following\n        meanings:\n\n        * text gives the original text without the time part\n        * hour,minute,second give the parsed time\n        * offset gives the time zone UTC offset\n        * style gives information about which parser was successful:\n          'standard' - the standard parser\n          'iso' - the ISO time format parser\n          'unknown' - no time part was found\n\n        formats may be set to a tuple specifying the parsers to use:\n          'standard' - standard time format with ':' delimiter\n          'iso' - ISO time format (superset of 'standard')\n          'unknown' - default to 0:00:00, 0 zone offset\n\n        If 'unknown' is not given in formats and the time cannot be\n        parsed, a ValueError is raised.\n\n    "),
               ('numpy.core._mx_datetime_parser.datetime_from_string',
                ['text'],
                " datetime_from_string(text, [formats, defaultdate])\n\n        Returns a datetime instance reflecting the date and time given\n        in text. In case a timezone is given, the returned instance\n        will point to the corresponding UTC time value. Otherwise, the\n        value is set as given in the string.\n\n        formats may be set to a tuple of strings specifying which of\n        the following parsers to use and in which order to try\n        them. Default is to try all of them in the order given below:\n\n          'euro' - the European date parser\n          'us' - the US date parser\n          'altus' - the alternative US date parser (with '-' instead of '/')\n          'iso' - the ISO date parser\n          'altiso' - the alternative ISO date parser (without '-')\n          'usiso' - US style ISO date parser (yyyy/mm/dd)\n          'lit' - the US literal date parser\n          'altlit' - the alternative US literal date parser\n          'eurlit' - the Eurpean literal date parser\n          'unknown' - if no date part is found, use defaultdate\n\n        defaultdate provides the defaults to use in case no date part\n        is found. Most of the parsers default to the current year\n        January 1 if some of these date parts are missing.\n\n        If 'unknown' is not given in formats and the date cannot\n        be parsed, a ValueError is raised.\n\n        time_formats may be set to a tuple of strings specifying which\n        of the following parsers to use and in which order to try\n        them. Default is to try all of them in the order given below:\n\n          'standard' - standard time format HH:MM:SS (with ':' delimiter)\n          'iso' - ISO time format (superset of 'standard')\n          'unknown' - default to 00:00:00 in case the time format\n                      cannot be parsed\n\n        Defaults to 00:00:00.00 for time parts that are not included\n        in the textual representation.\n\n        If 'unknown' is not given in time_formats and the time cannot\n        be parsed, a ValueError is raised.\n\n    "),
               ('numpy.core._mx_datetime_parser.date_from_string',
                ['text'],
                ' date_from_string(text, [formats, defaultdate])\n\n        Returns a datetime instance reflecting the date given in\n        text. A possibly included time part is ignored.\n\n        formats and defaultdate work just like for\n        datetime_from_string().\n\n    '),
               ('numpy.core._mx_datetime_parser.validateDateTimeString',
                ['text'],
                ' validateDateTimeString(text, [formats, defaultdate])\n\n        Validates the given text and returns 1/0 depending on whether\n        text includes parseable date and time values or not.\n\n        formats works just like for datetime_from_string() and defines\n        the order of date/time parsers to apply. It defaults to the\n        same list of parsers as for datetime_from_string().\n\n        XXX Undocumented !\n\n    '),
               ('numpy.core._mx_datetime_parser.validateDateString',
                ['text'],
                ' validateDateString(text, [formats, defaultdate])\n\n        Validates the given text and returns 1/0 depending on whether\n        text includes a parseable date value or not.\n\n        formats works just like for datetime_from_string() and defines\n        the order of date/time parsers to apply. It defaults to the\n        same list of parsers as for datetime_from_string().\n\n        XXX Undocumented !\n\n    '),
               ('numpy.core._mx_datetime_parser._test', [], ''),
               ('numpy.core.records.find_duplicate',
                ['list'],
                'Find duplication in a list, return a list of duplicated elements'),
               ('numpy.core.records.fromarrays',
                ['arrayList',
                 'dtype=None',
                 'shape=None',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None'],
                " create a record array from a (flat) list of arrays\n\n    >>> x1=np.array([1,2,3,4])\n    >>> x2=np.array(['a','dd','xyz','12'])\n    >>> x3=np.array([1.1,2,3,4])\n    >>> r = np.core.records.fromarrays([x1,x2,x3],names='a,b,c')\n    >>> print r[1]\n    (2, 'dd', 2.0)\n    >>> x1[1]=34\n    >>> r.a\n    array([1, 2, 3, 4])\n    "),
               ('numpy.core.records.fromrecords',
                ['recList',
                 'dtype=None',
                 'shape=None',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None'],
                " create a recarray from a list of records in text form\n\n        The data in the same field can be heterogeneous, they will be promoted\n        to the highest data type.  This method is intended for creating\n        smaller record arrays.  If used to create large array without formats\n        defined\n\n        r=fromrecords([(2,3.,'abc')]*100000)\n\n        it can be slow.\n\n        If formats is None, then this will auto-detect formats. Use list of\n        tuples rather than list of lists for faster processing.\n\n    >>> r=np.core.records.fromrecords([(456,'dbe',1.2),(2,'de',1.3)],\n    ... names='col1,col2,col3')\n    >>> print r[0]\n    (456, 'dbe', 1.2)\n    >>> r.col1\n    array([456,   2])\n    >>> r.col2\n    chararray(['dbe', 'de'],\n          dtype='|S3')\n    >>> import cPickle\n    >>> print cPickle.loads(cPickle.dumps(r))\n    [(456, 'dbe', 1.2) (2, 'de', 1.3)]\n    "),
               ('numpy.core.records.fromstring',
                ['datastring',
                 'dtype=None',
                 'shape=None',
                 'offset=0',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None'],
                ' create a (read-only) record array from binary data contained in\n    a string'),
               ('numpy.core.records.get_remaining_size', ['fd'], ''),
               ('numpy.core.records.fromfile',
                ['fd',
                 'dtype=None',
                 'shape=None',
                 'offset=0',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None'],
                "Create an array from binary file data\n\n    If file is a string then that file is opened, else it is assumed\n    to be a file object.\n\n    >>> from tempfile import TemporaryFile\n    >>> a = np.empty(10,dtype='f8,i4,a5')\n    >>> a[5] = (0.5,10,'abcde')\n    >>>\n    >>> fd=TemporaryFile()\n    >>> a = a.newbyteorder('<')\n    >>> a.tofile(fd)\n    >>>\n    >>> fd.seek(0)\n    >>> r=np.core.records.fromfile(fd, formats='f8,i4,a5', shape=10,\n    ... byteorder='<')\n    >>> print r[5]\n    (0.5, 10, 'abcde')\n    >>> r.shape\n    (10,)\n    "),
               ('numpy.core.records.array',
                ['obj',
                 'dtype=None',
                 'shape=None',
                 'offset=0',
                 'strides=None',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None',
                 'copy=True'],
                'Construct a record array from a wide-variety of objects.\n    '),
               ('numpy.core.defchararray._use_unicode',
                ['*args'],
                '\n    Helper function for determining the output type of some string\n    operations.\n\n    For an operation on two ndarrays, if at least one is unicode, the\n    result should be unicode.\n    '),
               ('numpy.core.defchararray._to_string_or_unicode_array',
                ['result'],
                '\n    Helper function to cast a result back into a string or unicode array\n    if an object array must be used as an intermediary.\n    '),
               ('numpy.core.defchararray._clean_args',
                ['*args'],
                "\n    Helper function for delegating arguments to Python string\n    functions.\n\n    Many of the Python string operations that have optional arguments\n    do not use 'None' to indicate a default value.  In these cases,\n    we need to remove all `None` arguments, and those following them.\n    "),
               ('numpy.core.defchararray._get_num_chars',
                ['a'],
                '\n    Helper function that returns the number of characters per field in\n    a string or unicode array.  This is to abstract out the fact that\n    for a unicode array this is itemsize / 4.\n    '),
               ('numpy.core.defchararray.equal',
                ['x1', 'x2'],
                '\n    Return (x1 == x2) element-wise.\n\n    Unlike `numpy.equal`, this comparison is performed by first\n    stripping whitespace characters from the end of the string.  This\n    behavior is provided for backward-compatibility with numarray.\n\n    Parameters\n    ----------\n    x1, x2 : array_like of str or unicode\n        Input arrays of the same shape.\n\n    Returns\n    -------\n    out : {ndarray, bool}\n        Output array of bools, or a single bool if x1 and x2 are scalars.\n\n    See Also\n    --------\n    not_equal, greater_equal, less_equal, greater, less\n    '),
               ('numpy.core.defchararray.not_equal',
                ['x1', 'x2'],
                '\n    Return (x1 != x2) element-wise.\n\n    Unlike `numpy.not_equal`, this comparison is performed by first\n    stripping whitespace characters from the end of the string.  This\n    behavior is provided for backward-compatibility with numarray.\n\n    Parameters\n    ----------\n    x1, x2 : array_like of str or unicode\n        Input arrays of the same shape.\n\n    Returns\n    -------\n    out : {ndarray, bool}\n        Output array of bools, or a single bool if x1 and x2 are scalars.\n\n    See Also\n    --------\n    equal, greater_equal, less_equal, greater, less\n    '),
               ('numpy.core.defchararray.greater_equal',
                ['x1', 'x2'],
                '\n    Return (x1 >= x2) element-wise.\n\n    Unlike `numpy.greater_equal`, this comparison is performed by\n    first stripping whitespace characters from the end of the string.\n    This behavior is provided for backward-compatibility with\n    numarray.\n\n    Parameters\n    ----------\n    x1, x2 : array_like of str or unicode\n        Input arrays of the same shape.\n\n    Returns\n    -------\n    out : {ndarray, bool}\n        Output array of bools, or a single bool if x1 and x2 are scalars.\n\n    See Also\n    --------\n    equal, not_equal, less_equal, greater, less\n    '),
               ('numpy.core.defchararray.less_equal',
                ['x1', 'x2'],
                '\n    Return (x1 <= x2) element-wise.\n\n    Unlike `numpy.less_equal`, this comparison is performed by first\n    stripping whitespace characters from the end of the string.  This\n    behavior is provided for backward-compatibility with numarray.\n\n    Parameters\n    ----------\n    x1, x2 : array_like of str or unicode\n        Input arrays of the same shape.\n\n    Returns\n    -------\n    out : {ndarray, bool}\n        Output array of bools, or a single bool if x1 and x2 are scalars.\n\n    See Also\n    --------\n    equal, not_equal, greater_equal, greater, less\n    '),
               ('numpy.core.defchararray.greater',
                ['x1', 'x2'],
                '\n    Return (x1 > x2) element-wise.\n\n    Unlike `numpy.greater`, this comparison is performed by first\n    stripping whitespace characters from the end of the string.  This\n    behavior is provided for backward-compatibility with numarray.\n\n    Parameters\n    ----------\n    x1, x2 : array_like of str or unicode\n        Input arrays of the same shape.\n\n    Returns\n    -------\n    out : {ndarray, bool}\n        Output array of bools, or a single bool if x1 and x2 are scalars.\n\n    See Also\n    --------\n    equal, not_equal, greater_equal, less_equal, less\n    '),
               ('numpy.core.defchararray.less',
                ['x1', 'x2'],
                '\n    Return (x1 < x2) element-wise.\n\n    Unlike `numpy.greater`, this comparison is performed by first\n    stripping whitespace characters from the end of the string.  This\n    behavior is provided for backward-compatibility with numarray.\n\n    Parameters\n    ----------\n    x1, x2 : array_like of str or unicode\n        Input arrays of the same shape.\n\n    Returns\n    -------\n    out : {ndarray, bool}\n        Output array of bools, or a single bool if x1 and x2 are scalars.\n\n    See Also\n    --------\n    equal, not_equal, greater_equal, less_equal, greater\n    '),
               ('numpy.core.defchararray.str_len',
                ['a'],
                '\n    Return len(a) element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of integers\n\n    See also\n    --------\n    __builtin__.len\n    '),
               ('numpy.core.defchararray.add',
                ['x1', 'x2'],
                '\n    Return (x1 + x2), that is string concatenation, element-wise for a\n    pair of array_likes of str or unicode.\n\n    Parameters\n    ----------\n    x1 : array_like of str or unicode\n    x2 : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of `string_` or `unicode_`, depending on input types\n    '),
               ('numpy.core.defchararray.multiply',
                ['a', 'i'],
                '\n    Return (a * i), that is string multiple concatenation,\n    element-wise.\n\n    Values in `i` of less than 0 are treated as 0 (which yields an\n    empty string).\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    i : array_like of ints\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input types\n\n    '),
               ('numpy.core.defchararray.mod',
                ['a', 'values'],
                '\n    Return (a % i), that is pre-Python 2.6 string formatting\n    (iterpolation), element-wise for a pair of array_likes of str\n    or unicode.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    values : array_like of values\n       These values will be element-wise interpolated into the string.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input types\n\n    See also\n    --------\n    str.__mod__\n\n    '),
               ('numpy.core.defchararray.capitalize',
                ['a'],
                "\n    Return a copy of `a` with only the first character of each element\n    capitalized.\n\n    Calls `str.capitalize` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input\n        types\n\n    See also\n    --------\n    str.capitalize\n\n    Examples\n    --------\n    >>> c = np.array(['a1b2','1b2a','b2a1','2a1b'],'S4'); c\n    array(['a1b2', '1b2a', 'b2a1', '2a1b'],\n        dtype='|S4')\n    >>> np.char.capitalize(c)\n    array(['A1b2', '1b2a', 'B2a1', '2a1b'],\n        dtype='|S4')\n    "),
               ('numpy.core.defchararray.center',
                ['a', 'width', "fillchar=' '"],
                '\n        Return a copy of `a` with its elements centered in a string of\n        length `width`.\n\n        Calls `str.center` element-wise.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n\n        width : int\n            The length of the resulting strings\n        fillchar : str or unicode, optional\n            The padding character to use (default is space).\n\n        Returns\n        -------\n        out : ndarray\n            Output array of str or unicode, depending on input\n            types\n\n        See also\n        --------\n        str.center\n\n        '),
               ('numpy.core.defchararray.center',
                ['a', 'width'],
                '\n        Return an array with the elements of `a` centered in a string\n        of length width.\n\n        Calls `str.center` element-wise.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n        width : int\n            The length of the resulting strings\n\n        Returns\n        -------\n        out : ndarray, str or unicode\n            Output array of str or unicode, depending on input types\n\n        See also\n        --------\n        str.center\n        '),
               ('numpy.core.defchararray.count',
                ['a', 'sub', 'start=0', 'end=None'],
                "\n    Returns an array with the number of non-overlapping occurrences of\n    substring `sub` in the range [`start`, `end`].\n\n    Calls `str.count` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    sub : str or unicode\n       The substring to search for.\n\n    start, end : int, optional\n       Optional arguments `start` and `end` are interpreted as slice\n       notation to specify the range in which to count.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints.\n\n    See also\n    --------\n    str.count\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> c\n    array(['aAaAaA', '  aA  ', 'abBABba'],\n        dtype='|S7')\n    >>> np.char.count(c, 'A')\n    array([3, 1, 1])\n    >>> np.char.count(c, 'aA')\n    array([3, 1, 0])\n    >>> np.char.count(c, 'A', start=1, end=4)\n    array([2, 1, 1])\n    >>> np.char.count(c, 'A', start=1, end=3)\n    array([1, 0, 0])\n\n    "),
               ('numpy.core.defchararray.decode',
                ['a', 'encoding=None', 'errors=None'],
                "\n    Calls `str.decode` element-wise.\n\n    The set of available codecs comes from the Python standard library,\n    and may be extended at runtime.  For more information, see the\n    :mod:`codecs` module.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    encoding : str, optional\n       The name of an encoding\n\n    errors : str, optional\n       Specifies how to handle encoding errors\n\n    Returns\n    -------\n    out : ndarray\n\n    See also\n    --------\n    str.decode\n\n    Notes\n    -----\n    The type of the result will depend on the encoding specified.\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> c\n    array(['aAaAaA', '  aA  ', 'abBABba'],\n        dtype='|S7')\n    >>> np.char.encode(c, encoding='cp037')\n    array(['\\x81\\xc1\\x81\\xc1\\x81\\xc1', '@@\\x81\\xc1@@',\n        '\\x81\\x82\\xc2\\xc1\\xc2\\x82\\x81'],\n        dtype='|S7')\n\n    "),
               ('numpy.core.defchararray.encode',
                ['a', 'encoding=None', 'errors=None'],
                '\n    Calls `str.encode` element-wise.\n\n    The set of available codecs comes from the Python standard library,\n    and may be extended at runtime. For more information, see the codecs\n    module.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    encoding : str, optional\n       The name of an encoding\n\n    errors : str, optional\n       Specifies how to handle encoding errors\n\n    Returns\n    -------\n    out : ndarray\n\n    See also\n    --------\n    str.encode\n\n    Notes\n    -----\n    The type of the result will depend on the encoding specified.\n\n    '),
               ('numpy.core.defchararray.endswith',
                ['a', 'suffix', 'start=0', 'end=None'],
                "\n    Returns a boolean array which is `True` where the string element\n    in `a` ends with `suffix`, otherwise `False`.\n\n    Calls `str.endswith` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    suffix : str\n\n    start, end : int, optional\n        With optional `start`, test beginning at that position. With\n        optional `end`, stop comparing at that position.\n\n    Returns\n    -------\n    out : ndarray\n        Outputs an array of bools.\n\n    See also\n    --------\n    str.endswith\n\n    Examples\n    --------\n    >>> s = np.array(['foo', 'bar'])\n    >>> s[0] = 'foo'\n    >>> s[1] = 'bar'\n    >>> s\n    array(['foo', 'bar'],\n        dtype='|S3')\n    >>> np.char.endswith(s, 'ar')\n    array([False,  True], dtype=bool)\n    >>> np.char.endswith(s, 'a', start=1, end=2)\n    array([False,  True], dtype=bool)\n\n    "),
               ('numpy.core.defchararray.expandtabs',
                ['a', 'tabsize=8'],
                "\n    Return a copy of each string element where all tab characters are\n    replaced by one or more spaces.\n\n    Calls `str.expandtabs` element-wise.\n\n    Return a copy of each string element where all tab characters are\n    replaced by one or more spaces, depending on the current column\n    and the given `tabsize`. The column number is reset to zero after\n    each newline occurring in the string. If `tabsize` is not given, a\n    tab size of 8 characters is assumed. This doesn't understand other\n    non-printing characters or escape sequences.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n    tabsize : int, optional\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.expandtabs\n    "),
               ('numpy.core.defchararray.find',
                ['a', 'sub', 'start=0', 'end=None'],
                '\n    For each element, return the lowest index in the string where\n    substring `sub` is found.\n\n    Calls `str.find` element-wise.\n\n    For each element, return the lowest index in the string where\n    substring `sub` is found, such that `sub` is contained in the\n    range [`start`, `end`].\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    sub : str or unicode\n\n    start, end : int, optional\n        Optional arguments `start` and `end` are interpreted as in\n        slice notation.\n\n    Returns\n    -------\n    out : ndarray or int\n        Output array of ints.  Returns -1 if `sub` is not found.\n\n    See also\n    --------\n    str.find\n\n    '),
               ('numpy.core.defchararray.index',
                ['a', 'sub', 'start=0', 'end=None'],
                '\n    Like `find`, but raises `ValueError` when the substring is not found.\n\n    Calls `str.index` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    sub : str or unicode\n\n    start, end : int, optional\n\n    Returns\n    -------\n    out : ndarray\n        Output array of ints.  Returns -1 if `sub` is not found.\n\n    See also\n    --------\n    find, str.find\n\n    '),
               ('numpy.core.defchararray.isalnum',
                ['a'],
                '\n    Returns true for each element if all characters in the string are\n    alphanumeric and there is at least one character, false otherwise.\n\n    Calls `str.isalnum` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.isalnum\n    '),
               ('numpy.core.defchararray.isalpha',
                ['a'],
                '\n    Returns true for each element if all characters in the string are\n    alphabetic and there is at least one character, false otherwise.\n\n    Calls `str.isalpha` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See also\n    --------\n    str.isalpha\n    '),
               ('numpy.core.defchararray.isdigit',
                ['a'],
                '\n    Returns true for each element if all characters in the string are\n    digits and there is at least one character, false otherwise.\n\n    Calls `str.isdigit` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See also\n    --------\n    str.isdigit\n    '),
               ('numpy.core.defchararray.islower',
                ['a'],
                '\n    Returns true for each element if all cased characters in the\n    string are lowercase and there is at least one cased character,\n    false otherwise.\n\n    Calls `str.islower` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See also\n    --------\n    str.islower\n    '),
               ('numpy.core.defchararray.isspace',
                ['a'],
                '\n    Returns true for each element if there are only whitespace\n    characters in the string and there is at least one character,\n    false otherwise.\n\n    Calls `str.isspace` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See also\n    --------\n    str.isspace\n    '),
               ('numpy.core.defchararray.istitle',
                ['a'],
                '\n    Returns true for each element if the element is a titlecased\n    string and there is at least one character, false otherwise.\n\n    Call `str.istitle` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See also\n    --------\n    str.istitle\n    '),
               ('numpy.core.defchararray.isupper',
                ['a'],
                '\n    Returns true for each element if all cased characters in the\n    string are uppercase and there is at least one character, false\n    otherwise.\n\n    Call `str.isupper` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of bools\n\n    See also\n    --------\n    str.isupper\n    '),
               ('numpy.core.defchararray.join',
                ['sep', 'seq'],
                '\n    Return a string which is the concatenation of the strings in the\n    sequence `seq`.\n\n    Calls `str.join` element-wise.\n\n    Parameters\n    ----------\n    sep : array_like of str or unicode\n    seq : array_like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input types\n\n    See also\n    --------\n    str.join\n    '),
               ('numpy.core.defchararray.ljust',
                ['a', 'width', "fillchar=' '"],
                '\n        Return an array with the elements of `a` left-justified in a\n        string of length `width`.\n\n        Calls `str.ljust` element-wise.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n\n        width : int\n            The length of the resulting strings\n        fillchar : str or unicode, optional\n            The character to use for padding\n\n        Returns\n        -------\n        out : ndarray\n            Output array of str or unicode, depending on input type\n\n        See also\n        --------\n        str.ljust\n\n        '),
               ('numpy.core.defchararray.ljust',
                ['a', 'width'],
                '\n        Return an array with the elements of `a` left-justified in a\n        string of length `width`.\n\n        Calls `str.ljust` element-wise.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n        width : int\n            The length of the resulting strings\n\n        Returns\n        -------\n        out : ndarray\n            Output array of str or unicode, depending on input type\n\n        See also\n        --------\n        str.ljust\n        '),
               ('numpy.core.defchararray.lower',
                ['a'],
                "\n    Return an array with the elements of `a` converted to lowercase.\n\n    Call `str.lower` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    Returns\n    -------\n    out : ndarray, str or unicode\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.lower\n\n    Examples\n    --------\n    >>> c = np.array(['A1B C', '1BCA', 'BCA1']); c\n    array(['A1B C', '1BCA', 'BCA1'],\n          dtype='|S5')\n    >>> np.char.lower(c)\n    array(['a1b c', '1bca', 'bca1'],\n          dtype='|S5')\n    "),
               ('numpy.core.defchararray.lstrip',
                ['a', 'chars=None'],
                "\n    For each element in `a`, return a copy with the leading characters\n    removed.\n\n    Calls `str.lstrip` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    chars : str or unicode, optional\n       The `chars` argument is a string specifying the set of\n       characters to be removed. If omitted or None, the `chars`\n       argument defaults to removing whitespace. The `chars` argument\n       is not a prefix; rather, all combinations of its values are\n       stripped.\n\n    Returns\n    -------\n    out : ndarray, str or unicode\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.lstrip\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> c\n    array(['aAaAaA', '  aA  ', 'abBABba'],\n        dtype='|S7')\n    >>> np.char.lstrip(c, 'a') # 'a' unstripped from c[1] because whitespace leading\n    array(['AaAaA', '  aA  ', 'bBABba'],\n        dtype='|S7')\n    >>> np.char.lstrip(c, 'A') # leaves c unchanged\n    array(['aAaAaA', '  aA  ', 'abBABba'],\n        dtype='|S7')\n    >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, '')).all()\n    ... # XXX: is this a regression? this line now returns False\n    ... # np.char.lstrip(c,'') does not modify c at all.\n    True\n    >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, None)).all()\n    True\n\n    "),
               ('numpy.core.defchararray.partition',
                ['a', 'sep'],
                '\n        Partition each element in `a` around `sep`.\n\n        Calls `str.partition` element-wise.\n\n        For each element in `a`, split the element as the first\n        occurrence of `sep`, and return 3 strings containing the part\n        before the separator, the separator itself, and the part after\n        the separator. If the separator is not found, return 3 strings\n        containing the string itself, followed by two empty strings.\n\n        Parameters\n        ----------\n        a : array-like of str or unicode\n        sep : str or unicode\n\n        Returns\n        -------\n        out : ndarray\n            Output array of str or unicode, depending on input type.\n            The output array will have an extra dimension with 3\n            elements per input element.\n\n        See also\n        --------\n        str.partition\n        '),
               ('numpy.core.defchararray.replace',
                ['a', 'old', 'new', 'count=None'],
                '\n    For each element in `a`, return a copy of the string with all\n    occurrences of substring `old` replaced by `new`.\n\n    Calls `str.replace` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    old, new : str or unicode\n\n    count : int, optional\n        If the optional argument `count` is given, only the first\n        `count` occurrences are replaced.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.replace\n\n    '),
               ('numpy.core.defchararray.rfind',
                ['a', 'sub', 'start=0', 'end=None'],
                '\n    For each element in `a`, return the highest index in the string\n    where substring `sub` is found, such that `sub` is contained\n    within [`start`, `end`].\n\n    Calls `str.rfind` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    sub : str or unicode\n\n    start, end : int, optional\n        Optional arguments `start` and `end` are interpreted as in\n        slice notation.\n\n    Returns\n    -------\n    out : ndarray\n       Output array of ints.  Return -1 on failure.\n\n    See also\n    --------\n    str.rfind\n\n    '),
               ('numpy.core.defchararray.rindex',
                ['a', 'sub', 'start=0', 'end=None'],
                '\n    Like `rfind`, but raises `ValueError` when the substring `sub` is\n    not found.\n\n    Calls `str.rindex` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    sub : str or unicode\n\n    start, end : int, optional\n\n    Returns\n    -------\n    out : ndarray\n       Output array of ints.\n\n    See also\n    --------\n    rfind, str.rindex\n\n    '),
               ('numpy.core.defchararray.rjust',
                ['a', 'width', "fillchar=' '"],
                '\n        Return an array with the elements of `a` right-justified in a\n        string of length `width`.\n\n        Calls `str.rjust` element-wise.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n\n        width : int\n            The length of the resulting strings\n        fillchar : str or unicode, optional\n            The character to use for padding\n\n        Returns\n        -------\n        out : ndarray\n            Output array of str or unicode, depending on input type\n\n        See also\n        --------\n        str.rjust\n\n        '),
               ('numpy.core.defchararray.rjust',
                ['a', 'width'],
                '\n        Return an array with the elements of `a` right-justified in a\n        string of length `width`.\n\n        Calls `str.rjust` element-wise.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n        width : int\n            The length of the resulting strings\n\n        Returns\n        -------\n        out : ndarray\n            Output array of str or unicode, depending on input type\n\n        See also\n        --------\n        str.rjust\n        '),
               ('numpy.core.defchararray.rpartition',
                ['a', 'sep'],
                '\n        Partition each element in `a` around `sep`.\n\n        Calls `str.rpartition` element-wise.\n\n        For each element in `a`, split the element as the last\n        occurrence of `sep`, and return 3 strings containing the part\n        before the separator, the separator itself, and the part after\n        the separator. If the separator is not found, return 3 strings\n        containing the string itself, followed by two empty strings.\n\n        Parameters\n        ----------\n        a : array-like of str or unicode\n        sep : str or unicode\n\n        Returns\n        -------\n        out : ndarray\n            Output array of string or unicode, depending on input\n            type.  The output array will have an extra dimension with\n            3 elements per input element.\n\n        See also\n        --------\n        str.rpartition\n        '),
               ('numpy.core.defchararray.rsplit',
                ['a', 'sep=None', 'maxsplit=None'],
                '\n        For each element in `a`, return a list of the words in the\n        string, using `sep` as the delimiter string.\n\n        Calls `str.rsplit` element-wise.\n\n        Except for splitting from the right, `rsplit`\n        behaves like `split`.\n\n        Parameters\n        ----------\n        a : array_like of str or unicode\n\n        sep : str or unicode, optional\n            If `sep` is not specified or `None`, any whitespace string\n            is a separator.\n        maxsplit : int, optional\n            If `maxsplit` is given, at most `maxsplit` splits are done,\n            the rightmost ones.\n\n        Returns\n        -------\n        out : ndarray\n           Array of list objects\n\n        See also\n        --------\n        str.rsplit, split\n\n        '),
               ('numpy.core.defchararray.rstrip',
                ['a', 'chars=None'],
                "\n    For each element in `a`, return a copy with the trailing\n    characters removed.\n\n    Calls `str.rstrip` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    chars : str or unicode, optional\n       The `chars` argument is a string specifying the set of\n       characters to be removed. If omitted or None, the `chars`\n       argument defaults to removing whitespace. The `chars` argument\n       is not a suffix; rather, all combinations of its values are\n       stripped.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.rstrip\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', 'abBABba'], dtype='S7'); c\n    array(['aAaAaA', 'abBABba'],\n        dtype='|S7')\n    >>> np.char.rstrip(c, 'a')\n    array(['aAaAaA', 'abBABb'],\n        dtype='|S7')\n    >>> np.char.rstrip(c, 'A')\n    array(['aAaAa', 'abBABba'],\n        dtype='|S7')\n\n    "),
               ('numpy.core.defchararray.split',
                ['a', 'sep=None', 'maxsplit=None'],
                '\n    For each element in `a`, return a list of the words in the\n    string, using `sep` as the delimiter string.\n\n    Calls `str.rsplit` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    sep : str or unicode, optional\n       If `sep` is not specified or `None`, any whitespace string is a\n       separator.\n\n    maxsplit : int, optional\n        If `maxsplit` is given, at most `maxsplit` splits are done.\n\n    Returns\n    -------\n    out : ndarray\n        Array of list objects\n\n    See also\n    --------\n    str.split, rsplit\n\n    '),
               ('numpy.core.defchararray.splitlines',
                ['a', 'keepends=None'],
                '\n    For each element in `a`, return a list of the lines in the\n    element, breaking at line boundaries.\n\n    Calls `str.splitlines` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    keepends : bool, optional\n        Line breaks are not included in the resulting list unless\n        keepends is given and true.\n\n    Returns\n    -------\n    out : ndarray\n        Array of list objects\n\n    See also\n    --------\n    str.splitlines\n\n    '),
               ('numpy.core.defchararray.startswith',
                ['a', 'prefix', 'start=0', 'end=None'],
                '\n    Returns a boolean array which is `True` where the string element\n    in `a` starts with `prefix`, otherwise `False`.\n\n    Calls `str.startswith` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    suffix : str\n\n    start, end : int, optional\n        With optional `start`, test beginning at that position. With\n        optional `end`, stop comparing at that position.\n\n    Returns\n    -------\n    out : ndarray\n        Array of booleans\n\n    See also\n    --------\n    str.startswith\n\n    '),
               ('numpy.core.defchararray.strip',
                ['a', 'chars=None'],
                "\n    For each element in `a`, return a copy with the leading and\n    trailing characters removed.\n\n    Calls `str.rstrip` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    chars : str or unicode, optional\n       The `chars` argument is a string specifying the set of\n       characters to be removed. If omitted or None, the `chars`\n       argument defaults to removing whitespace. The `chars` argument\n       is not a prefix or suffix; rather, all combinations of its\n       values are stripped.\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.strip\n\n    Examples\n    --------\n    >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n    >>> c\n    array(['aAaAaA', '  aA  ', 'abBABba'],\n        dtype='|S7')\n    >>> np.char.strip(c)\n    array(['aAaAaA', 'aA', 'abBABba'],\n        dtype='|S7')\n    >>> np.char.strip(c, 'a') # 'a' unstripped from c[1] because whitespace leads\n    array(['AaAaA', '  aA  ', 'bBABb'],\n        dtype='|S7')\n    >>> np.char.strip(c, 'A') # 'A' unstripped from c[1] because (unprinted) ws trails\n    array(['aAaAa', '  aA  ', 'abBABba'],\n        dtype='|S7')\n\n    "),
               ('numpy.core.defchararray.swapcase',
                ['a'],
                "\n    For each element in `a`, return a copy of the string with\n    uppercase characters converted to lowercase and vice versa.\n\n    Calls `str.swapcase` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.swapcase\n\n    Examples\n    --------\n    >>> c=np.array(['a1B c','1b Ca','b Ca1','cA1b'],'S5'); c\n    array(['a1B c', '1b Ca', 'b Ca1', 'cA1b'],\n        dtype='|S5')\n    >>> np.char.swapcase(c)\n    array(['A1b C', '1B cA', 'B cA1', 'Ca1B'],\n        dtype='|S5')\n    "),
               ('numpy.core.defchararray.title',
                ['a'],
                "\n    For each element in `a`, return a titlecased version of the\n    string: words start with uppercase characters, all remaining cased\n    characters are lowercase.\n\n    Calls `str.title` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.title\n\n    Examples\n    --------\n    >>> c=np.array(['a1b c','1b ca','b ca1','ca1b'],'S5'); c\n    array(['a1b c', '1b ca', 'b ca1', 'ca1b'],\n        dtype='|S5')\n    >>> np.char.title(c)\n    array(['A1B C', '1B Ca', 'B Ca1', 'Ca1B'],\n        dtype='|S5')\n    "),
               ('numpy.core.defchararray.translate',
                ['a', 'table', 'deletechars=None'],
                '\n    For each element in `a`, return a copy of the string where all\n    characters occurring in the optional argument `deletechars` are\n    removed, and the remaining characters have been mapped through the\n    given translation table.\n\n    Calls `str.translate` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    table : str of length 256\n\n    deletechars : str\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.translate\n\n    '),
               ('numpy.core.defchararray.upper',
                ['a'],
                "\n    Return an array with the elements of `a` converted to uppercase.\n\n    Calls `str.upper` element-wise.\n\n    For 8-bit strings, this method is locale-dependent.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.upper\n\n    Examples\n    --------\n    >>> c = np.array(['a1b c', '1bca', 'bca1']); c\n    array(['a1b c', '1bca', 'bca1'],\n        dtype='|S5')\n    >>> np.char.upper(c)\n    array(['A1B C', '1BCA', 'BCA1'],\n        dtype='|S5')\n    "),
               ('numpy.core.defchararray.zfill',
                ['a', 'width'],
                '\n    Return the numeric string left-filled with zeros in a string of\n    length `width`.\n\n    Calls `str.zfill` element-wise.\n\n    Parameters\n    ----------\n    a : array-like of str or unicode\n    width : int\n\n    Returns\n    -------\n    out : ndarray\n        Output array of str or unicode, depending on input type\n\n    See also\n    --------\n    str.zfill\n    '),
               ('numpy.core.defchararray.isnumeric',
                ['a'],
                '\n    For each element in `a`, return True if there are only numeric\n    characters in the element.\n\n    Calls `unicode.isnumeric` element-wise.\n\n    Numeric characters include digit characters, and all characters\n    that have the Unicode numeric value property, e.g. ``U+2155,\n    VULGAR FRACTION ONE FIFTH``.\n\n    Parameters\n    ----------\n    a : array-like of unicode\n\n    Returns\n    -------\n    out : ndarray\n        Array of booleans\n\n    See also\n    --------\n    unicode.isnumeric\n    '),
               ('numpy.core.defchararray.isdecimal',
                ['a'],
                '\n    For each element in `a`, return True if there are only decimal\n    characters in the element.\n\n    Calls `unicode.isdecimal` element-wise.\n\n    Decimal characters include digit characters, and all characters\n    that that can be used to form decimal-radix numbers,\n    e.g. ``U+0660, ARABIC-INDIC DIGIT ZERO``.\n\n    Parameters\n    ----------\n    a : array-like of unicode\n\n    Returns\n    -------\n    out : ndarray\n        Array of booleans\n\n    See also\n    --------\n    unicode.isdecimal\n    '),
               ('numpy.core.defchararray.array',
                ['obj', 'itemsize=None', 'copy=True', 'unicode=None', 'order=None'],
                "\n    Create a `chararray`.\n\n    .. note::\n       This class is provided for numarray backward-compatibility.\n       New code (not concerned with numarray compatibility) should use\n       arrays of type `string_` or `unicode_` and use the free functions\n       in :mod:`numpy.char <numpy.core.defchararray>` for fast\n       vectorized string operations instead.\n\n    Versus a regular Numpy array of type `str` or `unicode`, this\n    class adds the following functionality:\n\n      1) values automatically have whitespace removed from the end\n         when indexed\n\n      2) comparison operators automatically remove whitespace from the\n         end when comparing values\n\n      3) vectorized string operations are provided as methods\n         (e.g. `str.endswith`) and infix operators (e.g. ``+, *, %``)\n\n    Parameters\n    ----------\n    obj : array of str or unicode-like\n\n    itemsize : int, optional\n        `itemsize` is the number of characters per scalar in the\n        resulting array.  If `itemsize` is None, and `obj` is an\n        object array or a Python list, the `itemsize` will be\n        automatically determined.  If `itemsize` is provided and `obj`\n        is of type str or unicode, then the `obj` string will be\n        chunked into `itemsize` pieces.\n\n    copy : bool, optional\n        If true (default), then the object is copied.  Otherwise, a copy\n        will only be made if __array__ returns a copy, if obj is a\n        nested sequence, or if a copy is needed to satisfy any of the other\n        requirements (`itemsize`, unicode, `order`, etc.).\n\n    unicode : bool, optional\n        When true, the resulting `chararray` can contain Unicode\n        characters, when false only 8-bit characters.  If unicode is\n        `None` and `obj` is one of the following:\n\n          - a `chararray`,\n          - an ndarray of type `str` or `unicode`\n          - a Python str or unicode object,\n\n        then the unicode setting of the output array will be\n        automatically determined.\n\n    order : {'C', 'F', 'A'}, optional\n        Specify the order of the array.  If order is 'C' (default), then the\n        array will be in C-contiguous order (last-index varies the\n        fastest).  If order is 'F', then the returned array\n        will be in Fortran-contiguous order (first-index varies the\n        fastest).  If order is 'A', then the returned array may\n        be in any order (either C-, Fortran-contiguous, or even\n        discontiguous).\n    "),
               ('numpy.core.defchararray.asarray',
                ['obj', 'itemsize=None', 'unicode=None', 'order=None'],
                "\n    Convert the input to a `chararray`, copying the data only if\n    necessary.\n\n    Versus a regular Numpy array of type `str` or `unicode`, this\n    class adds the following functionality:\n\n      1) values automatically have whitespace removed from the end\n         when indexed\n\n      2) comparison operators automatically remove whitespace from the\n         end when comparing values\n\n      3) vectorized string operations are provided as methods\n         (e.g. `str.endswith`) and infix operators (e.g. +, *, %)\n\n    Parameters\n    ----------\n    obj : array of str or unicode-like\n\n    itemsize : int, optional\n        `itemsize` is the number of characters per scalar in the\n        resulting array.  If `itemsize` is None, and `obj` is an\n        object array or a Python list, the `itemsize` will be\n        automatically determined.  If `itemsize` is provided and `obj`\n        is of type str or unicode, then the `obj` string will be\n        chunked into `itemsize` pieces.\n\n    unicode : bool, optional\n        When true, the resulting `chararray` can contain Unicode\n        characters, when false only 8-bit characters.  If unicode is\n        `None` and `obj` is one of the following:\n\n          - a `chararray`,\n          - an ndarray of type `str` or 'unicode`\n          - a Python str or unicode object,\n\n        then the unicode setting of the output array will be\n        automatically determined.\n\n    order : {'C', 'F'}, optional\n        Specify the order of the array.  If order is 'C' (default), then the\n        array will be in C-contiguous order (last-index varies the\n        fastest).  If order is 'F', then the returned array\n        will be in Fortran-contiguous order (first-index varies the\n        fastest).\n    "),
               ('numpy.core.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.core.fromnumeric._wrapit', ['obj', 'method', '*args', '**kwds'], ''),
               ('numpy.core.fromnumeric.take',
                ['a', 'indices', 'axis=None', 'out=None', "mode='raise'"],
                '\n    Take elements from an array along an axis.\n\n    This function does the same thing as "fancy" indexing (indexing arrays\n    using arrays); however, it can be easier to use if you need elements\n    along a given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        The source array.\n    indices : array_like\n        The indices of the values to extract.\n    axis : int, optional\n        The axis over which to select values. By default, the flattened\n        input array is used.\n    out : ndarray, optional\n        If provided, the result will be placed in this array. It should\n        be of the appropriate shape and dtype.\n    mode : {\'raise\', \'wrap\', \'clip\'}, optional\n        Specifies how out-of-bounds indices will behave.\n\n        * \'raise\' -- raise an error (default)\n        * \'wrap\' -- wrap around\n        * \'clip\' -- clip to the range\n\n        \'clip\' mode means that all indices that are too large are replaced\n        by the index that addresses the last element along that axis. Note\n        that this disables indexing with negative numbers.\n\n    Returns\n    -------\n    subarray : ndarray\n        The returned array has the same type as `a`.\n\n    See Also\n    --------\n    ndarray.take : equivalent method\n\n    Examples\n    --------\n    >>> a = [4, 3, 5, 7, 6, 8]\n    >>> indices = [0, 1, 4]\n    >>> np.take(a, indices)\n    array([4, 3, 6])\n\n    In this example if `a` is an ndarray, "fancy" indexing can be used.\n\n    >>> a = np.array(a)\n    >>> a[indices]\n    array([4, 3, 6])\n\n    '),
               ('numpy.core.fromnumeric.reshape',
                ['a', 'newshape', "order='C'"],
                "\n    Gives a new shape to an array without changing its data.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to be reshaped.\n    newshape : int or tuple of ints\n        The new shape should be compatible with the original shape. If\n        an integer, then the result will be a 1-D array of that length.\n        One shape dimension can be -1. In this case, the value is inferred\n        from the length of the array and remaining dimensions.\n    order : {'C', 'F', 'A'}, optional\n        Determines whether the array data should be viewed as in C\n        (row-major) order, FORTRAN (column-major) order, or the C/FORTRAN\n        order should be preserved.\n\n    Returns\n    -------\n    reshaped_array : ndarray\n        This will be a new view object if possible; otherwise, it will\n        be a copy.\n\n\n    See Also\n    --------\n    ndarray.reshape : Equivalent method.\n\n    Notes\n    -----\n\n    It is not always possible to change the shape of an array without\n    copying the data. If you want an error to be raise if the data is copied,\n    you should assign the new shape to the shape attribute of the array::\n\n     >>> a = np.zeros((10, 2))\n     # A transpose make the array non-contiguous\n     >>> b = a.T\n     # Taking a view makes it possible to modify the shape without modiying the\n     # initial object.\n     >>> c = b.view()\n     >>> c.shape = (20)\n     AttributeError: incompatible shape for a non-contiguous array\n\n\n    Examples\n    --------\n    >>> a = np.array([[1,2,3], [4,5,6]])\n    >>> np.reshape(a, 6)\n    array([1, 2, 3, 4, 5, 6])\n    >>> np.reshape(a, 6, order='F')\n    array([1, 4, 2, 5, 3, 6])\n\n    >>> np.reshape(a, (3,-1))       # the unspecified value is inferred to be 2\n    array([[1, 2],\n           [3, 4],\n           [5, 6]])\n\n    "),
               ('numpy.core.fromnumeric.choose',
                ['a', 'choices', 'out=None', "mode='raise'"],
                '\n    Construct an array from an index array and a set of arrays to choose from.\n\n    First of all, if confused or uncertain, definitely look at the Examples -\n    in its full generality, this function is less simple than it might\n    seem from the following code description (below ndi =\n    `numpy.lib.index_tricks`):\n\n    ``np.choose(a,c) == np.array([c[a[I]][I] for I in ndi.ndindex(a.shape)])``.\n\n    But this omits some subtleties.  Here is a fully general summary:\n\n    Given an "index" array (`a`) of integers and a sequence of `n` arrays\n    (`choices`), `a` and each choice array are first broadcast, as necessary,\n    to arrays of a common shape; calling these *Ba* and *Bchoices[i], i =\n    0,...,n-1* we have that, necessarily, ``Ba.shape == Bchoices[i].shape``\n    for each `i`.  Then, a new array with shape ``Ba.shape`` is created as\n    follows:\n\n    * if ``mode=raise`` (the default), then, first of all, each element of\n      `a` (and thus `Ba`) must be in the range `[0, n-1]`; now, suppose that\n      `i` (in that range) is the value at the `(j0, j1, ..., jm)` position\n      in `Ba` - then the value at the same position in the new array is the\n      value in `Bchoices[i]` at that same position;\n\n    * if ``mode=wrap``, values in `a` (and thus `Ba`) may be any (signed)\n      integer; modular arithmetic is used to map integers outside the range\n      `[0, n-1]` back into that range; and then the new array is constructed\n      as above;\n\n    * if ``mode=clip``, values in `a` (and thus `Ba`) may be any (signed)\n      integer; negative integers are mapped to 0; values greater than `n-1`\n      are mapped to `n-1`; and then the new array is constructed as above.\n\n    Parameters\n    ----------\n    a : int array\n        This array must contain integers in `[0, n-1]`, where `n` is the number\n        of choices, unless ``mode=wrap`` or ``mode=clip``, in which cases any\n        integers are permissible.\n    choices : sequence of arrays\n        Choice arrays. `a` and all of the choices must be broadcastable to the\n        same shape.  If `choices` is itself an array (not recommended), then\n        its outermost dimension (i.e., the one corresponding to\n        ``choices.shape[0]``) is taken as defining the "sequence".\n    out : array, optional\n        If provided, the result will be inserted into this array. It should\n        be of the appropriate shape and dtype.\n    mode : {\'raise\' (default), \'wrap\', \'clip\'}, optional\n        Specifies how indices outside `[0, n-1]` will be treated:\n\n          * \'raise\' : an exception is raised\n          * \'wrap\' : value becomes value mod `n`\n          * \'clip\' : values < 0 are mapped to 0, values > n-1 are mapped to n-1\n\n    Returns\n    -------\n    merged_array : array\n        The merged result.\n\n    Raises\n    ------\n    ValueError: shape mismatch\n        If `a` and each choice array are not all broadcastable to the same\n        shape.\n\n    See Also\n    --------\n    ndarray.choose : equivalent method\n\n    Notes\n    -----\n    To reduce the chance of misinterpretation, even though the following\n    "abuse" is nominally supported, `choices` should neither be, nor be\n    thought of as, a single array, i.e., the outermost sequence-like container\n    should be either a list or a tuple.\n\n    Examples\n    --------\n\n    >>> choices = [[0, 1, 2, 3], [10, 11, 12, 13],\n    ...   [20, 21, 22, 23], [30, 31, 32, 33]]\n    >>> np.choose([2, 3, 1, 0], choices\n    ... # the first element of the result will be the first element of the\n    ... # third (2+1) "array" in choices, namely, 20; the second element\n    ... # will be the second element of the fourth (3+1) choice array, i.e.,\n    ... # 31, etc.\n    ... )\n    array([20, 31, 12,  3])\n    >>> np.choose([2, 4, 1, 0], choices, mode=\'clip\') # 4 goes to 3 (4-1)\n    array([20, 31, 12,  3])\n    >>> # because there are 4 choice arrays\n    >>> np.choose([2, 4, 1, 0], choices, mode=\'wrap\') # 4 goes to (4 mod 4)\n    array([20,  1, 12,  3])\n    >>> # i.e., 0\n\n    A couple examples illustrating how choose broadcasts:\n\n    >>> a = [[1, 0, 1], [0, 1, 0], [1, 0, 1]]\n    >>> choices = [-10, 10]\n    >>> np.choose(a, choices)\n    array([[ 10, -10,  10],\n           [-10,  10, -10],\n           [ 10, -10,  10]])\n\n    >>> # With thanks to Anne Archibald\n    >>> a = np.array([0, 1]).reshape((2,1,1))\n    >>> c1 = np.array([1, 2, 3]).reshape((1,3,1))\n    >>> c2 = np.array([-1, -2, -3, -4, -5]).reshape((1,1,5))\n    >>> np.choose(a, (c1, c2)) # result is 2x3x5, res[0,:,:]=c1, res[1,:,:]=c2\n    array([[[ 1,  1,  1,  1,  1],\n            [ 2,  2,  2,  2,  2],\n            [ 3,  3,  3,  3,  3]],\n           [[-1, -2, -3, -4, -5],\n            [-1, -2, -3, -4, -5],\n            [-1, -2, -3, -4, -5]]])\n\n    '),
               ('numpy.core.fromnumeric.repeat',
                ['a', 'repeats', 'axis=None'],
                '\n    Repeat elements of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    repeats : {int, array of ints}\n        The number of repetitions for each element.  `repeats` is broadcasted\n        to fit the shape of the given axis.\n    axis : int, optional\n        The axis along which to repeat values.  By default, use the\n        flattened input array, and return a flat output array.\n\n    Returns\n    -------\n    repeated_array : ndarray\n        Output array which has the same shape as `a`, except along\n        the given axis.\n\n    See Also\n    --------\n    tile : Tile an array.\n\n    Examples\n    --------\n    >>> x = np.array([[1,2],[3,4]])\n    >>> np.repeat(x, 2)\n    array([1, 1, 2, 2, 3, 3, 4, 4])\n    >>> np.repeat(x, 3, axis=1)\n    array([[1, 1, 1, 2, 2, 2],\n           [3, 3, 3, 4, 4, 4]])\n    >>> np.repeat(x, [1, 2], axis=0)\n    array([[1, 2],\n           [3, 4],\n           [3, 4]])\n\n    '),
               ('numpy.core.fromnumeric.put',
                ['a', 'ind', 'v', "mode='raise'"],
                "\n    Replaces specified elements of an array with given values.\n\n    The indexing works on the flattened target array. `put` is roughly\n    equivalent to:\n\n    ::\n\n        a.flat[ind] = v\n\n    Parameters\n    ----------\n    a : ndarray\n        Target array.\n    ind : array_like\n        Target indices, interpreted as integers.\n    v : array_like\n        Values to place in `a` at target indices. If `v` is shorter than\n        `ind` it will be repeated as necessary.\n    mode : {'raise', 'wrap', 'clip'}, optional\n        Specifies how out-of-bounds indices will behave.\n\n        * 'raise' -- raise an error (default)\n        * 'wrap' -- wrap around\n        * 'clip' -- clip to the range\n\n        'clip' mode means that all indices that are too large are replaced\n        by the index that addresses the last element along that axis. Note\n        that this disables indexing with negative numbers.\n\n    See Also\n    --------\n    putmask, place\n\n    Examples\n    --------\n    >>> a = np.arange(5)\n    >>> np.put(a, [0, 2], [-44, -55])\n    >>> a\n    array([-44,   1, -55,   3,   4])\n\n    >>> a = np.arange(5)\n    >>> np.put(a, 22, -5, mode='clip')\n    >>> a\n    array([ 0,  1,  2,  3, -5])\n\n    "),
               ('numpy.core.fromnumeric.swapaxes',
                ['a', 'axis1', 'axis2'],
                '\n    Interchange two axes of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis1 : int\n        First axis.\n    axis2 : int\n        Second axis.\n\n    Returns\n    -------\n    a_swapped : ndarray\n        If `a` is an ndarray, then a view of `a` is returned; otherwise\n        a new array is created.\n\n    Examples\n    --------\n    >>> x = np.array([[1,2,3]])\n    >>> np.swapaxes(x,0,1)\n    array([[1],\n           [2],\n           [3]])\n\n    >>> x = np.array([[[0,1],[2,3]],[[4,5],[6,7]]])\n    >>> x\n    array([[[0, 1],\n            [2, 3]],\n           [[4, 5],\n            [6, 7]]])\n\n    >>> np.swapaxes(x,0,2)\n    array([[[0, 4],\n            [2, 6]],\n           [[1, 5],\n            [3, 7]]])\n\n    '),
               ('numpy.core.fromnumeric.transpose',
                ['a', 'axes=None'],
                '\n    Permute the dimensions of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axes : list of ints, optional\n        By default, reverse the dimensions, otherwise permute the axes\n        according to the values given.\n\n    Returns\n    -------\n    p : ndarray\n        `a` with its axes permuted.  A view is returned whenever\n        possible.\n\n    See Also\n    --------\n    rollaxis\n\n    Examples\n    --------\n    >>> x = np.arange(4).reshape((2,2))\n    >>> x\n    array([[0, 1],\n           [2, 3]])\n\n    >>> np.transpose(x)\n    array([[0, 2],\n           [1, 3]])\n\n    >>> x = np.ones((1, 2, 3))\n    >>> np.transpose(x, (1, 0, 2)).shape\n    (2, 1, 3)\n\n    '),
               ('numpy.core.fromnumeric.sort',
                ['a', 'axis=-1', "kind='quicksort'", 'order=None'],
                "\n    Return a sorted copy of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to be sorted.\n    axis : int or None, optional\n        Axis along which to sort. If None, the array is flattened before\n        sorting. The default is -1, which sorts along the last axis.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm. Default is 'quicksort'.\n    order : list, optional\n        When `a` is a structured array, this argument specifies which fields\n        to compare first, second, and so on.  This list does not need to\n        include all of the fields.\n\n    Returns\n    -------\n    sorted_array : ndarray\n        Array of the same type and shape as `a`.\n\n    See Also\n    --------\n    ndarray.sort : Method to sort an array in-place.\n    argsort : Indirect sort.\n    lexsort : Indirect stable sort on multiple keys.\n    searchsorted : Find elements in a sorted array.\n\n    Notes\n    -----\n    The various sorting algorithms are characterized by their average speed,\n    worst case performance, work space size, and whether they are stable. A\n    stable sort keeps items with the same key in the same relative\n    order. The three available algorithms have the following\n    properties:\n\n    =========== ======= ============= ============ =======\n       kind      speed   worst case    work space  stable\n    =========== ======= ============= ============ =======\n    'quicksort'    1     O(n^2)            0          no\n    'mergesort'    2     O(n*log(n))      ~n/2        yes\n    'heapsort'     3     O(n*log(n))       0          no\n    =========== ======= ============= ============ =======\n\n    All the sort algorithms make temporary copies of the data when\n    sorting along any but the last axis.  Consequently, sorting along\n    the last axis is faster and uses less space than sorting along\n    any other axis.\n\n    The sort order for complex numbers is lexicographic. If both the real\n    and imaginary parts are non-nan then the order is determined by the\n    real parts except when they are equal, in which case the order is\n    determined by the imaginary parts.\n\n    Previous to numpy 1.4.0 sorting real and complex arrays containing nan\n    values led to undefined behaviour. In numpy versions >= 1.4.0 nan\n    values are sorted to the end. The extended sort order is:\n\n      * Real: [R, nan]\n      * Complex: [R + Rj, R + nanj, nan + Rj, nan + nanj]\n\n    where R is a non-nan real value. Complex values with the same nan\n    placements are sorted according to the non-nan part if it exists.\n    Non-nan values are sorted as before.\n\n    Examples\n    --------\n    >>> a = np.array([[1,4],[3,1]])\n    >>> np.sort(a)                # sort along the last axis\n    array([[1, 4],\n           [1, 3]])\n    >>> np.sort(a, axis=None)     # sort the flattened array\n    array([1, 1, 3, 4])\n    >>> np.sort(a, axis=0)        # sort along the first axis\n    array([[1, 1],\n           [3, 4]])\n\n    Use the `order` keyword to specify a field to use when sorting a\n    structured array:\n\n    >>> dtype = [('name', 'S10'), ('height', float), ('age', int)]\n    >>> values = [('Arthur', 1.8, 41), ('Lancelot', 1.9, 38),\n    ...           ('Galahad', 1.7, 38)]\n    >>> a = np.array(values, dtype=dtype)       # create a structured array\n    >>> np.sort(a, order='height')                        # doctest: +SKIP\n    array([('Galahad', 1.7, 38), ('Arthur', 1.8, 41),\n           ('Lancelot', 1.8999999999999999, 38)],\n          dtype=[('name', '|S10'), ('height', '<f8'), ('age', '<i4')])\n\n    Sort by age, then height if ages are equal:\n\n    >>> np.sort(a, order=['age', 'height'])               # doctest: +SKIP\n    array([('Galahad', 1.7, 38), ('Lancelot', 1.8999999999999999, 38),\n           ('Arthur', 1.8, 41)],\n          dtype=[('name', '|S10'), ('height', '<f8'), ('age', '<i4')])\n\n    "),
               ('numpy.core.fromnumeric.argsort',
                ['a', 'axis=-1', "kind='quicksort'", 'order=None'],
                "\n    Returns the indices that would sort an array.\n\n    Perform an indirect sort along the given axis using the algorithm specified\n    by the `kind` keyword. It returns an array of indices of the same shape as\n    `a` that index data along the given axis in sorted order.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to sort.\n    axis : int or None, optional\n        Axis along which to sort.  The default is -1 (the last axis). If None,\n        the flattened array is used.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    order : list, optional\n        When `a` is an array with fields defined, this argument specifies\n        which fields to compare first, second, etc.  Not all fields need be\n        specified.\n\n    Returns\n    -------\n    index_array : ndarray, int\n        Array of indices that sort `a` along the specified axis.\n        In other words, ``a[index_array]`` yields a sorted `a`.\n\n    See Also\n    --------\n    sort : Describes sorting algorithms used.\n    lexsort : Indirect stable sort with multiple keys.\n    ndarray.sort : Inplace sort.\n\n    Notes\n    -----\n    See `sort` for notes on the different sorting algorithms.\n\n    As of NumPy 1.4.0 `argsort` works with real/complex arrays containing\n    nan values. The enhanced sort order is documented in `sort`.\n\n    Examples\n    --------\n    One dimensional array:\n\n    >>> x = np.array([3, 1, 2])\n    >>> np.argsort(x)\n    array([1, 2, 0])\n\n    Two-dimensional array:\n\n    >>> x = np.array([[0, 3], [2, 2]])\n    >>> x\n    array([[0, 3],\n           [2, 2]])\n\n    >>> np.argsort(x, axis=0)\n    array([[0, 1],\n           [1, 0]])\n\n    >>> np.argsort(x, axis=1)\n    array([[0, 1],\n           [0, 1]])\n\n    Sorting with keys:\n\n    >>> x = np.array([(1, 0), (0, 1)], dtype=[('x', '<i4'), ('y', '<i4')])\n    >>> x\n    array([(1, 0), (0, 1)],\n          dtype=[('x', '<i4'), ('y', '<i4')])\n\n    >>> np.argsort(x, order=('x','y'))\n    array([1, 0])\n\n    >>> np.argsort(x, order=('y','x'))\n    array([0, 1])\n\n    "),
               ('numpy.core.fromnumeric.argmax',
                ['a', 'axis=None'],
                '\n    Indices of the maximum values along an axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int, optional\n        By default, the index is into the flattened array, otherwise\n        along the specified axis.\n\n    Returns\n    -------\n    index_array : ndarray of ints\n        Array of indices into the array. It has the same shape as `a.shape`\n        with the dimension along `axis` removed.\n\n    See Also\n    --------\n    ndarray.argmax, argmin\n    amax : The maximum value along a given axis.\n    unravel_index : Convert a flat index into an index tuple.\n\n    Notes\n    -----\n    In case of multiple occurrences of the maximum values, the indices\n    corresponding to the first occurrence are returned.\n\n    Examples\n    --------\n    >>> a = np.arange(6).reshape(2,3)\n    >>> a\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.argmax(a)\n    5\n    >>> np.argmax(a, axis=0)\n    array([1, 1, 1])\n    >>> np.argmax(a, axis=1)\n    array([2, 2])\n\n    >>> b = np.arange(6)\n    >>> b[1] = 5\n    >>> b\n    array([0, 5, 2, 3, 4, 5])\n    >>> np.argmax(b) # Only the first occurrence is returned.\n    1\n\n    '),
               ('numpy.core.fromnumeric.argmin',
                ['a', 'axis=None'],
                '\n    Return the indices of the minimum values along an axis.\n\n    See Also\n    --------\n    argmax : Similar function.  Please refer to `numpy.argmax` for detailed\n        documentation.\n\n    '),
               ('numpy.core.fromnumeric.searchsorted',
                ['a', 'v', "side='left'"],
                "\n    Find indices where elements should be inserted to maintain order.\n\n    Find the indices into a sorted array `a` such that, if the corresponding\n    elements in `v` were inserted before the indices, the order of `a` would\n    be preserved.\n\n    Parameters\n    ----------\n    a : 1-D array_like\n        Input array, sorted in ascending order.\n    v : array_like\n        Values to insert into `a`.\n    side : {'left', 'right'}, optional\n        If 'left', the index of the first suitable location found is given.  If\n        'right', return the last such index.  If there is no suitable\n        index, return either 0 or N (where N is the length of `a`).\n\n    Returns\n    -------\n    indices : array of ints\n        Array of insertion points with the same shape as `v`.\n\n    See Also\n    --------\n    sort : Return a sorted copy of an array.\n    histogram : Produce histogram from 1-D data.\n\n    Notes\n    -----\n    Binary search is used to find the required insertion points.\n\n    As of Numpy 1.4.0 `searchsorted` works with real/complex arrays containing\n    `nan` values. The enhanced sort order is documented in `sort`.\n\n    Examples\n    --------\n    >>> np.searchsorted([1,2,3,4,5], 3)\n    2\n    >>> np.searchsorted([1,2,3,4,5], 3, side='right')\n    3\n    >>> np.searchsorted([1,2,3,4,5], [-10, 10, 2, 3])\n    array([0, 5, 1, 2])\n\n    "),
               ('numpy.core.fromnumeric.resize',
                ['a', 'new_shape'],
                '\n    Return a new array with the specified shape.\n\n    If the new array is larger than the original array, then the new\n    array is filled with repeated copies of `a`.  Note that this behavior\n    is different from a.resize(new_shape) which fills with zeros instead\n    of repeated copies of `a`.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to be resized.\n\n    new_shape : int or tuple of int\n        Shape of resized array.\n\n    Returns\n    -------\n    reshaped_array : ndarray\n        The new array is formed from the data in the old array, repeated\n        if necessary to fill out the required number of elements.  The\n        data are repeated in the order that they are stored in memory.\n\n    See Also\n    --------\n    ndarray.resize : resize an array in-place.\n\n    Examples\n    --------\n    >>> a=np.array([[0,1],[2,3]])\n    >>> np.resize(a,(1,4))\n    array([[0, 1, 2, 3]])\n    >>> np.resize(a,(2,4))\n    array([[0, 1, 2, 3],\n           [0, 1, 2, 3]])\n\n    '),
               ('numpy.core.fromnumeric.squeeze',
                ['a'],
                '\n    Remove single-dimensional entries from the shape of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n\n    Returns\n    -------\n    squeezed : ndarray\n        The input array, but with with all dimensions of length 1\n        removed.  Whenever possible, a view on `a` is returned.\n\n    Examples\n    --------\n    >>> x = np.array([[[0], [1], [2]]])\n    >>> x.shape\n    (1, 3, 1)\n    >>> np.squeeze(x).shape\n    (3,)\n\n    '),
               ('numpy.core.fromnumeric.diagonal',
                ['a', 'offset=0', 'axis1=0', 'axis2=1'],
                '\n    Return specified diagonals.\n\n    If `a` is 2-D, returns the diagonal of `a` with the given offset,\n    i.e., the collection of elements of the form ``a[i, i+offset]``.  If\n    `a` has more than two dimensions, then the axes specified by `axis1`\n    and `axis2` are used to determine the 2-D sub-array whose diagonal is\n    returned.  The shape of the resulting array can be determined by\n    removing `axis1` and `axis2` and appending an index to the right equal\n    to the size of the resulting diagonals.\n\n    Parameters\n    ----------\n    a : array_like\n        Array from which the diagonals are taken.\n    offset : int, optional\n        Offset of the diagonal from the main diagonal.  Can be positive or\n        negative.  Defaults to main diagonal (0).\n    axis1 : int, optional\n        Axis to be used as the first axis of the 2-D sub-arrays from which\n        the diagonals should be taken.  Defaults to first axis (0).\n    axis2 : int, optional\n        Axis to be used as the second axis of the 2-D sub-arrays from\n        which the diagonals should be taken. Defaults to second axis (1).\n\n    Returns\n    -------\n    array_of_diagonals : ndarray\n        If `a` is 2-D, a 1-D array containing the diagonal is returned.\n        If the dimension of `a` is larger, then an array of diagonals is\n        returned, "packed" from left-most dimension to right-most (e.g.,\n        if `a` is 3-D, then the diagonals are "packed" along rows).\n\n    Raises\n    ------\n    ValueError\n        If the dimension of `a` is less than 2.\n\n    See Also\n    --------\n    diag : MATLAB work-a-like for 1-D and 2-D arrays.\n    diagflat : Create diagonal arrays.\n    trace : Sum along diagonals.\n\n    Examples\n    --------\n    >>> a = np.arange(4).reshape(2,2)\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> a.diagonal()\n    array([0, 3])\n    >>> a.diagonal(1)\n    array([1])\n\n    A 3-D example:\n\n    >>> a = np.arange(8).reshape(2,2,2); a\n    array([[[0, 1],\n            [2, 3]],\n           [[4, 5],\n            [6, 7]]])\n    >>> a.diagonal(0, # Main diagonals of two arrays created by skipping\n    ...            0, # across the outer(left)-most axis last and\n    ...            1) # the "middle" (row) axis first.\n    array([[0, 6],\n           [1, 7]])\n\n    The sub-arrays whose main diagonals we just obtained; note that each\n    corresponds to fixing the right-most (column) axis, and that the\n    diagonals are "packed" in rows.\n\n    >>> a[:,:,0] # main diagonal is [0 6]\n    array([[0, 2],\n           [4, 6]])\n    >>> a[:,:,1] # main diagonal is [1 7]\n    array([[1, 3],\n           [5, 7]])\n\n    '),
               ('numpy.core.fromnumeric.trace',
                ['a', 'offset=0', 'axis1=0', 'axis2=1', 'dtype=None', 'out=None'],
                '\n    Return the sum along diagonals of the array.\n\n    If `a` is 2-D, the sum along its diagonal with the given offset\n    is returned, i.e., the sum of elements ``a[i,i+offset]`` for all i.\n\n    If `a` has more than two dimensions, then the axes specified by axis1 and\n    axis2 are used to determine the 2-D sub-arrays whose traces are returned.\n    The shape of the resulting array is the same as that of `a` with `axis1`\n    and `axis2` removed.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, from which the diagonals are taken.\n    offset : int, optional\n        Offset of the diagonal from the main diagonal. Can be both positive\n        and negative. Defaults to 0.\n    axis1, axis2 : int, optional\n        Axes to be used as the first and second axis of the 2-D sub-arrays\n        from which the diagonals should be taken. Defaults are the first two\n        axes of `a`.\n    dtype : dtype, optional\n        Determines the data-type of the returned array and of the accumulator\n        where the elements are summed. If dtype has the value None and `a` is\n        of integer type of precision less than the default integer\n        precision, then the default integer precision is used. Otherwise,\n        the precision is the same as that of `a`.\n    out : ndarray, optional\n        Array into which the output is placed. Its type is preserved and\n        it must be of the right shape to hold the output.\n\n    Returns\n    -------\n    sum_along_diagonals : ndarray\n        If `a` is 2-D, the sum along the diagonal is returned.  If `a` has\n        larger dimensions, then an array of sums along diagonals is returned.\n\n    See Also\n    --------\n    diag, diagonal, diagflat\n\n    Examples\n    --------\n    >>> np.trace(np.eye(3))\n    3.0\n    >>> a = np.arange(8).reshape((2,2,2))\n    >>> np.trace(a)\n    array([6, 8])\n\n    >>> a = np.arange(24).reshape((2,2,2,3))\n    >>> np.trace(a).shape\n    (2, 3)\n\n    '),
               ('numpy.core.fromnumeric.ravel',
                ['a', "order='C'"],
                "\n    Return a flattened array.\n\n    A 1-D array, containing the elements of the input, is returned.  A copy is\n    made only if needed.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.  The elements in ``a`` are read in the order specified by\n        `order`, and packed as a 1-D array.\n    order : {'C','F', 'A', 'K'}, optional\n        The elements of ``a`` are read in this order. 'C' means to view\n        the elements in C (row-major) order. 'F' means to view the elements\n        in Fortran (column-major) order. 'A' means to view the elements\n        in 'F' order if a is Fortran contiguous, 'C' order otherwise.\n        'K' means to view the elements in the order they occur in memory,\n        except for reversing the data when strides are negative.\n        By default, 'C' order is used.\n\n    Returns\n    -------\n    1d_array : ndarray\n        Output of the same dtype as `a`, and of shape ``(a.size(),)``.\n\n    See Also\n    --------\n    ndarray.flat : 1-D iterator over an array.\n    ndarray.flatten : 1-D array copy of the elements of an array\n                      in row-major order.\n\n    Notes\n    -----\n    In row-major order, the row index varies the slowest, and the column\n    index the quickest.  This can be generalized to multiple dimensions,\n    where row-major order implies that the index along the first axis\n    varies slowest, and the index along the last quickest.  The opposite holds\n    for Fortran-, or column-major, mode.\n\n    Examples\n    --------\n    It is equivalent to ``reshape(-1, order=order)``.\n\n    >>> x = np.array([[1, 2, 3], [4, 5, 6]])\n    >>> print np.ravel(x)\n    [1 2 3 4 5 6]\n\n    >>> print x.reshape(-1)\n    [1 2 3 4 5 6]\n\n    >>> print np.ravel(x, order='F')\n    [1 4 2 5 3 6]\n\n    When ``order`` is 'A', it will preserve the array's 'C' or 'F' ordering:\n\n    >>> print np.ravel(x.T)\n    [1 4 2 5 3 6]\n    >>> print np.ravel(x.T, order='A')\n    [1 2 3 4 5 6]\n\n    When ``order`` is 'K', it will preserve orderings that are neither 'C'\n    nor 'F', but won't reverse axes:\n\n    >>> a = np.arange(3)[::-1]; a\n    array([2, 1, 0])\n    >>> a.ravel(order='C')\n    array([2, 1, 0])\n    >>> a.ravel(order='K')\n    array([2, 1, 0])\n\n    >>> a = np.arange(12).reshape(2,3,2).swapaxes(1,2); a\n    array([[[ 0,  2,  4],\n            [ 1,  3,  5]],\n           [[ 6,  8, 10],\n            [ 7,  9, 11]]])\n    >>> a.ravel(order='C')\n    array([ 0,  2,  4,  1,  3,  5,  6,  8, 10,  7,  9, 11])\n    >>> a.ravel(order='K')\n    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n    "),
               ('numpy.core.fromnumeric.nonzero',
                ['a'],
                '\n    Return the indices of the elements that are non-zero.\n\n    Returns a tuple of arrays, one for each dimension of `a`, containing\n    the indices of the non-zero elements in that dimension. The\n    corresponding non-zero values can be obtained with::\n\n        a[nonzero(a)]\n\n    To group the indices by element, rather than dimension, use::\n\n        transpose(nonzero(a))\n\n    The result of this is always a 2-D array, with a row for\n    each non-zero element.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n\n    Returns\n    -------\n    tuple_of_arrays : tuple\n        Indices of elements that are non-zero.\n\n    See Also\n    --------\n    flatnonzero :\n        Return indices that are non-zero in the flattened version of the input\n        array.\n    ndarray.nonzero :\n        Equivalent ndarray method.\n    count_nonzero :\n        Counts the number of non-zero elements in the input array.\n\n    Examples\n    --------\n    >>> x = np.eye(3)\n    >>> x\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n    >>> np.nonzero(x)\n    (array([0, 1, 2]), array([0, 1, 2]))\n\n    >>> x[np.nonzero(x)]\n    array([ 1.,  1.,  1.])\n    >>> np.transpose(np.nonzero(x))\n    array([[0, 0],\n           [1, 1],\n           [2, 2]])\n\n    A common use for ``nonzero`` is to find the indices of an array, where\n    a condition is True.  Given an array `a`, the condition `a` > 3 is a\n    boolean array and since False is interpreted as 0, np.nonzero(a > 3)\n    yields the indices of the `a` where the condition is true.\n\n    >>> a = np.array([[1,2,3],[4,5,6],[7,8,9]])\n    >>> a > 3\n    array([[False, False, False],\n           [ True,  True,  True],\n           [ True,  True,  True]], dtype=bool)\n    >>> np.nonzero(a > 3)\n    (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))\n\n    The ``nonzero`` method of the boolean array can also be called.\n\n    >>> (a > 3).nonzero()\n    (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))\n\n    '),
               ('numpy.core.fromnumeric.shape',
                ['a'],
                "\n    Return the shape of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n\n    Returns\n    -------\n    shape : tuple of ints\n        The elements of the shape tuple give the lengths of the\n        corresponding array dimensions.\n\n    See Also\n    --------\n    alen\n    ndarray.shape : Equivalent array method.\n\n    Examples\n    --------\n    >>> np.shape(np.eye(3))\n    (3, 3)\n    >>> np.shape([[1, 2]])\n    (1, 2)\n    >>> np.shape([0])\n    (1,)\n    >>> np.shape(0)\n    ()\n\n    >>> a = np.array([(1, 2), (3, 4)], dtype=[('x', 'i4'), ('y', 'i4')])\n    >>> np.shape(a)\n    (2,)\n    >>> a.shape\n    (2,)\n\n    "),
               ('numpy.core.fromnumeric.compress',
                ['condition', 'a', 'axis=None', 'out=None'],
                '\n    Return selected slices of an array along given axis.\n\n    When working along a given axis, a slice along that axis is returned in\n    `output` for each index where `condition` evaluates to True. When\n    working on a 1-D array, `compress` is equivalent to `extract`.\n\n    Parameters\n    ----------\n    condition : 1-D array of bools\n        Array that selects which entries to return. If len(condition)\n        is less than the size of `a` along the given axis, then output is\n        truncated to the length of the condition array.\n    a : array_like\n        Array from which to extract a part.\n    axis : int, optional\n        Axis along which to take slices. If None (default), work on the\n        flattened array.\n    out : ndarray, optional\n        Output array.  Its type is preserved and it must be of the right\n        shape to hold the output.\n\n    Returns\n    -------\n    compressed_array : ndarray\n        A copy of `a` without the slices along axis for which `condition`\n        is false.\n\n    See Also\n    --------\n    take, choose, diag, diagonal, select\n    ndarray.compress : Equivalent method.\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, 4], [5, 6]])\n    >>> a\n    array([[1, 2],\n           [3, 4],\n           [5, 6]])\n    >>> np.compress([0, 1], a, axis=0)\n    array([[3, 4]])\n    >>> np.compress([False, True, True], a, axis=0)\n    array([[3, 4],\n           [5, 6]])\n    >>> np.compress([False, True], a, axis=1)\n    array([[2],\n           [4],\n           [6]])\n\n    Working on the flattened array does not return slices along an axis but\n    selects elements.\n\n    >>> np.compress([False, True], a)\n    array([2])\n\n    '),
               ('numpy.core.fromnumeric.clip',
                ['a', 'a_min', 'a_max', 'out=None'],
                '\n    Clip (limit) the values in an array.\n\n    Given an interval, values outside the interval are clipped to\n    the interval edges.  For example, if an interval of ``[0, 1]``\n    is specified, values smaller than 0 become 0, and values larger\n    than 1 become 1.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing elements to clip.\n    a_min : scalar or array_like\n        Minimum value.\n    a_max : scalar or array_like\n        Maximum value.  If `a_min` or `a_max` are array_like, then they will\n        be broadcasted to the shape of `a`.\n    out : ndarray, optional\n        The results will be placed in this array. It may be the input\n        array for in-place clipping.  `out` must be of the right shape\n        to hold the output.  Its type is preserved.\n\n    Returns\n    -------\n    clipped_array : ndarray\n        An array with the elements of `a`, but where values\n        < `a_min` are replaced with `a_min`, and those > `a_max`\n        with `a_max`.\n\n    See Also\n    --------\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Examples\n    --------\n    >>> a = np.arange(10)\n    >>> np.clip(a, 1, 8)\n    array([1, 1, 2, 3, 4, 5, 6, 7, 8, 8])\n    >>> a\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> np.clip(a, 3, 6, out=a)\n    array([3, 3, 3, 3, 4, 5, 6, 6, 6, 6])\n    >>> a = np.arange(10)\n    >>> a\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> np.clip(a, [3,4,1,1,1,4,4,4,4,4], 8)\n    array([3, 4, 2, 3, 4, 5, 6, 7, 8, 8])\n\n    '),
               ('numpy.core.fromnumeric.sum',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Sum of array elements over a given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Elements to sum.\n    axis : integer, optional\n        Axis over which the sum is taken. By default `axis` is None,\n        and all elements are summed.\n    dtype : dtype, optional\n        The type of the returned array and of the accumulator in which\n        the elements are summed.  By default, the dtype of `a` is used.\n        An exception is when `a` has an integer type with less precision\n        than the default platform integer.  In that case, the default\n        platform integer is used instead.\n    out : ndarray, optional\n        Array into which the output is placed.  By default, a new array is\n        created.  If `out` is given, it must be of the appropriate shape\n        (the shape of `a` with `axis` removed, i.e.,\n        ``numpy.delete(a.shape, axis)``).  Its type is preserved. See\n        `doc.ufuncs` (Section "Output arguments") for more details.\n\n    Returns\n    -------\n    sum_along_axis : ndarray\n        An array with the same shape as `a`, with the specified\n        axis removed.   If `a` is a 0-d array, or if `axis` is None, a scalar\n        is returned.  If an output array is specified, a reference to\n        `out` is returned.\n\n    See Also\n    --------\n    ndarray.sum : Equivalent method.\n\n    cumsum : Cumulative sum of array elements.\n\n    trapz : Integration of array values using the composite trapezoidal rule.\n\n    mean, average\n\n    Notes\n    -----\n    Arithmetic is modular when using integer types, and no error is\n    raised on overflow.\n\n    Examples\n    --------\n    >>> np.sum([0.5, 1.5])\n    2.0\n    >>> np.sum([0.5, 0.7, 0.2, 1.5], dtype=np.int32)\n    1\n    >>> np.sum([[0, 1], [0, 5]])\n    6\n    >>> np.sum([[0, 1], [0, 5]], axis=0)\n    array([0, 6])\n    >>> np.sum([[0, 1], [0, 5]], axis=1)\n    array([1, 5])\n\n    If the accumulator is too small, overflow occurs:\n\n    >>> np.ones(128, dtype=np.int8).sum(dtype=np.int8)\n    -128\n\n    '),
               ('numpy.core.fromnumeric.product',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Return the product of array elements over a given axis.\n\n    See Also\n    --------\n    prod : equivalent function; see for details.\n\n    '),
               ('numpy.core.fromnumeric.sometrue',
                ['a', 'axis=None', 'out=None'],
                '\n    Check whether some values are true.\n\n    Refer to `any` for full documentation.\n\n    See Also\n    --------\n    any : equivalent function\n\n    '),
               ('numpy.core.fromnumeric.alltrue',
                ['a', 'axis=None', 'out=None'],
                '\n    Check if all elements of input array are true.\n\n    See Also\n    --------\n    numpy.all : Equivalent function; see for details.\n\n    '),
               ('numpy.core.fromnumeric.any',
                ['a', 'axis=None', 'out=None'],
                '\n    Test whether any array element along a given axis evaluates to True.\n\n    Returns single boolean unless `axis` is not ``None``\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int, optional\n        Axis along which a logical OR is performed.  The default\n        (`axis` = `None`) is to perform a logical OR over a flattened\n        input array. `axis` may be negative, in which case it counts\n        from the last to the first axis.\n    out : ndarray, optional\n        Alternate output array in which to place the result.  It must have\n        the same shape as the expected output and its type is preserved\n        (e.g., if it is of type float, then it will remain so, returning\n        1.0 for True and 0.0 for False, regardless of the type of `a`).\n        See `doc.ufuncs` (Section "Output arguments") for details.\n\n    Returns\n    -------\n    any : bool or ndarray\n        A new boolean or `ndarray` is returned unless `out` is specified,\n        in which case a reference to `out` is returned.\n\n    See Also\n    --------\n    ndarray.any : equivalent method\n\n    all : Test whether all elements along a given axis evaluate to True.\n\n    Notes\n    -----\n    Not a Number (NaN), positive infinity and negative infinity evaluate\n    to `True` because these are not equal to zero.\n\n    Examples\n    --------\n    >>> np.any([[True, False], [True, True]])\n    True\n\n    >>> np.any([[True, False], [False, False]], axis=0)\n    array([ True, False], dtype=bool)\n\n    >>> np.any([-1, 0, 5])\n    True\n\n    >>> np.any(np.nan)\n    True\n\n    >>> o=np.array([False])\n    >>> z=np.any([-1, 4, 5], out=o)\n    >>> z, o\n    (array([ True], dtype=bool), array([ True], dtype=bool))\n    >>> # Check now that z is a reference to o\n    >>> z is o\n    True\n    >>> id(z), id(o) # identity of z and o              # doctest: +SKIP\n    (191614240, 191614240)\n\n    '),
               ('numpy.core.fromnumeric.all',
                ['a', 'axis=None', 'out=None'],
                '\n    Test whether all array elements along a given axis evaluate to True.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int, optional\n        Axis along which a logical AND is performed.\n        The default (`axis` = `None`) is to perform a logical AND\n        over a flattened input array.  `axis` may be negative, in which\n        case it counts from the last to the first axis.\n    out : ndarray, optional\n        Alternate output array in which to place the result.\n        It must have the same shape as the expected output and its\n        type is preserved (e.g., if ``dtype(out)`` is float, the result\n        will consist of 0.0\'s and 1.0\'s).  See `doc.ufuncs` (Section\n        "Output arguments") for more details.\n\n    Returns\n    -------\n    all : ndarray, bool\n        A new boolean or array is returned unless `out` is specified,\n        in which case a reference to `out` is returned.\n\n    See Also\n    --------\n    ndarray.all : equivalent method\n\n    any : Test whether any element along a given axis evaluates to True.\n\n    Notes\n    -----\n    Not a Number (NaN), positive infinity and negative infinity\n    evaluate to `True` because these are not equal to zero.\n\n    Examples\n    --------\n    >>> np.all([[True,False],[True,True]])\n    False\n\n    >>> np.all([[True,False],[True,True]], axis=0)\n    array([ True, False], dtype=bool)\n\n    >>> np.all([-1, 4, 5])\n    True\n\n    >>> np.all([1.0, np.nan])\n    True\n\n    >>> o=np.array([False])\n    >>> z=np.all([-1, 4, 5], out=o)\n    >>> id(z), id(o), z                             # doctest: +SKIP\n    (28293632, 28293632, array([ True], dtype=bool))\n\n    '),
               ('numpy.core.fromnumeric.cumsum',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Return the cumulative sum of the elements along a given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int, optional\n        Axis along which the cumulative sum is computed. The default\n        (None) is to compute the cumsum over the flattened array.\n    dtype : dtype, optional\n        Type of the returned array and of the accumulator in which the\n        elements are summed.  If `dtype` is not specified, it defaults\n        to the dtype of `a`, unless `a` has an integer dtype with a\n        precision less than that of the default platform integer.  In\n        that case, the default platform integer is used.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output\n        but the type will be cast if necessary. See `doc.ufuncs`\n        (Section "Output arguments") for more details.\n\n    Returns\n    -------\n    cumsum_along_axis : ndarray.\n        A new array holding the result is returned unless `out` is\n        specified, in which case a reference to `out` is returned. The\n        result has the same size as `a`, and the same shape as `a` if\n        `axis` is not None or `a` is a 1-d array.\n\n\n    See Also\n    --------\n    sum : Sum array elements.\n\n    trapz : Integration of array values using the composite trapezoidal rule.\n\n    Notes\n    -----\n    Arithmetic is modular when using integer types, and no error is\n    raised on overflow.\n\n    Examples\n    --------\n    >>> a = np.array([[1,2,3], [4,5,6]])\n    >>> a\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.cumsum(a)\n    array([ 1,  3,  6, 10, 15, 21])\n    >>> np.cumsum(a, dtype=float)     # specifies type of output value(s)\n    array([  1.,   3.,   6.,  10.,  15.,  21.])\n\n    >>> np.cumsum(a,axis=0)      # sum over rows for each of the 3 columns\n    array([[1, 2, 3],\n           [5, 7, 9]])\n    >>> np.cumsum(a,axis=1)      # sum over columns for each of the 2 rows\n    array([[ 1,  3,  6],\n           [ 4,  9, 15]])\n\n    '),
               ('numpy.core.fromnumeric.cumproduct',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Return the cumulative product over the given axis.\n\n\n    See Also\n    --------\n    cumprod : equivalent function; see for details.\n\n    '),
               ('numpy.core.fromnumeric.ptp',
                ['a', 'axis=None', 'out=None'],
                "\n    Range of values (maximum - minimum) along an axis.\n\n    The name of the function comes from the acronym for 'peak to peak'.\n\n    Parameters\n    ----------\n    a : array_like\n        Input values.\n    axis : int, optional\n        Axis along which to find the peaks.  By default, flatten the\n        array.\n    out : array_like\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output,\n        but the type of the output values will be cast if necessary.\n\n    Returns\n    -------\n    ptp : ndarray\n        A new array holding the result, unless `out` was\n        specified, in which case a reference to `out` is returned.\n\n    Examples\n    --------\n    >>> x = np.arange(4).reshape((2,2))\n    >>> x\n    array([[0, 1],\n           [2, 3]])\n\n    >>> np.ptp(x, axis=0)\n    array([2, 2])\n\n    >>> np.ptp(x, axis=1)\n    array([1, 1])\n\n    "),
               ('numpy.core.fromnumeric.amax',
                ['a', 'axis=None', 'out=None'],
                '\n    Return the maximum of an array or maximum along an axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : int, optional\n        Axis along which to operate.  By default flattened input is used.\n    out : ndarray, optional\n        Alternate output array in which to place the result.  Must be of\n        the same shape and buffer length as the expected output.  See\n        `doc.ufuncs` (Section "Output arguments") for more details.\n\n    Returns\n    -------\n    amax : ndarray or scalar\n        Maximum of `a`. If `axis` is None, the result is a scalar value.\n        If `axis` is given, the result is an array of dimension\n        ``a.ndim - 1``.\n\n    See Also\n    --------\n    nanmax : NaN values are ignored instead of being propagated.\n    fmax : same behavior as the C99 fmax function.\n    argmax : indices of the maximum values.\n\n    Notes\n    -----\n    NaN values are propagated, that is if at least one item is NaN, the\n    corresponding max value will be NaN as well.  To ignore NaN values\n    (MATLAB behavior), please use nanmax.\n\n    Examples\n    --------\n    >>> a = np.arange(4).reshape((2,2))\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> np.amax(a)\n    3\n    >>> np.amax(a, axis=0)\n    array([2, 3])\n    >>> np.amax(a, axis=1)\n    array([1, 3])\n\n    >>> b = np.arange(5, dtype=np.float)\n    >>> b[2] = np.NaN\n    >>> np.amax(b)\n    nan\n    >>> np.nanmax(b)\n    4.0\n\n    '),
               ('numpy.core.fromnumeric.amin',
                ['a', 'axis=None', 'out=None'],
                '\n    Return the minimum of an array or minimum along an axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : int, optional\n        Axis along which to operate.  By default a flattened input is used.\n    out : ndarray, optional\n        Alternative output array in which to place the result.  Must\n        be of the same shape and buffer length as the expected output.\n        See `doc.ufuncs` (Section "Output arguments") for more details.\n\n    Returns\n    -------\n    amin : ndarray\n        A new array or a scalar array with the result.\n\n    See Also\n    --------\n    nanmin: nan values are ignored instead of being propagated\n    fmin: same behavior as the C99 fmin function\n    argmin: Return the indices of the minimum values.\n\n    amax, nanmax, fmax\n\n    Notes\n    -----\n    NaN values are propagated, that is if at least one item is nan, the\n    corresponding min value will be nan as well. To ignore NaN values (matlab\n    behavior), please use nanmin.\n\n    Examples\n    --------\n    >>> a = np.arange(4).reshape((2,2))\n    >>> a\n    array([[0, 1],\n           [2, 3]])\n    >>> np.amin(a)           # Minimum of the flattened array\n    0\n    >>> np.amin(a, axis=0)         # Minima along the first axis\n    array([0, 1])\n    >>> np.amin(a, axis=1)         # Minima along the second axis\n    array([0, 2])\n\n    >>> b = np.arange(5, dtype=np.float)\n    >>> b[2] = np.NaN\n    >>> np.amin(b)\n    nan\n    >>> np.nanmin(b)\n    0.0\n\n    '),
               ('numpy.core.fromnumeric.alen',
                ['a'],
                '\n    Return the length of the first dimension of the input array.\n\n    Parameters\n    ----------\n    a : array_like\n       Input array.\n\n    Returns\n    -------\n    l : int\n       Length of the first dimension of `a`.\n\n    See Also\n    --------\n    shape, size\n\n    Examples\n    --------\n    >>> a = np.zeros((7,4,5))\n    >>> a.shape[0]\n    7\n    >>> np.alen(a)\n    7\n\n    '),
               ('numpy.core.fromnumeric.prod',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Return the product of array elements over a given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : int, optional\n        Axis over which the product is taken.  By default, the product\n        of all elements is calculated.\n    dtype : data-type, optional\n        The data-type of the returned array, as well as of the accumulator\n        in which the elements are multiplied.  By default, if `a` is of\n        integer type, `dtype` is the default platform integer. (Note: if\n        the type of `a` is unsigned, then so is `dtype`.)  Otherwise,\n        the dtype is the same as that of `a`.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must have\n        the same shape as the expected output, but the type of the\n        output values will be cast if necessary.\n\n    Returns\n    -------\n    product_along_axis : ndarray, see `dtype` parameter above.\n        An array shaped as `a` but with the specified axis removed.\n        Returns a reference to `out` if specified.\n\n    See Also\n    --------\n    ndarray.prod : equivalent method\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Notes\n    -----\n    Arithmetic is modular when using integer types, and no error is\n    raised on overflow.  That means that, on a 32-bit platform:\n\n    >>> x = np.array([536870910, 536870910, 536870910, 536870910])\n    >>> np.prod(x) #random\n    16\n\n    Examples\n    --------\n    By default, calculate the product of all elements:\n\n    >>> np.prod([1.,2.])\n    2.0\n\n    Even when the input array is two-dimensional:\n\n    >>> np.prod([[1.,2.],[3.,4.]])\n    24.0\n\n    But we can also specify the axis over which to multiply:\n\n    >>> np.prod([[1.,2.],[3.,4.]], axis=1)\n    array([  2.,  12.])\n\n    If the type of `x` is unsigned, then the output type is\n    the unsigned platform integer:\n\n    >>> x = np.array([1, 2, 3], dtype=np.uint8)\n    >>> np.prod(x).dtype == np.uint\n    True\n\n    If `x` is of a signed integer type, then the output type\n    is the default platform integer:\n\n    >>> x = np.array([1, 2, 3], dtype=np.int8)\n    >>> np.prod(x).dtype == np.int\n    True\n\n    '),
               ('numpy.core.fromnumeric.cumprod',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Return the cumulative product of elements along a given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    axis : int, optional\n        Axis along which the cumulative product is computed.  By default\n        the input is flattened.\n    dtype : dtype, optional\n        Type of the returned array, as well as of the accumulator in which\n        the elements are multiplied.  If *dtype* is not specified, it\n        defaults to the dtype of `a`, unless `a` has an integer dtype with\n        a precision less than that of the default platform integer.  In\n        that case, the default platform integer is used instead.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output\n        but the type of the resulting values will be cast if necessary.\n\n    Returns\n    -------\n    cumprod : ndarray\n        A new array holding the result is returned unless `out` is\n        specified, in which case a reference to out is returned.\n\n    See Also\n    --------\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Notes\n    -----\n    Arithmetic is modular when using integer types, and no error is\n    raised on overflow.\n\n    Examples\n    --------\n    >>> a = np.array([1,2,3])\n    >>> np.cumprod(a) # intermediate results 1, 1*2\n    ...               # total product 1*2*3 = 6\n    array([1, 2, 6])\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]])\n    >>> np.cumprod(a, dtype=float) # specify type of output\n    array([   1.,    2.,    6.,   24.,  120.,  720.])\n\n    The cumulative product for each column (i.e., over the rows) of `a`:\n\n    >>> np.cumprod(a, axis=0)\n    array([[ 1,  2,  3],\n           [ 4, 10, 18]])\n\n    The cumulative product for each row (i.e. over the columns) of `a`:\n\n    >>> np.cumprod(a,axis=1)\n    array([[  1,   2,   6],\n           [  4,  20, 120]])\n\n    '),
               ('numpy.core.fromnumeric.ndim',
                ['a'],
                '\n    Return the number of dimensions of an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.  If it is not already an ndarray, a conversion is\n        attempted.\n\n    Returns\n    -------\n    number_of_dimensions : int\n        The number of dimensions in `a`.  Scalars are zero-dimensional.\n\n    See Also\n    --------\n    ndarray.ndim : equivalent method\n    shape : dimensions of array\n    ndarray.shape : dimensions of array\n\n    Examples\n    --------\n    >>> np.ndim([[1,2,3],[4,5,6]])\n    2\n    >>> np.ndim(np.array([[1,2,3],[4,5,6]]))\n    2\n    >>> np.ndim(1)\n    0\n\n    '),
               ('numpy.core.fromnumeric.rank',
                ['a'],
                '\n    Return the number of dimensions of an array.\n\n    If `a` is not already an array, a conversion is attempted.\n    Scalars are zero dimensional.\n\n    Parameters\n    ----------\n    a : array_like\n        Array whose number of dimensions is desired. If `a` is not an array,\n        a conversion is attempted.\n\n    Returns\n    -------\n    number_of_dimensions : int\n        The number of dimensions in the array.\n\n    See Also\n    --------\n    ndim : equivalent function\n    ndarray.ndim : equivalent property\n    shape : dimensions of array\n    ndarray.shape : dimensions of array\n\n    Notes\n    -----\n    In the old Numeric package, `rank` was the term used for the number of\n    dimensions, but in Numpy `ndim` is used instead.\n\n    Examples\n    --------\n    >>> np.rank([1,2,3])\n    1\n    >>> np.rank(np.array([[1,2,3],[4,5,6]]))\n    2\n    >>> np.rank(1)\n    0\n\n    '),
               ('numpy.core.fromnumeric.size',
                ['a', 'axis=None'],
                '\n    Return the number of elements along a given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    axis : int, optional\n        Axis along which the elements are counted.  By default, give\n        the total number of elements.\n\n    Returns\n    -------\n    element_count : int\n        Number of elements along the specified axis.\n\n    See Also\n    --------\n    shape : dimensions of array\n    ndarray.shape : dimensions of array\n    ndarray.size : number of elements in array\n\n    Examples\n    --------\n    >>> a = np.array([[1,2,3],[4,5,6]])\n    >>> np.size(a)\n    6\n    >>> np.size(a,1)\n    3\n    >>> np.size(a,0)\n    2\n\n    '),
               ('numpy.core.fromnumeric.around',
                ['a', 'decimals=0', 'out=None'],
                '\n    Evenly round to the given number of decimals.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    decimals : int, optional\n        Number of decimal places to round to (default: 0).  If\n        decimals is negative, it specifies the number of positions to\n        the left of the decimal point.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must have\n        the same shape as the expected output, but the type of the output\n        values will be cast if necessary. See `doc.ufuncs` (Section\n        "Output arguments") for details.\n\n    Returns\n    -------\n    rounded_array : ndarray\n        An array of the same type as `a`, containing the rounded values.\n        Unless `out` was specified, a new array is created.  A reference to\n        the result is returned.\n\n        The real and imaginary parts of complex numbers are rounded\n        separately.  The result of rounding a float is a float.\n\n    See Also\n    --------\n    ndarray.round : equivalent method\n\n    ceil, fix, floor, rint, trunc\n\n\n    Notes\n    -----\n    For values exactly halfway between rounded decimal values, Numpy\n    rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0,\n    -0.5 and 0.5 round to 0.0, etc. Results may also be surprising due\n    to the inexact representation of decimal fractions in the IEEE\n    floating point standard [1]_ and errors introduced when scaling\n    by powers of ten.\n\n    References\n    ----------\n    .. [1] "Lecture Notes on the Status of  IEEE 754", William Kahan,\n           http://www.cs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF\n    .. [2] "How Futile are Mindless Assessments of\n           Roundoff in Floating-Point Computation?", William Kahan,\n           http://www.cs.berkeley.edu/~wkahan/Mindless.pdf\n\n    Examples\n    --------\n    >>> np.around([0.37, 1.64])\n    array([ 0.,  2.])\n    >>> np.around([0.37, 1.64], decimals=1)\n    array([ 0.4,  1.6])\n    >>> np.around([.5, 1.5, 2.5, 3.5, 4.5]) # rounds to nearest even value\n    array([ 0.,  2.,  2.,  4.,  4.])\n    >>> np.around([1,2,3,11], decimals=1) # ndarray of ints is returned\n    array([ 1,  2,  3, 11])\n    >>> np.around([1,2,3,11], decimals=-1)\n    array([ 0,  0,  0, 10])\n\n    '),
               ('numpy.core.fromnumeric.round_',
                ['a', 'decimals=0', 'out=None'],
                '\n    Round an array to the given number of decimals.\n\n    Refer to `around` for full documentation.\n\n    See Also\n    --------\n    around : equivalent function\n\n    '),
               ('numpy.core.fromnumeric.mean',
                ['a', 'axis=None', 'dtype=None', 'out=None'],
                '\n    Compute the arithmetic mean along the specified axis.\n\n    Returns the average of the array elements.  The average is taken over\n    the flattened array by default, otherwise over the specified axis.\n    `float64` intermediate and return values are used for integer inputs.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing numbers whose mean is desired. If `a` is not an\n        array, a conversion is attempted.\n    axis : int, optional\n        Axis along which the means are computed. The default is to compute\n        the mean of the flattened array.\n    dtype : data-type, optional\n        Type to use in computing the mean.  For integer inputs, the default\n        is `float64`; for floating point inputs, it is the same as the\n        input dtype.\n    out : ndarray, optional\n        Alternate output array in which to place the result.  The default\n        is ``None``; if provided, it must have the same shape as the\n        expected output, but the type will be cast if necessary.\n        See `doc.ufuncs` for details.\n\n    Returns\n    -------\n    m : ndarray, see dtype parameter above\n        If `out=None`, returns a new array containing the mean values,\n        otherwise a reference to the output array is returned.\n\n    See Also\n    --------\n    average : Weighted average\n\n    Notes\n    -----\n    The arithmetic mean is the sum of the elements along the axis divided\n    by the number of elements.\n\n    Note that for floating-point input, the mean is computed using the\n    same precision the input has.  Depending on the input data, this can\n    cause the results to be inaccurate, especially for `float32` (see\n    example below).  Specifying a higher-precision accumulator using the\n    `dtype` keyword can alleviate this issue.\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> np.mean(a)\n    2.5\n    >>> np.mean(a, axis=0)\n    array([ 2.,  3.])\n    >>> np.mean(a, axis=1)\n    array([ 1.5,  3.5])\n\n    In single precision, `mean` can be inaccurate:\n\n    >>> a = np.zeros((2, 512*512), dtype=np.float32)\n    >>> a[0, :] = 1.0\n    >>> a[1, :] = 0.1\n    >>> np.mean(a)\n    0.546875\n\n    Computing the mean in float64 is more accurate:\n\n    >>> np.mean(a, dtype=np.float64)\n    0.55000000074505806\n\n    '),
               ('numpy.core.fromnumeric.std',
                ['a', 'axis=None', 'dtype=None', 'out=None', 'ddof=0'],
                '\n    Compute the standard deviation along the specified axis.\n\n    Returns the standard deviation, a measure of the spread of a distribution,\n    of the array elements. The standard deviation is computed for the\n    flattened array by default, otherwise over the specified axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Calculate the standard deviation of these values.\n    axis : int, optional\n        Axis along which the standard deviation is computed. The default is\n        to compute the standard deviation of the flattened array.\n    dtype : dtype, optional\n        Type to use in computing the standard deviation. For arrays of\n        integer type the default is float64, for arrays of float types it is\n        the same as the array type.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must have\n        the same shape as the expected output but the type (of the calculated\n        values) will be cast if necessary.\n    ddof : int, optional\n        Means Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of elements.\n        By default `ddof` is zero.\n\n    Returns\n    -------\n    standard_deviation : ndarray, see dtype parameter above.\n        If `out` is None, return a new array containing the standard deviation,\n        otherwise return a reference to the output array.\n\n    See Also\n    --------\n    var, mean\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Notes\n    -----\n    The standard deviation is the square root of the average of the squared\n    deviations from the mean, i.e., ``std = sqrt(mean(abs(x - x.mean())**2))``.\n\n    The average squared deviation is normally calculated as ``x.sum() / N``, where\n    ``N = len(x)``.  If, however, `ddof` is specified, the divisor ``N - ddof``\n    is used instead. In standard statistical practice, ``ddof=1`` provides an\n    unbiased estimator of the variance of the infinite population. ``ddof=0``\n    provides a maximum likelihood estimate of the variance for normally\n    distributed variables. The standard deviation computed in this function\n    is the square root of the estimated variance, so even with ``ddof=1``, it\n    will not be an unbiased estimate of the standard deviation per se.\n\n    Note that, for complex numbers, `std` takes the absolute\n    value before squaring, so that the result is always real and nonnegative.\n\n    For floating-point input, the *std* is computed using the same\n    precision the input has. Depending on the input data, this can cause\n    the results to be inaccurate, especially for float32 (see example below).\n    Specifying a higher-accuracy accumulator using the `dtype` keyword can\n    alleviate this issue.\n\n    Examples\n    --------\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> np.std(a)\n    1.1180339887498949\n    >>> np.std(a, axis=0)\n    array([ 1.,  1.])\n    >>> np.std(a, axis=1)\n    array([ 0.5,  0.5])\n\n    In single precision, std() can be inaccurate:\n\n    >>> a = np.zeros((2,512*512), dtype=np.float32)\n    >>> a[0,:] = 1.0\n    >>> a[1,:] = 0.1\n    >>> np.std(a)\n    0.45172946707416706\n\n    Computing the standard deviation in float64 is more accurate:\n\n    >>> np.std(a, dtype=np.float64)\n    0.44999999925552653\n\n    '),
               ('numpy.core.fromnumeric.var',
                ['a', 'axis=None', 'dtype=None', 'out=None', 'ddof=0'],
                '\n    Compute the variance along the specified axis.\n\n    Returns the variance of the array elements, a measure of the spread of a\n    distribution.  The variance is computed for the flattened array by\n    default, otherwise over the specified axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing numbers whose variance is desired.  If `a` is not an\n        array, a conversion is attempted.\n    axis : int, optional\n        Axis along which the variance is computed.  The default is to compute\n        the variance of the flattened array.\n    dtype : data-type, optional\n        Type to use in computing the variance.  For arrays of integer type\n        the default is `float32`; for arrays of float types it is the same as\n        the array type.\n    out : ndarray, optional\n        Alternate output array in which to place the result.  It must have\n        the same shape as the expected output, but the type is cast if\n        necessary.\n    ddof : int, optional\n        "Delta Degrees of Freedom": the divisor used in the calculation is\n        ``N - ddof``, where ``N`` represents the number of elements. By\n        default `ddof` is zero.\n\n    Returns\n    -------\n    variance : ndarray, see dtype parameter above\n        If ``out=None``, returns a new array containing the variance;\n        otherwise, a reference to the output array is returned.\n\n    See Also\n    --------\n    std : Standard deviation\n    mean : Average\n    numpy.doc.ufuncs : Section "Output arguments"\n\n    Notes\n    -----\n    The variance is the average of the squared deviations from the mean,\n    i.e.,  ``var = mean(abs(x - x.mean())**2)``.\n\n    The mean is normally calculated as ``x.sum() / N``, where ``N = len(x)``.\n    If, however, `ddof` is specified, the divisor ``N - ddof`` is used\n    instead.  In standard statistical practice, ``ddof=1`` provides an\n    unbiased estimator of the variance of a hypothetical infinite population.\n    ``ddof=0`` provides a maximum likelihood estimate of the variance for\n    normally distributed variables.\n\n    Note that for complex numbers, the absolute value is taken before\n    squaring, so that the result is always real and nonnegative.\n\n    For floating-point input, the variance is computed using the same\n    precision the input has.  Depending on the input data, this can cause\n    the results to be inaccurate, especially for `float32` (see example\n    below).  Specifying a higher-accuracy accumulator using the ``dtype``\n    keyword can alleviate this issue.\n\n    Examples\n    --------\n    >>> a = np.array([[1,2],[3,4]])\n    >>> np.var(a)\n    1.25\n    >>> np.var(a,0)\n    array([ 1.,  1.])\n    >>> np.var(a,1)\n    array([ 0.25,  0.25])\n\n    In single precision, var() can be inaccurate:\n\n    >>> a = np.zeros((2,512*512), dtype=np.float32)\n    >>> a[0,:] = 1.0\n    >>> a[1,:] = 0.1\n    >>> np.var(a)\n    0.20405951142311096\n\n    Computing the standard deviation in float64 is more accurate:\n\n    >>> np.var(a, dtype=np.float64)\n    0.20249999932997387\n    >>> ((1-0.55)**2 + (0.1-0.55)**2)/2\n    0.20250000000000001\n\n    '),
               ('numpy.core.setup_common.is_released',
                ['config'],
                'Return True if a released version of numpy is detected.'),
               ('numpy.core.setup_common.get_api_versions',
                ['apiversion', 'codegen_dir'],
                'Return current C API checksum and the recorded checksum for the given\n    version of the C API version.'),
               ('numpy.core.setup_common.check_api_version',
                ['apiversion', 'codegen_dir'],
                'Emits a MismacthCAPIWarning if the C API version needs updating.'),
               ('numpy.core.setup_common.fname2def', ['name'], ''),
               ('numpy.core.setup_common.sym2def', ['symbol'], ''),
               ('numpy.core.setup_common.type2def', ['symbol'], ''),
               ('numpy.core.setup_common.check_long_double_representation', ['cmd'], ''),
               ('numpy.core.setup_common.pyod',
                ['filename'],
                'Python implementation of the od UNIX utility (od -b, more exactly).\n\n    Parameters\n    ----------\n    filename: str\n        name of the file to get the dump from.\n\n    Returns\n    -------\n    out: seq\n        list of lines of od output\n    Note\n    ----\n    We only implement enough to get the necessary information for long double\n    representation, this is not intended as a compatible replacement for od.\n    '),
               ('numpy.core.setup_common.long_double_representation',
                ['lines'],
                'Given a binary dump as given by GNU od -b, look for long double\n    representation.'),
               ('numpy.core.generate_numpy_api.generate_api', ['output_dir', 'force=False'], ''),
               ('numpy.core.generate_numpy_api.do_generate_api', ['targets', 'sources'], ''),
               ('numpy.core.numerictypes.english_lower',
                ['s'],
                ' Apply English case rules to convert ASCII strings to all lower case.\n\n    This is an internal utility function to replace calls to str.lower() such\n    that we can avoid changing behavior with changing locales. In particular,\n    Turkish has distinct dotted and dotless variants of the Latin letter "I" in\n    both lowercase and uppercase. Thus, "I".lower() != "i" in a "tr" locale.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    lowered : str\n\n    Examples\n    --------\n    >>> from numpy.core.numerictypes import english_lower\n    >>> english_lower(\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\')\n    \'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789_\'\n    >>> english_lower(\'\')\n    \'\'\n    '),
               ('numpy.core.numerictypes.english_upper',
                ['s'],
                ' Apply English case rules to convert ASCII strings to all upper case.\n\n    This is an internal utility function to replace calls to str.upper() such\n    that we can avoid changing behavior with changing locales. In particular,\n    Turkish has distinct dotted and dotless variants of the Latin letter "I" in\n    both lowercase and uppercase. Thus, "i".upper() != "I" in a "tr" locale.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    uppered : str\n\n    Examples\n    --------\n    >>> from numpy.core.numerictypes import english_upper\n    >>> english_upper(\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\')\n    \'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\'\n    >>> english_upper(\'\')\n    \'\'\n    '),
               ('numpy.core.numerictypes.english_capitalize',
                ['s'],
                " Apply English case rules to convert the first character of an ASCII\n    string to upper case.\n\n    This is an internal utility function to replace calls to str.capitalize()\n    such that we can avoid changing behavior with changing locales.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    capitalized : str\n\n    Examples\n    --------\n    >>> from numpy.core.numerictypes import english_capitalize\n    >>> english_capitalize('int8')\n    'Int8'\n    >>> english_capitalize('Int8')\n    'Int8'\n    >>> english_capitalize('')\n    ''\n    "),
               ('numpy.core.numerictypes._evalname', ['name'], ''),
               ('numpy.core.numerictypes.bitname',
                ['obj'],
                'Return a bit-width name for a given type object'),
               ('numpy.core.numerictypes._add_types', [], ''),
               ('numpy.core.numerictypes._add_aliases', [], ''),
               ('numpy.core.numerictypes._add_integer_aliases', [], ''),
               ('numpy.core.numerictypes._set_up_aliases', [], ''),
               ('numpy.core.numerictypes._construct_char_code_lookup', [], ''),
               ('numpy.core.numerictypes._add_array_type', ['typename', 'bits'], ''),
               ('numpy.core.numerictypes._set_array_types', [], ''),
               ('numpy.core.numerictypes.maximum_sctype',
                ['t'],
                "\n    Return the scalar type of highest precision of the same kind as the input.\n\n    Parameters\n    ----------\n    t : dtype or dtype specifier\n        The input data type. This can be a `dtype` object or an object that\n        is convertible to a `dtype`.\n\n    Returns\n    -------\n    out : dtype\n        The highest precision data type of the same kind (`dtype.kind`) as `t`.\n\n    See Also\n    --------\n    obj2sctype, mintypecode, sctype2char\n    dtype\n\n    Examples\n    --------\n    >>> np.maximum_sctype(np.int)\n    <type 'numpy.int64'>\n    >>> np.maximum_sctype(np.uint8)\n    <type 'numpy.uint64'>\n    >>> np.maximum_sctype(np.complex)\n    <type 'numpy.complex192'>\n\n    >>> np.maximum_sctype(str)\n    <type 'numpy.string_'>\n\n    >>> np.maximum_sctype('i2')\n    <type 'numpy.int64'>\n    >>> np.maximum_sctype('f4')\n    <type 'numpy.float96'>\n\n    "),
               ('numpy.core.numerictypes._python_type',
                ['t'],
                'returns the type corresponding to a certain Python type'),
               ('numpy.core.numerictypes._python_type',
                ['t'],
                'returns the type corresponding to a certain Python type'),
               ('numpy.core.numerictypes.issctype',
                ['rep'],
                "\n    Determines whether the given object represents a scalar data-type.\n\n    Parameters\n    ----------\n    rep : any\n        If `rep` is an instance of a scalar dtype, True is returned. If not,\n        False is returned.\n\n    Returns\n    -------\n    out : bool\n        Boolean result of check whether `rep` is a scalar dtype.\n\n    See Also\n    --------\n    issubsctype, issubdtype, obj2sctype, sctype2char\n\n    Examples\n    --------\n    >>> np.issctype(np.int32)\n    True\n    >>> np.issctype(list)\n    False\n    >>> np.issctype(1.1)\n    False\n\n    Strings are also a scalar type:\n\n    >>> np.issctype(np.dtype('str'))\n    True\n\n    "),
               ('numpy.core.numerictypes.obj2sctype',
                ['rep', 'default=None'],
                "\n    Return the scalar dtype or NumPy equivalent of Python type of an object.\n\n    Parameters\n    ----------\n    rep : any\n        The object of which the type is returned.\n    default : any, optional\n        If given, this is returned for objects whose types can not be\n        determined. If not given, None is returned for those objects.\n\n    Returns\n    -------\n    dtype : dtype or Python type\n        The data type of `rep`.\n\n    See Also\n    --------\n    sctype2char, issctype, issubsctype, issubdtype, maximum_sctype\n\n    Examples\n    --------\n    >>> np.obj2sctype(np.int32)\n    <type 'numpy.int32'>\n    >>> np.obj2sctype(np.array([1., 2.]))\n    <type 'numpy.float64'>\n    >>> np.obj2sctype(np.array([1.j]))\n    <type 'numpy.complex128'>\n\n    >>> np.obj2sctype(dict)\n    <type 'numpy.object_'>\n    >>> np.obj2sctype('string')\n    <type 'numpy.string_'>\n\n    >>> np.obj2sctype(1, default=list)\n    <type 'list'>\n\n    "),
               ('numpy.core.numerictypes.issubclass_',
                ['arg1', 'arg2'],
                '\n    Determine if a class is a subclass of a second class.\n\n    `issubclass_` is equivalent to the Python built-in ``issubclass``,\n    except that it returns False instead of raising a TypeError is one\n    of the arguments is not a class.\n\n    Parameters\n    ----------\n    arg1 : class\n        Input class. True is returned if `arg1` is a subclass of `arg2`.\n    arg2 : class or tuple of classes.\n        Input class. If a tuple of classes, True is returned if `arg1` is a\n        subclass of any of the tuple elements.\n\n    Returns\n    -------\n    out : bool\n        Whether `arg1` is a subclass of `arg2` or not.\n\n    See Also\n    --------\n    issubsctype, issubdtype, issctype\n\n    Examples\n    --------\n    >>> np.issubclass_(np.int32, np.int)\n    True\n    >>> np.issubclass_(np.int32, np.float)\n    False\n\n    '),
               ('numpy.core.numerictypes.issubsctype',
                ['arg1', 'arg2'],
                "\n    Determine if the first argument is a subclass of the second argument.\n\n    Parameters\n    ----------\n    arg1, arg2 : dtype or dtype specifier\n        Data-types.\n\n    Returns\n    -------\n    out : bool\n        The result.\n\n    See Also\n    --------\n    issctype, issubdtype,obj2sctype\n\n    Examples\n    --------\n    >>> np.issubsctype('S8', str)\n    True\n    >>> np.issubsctype(np.array([1]), np.int)\n    True\n    >>> np.issubsctype(np.array([1]), np.float)\n    False\n\n    "),
               ('numpy.core.numerictypes.issubdtype',
                ['arg1', 'arg2'],
                "\n    Returns True if first argument is a typecode lower/equal in type hierarchy.\n\n    Parameters\n    ----------\n    arg1, arg2 : dtype_like\n        dtype or string representing a typecode.\n\n    Returns\n    -------\n    out : bool\n\n    See Also\n    --------\n    issubsctype, issubclass_\n    numpy.core.numerictypes : Overview of numpy type hierarchy.\n\n    Examples\n    --------\n    >>> np.issubdtype('S1', str)\n    True\n    >>> np.issubdtype(np.float64, np.float32)\n    False\n\n    "),
               ('numpy.core.numerictypes._construct_lookups', [], ''),
               ('numpy.core.numerictypes.sctype2char',
                ['sctype'],
                "\n    Return the string representation of a scalar dtype.\n\n    Parameters\n    ----------\n    sctype : scalar dtype or object\n        If a scalar dtype, the corresponding string character is\n        returned. If an object, `sctype2char` tries to infer its scalar type\n        and then return the corresponding string character.\n\n    Returns\n    -------\n    typechar : str\n        The string character corresponding to the scalar type.\n\n    Raises\n    ------\n    ValueError\n        If `sctype` is an object for which the type can not be inferred.\n\n    See Also\n    --------\n    obj2sctype, issctype, issubsctype, mintypecode\n\n    Examples\n    --------\n    >>> for sctype in [np.int32, np.float, np.complex, np.string_, np.ndarray]:\n    ...     print np.sctype2char(sctype)\n    l\n    d\n    D\n    S\n    O\n\n    >>> x = np.array([1., 2-1.j])\n    >>> np.sctype2char(x)\n    'D'\n    >>> np.sctype2char(list)\n    'O'\n\n    "),
               ('numpy.core.numerictypes._find_common_coerce', ['a', 'b'], ''),
               ('numpy.core.numerictypes._can_coerce_all', ['dtypelist', 'start=0'], ''),
               ('numpy.core.numerictypes.find_common_type',
                ['array_types', 'scalar_types'],
                "\n    Determine common type following standard coercion rules.\n\n    Parameters\n    ----------\n    array_types : sequence\n        A list of dtypes or dtype convertible objects representing arrays.\n    scalar_types : sequence\n        A list of dtypes or dtype convertible objects representing scalars.\n\n    Returns\n    -------\n    datatype : dtype\n        The common data type, which is the maximum of `array_types` ignoring\n        `scalar_types`, unless the maximum of `scalar_types` is of a\n        different kind (`dtype.kind`). If the kind is not understood, then\n        None is returned.\n\n    See Also\n    --------\n    dtype, common_type, can_cast, mintypecode\n\n    Examples\n    --------\n    >>> np.find_common_type([], [np.int64, np.float32, np.complex])\n    dtype('complex128')\n    >>> np.find_common_type([np.int64, np.float32], [])\n    dtype('float64')\n\n    The standard casting rules ensure that a scalar cannot up-cast an\n    array unless the scalar is of a fundamentally different kind of data\n    (i.e. under a different hierarchy in the data type hierarchy) then\n    the array:\n\n    >>> np.find_common_type([np.float32], [np.int64, np.float64])\n    dtype('float32')\n\n    Complex is of a different type, so it up-casts the float in the\n    `array_types` argument:\n\n    >>> np.find_common_type([np.float32], [np.complex])\n    dtype('complex128')\n\n    Type specifier strings are convertible to dtypes and can therefore\n    be used instead of dtypes:\n\n    >>> np.find_common_type(['f4', 'f4', 'i4'], ['c8'])\n    dtype('complex128')\n\n    "),
               ('numpy.core.setup.pythonlib_dir', [], 'return path where libpython* is.'),
               ('numpy.core.setup.is_npy_no_signal',
                [],
                'Return True if the NPY_NO_SIGNAL symbol must be defined in configuration\n    header.'),
               ('numpy.core.setup.is_npy_no_smp',
                [],
                'Return True if the NPY_NO_SMP symbol must be defined in public\n    header (when SMP support cannot be reliably enabled).'),
               ('numpy.core.setup.win32_checks', ['deflist'], ''),
               ('numpy.core.setup.check_math_capabilities',
                ['config', 'moredefs', 'mathlibs'],
                ''),
               ('numpy.core.setup.check_complex', ['config', 'mathlibs'], ''),
               ('numpy.core.setup.check_ieee_macros', ['config'], ''),
               ('numpy.core.setup.check_types', ['config_cmd', 'ext', 'build_dir'], ''),
               ('numpy.core.setup.check_mathlib', ['config_cmd'], ''),
               ('numpy.core.setup.visibility_define',
                ['config'],
                'Return the define value to use for NPY_VISIBILITY_HIDDEN (may be empty\n    string).'),
               ('numpy.core.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.core.numeric.zeros_like',
                ['a', 'dtype=None', "order='K'", 'subok=True'],
                "\n    Return an array of zeros with the same shape and type as a given array.\n\n    With default parameters, is equivalent to ``a.copy().fill(0)``.\n\n    Parameters\n    ----------\n    a : array_like\n        The shape and data-type of `a` define these same attributes of\n        the returned array.\n    dtype : data-type, optional\n        Overrides the data type of the result.\n    order : {'C', 'F', 'A', or 'K'}, optional\n        Overrides the memory layout of the result. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible.\n\n    Returns\n    -------\n    out : ndarray\n        Array of zeros with the same shape and type as `a`.\n\n    See Also\n    --------\n    ones_like : Return an array of ones with shape and type of input.\n    empty_like : Return an empty array with shape and type of input.\n    zeros : Return a new array setting values to zero.\n    ones : Return a new array setting values to one.\n    empty : Return a new uninitialized array.\n\n    Examples\n    --------\n    >>> x = np.arange(6)\n    >>> x = x.reshape((2, 3))\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.zeros_like(x)\n    array([[0, 0, 0],\n           [0, 0, 0]])\n\n    >>> y = np.arange(3, dtype=np.float)\n    >>> y\n    array([ 0.,  1.,  2.])\n    >>> np.zeros_like(y)\n    array([ 0.,  0.,  0.])\n\n    "),
               ('numpy.core.numeric.extend_all', ['module'], ''),
               ('numpy.core.numeric.asarray',
                ['a', 'dtype=None', 'order=None'],
                "\n    Convert the input to an array.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists and ndarrays.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('F' for FORTRAN)\n        memory representation.  Defaults to 'C'.\n\n    Returns\n    -------\n    out : ndarray\n        Array interpretation of `a`.  No copy is performed if the input\n        is already an ndarray.  If `a` is a subclass of ndarray, a base\n        class ndarray is returned.\n\n    See Also\n    --------\n    asanyarray : Similar function which passes through subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    asarray_chkfinite : Similar function which checks input for NaNs and Infs.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n\n    Examples\n    --------\n    Convert a list into an array:\n\n    >>> a = [1, 2]\n    >>> np.asarray(a)\n    array([1, 2])\n\n    Existing arrays are not copied:\n\n    >>> a = np.array([1, 2])\n    >>> np.asarray(a) is a\n    True\n\n    If `dtype` is set, array is copied only if dtype does not match:\n\n    >>> a = np.array([1, 2], dtype=np.float32)\n    >>> np.asarray(a, dtype=np.float32) is a\n    True\n    >>> np.asarray(a, dtype=np.float64) is a\n    False\n\n    Contrary to `asanyarray`, ndarray subclasses are not passed through:\n\n    >>> issubclass(np.matrix, np.ndarray)\n    True\n    >>> a = np.matrix([[1, 2]])\n    >>> np.asarray(a) is a\n    False\n    >>> np.asanyarray(a) is a\n    True\n\n    "),
               ('numpy.core.numeric.asanyarray',
                ['a', 'dtype=None', 'order=None'],
                "\n    Convert the input to an ndarray, but pass ndarray subclasses through.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes scalars, lists, lists of tuples, tuples, tuples of tuples,\n        tuples of lists, and ndarrays.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('F') memory\n        representation.  Defaults to 'C'.\n\n    Returns\n    -------\n    out : ndarray or an ndarray subclass\n        Array interpretation of `a`.  If `a` is an ndarray or a subclass\n        of ndarray, it is returned as-is and no copy is performed.\n\n    See Also\n    --------\n    asarray : Similar function which always returns ndarrays.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    asarray_chkfinite : Similar function which checks input for NaNs and\n                        Infs.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n\n    Examples\n    --------\n    Convert a list into an array:\n\n    >>> a = [1, 2]\n    >>> np.asanyarray(a)\n    array([1, 2])\n\n    Instances of `ndarray` subclasses are passed through as-is:\n\n    >>> a = np.matrix([1, 2])\n    >>> np.asanyarray(a) is a\n    True\n\n    "),
               ('numpy.core.numeric.ascontiguousarray',
                ['a', 'dtype=None'],
                "\n    Return a contiguous array in memory (C order).\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    dtype : str or dtype object, optional\n        Data-type of returned array.\n\n    Returns\n    -------\n    out : ndarray\n        Contiguous array of same shape and content as `a`, with type `dtype`\n        if specified.\n\n    See Also\n    --------\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    require : Return an ndarray that satisfies requirements.\n    ndarray.flags : Information about the memory layout of the array.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> np.ascontiguousarray(x, dtype=np.float32)\n    array([[ 0.,  1.,  2.],\n           [ 3.,  4.,  5.]], dtype=float32)\n    >>> x.flags['C_CONTIGUOUS']\n    True\n\n    "),
               ('numpy.core.numeric.asfortranarray',
                ['a', 'dtype=None'],
                "\n    Return an array laid out in Fortran order in memory.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    dtype : str or dtype object, optional\n        By default, the data-type is inferred from the input data.\n\n    Returns\n    -------\n    out : ndarray\n        The input `a` in Fortran, or column-major, order.\n\n    See Also\n    --------\n    ascontiguousarray : Convert input to a contiguous (C order) array.\n    asanyarray : Convert input to an ndarray with either row or\n        column-major memory order.\n    require : Return an ndarray that satisfies requirements.\n    ndarray.flags : Information about the memory layout of the array.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> y = np.asfortranarray(x)\n    >>> x.flags['F_CONTIGUOUS']\n    False\n    >>> y.flags['F_CONTIGUOUS']\n    True\n\n    "),
               ('numpy.core.numeric.require',
                ['a', 'dtype=None', 'requirements=None'],
                "\n    Return an ndarray of the provided type that satisfies requirements.\n\n    This function is useful to be sure that an array with the correct flags\n    is returned for passing to compiled code (perhaps through ctypes).\n\n    Parameters\n    ----------\n    a : array_like\n       The object to be converted to a type-and-requirement-satisfying array.\n    dtype : data-type\n       The required data-type, the default data-type is float64).\n    requirements : str or list of str\n       The requirements list can be any of the following\n\n       * 'F_CONTIGUOUS' ('F') - ensure a Fortran-contiguous array\n       * 'C_CONTIGUOUS' ('C') - ensure a C-contiguous array\n       * 'ALIGNED' ('A')      - ensure a data-type aligned array\n       * 'WRITEABLE' ('W')    - ensure a writable array\n       * 'OWNDATA' ('O')      - ensure an array that owns its own data\n\n    See Also\n    --------\n    asarray : Convert input to an ndarray.\n    asanyarray : Convert to an ndarray, but pass through ndarray subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    ndarray.flags : Information about the memory layout of the array.\n\n    Notes\n    -----\n    The returned array will be guaranteed to have the listed requirements\n    by making a copy if needed.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> x.flags\n      C_CONTIGUOUS : True\n      F_CONTIGUOUS : False\n      OWNDATA : False\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n\n    >>> y = np.require(x, dtype=np.float32, requirements=['A', 'O', 'W', 'F'])\n    >>> y.flags\n      C_CONTIGUOUS : False\n      F_CONTIGUOUS : True\n      OWNDATA : True\n      WRITEABLE : True\n      ALIGNED : True\n      UPDATEIFCOPY : False\n\n    "),
               ('numpy.core.numeric.isfortran',
                ['a'],
                "\n    Returns True if array is arranged in Fortran-order in memory\n    and dimension > 1.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n\n\n    Examples\n    --------\n\n    np.array allows to specify whether the array is written in C-contiguous\n    order (last index varies the fastest), or FORTRAN-contiguous order in\n    memory (first index varies the fastest).\n\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]], order='C')\n    >>> a\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.isfortran(a)\n    False\n\n    >>> b = np.array([[1, 2, 3], [4, 5, 6]], order='FORTRAN')\n    >>> b\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.isfortran(b)\n    True\n\n\n    The transpose of a C-ordered array is a FORTRAN-ordered array.\n\n    >>> a = np.array([[1, 2, 3], [4, 5, 6]], order='C')\n    >>> a\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> np.isfortran(a)\n    False\n    >>> b = a.T\n    >>> b\n    array([[1, 4],\n           [2, 5],\n           [3, 6]])\n    >>> np.isfortran(b)\n    True\n\n    1-D arrays always evaluate as False.\n\n    >>> np.isfortran(np.array([1, 2], order='FORTRAN'))\n    False\n\n    "),
               ('numpy.core.numeric.argwhere',
                ['a'],
                '\n    Find the indices of array elements that are non-zero, grouped by element.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n\n    Returns\n    -------\n    index_array : ndarray\n        Indices of elements that are non-zero. Indices are grouped by element.\n\n    See Also\n    --------\n    where, nonzero\n\n    Notes\n    -----\n    ``np.argwhere(a)`` is the same as ``np.transpose(np.nonzero(a))``.\n\n    The output of ``argwhere`` is not suitable for indexing arrays.\n    For this purpose use ``where(a)`` instead.\n\n    Examples\n    --------\n    >>> x = np.arange(6).reshape(2,3)\n    >>> x\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.argwhere(x>1)\n    array([[0, 2],\n           [1, 0],\n           [1, 1],\n           [1, 2]])\n\n    '),
               ('numpy.core.numeric.flatnonzero',
                ['a'],
                '\n    Return indices that are non-zero in the flattened version of a.\n\n    This is equivalent to a.ravel().nonzero()[0].\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n\n    Returns\n    -------\n    res : ndarray\n        Output array, containing the indices of the elements of `a.ravel()`\n        that are non-zero.\n\n    See Also\n    --------\n    nonzero : Return the indices of the non-zero elements of the input array.\n    ravel : Return a 1-D array containing the elements of the input array.\n\n    Examples\n    --------\n    >>> x = np.arange(-2, 3)\n    >>> x\n    array([-2, -1,  0,  1,  2])\n    >>> np.flatnonzero(x)\n    array([0, 1, 3, 4])\n\n    Use the indices of the non-zero elements as an index array to extract\n    these elements:\n\n    >>> x.ravel()[np.flatnonzero(x)]\n    array([-2, -1,  1,  2])\n\n    '),
               ('numpy.core.numeric._mode_from_name', ['mode'], ''),
               ('numpy.core.numeric.correlate',
                ['a', 'v', "mode='valid'", 'old_behavior=False'],
                '\n    Cross-correlation of two 1-dimensional sequences.\n\n    This function computes the correlation as generally defined in signal\n    processing texts::\n\n        z[k] = sum_n a[n] * conj(v[n+k])\n\n    with a and v sequences being zero-padded where necessary and conj being\n    the conjugate.\n\n    Parameters\n    ----------\n    a, v : array_like\n        Input sequences.\n    mode : {\'valid\', \'same\', \'full\'}, optional\n        Refer to the `convolve` docstring.  Note that the default\n        is `valid`, unlike `convolve`, which uses `full`.\n    old_behavior : bool\n        If True, uses the old behavior from Numeric, (correlate(a,v) == correlate(v,\n        a), and the conjugate is not taken for complex arrays). If False, uses\n        the conventional signal processing definition (see note).\n\n    See Also\n    --------\n    convolve : Discrete, linear convolution of two one-dimensional sequences.\n\n    Examples\n    --------\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5])\n    array([ 3.5])\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5], "same")\n    array([ 2. ,  3.5,  3. ])\n    >>> np.correlate([1, 2, 3], [0, 1, 0.5], "full")\n    array([ 0.5,  2. ,  3.5,  3. ,  0. ])\n\n    '),
               ('numpy.core.numeric.convolve',
                ['a', 'v', "mode='full'"],
                '\n    Returns the discrete, linear convolution of two one-dimensional sequences.\n\n    The convolution operator is often seen in signal processing, where it\n    models the effect of a linear time-invariant system on a signal [1]_.  In\n    probability theory, the sum of two independent random variables is\n    distributed according to the convolution of their individual\n    distributions.\n\n    Parameters\n    ----------\n    a : (N,) array_like\n        First one-dimensional input array.\n    v : (M,) array_like\n        Second one-dimensional input array.\n    mode : {\'full\', \'valid\', \'same\'}, optional\n        \'full\':\n          By default, mode is \'full\'.  This returns the convolution\n          at each point of overlap, with an output shape of (N+M-1,). At\n          the end-points of the convolution, the signals do not overlap\n          completely, and boundary effects may be seen.\n\n        \'same\':\n          Mode `same` returns output of length ``max(M, N)``.  Boundary\n          effects are still visible.\n\n        \'valid\':\n          Mode `valid` returns output of length\n          ``max(M, N) - min(M, N) + 1``.  The convolution product is only given\n          for points where the signals overlap completely.  Values outside\n          the signal boundary have no effect.\n\n    Returns\n    -------\n    out : ndarray\n        Discrete, linear convolution of `a` and `v`.\n\n    See Also\n    --------\n    scipy.signal.fftconvolve : Convolve two arrays using the Fast Fourier\n                               Transform.\n    scipy.linalg.toeplitz : Used to construct the convolution operator.\n\n    Notes\n    -----\n    The discrete convolution operation is defined as\n\n    .. math:: (f * g)[n] = \\sum_{m = -\\infty}^{\\infty} f[m] g[n - m]\n\n    It can be shown that a convolution :math:`x(t) * y(t)` in time/space\n    is equivalent to the multiplication :math:`X(f) Y(f)` in the Fourier\n    domain, after appropriate padding (padding is necessary to prevent\n    circular convolution).  Since multiplication is more efficient (faster)\n    than convolution, the function `scipy.signal.fftconvolve` exploits the\n    FFT to calculate the convolution of large data-sets.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Convolution", http://en.wikipedia.org/wiki/Convolution.\n\n    Examples\n    --------\n    Note how the convolution operator flips the second array\n    before "sliding" the two across one another:\n\n    >>> np.convolve([1, 2, 3], [0, 1, 0.5])\n    array([ 0. ,  1. ,  2.5,  4. ,  1.5])\n\n    Only return the middle values of the convolution.\n    Contains boundary effects, where zeros are taken\n    into account:\n\n    >>> np.convolve([1,2,3],[0,1,0.5], \'same\')\n    array([ 1. ,  2.5,  4. ])\n\n    The two arrays are of the same length, so there\n    is only one position where they completely overlap:\n\n    >>> np.convolve([1,2,3],[0,1,0.5], \'valid\')\n    array([ 2.5])\n\n    '),
               ('numpy.core.numeric.outer',
                ['a', 'b'],
                '\n    Compute the outer product of two vectors.\n\n    Given two vectors, ``a = [a0, a1, ..., aM]`` and\n    ``b = [b0, b1, ..., bN]``,\n    the outer product [1]_ is::\n\n      [[a0*b0  a0*b1 ... a0*bN ]\n       [a1*b0    .\n       [ ...          .\n       [aM*b0            aM*bN ]]\n\n    Parameters\n    ----------\n    a, b : array_like, shape (M,), (N,)\n        First and second input vectors.  Inputs are flattened if they\n        are not already 1-dimensional.\n\n    Returns\n    -------\n    out : ndarray, shape (M, N)\n        ``out[i, j] = a[i] * b[j]``\n\n    See also\n    --------\n    inner, einsum\n\n    References\n    ----------\n    .. [1] : G. H. Golub and C. F. van Loan, *Matrix Computations*, 3rd\n             ed., Baltimore, MD, Johns Hopkins University Press, 1996,\n             pg. 8.\n\n    Examples\n    --------\n    Make a (*very* coarse) grid for computing a Mandelbrot set:\n\n    >>> rl = np.outer(np.ones((5,)), np.linspace(-2, 2, 5))\n    >>> rl\n    array([[-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.],\n           [-2., -1.,  0.,  1.,  2.]])\n    >>> im = np.outer(1j*np.linspace(2, -2, 5), np.ones((5,)))\n    >>> im\n    array([[ 0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j,  0.+2.j],\n           [ 0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j,  0.+1.j],\n           [ 0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],\n           [ 0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j,  0.-1.j],\n           [ 0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j,  0.-2.j]])\n    >>> grid = rl + im\n    >>> grid\n    array([[-2.+2.j, -1.+2.j,  0.+2.j,  1.+2.j,  2.+2.j],\n           [-2.+1.j, -1.+1.j,  0.+1.j,  1.+1.j,  2.+1.j],\n           [-2.+0.j, -1.+0.j,  0.+0.j,  1.+0.j,  2.+0.j],\n           [-2.-1.j, -1.-1.j,  0.-1.j,  1.-1.j,  2.-1.j],\n           [-2.-2.j, -1.-2.j,  0.-2.j,  1.-2.j,  2.-2.j]])\n\n    An example using a "vector" of letters:\n\n    >>> x = np.array([\'a\', \'b\', \'c\'], dtype=object)\n    >>> np.outer(x, [1, 2, 3])\n    array([[a, aa, aaa],\n           [b, bb, bbb],\n           [c, cc, ccc]], dtype=object)\n\n    '),
               ('numpy.core.numeric.vdot', ['a', 'b'], ''),
               ('numpy.core.numeric.alterdot', [], ''),
               ('numpy.core.numeric.restoredot', [], ''),
               ('numpy.core.numeric.tensordot',
                ['a', 'b', 'axes=2'],
                '\n    Compute tensor dot product along specified axes for arrays >= 1-D.\n\n    Given two tensors (arrays of dimension greater than or equal to one),\n    ``a`` and ``b``, and an array_like object containing two array_like\n    objects, ``(a_axes, b_axes)``, sum the products of ``a``\'s and ``b``\'s\n    elements (components) over the axes specified by ``a_axes`` and\n    ``b_axes``. The third argument can be a single non-negative\n    integer_like scalar, ``N``; if it is such, then the last ``N``\n    dimensions of ``a`` and the first ``N`` dimensions of ``b`` are summed\n    over.\n\n    Parameters\n    ----------\n    a, b : array_like, len(shape) >= 1\n        Tensors to "dot".\n\n    axes : variable type\n\n    * integer_like scalar\n      Number of axes to sum over (applies to both arrays); or\n\n    * array_like, shape = (2,), both elements array_like\n      Axes to be summed over, first sequence applying to ``a``, second\n      to ``b``.\n\n    See Also\n    --------\n    dot, einsum\n\n    Notes\n    -----\n    When there is more than one axis to sum over - and they are not the last\n    (first) axes of ``a`` (``b``) - the argument ``axes`` should consist of\n    two sequences of the same length, with the first axis to sum over given\n    first in both sequences, the second axis second, and so forth.\n\n    Examples\n    --------\n    A "traditional" example:\n\n    >>> a = np.arange(60.).reshape(3,4,5)\n    >>> b = np.arange(24.).reshape(4,3,2)\n    >>> c = np.tensordot(a,b, axes=([1,0],[0,1]))\n    >>> c.shape\n    (5, 2)\n    >>> c\n    array([[ 4400.,  4730.],\n           [ 4532.,  4874.],\n           [ 4664.,  5018.],\n           [ 4796.,  5162.],\n           [ 4928.,  5306.]])\n    >>> # A slower but equivalent way of computing the same...\n    >>> d = np.zeros((5,2))\n    >>> for i in range(5):\n    ...   for j in range(2):\n    ...     for k in range(3):\n    ...       for n in range(4):\n    ...         d[i,j] += a[k,n,i] * b[n,k,j]\n    >>> c == d\n    array([[ True,  True],\n           [ True,  True],\n           [ True,  True],\n           [ True,  True],\n           [ True,  True]], dtype=bool)\n\n    An extended example taking advantage of the overloading of + and \\*:\n\n    >>> a = np.array(range(1, 9))\n    >>> a.shape = (2, 2, 2)\n    >>> A = np.array((\'a\', \'b\', \'c\', \'d\'), dtype=object)\n    >>> A.shape = (2, 2)\n    >>> a; A\n    array([[[1, 2],\n            [3, 4]],\n           [[5, 6],\n            [7, 8]]])\n    array([[a, b],\n           [c, d]], dtype=object)\n\n    >>> np.tensordot(a, A) # third argument default is 2\n    array([abbcccdddd, aaaaabbbbbbcccccccdddddddd], dtype=object)\n\n    >>> np.tensordot(a, A, 1)\n    array([[[acc, bdd],\n            [aaacccc, bbbdddd]],\n           [[aaaaacccccc, bbbbbdddddd],\n            [aaaaaaacccccccc, bbbbbbbdddddddd]]], dtype=object)\n\n    >>> np.tensordot(a, A, 0) # "Left for reader" (result too long to incl.)\n    array([[[[[a, b],\n              [c, d]],\n              ...\n\n    >>> np.tensordot(a, A, (0, 1))\n    array([[[abbbbb, cddddd],\n            [aabbbbbb, ccdddddd]],\n           [[aaabbbbbbb, cccddddddd],\n            [aaaabbbbbbbb, ccccdddddddd]]], dtype=object)\n\n    >>> np.tensordot(a, A, (2, 1))\n    array([[[abb, cdd],\n            [aaabbbb, cccdddd]],\n           [[aaaaabbbbbb, cccccdddddd],\n            [aaaaaaabbbbbbbb, cccccccdddddddd]]], dtype=object)\n\n    >>> np.tensordot(a, A, ((0, 1), (0, 1)))\n    array([abbbcccccddddddd, aabbbbccccccdddddddd], dtype=object)\n\n    >>> np.tensordot(a, A, ((2, 1), (1, 0)))\n    array([acccbbdddd, aaaaacccccccbbbbbbdddddddd], dtype=object)\n\n    '),
               ('numpy.core.numeric.roll',
                ['a', 'shift', 'axis=None'],
                '\n    Roll array elements along a given axis.\n\n    Elements that roll beyond the last position are re-introduced at\n    the first.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    shift : int\n        The number of places by which elements are shifted.\n    axis : int, optional\n        The axis along which elements are shifted.  By default, the array\n        is flattened before shifting, after which the original\n        shape is restored.\n\n    Returns\n    -------\n    res : ndarray\n        Output array, with the same shape as `a`.\n\n    See Also\n    --------\n    rollaxis : Roll the specified axis backwards, until it lies in a\n               given position.\n\n    Examples\n    --------\n    >>> x = np.arange(10)\n    >>> np.roll(x, 2)\n    array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7])\n\n    >>> x2 = np.reshape(x, (2,5))\n    >>> x2\n    array([[0, 1, 2, 3, 4],\n           [5, 6, 7, 8, 9]])\n    >>> np.roll(x2, 1)\n    array([[9, 0, 1, 2, 3],\n           [4, 5, 6, 7, 8]])\n    >>> np.roll(x2, 1, axis=0)\n    array([[5, 6, 7, 8, 9],\n           [0, 1, 2, 3, 4]])\n    >>> np.roll(x2, 1, axis=1)\n    array([[4, 0, 1, 2, 3],\n           [9, 5, 6, 7, 8]])\n\n    '),
               ('numpy.core.numeric.rollaxis',
                ['a', 'axis', 'start=0'],
                '\n    Roll the specified axis backwards, until it lies in a given position.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n    axis : int\n        The axis to roll backwards.  The positions of the other axes do not\n        change relative to one another.\n    start : int, optional\n        The axis is rolled until it lies before this position.  The default,\n        0, results in a "complete" roll.\n\n    Returns\n    -------\n    res : ndarray\n        Output array.\n\n    See Also\n    --------\n    roll : Roll the elements of an array by a number of positions along a\n        given axis.\n\n    Examples\n    --------\n    >>> a = np.ones((3,4,5,6))\n    >>> np.rollaxis(a, 3, 1).shape\n    (3, 6, 4, 5)\n    >>> np.rollaxis(a, 2).shape\n    (5, 3, 4, 6)\n    >>> np.rollaxis(a, 1, 4).shape\n    (3, 5, 6, 4)\n\n    '),
               ('numpy.core.numeric._move_axis_to_0', ['a', 'axis'], ''),
               ('numpy.core.numeric.cross',
                ['a', 'b', 'axisa=-1', 'axisb=-1', 'axisc=-1', 'axis=None'],
                '\n    Return the cross product of two (arrays of) vectors.\n\n    The cross product of `a` and `b` in :math:`R^3` is a vector perpendicular\n    to both `a` and `b`.  If `a` and `b` are arrays of vectors, the vectors\n    are defined by the last axis of `a` and `b` by default, and these axes\n    can have dimensions 2 or 3.  Where the dimension of either `a` or `b` is\n    2, the third component of the input vector is assumed to be zero and the\n    cross product calculated accordingly.  In cases where both input vectors\n    have dimension 2, the z-component of the cross product is returned.\n\n    Parameters\n    ----------\n    a : array_like\n        Components of the first vector(s).\n    b : array_like\n        Components of the second vector(s).\n    axisa : int, optional\n        Axis of `a` that defines the vector(s).  By default, the last axis.\n    axisb : int, optional\n        Axis of `b` that defines the vector(s).  By default, the last axis.\n    axisc : int, optional\n        Axis of `c` containing the cross product vector(s).  By default, the\n        last axis.\n    axis : int, optional\n        If defined, the axis of `a`, `b` and `c` that defines the vector(s)\n        and cross product(s).  Overrides `axisa`, `axisb` and `axisc`.\n\n    Returns\n    -------\n    c : ndarray\n        Vector cross product(s).\n\n    Raises\n    ------\n    ValueError\n        When the dimension of the vector(s) in `a` and/or `b` does not\n        equal 2 or 3.\n\n    See Also\n    --------\n    inner : Inner product\n    outer : Outer product.\n    ix_ : Construct index arrays.\n\n    Examples\n    --------\n    Vector cross-product.\n\n    >>> x = [1, 2, 3]\n    >>> y = [4, 5, 6]\n    >>> np.cross(x, y)\n    array([-3,  6, -3])\n\n    One vector with dimension 2.\n\n    >>> x = [1, 2]\n    >>> y = [4, 5, 6]\n    >>> np.cross(x, y)\n    array([12, -6, -3])\n\n    Equivalently:\n\n    >>> x = [1, 2, 0]\n    >>> y = [4, 5, 6]\n    >>> np.cross(x, y)\n    array([12, -6, -3])\n\n    Both vectors with dimension 2.\n\n    >>> x = [1,2]\n    >>> y = [4,5]\n    >>> np.cross(x, y)\n    -3\n\n    Multiple vector cross-products. Note that the direction of the cross\n    product vector is defined by the `right-hand rule`.\n\n    >>> x = np.array([[1,2,3], [4,5,6]])\n    >>> y = np.array([[4,5,6], [1,2,3]])\n    >>> np.cross(x, y)\n    array([[-3,  6, -3],\n           [ 3, -6,  3]])\n\n    The orientation of `c` can be changed using the `axisc` keyword.\n\n    >>> np.cross(x, y, axisc=0)\n    array([[-3,  3],\n           [ 6, -6],\n           [-3,  3]])\n\n    Change the vector definition of `x` and `y` using `axisa` and `axisb`.\n\n    >>> x = np.array([[1,2,3], [4,5,6], [7, 8, 9]])\n    >>> y = np.array([[7, 8, 9], [4,5,6], [1,2,3]])\n    >>> np.cross(x, y)\n    array([[ -6,  12,  -6],\n           [  0,   0,   0],\n           [  6, -12,   6]])\n    >>> np.cross(x, y, axisa=0, axisb=0)\n    array([[-24,  48, -24],\n           [-30,  60, -30],\n           [-36,  72, -36]])\n\n    '),
               ('numpy.core.numeric.array_repr',
                ['arr', 'max_line_width=None', 'precision=None', 'suppress_small=None'],
                "\n    Return the string representation of an array.\n\n    Parameters\n    ----------\n    arr : ndarray\n        Input array.\n    max_line_width : int, optional\n        The maximum number of columns the string should span. Newline\n        characters split the string appropriately after array elements.\n    precision : int, optional\n        Floating point precision. Default is the current printing precision\n        (usually 8), which can be altered using `set_printoptions`.\n    suppress_small : bool, optional\n        Represent very small numbers as zero, default is False. Very small\n        is defined by `precision`, if the precision is 8 then\n        numbers smaller than 5e-9 are represented as zero.\n\n    Returns\n    -------\n    string : str\n      The string representation of an array.\n\n    See Also\n    --------\n    array_str, array2string, set_printoptions\n\n    Examples\n    --------\n    >>> np.array_repr(np.array([1,2]))\n    'array([1, 2])'\n    >>> np.array_repr(np.ma.array([0.]))\n    'MaskedArray([ 0.])'\n    >>> np.array_repr(np.array([], np.int32))\n    'array([], dtype=int32)'\n\n    >>> x = np.array([1e-6, 4e-7, 2, 3])\n    >>> np.array_repr(x, precision=6, suppress_small=True)\n    'array([ 0.000001,  0.      ,  2.      ,  3.      ])'\n\n    "),
               ('numpy.core.numeric.array_str',
                ['a', 'max_line_width=None', 'precision=None', 'suppress_small=None'],
                '\n    Return a string representation of the data in an array.\n\n    The data in the array is returned as a single string.  This function is\n    similar to `array_repr`, the difference being that `array_repr` also\n    returns information on the kind of array and its data type.\n\n    Parameters\n    ----------\n    a : ndarray\n        Input array.\n    max_line_width : int, optional\n        Inserts newlines if text is longer than `max_line_width`.  The\n        default is, indirectly, 75.\n    precision : int, optional\n        Floating point precision.  Default is the current printing precision\n        (usually 8), which can be altered using `set_printoptions`.\n    suppress_small : bool, optional\n        Represent numbers "very close" to zero as zero; default is False.\n        Very close is defined by precision: if the precision is 8, e.g.,\n        numbers smaller (in absolute value) than 5e-9 are represented as\n        zero.\n\n    See Also\n    --------\n    array2string, array_repr, set_printoptions\n\n    Examples\n    --------\n    >>> np.array_str(np.arange(3))\n    \'[0 1 2]\'\n\n    '),
               ('numpy.core.numeric.set_string_function',
                ['f', 'repr=True'],
                "\n    Set a Python function to be used when pretty printing arrays.\n\n    Parameters\n    ----------\n    f : function or None\n        Function to be used to pretty print arrays. The function should expect\n        a single array argument and return a string of the representation of\n        the array. If None, the function is reset to the default NumPy function\n        to print arrays.\n    repr : bool, optional\n        If True (default), the function for pretty printing (``__repr__``)\n        is set, if False the function that returns the default string\n        representation (``__str__``) is set.\n\n    See Also\n    --------\n    set_printoptions, get_printoptions\n\n    Examples\n    --------\n    >>> def pprint(arr):\n    ...     return 'HA! - What are you going to do now?'\n    ...\n    >>> np.set_string_function(pprint)\n    >>> a = np.arange(10)\n    >>> a\n    HA! - What are you going to do now?\n    >>> print a\n    [0 1 2 3 4 5 6 7 8 9]\n\n    We can reset the function to the default:\n\n    >>> np.set_string_function(None)\n    >>> a\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    `repr` affects either pretty printing or normal string representation.\n    Note that ``__repr__`` is still affected by setting ``__str__``\n    because the width of each array element in the returned string becomes\n    equal to the length of the result of ``__str__()``.\n\n    >>> x = np.arange(4)\n    >>> np.set_string_function(lambda x:'random', repr=False)\n    >>> x.__str__()\n    'random'\n    >>> x.__repr__()\n    'array([     0,      1,      2,      3])'\n\n    "),
               ('numpy.core.numeric.indices',
                ['dimensions', 'dtype=int'],
                '\n    Return an array representing the indices of a grid.\n\n    Compute an array where the subarrays contain index values 0,1,...\n    varying only along the corresponding axis.\n\n    Parameters\n    ----------\n    dimensions : sequence of ints\n        The shape of the grid.\n    dtype : dtype, optional\n        Data type of the result.\n\n    Returns\n    -------\n    grid : ndarray\n        The array of grid indices,\n        ``grid.shape = (len(dimensions),) + tuple(dimensions)``.\n\n    See Also\n    --------\n    mgrid, meshgrid\n\n    Notes\n    -----\n    The output shape is obtained by prepending the number of dimensions\n    in front of the tuple of dimensions, i.e. if `dimensions` is a tuple\n    ``(r0, ..., rN-1)`` of length ``N``, the output shape is\n    ``(N,r0,...,rN-1)``.\n\n    The subarrays ``grid[k]`` contains the N-D array of indices along the\n    ``k-th`` axis. Explicitly::\n\n        grid[k,i0,i1,...,iN-1] = ik\n\n    Examples\n    --------\n    >>> grid = np.indices((2, 3))\n    >>> grid.shape\n    (2, 2, 3)\n    >>> grid[0]        # row indices\n    array([[0, 0, 0],\n           [1, 1, 1]])\n    >>> grid[1]        # column indices\n    array([[0, 1, 2],\n           [0, 1, 2]])\n\n    The indices can be used as an index into an array.\n\n    >>> x = np.arange(20).reshape(5, 4)\n    >>> row, col = np.indices((2, 3))\n    >>> x[row, col]\n    array([[0, 1, 2],\n           [4, 5, 6]])\n\n    Note that it would be more straightforward in the above example to\n    extract the required elements directly with ``x[:2, :3]``.\n\n    '),
               ('numpy.core.numeric.fromfunction',
                ['function', 'shape', '**kwargs'],
                '\n    Construct an array by executing a function over each coordinate.\n\n    The resulting array therefore has a value ``fn(x, y, z)`` at\n    coordinate ``(x, y, z)``.\n\n    Parameters\n    ----------\n    function : callable\n        The function is called with N parameters, each of which\n        represents the coordinates of the array varying along a\n        specific axis.  For example, if `shape` were ``(2, 2)``, then\n        the parameters would be two arrays, ``[[0, 0], [1, 1]]`` and\n        ``[[0, 1], [0, 1]]``.  `function` must be capable of operating on\n        arrays, and should return a scalar value.\n    shape : (N,) tuple of ints\n        Shape of the output array, which also determines the shape of\n        the coordinate arrays passed to `function`.\n    dtype : data-type, optional\n        Data-type of the coordinate arrays passed to `function`.\n        By default, `dtype` is float.\n\n    Returns\n    -------\n    out : any\n        The result of the call to `function` is passed back directly.\n        Therefore the type and shape of `out` is completely determined by\n        `function`.\n\n    See Also\n    --------\n    indices, meshgrid\n\n    Notes\n    -----\n    Keywords other than `shape` and `dtype` are passed to `function`.\n\n    Examples\n    --------\n    >>> np.fromfunction(lambda i, j: i == j, (3, 3), dtype=int)\n    array([[ True, False, False],\n           [False,  True, False],\n           [False, False,  True]], dtype=bool)\n\n    >>> np.fromfunction(lambda i, j: i + j, (3, 3), dtype=int)\n    array([[0, 1, 2],\n           [1, 2, 3],\n           [2, 3, 4]])\n\n    '),
               ('numpy.core.numeric.isscalar',
                ['num'],
                '\n    Returns True if the type of `num` is a scalar type.\n\n    Parameters\n    ----------\n    num : any\n        Input argument, can be of any type and shape.\n\n    Returns\n    -------\n    val : bool\n        True if `num` is a scalar type, False if it is not.\n\n    Examples\n    --------\n    >>> np.isscalar(3.1)\n    True\n    >>> np.isscalar([3.1])\n    False\n    >>> np.isscalar(False)\n    True\n\n    '),
               ('numpy.core.numeric.binary_repr',
                ['num', 'width=None'],
                '\n    Return the binary representation of the input number as a string.\n\n    For negative numbers, if width is not given, a minus sign is added to the\n    front. If width is given, the two\'s complement of the number is\n    returned, with respect to that width.\n\n    In a two\'s-complement system negative numbers are represented by the two\'s\n    complement of the absolute value. This is the most common method of\n    representing signed integers on computers [1]_. A N-bit two\'s-complement\n    system can represent every integer in the range\n    :math:`-2^{N-1}` to :math:`+2^{N-1}-1`.\n\n    Parameters\n    ----------\n    num : int\n        Only an integer decimal number can be used.\n    width : int, optional\n        The length of the returned string if `num` is positive, the length of\n        the two\'s complement if `num` is negative.\n\n    Returns\n    -------\n    bin : str\n        Binary representation of `num` or two\'s complement of `num`.\n\n    See Also\n    --------\n    base_repr: Return a string representation of a number in the given base\n               system.\n\n    Notes\n    -----\n    `binary_repr` is equivalent to using `base_repr` with base 2, but about 25x\n    faster.\n\n    References\n    ----------\n    .. [1] Wikipedia, "Two\'s complement",\n        http://en.wikipedia.org/wiki/Two\'s_complement\n\n    Examples\n    --------\n    >>> np.binary_repr(3)\n    \'11\'\n    >>> np.binary_repr(-3)\n    \'-11\'\n    >>> np.binary_repr(3, width=4)\n    \'0011\'\n\n    The two\'s complement is returned when the input number is negative and\n    width is specified:\n\n    >>> np.binary_repr(-3, width=4)\n    \'1101\'\n\n    '),
               ('numpy.core.numeric.base_repr',
                ['number', 'base=2', 'padding=0'],
                "\n    Return a string representation of a number in the given base system.\n\n    Parameters\n    ----------\n    number : int\n        The value to convert. Only positive values are handled.\n    base : int, optional\n        Convert `number` to the `base` number system. The valid range is 2-36,\n        the default value is 2.\n    padding : int, optional\n        Number of zeros padded on the left. Default is 0 (no padding).\n\n    Returns\n    -------\n    out : str\n        String representation of `number` in `base` system.\n\n    See Also\n    --------\n    binary_repr : Faster version of `base_repr` for base 2.\n\n    Examples\n    --------\n    >>> np.base_repr(5)\n    '101'\n    >>> np.base_repr(6, 5)\n    '11'\n    >>> np.base_repr(7, base=5, padding=3)\n    '00012'\n\n    >>> np.base_repr(10, base=16)\n    'A'\n    >>> np.base_repr(32, base=16)\n    '20'\n\n    "),
               ('numpy.core.numeric.load',
                ['file'],
                '\n    Wrapper around cPickle.load which accepts either a file-like object or\n    a filename.\n\n    Note that the NumPy binary format is not based on pickle/cPickle anymore.\n    For details on the preferred way of loading and saving files, see `load`\n    and `save`.\n\n    See Also\n    --------\n    load, save\n\n    '),
               ('numpy.core.numeric._maketup', ['descr', 'val'], ''),
               ('numpy.core.numeric.ones',
                ['shape', 'dtype=None', "order='C'"],
                '\n    Return a new array of given shape and type, filled with ones.\n\n    Please refer to the documentation for `zeros` for further details.\n\n    See Also\n    --------\n    zeros, ones_like\n\n    Examples\n    --------\n    >>> np.ones(5)\n    array([ 1.,  1.,  1.,  1.,  1.])\n\n    >>> np.ones((5,), dtype=np.int)\n    array([1, 1, 1, 1, 1])\n\n    >>> np.ones((2, 1))\n    array([[ 1.],\n           [ 1.]])\n\n    >>> s = (2,2)\n    >>> np.ones(s)\n    array([[ 1.,  1.],\n           [ 1.,  1.]])\n\n    '),
               ('numpy.core.numeric.identity',
                ['n', 'dtype=None'],
                '\n    Return the identity array.\n\n    The identity array is a square array with ones on\n    the main diagonal.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows (and columns) in `n` x `n` output.\n    dtype : data-type, optional\n        Data-type of the output.  Defaults to ``float``.\n\n    Returns\n    -------\n    out : ndarray\n        `n` x `n` array with its main diagonal set to one,\n        and all other elements 0.\n\n    Examples\n    --------\n    >>> np.identity(3)\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n\n    '),
               ('numpy.core.numeric.allclose',
                ['a', 'b', 'rtol=1e-05', 'atol=1e-08'],
                '\n    Returns True if two arrays are element-wise equal within a tolerance.\n\n    The tolerance values are positive, typically very small numbers.  The\n    relative difference (`rtol` * abs(`b`)) and the absolute difference\n    `atol` are added together to compare against the absolute difference\n    between `a` and `b`.\n\n    If either array contains one or more NaNs, False is returned.\n    Infs are treated as equal if they are in the same place and of the same\n    sign in both arrays.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    rtol : float\n        The relative tolerance parameter (see Notes).\n    atol : float\n        The absolute tolerance parameter (see Notes).\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance; False otherwise.\n\n    See Also\n    --------\n    all, any, alltrue, sometrue\n\n    Notes\n    -----\n    If the following equation is element-wise True, then allclose returns\n    True.\n\n     absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\n\n    The above equation is not symmetric in `a` and `b`, so that\n    `allclose(a, b)` might be different from `allclose(b, a)` in\n    some rare cases.\n\n    Examples\n    --------\n    >>> np.allclose([1e10,1e-7], [1.00001e10,1e-8])\n    False\n    >>> np.allclose([1e10,1e-8], [1.00001e10,1e-9])\n    True\n    >>> np.allclose([1e10,1e-8], [1.0001e10,1e-9])\n    False\n    >>> np.allclose([1.0, np.nan], [1.0, np.nan])\n    False\n\n    '),
               ('numpy.core.numeric.array_equal',
                ['a1', 'a2'],
                '\n    True if two arrays have the same shape and elements, False otherwise.\n\n    Parameters\n    ----------\n    a1, a2 : array_like\n        Input arrays.\n\n    Returns\n    -------\n    b : bool\n        Returns True if the arrays are equal.\n\n    See Also\n    --------\n    allclose: Returns True if two arrays are element-wise equal within a\n              tolerance.\n    array_equiv: Returns True if input arrays are shape consistent and all\n                 elements equal.\n\n    Examples\n    --------\n    >>> np.array_equal([1, 2], [1, 2])\n    True\n    >>> np.array_equal(np.array([1, 2]), np.array([1, 2]))\n    True\n    >>> np.array_equal([1, 2], [1, 2, 3])\n    False\n    >>> np.array_equal([1, 2], [1, 4])\n    False\n\n    '),
               ('numpy.core.numeric.array_equiv',
                ['a1', 'a2'],
                '\n    Returns True if input arrays are shape consistent and all elements equal.\n\n    Shape consistent means they are either the same shape, or one input array\n    can be broadcasted to create the same shape as the other one.\n\n    Parameters\n    ----------\n    a1, a2 : array_like\n        Input arrays.\n\n    Returns\n    -------\n    out : bool\n        True if equivalent, False otherwise.\n\n    Examples\n    --------\n    >>> np.array_equiv([1, 2], [1, 2])\n    True\n    >>> np.array_equiv([1, 2], [1, 3])\n    False\n\n    Showing the shape equivalence:\n\n    >>> np.array_equiv([1, 2], [[1, 2], [1, 2]])\n    True\n    >>> np.array_equiv([1, 2], [[1, 2, 1, 2], [1, 2, 1, 2]])\n    False\n\n    >>> np.array_equiv([1, 2], [[1, 2], [1, 3]])\n    False\n\n    '),
               ('numpy.core.numeric.seterr',
                ['all=None', 'divide=None', 'over=None', 'under=None', 'invalid=None'],
                '\n    Set how floating-point errors are handled.\n\n    Note that operations on integer scalar types (such as `int16`) are\n    handled like floating point, and are affected by these settings.\n\n    Parameters\n    ----------\n    all : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Set treatment for all types of floating-point errors at once:\n\n        - ignore: Take no action when the exception occurs.\n        - warn: Print a `RuntimeWarning` (via the Python `warnings` module).\n        - raise: Raise a `FloatingPointError`.\n        - call: Call a function specified using the `seterrcall` function.\n        - print: Print a warning directly to ``stdout``.\n        - log: Record error in a Log object specified by `seterrcall`.\n\n        The default is not to change the current behavior.\n    divide : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for division by zero.\n    over : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for floating-point overflow.\n    under : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for floating-point underflow.\n    invalid : {\'ignore\', \'warn\', \'raise\', \'call\', \'print\', \'log\'}, optional\n        Treatment for invalid floating-point operation.\n\n    Returns\n    -------\n    old_settings : dict\n        Dictionary containing the old settings.\n\n    See also\n    --------\n    seterrcall : Set a callback function for the \'call\' mode.\n    geterr, geterrcall\n\n    Notes\n    -----\n    The floating-point exceptions are defined in the IEEE 754 standard [1]:\n\n    - Division by zero: infinite result obtained from finite numbers.\n    - Overflow: result too large to be expressed.\n    - Underflow: result so close to zero that some precision\n      was lost.\n    - Invalid operation: result is not an expressible number, typically\n      indicates that a NaN was produced.\n\n    .. [1] http://en.wikipedia.org/wiki/IEEE_754\n\n    Examples\n    --------\n    >>> old_settings = np.seterr(all=\'ignore\')  #seterr to known value\n    >>> np.seterr(over=\'raise\')\n    {\'over\': \'ignore\', \'divide\': \'ignore\', \'invalid\': \'ignore\',\n     \'under\': \'ignore\'}\n    >>> np.seterr(all=\'ignore\')  # reset to default\n    {\'over\': \'raise\', \'divide\': \'ignore\', \'invalid\': \'ignore\', \'under\': \'ignore\'}\n\n    >>> np.int16(32000) * np.int16(3)\n    30464\n    >>> old_settings = np.seterr(all=\'warn\', over=\'raise\')\n    >>> np.int16(32000) * np.int16(3)\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n    FloatingPointError: overflow encountered in short_scalars\n\n    >>> old_settings = np.seterr(all=\'print\')\n    >>> np.geterr()\n    {\'over\': \'print\', \'divide\': \'print\', \'invalid\': \'print\', \'under\': \'print\'}\n    >>> np.int16(32000) * np.int16(3)\n    Warning: overflow encountered in short_scalars\n    30464\n\n    '),
               ('numpy.core.numeric.geterr',
                [],
                '\n    Get the current way of handling floating-point errors.\n\n    Returns\n    -------\n    res : dict\n        A dictionary with keys "divide", "over", "under", and "invalid",\n        whose values are from the strings "ignore", "print", "log", "warn",\n        "raise", and "call". The keys represent possible floating-point\n        exceptions, and the values define how these exceptions are handled.\n\n    See Also\n    --------\n    geterrcall, seterr, seterrcall\n\n    Notes\n    -----\n    For complete documentation of the types of floating-point exceptions and\n    treatment options, see `seterr`.\n\n    Examples\n    --------\n    >>> np.geterr()\n    {\'over\': \'warn\', \'divide\': \'warn\', \'invalid\': \'warn\',\n    \'under\': \'ignore\'}\n    >>> np.arange(3.) / np.arange(3.)\n    array([ NaN,   1.,   1.])\n\n    >>> oldsettings = np.seterr(all=\'warn\', over=\'raise\')\n    >>> np.geterr()\n    {\'over\': \'raise\', \'divide\': \'warn\', \'invalid\': \'warn\', \'under\': \'warn\'}\n    >>> np.arange(3.) / np.arange(3.)\n    __main__:1: RuntimeWarning: invalid value encountered in divide\n    array([ NaN,   1.,   1.])\n\n    '),
               ('numpy.core.numeric.setbufsize',
                ['size'],
                '\n    Set the size of the buffer used in ufuncs.\n\n    Parameters\n    ----------\n    size : int\n        Size of buffer.\n\n    '),
               ('numpy.core.numeric.getbufsize',
                [],
                'Return the size of the buffer used in ufuncs.\n    '),
               ('numpy.core.numeric.seterrcall',
                ['func'],
                '\n    Set the floating-point error callback function or log object.\n\n    There are two ways to capture floating-point error messages.  The first\n    is to set the error-handler to \'call\', using `seterr`.  Then, set\n    the function to call using this function.\n\n    The second is to set the error-handler to \'log\', using `seterr`.\n    Floating-point errors then trigger a call to the \'write\' method of\n    the provided object.\n\n    Parameters\n    ----------\n    func : callable f(err, flag) or object with write method\n        Function to call upon floating-point errors (\'call\'-mode) or\n        object whose \'write\' method is used to log such message (\'log\'-mode).\n\n        The call function takes two arguments. The first is the\n        type of error (one of "divide", "over", "under", or "invalid"),\n        and the second is the status flag.  The flag is a byte, whose\n        least-significant bits indicate the status::\n\n          [0 0 0 0 invalid over under invalid]\n\n        In other words, ``flags = divide + 2*over + 4*under + 8*invalid``.\n\n        If an object is provided, its write method should take one argument,\n        a string.\n\n    Returns\n    -------\n    h : callable, log instance or None\n        The old error handler.\n\n    See Also\n    --------\n    seterr, geterr, geterrcall\n\n    Examples\n    --------\n    Callback upon error:\n\n    >>> def err_handler(type, flag):\n    ...     print "Floating point error (%s), with flag %s" % (type, flag)\n    ...\n\n    >>> saved_handler = np.seterrcall(err_handler)\n    >>> save_err = np.seterr(all=\'call\')\n\n    >>> np.array([1, 2, 3]) / 0.0\n    Floating point error (divide by zero), with flag 1\n    array([ Inf,  Inf,  Inf])\n\n    >>> np.seterrcall(saved_handler)\n    <function err_handler at 0x...>\n    >>> np.seterr(**save_err)\n    {\'over\': \'call\', \'divide\': \'call\', \'invalid\': \'call\', \'under\': \'call\'}\n\n    Log error message:\n\n    >>> class Log(object):\n    ...     def write(self, msg):\n    ...         print "LOG: %s" % msg\n    ...\n\n    >>> log = Log()\n    >>> saved_handler = np.seterrcall(log)\n    >>> save_err = np.seterr(all=\'log\')\n\n    >>> np.array([1, 2, 3]) / 0.0\n    LOG: Warning: divide by zero encountered in divide\n    <BLANKLINE>\n    array([ Inf,  Inf,  Inf])\n\n    >>> np.seterrcall(saved_handler)\n    <__main__.Log object at 0x...>\n    >>> np.seterr(**save_err)\n    {\'over\': \'log\', \'divide\': \'log\', \'invalid\': \'log\', \'under\': \'log\'}\n\n    '),
               ('numpy.core.numeric.geterrcall',
                [],
                '\n    Return the current callback function used on floating-point errors.\n\n    When the error handling for a floating-point error (one of "divide",\n    "over", "under", or "invalid") is set to \'call\' or \'log\', the function\n    that is called or the log instance that is written to is returned by\n    `geterrcall`. This function or log instance has been set with\n    `seterrcall`.\n\n    Returns\n    -------\n    errobj : callable, log instance or None\n        The current error handler. If no handler was set through `seterrcall`,\n        ``None`` is returned.\n\n    See Also\n    --------\n    seterrcall, seterr, geterr\n\n    Notes\n    -----\n    For complete documentation of the types of floating-point exceptions and\n    treatment options, see `seterr`.\n\n    Examples\n    --------\n    >>> np.geterrcall()  # we did not yet set a handler, returns None\n\n    >>> oldsettings = np.seterr(all=\'call\')\n    >>> def err_handler(type, flag):\n    ...     print "Floating point error (%s), with flag %s" % (type, flag)\n    >>> oldhandler = np.seterrcall(err_handler)\n    >>> np.array([1, 2, 3]) / 0.0\n    Floating point error (divide by zero), with flag 1\n    array([ Inf,  Inf,  Inf])\n\n    >>> cur_handler = np.geterrcall()\n    >>> cur_handler is err_handler\n    True\n\n    '),
               ('numpy.core.numeric._setdef', [], ''),
               ('test_numerictypes.normalize_descr',
                ['descr'],
                'Normalize a description adding the platform byteorder.'),
               ('test_print.check_float_type', ['tp'], ''),
               ('test_print.test_float_types',
                [],
                " Check formatting.\n\n        This is only for the str function, and only for simple types.\n        The precision of np.float and np.longdouble aren't the same as the\n        python float precision.\n\n    "),
               ('test_print.check_nan_inf_float', ['tp'], ''),
               ('test_print.test_nan_inf_float',
                [],
                " Check formatting of nan & inf.\n\n        This is only for the str function, and only for simple types.\n        The precision of np.float and np.longdouble aren't the same as the\n        python float precision.\n\n    "),
               ('test_print.check_complex_type', ['tp'], ''),
               ('test_print.test_complex_types',
                [],
                "Check formatting of complex types.\n\n        This is only for the str function, and only for simple types.\n        The precision of np.float and np.longdouble aren't the same as the\n        python float precision.\n\n    "),
               ('test_print.test_complex_inf_nan',
                [],
                'Check inf/nan formatting of complex types.'),
               ('test_print._check_complex_inf_nan', ['c', 's', 'dtype'], ''),
               ('test_print._test_redirected_print', ['x', 'tp', 'ref=None'], ''),
               ('test_print.check_float_type_print', ['tp'], ''),
               ('test_print.check_complex_type_print', ['tp'], ''),
               ('test_print.test_float_type_print', [], 'Check formatting when using print '),
               ('test_print.test_complex_type_print', [], 'Check formatting when using print '),
               ('test_print.test_scalar_format',
                [],
                'Test the str.format method with NumPy scalar types'),
               ('test_print.in_foreign_locale',
                ['func'],
                "\n    Swap LC_NUMERIC locale to one in which the decimal point is ',' and not '.'\n    If not possible, raise nose.SkipTest\n\n    "),
               ('test_print.test_locale_single', [], ''),
               ('test_print.test_locale_double', [], ''),
               ('test_print.test_locale_longdouble', [], ''),
               ('test_blasdot.test_blasdot_used', [], ''),
               ('test_blasdot.test_dot_2args', [], ''),
               ('test_blasdot.test_dot_3args', [], ''),
               ('test_blasdot.test_dot_3args_errors', [], ''),
               ('test_umath_complex.platform_skip', ['func'], ''),
               ('test_umath_complex.check_real_value', ['f', 'x1', 'y1', 'x', 'exact=True'], ''),
               ('test_umath_complex.check_complex_value',
                ['f', 'x1', 'y1', 'x2', 'y2', 'exact=True'],
                ''),
               ('test_api.test_fastCopyAndTranspose', [], ''),
               ('test_records.test_find_duplicate', [], ''),
               ('test_half.assert_raises_fpe', ['strmatch', 'callable', '*args', '**kwargs'], ''),
               ('test_unicode.buffer_length', ['arr'], ''),
               ('test_unicode.buffer_length', ['arr'], ''),
               ('test_numeric.assert_array_strict_equal', ['x', 'y'], ''),
               ('test_dtype.assert_dtype_equal', ['a', 'b'], ''),
               ('test_dtype.assert_dtype_not_equal', ['a', 'b'], ''),
               ('test_multiarray.can_use_decimal', [], ''),
               ('test_getlimits.test_instances', [], ''),
               ('test_iterator.iter_multi_index', ['i'], ''),
               ('test_iterator.iter_indices', ['i'], ''),
               ('test_iterator.iter_iterindices', ['i'], ''),
               ('test_iterator.test_iter_refcount', [], ''),
               ('test_iterator.test_iter_best_order', [], ''),
               ('test_iterator.test_iter_c_order', [], ''),
               ('test_iterator.test_iter_f_order', [], ''),
               ('test_iterator.test_iter_c_or_f_order', [], ''),
               ('test_iterator.test_iter_best_order_multi_index_1d', [], ''),
               ('test_iterator.test_iter_best_order_multi_index_2d', [], ''),
               ('test_iterator.test_iter_best_order_multi_index_3d', [], ''),
               ('test_iterator.test_iter_best_order_c_index_1d', [], ''),
               ('test_iterator.test_iter_best_order_c_index_2d', [], ''),
               ('test_iterator.test_iter_best_order_c_index_3d', [], ''),
               ('test_iterator.test_iter_best_order_f_index_1d', [], ''),
               ('test_iterator.test_iter_best_order_f_index_2d', [], ''),
               ('test_iterator.test_iter_best_order_f_index_3d', [], ''),
               ('test_iterator.test_iter_no_inner_full_coalesce', [], ''),
               ('test_iterator.test_iter_no_inner_dim_coalescing', [], ''),
               ('test_iterator.test_iter_dim_coalescing', [], ''),
               ('test_iterator.test_iter_broadcasting', [], ''),
               ('test_iterator.test_iter_itershape', [], ''),
               ('test_iterator.test_iter_broadcasting_errors', [], ''),
               ('test_iterator.test_iter_flags_errors', [], ''),
               ('test_iterator.test_iter_slice', [], ''),
               ('test_iterator.test_iter_nbo_align_contig', [], ''),
               ('test_iterator.test_iter_array_cast', [], ''),
               ('test_iterator.test_iter_array_cast_errors', [], ''),
               ('test_iterator.test_iter_scalar_cast', [], ''),
               ('test_iterator.test_iter_scalar_cast_errors', [], ''),
               ('test_iterator.test_iter_object_arrays_basic', [], ''),
               ('test_iterator.test_iter_object_arrays_conversions', [], ''),
               ('test_iterator.test_iter_common_dtype', [], ''),
               ('test_iterator.test_iter_op_axes', [], ''),
               ('test_iterator.test_iter_op_axes_errors', [], ''),
               ('test_iterator.test_iter_copy', [], ''),
               ('test_iterator.test_iter_allocate_output_simple', [], ''),
               ('test_iterator.test_iter_allocate_output_buffered_readwrite', [], ''),
               ('test_iterator.test_iter_allocate_output_itorder', [], ''),
               ('test_iterator.test_iter_allocate_output_opaxes', [], ''),
               ('test_iterator.test_iter_allocate_output_types_promotion', [], ''),
               ('test_iterator.test_iter_allocate_output_types_byte_order', [], ''),
               ('test_iterator.test_iter_allocate_output_types_scalar', [], ''),
               ('test_iterator.test_iter_allocate_output_subtype', [], ''),
               ('test_iterator.test_iter_allocate_output_errors', [], ''),
               ('test_iterator.test_iter_remove_axis', [], ''),
               ('test_iterator.test_iter_remove_multi_index_inner_loop', [], ''),
               ('test_iterator.test_iter_iterindex', [], ''),
               ('test_iterator.test_iter_iterrange', [], ''),
               ('test_iterator.test_iter_buffering', [], ''),
               ('test_iterator.test_iter_write_buffering', [], ''),
               ('test_iterator.test_iter_buffering_delayed_alloc', [], ''),
               ('test_iterator.test_iter_buffered_cast_simple', [], ''),
               ('test_iterator.test_iter_buffered_cast_byteswapped', [], ''),
               ('test_iterator.test_iter_buffered_cast_byteswapped_complex', [], ''),
               ('test_iterator.test_iter_buffered_cast_structured_type', [], ''),
               ('test_iterator.test_iter_buffered_cast_subarray', [], ''),
               ('test_iterator.test_iter_buffering_badwriteback', [], ''),
               ('test_iterator.test_iter_buffering_string', [], ''),
               ('test_iterator.test_iter_buffering_growinner', [], ''),
               ('test_iterator.test_iter_no_broadcast', [], ''),
               ('test_iterator.test_iter_nested_iters_basic', [], ''),
               ('test_iterator.test_iter_nested_iters_reorder', [], ''),
               ('test_iterator.test_iter_nested_iters_flip_axes', [], ''),
               ('test_iterator.test_iter_nested_iters_broadcast', [], ''),
               ('test_iterator.test_iter_nested_iters_dtype_copy', [], ''),
               ('test_iterator.test_iter_nested_iters_dtype_buffered', [], ''),
               ('test_iterator.test_iter_reduction_error', [], ''),
               ('test_iterator.test_iter_reduction', [], ''),
               ('test_iterator.test_iter_buffering_reduction', [], ''),
               ('test_iterator.test_iter_buffering_reduction_reuse_reduce_loops', [], ''),
               ('test_defchararray.test_empty_indexing', [], 'Regression test for ticket 1948.'),
               ('numpy.numarray.util.handleError',
                ['errorStatus', 'sourcemsg'],
                'Take error status and use error mode to handle it.'),
               ('numpy.numarray.util.get_numarray_include_dirs', [], ''),
               ('numpy.numarray.linear_algebra.qr_decomposition', ['a', "mode='full'"], ''),
               ('numpy.numarray.matrix.Matrix',
                ['data', 'typecode=None', 'copy=1', 'savespace=0'],
                ''),
               ('numpy.numarray.alter_code2.makenewfile', ['name', 'filestr'], ''),
               ('numpy.numarray.alter_code2.getandcopy', ['name'], ''),
               ('numpy.numarray.alter_code2.convertfile',
                ['filename'],
                'Convert the filename given from using Numeric to using NumPy\n\n    Copies the file to filename.orig and then over-writes the file\n    with the updated code\n    '),
               ('numpy.numarray.alter_code2.fromargs', ['args'], ''),
               ('numpy.numarray.alter_code2.convertall',
                ['direc=os.path.curdir'],
                'Convert all .py files to use NumPy (from Numeric) in the directory given\n\n    For each file, a backup of <usesnumeric>.py is made as\n    <usesnumeric>.py.orig.  A new file named <usesnumeric>.py\n    is then written with the updated code.\n    '),
               ('numpy.numarray.alter_code2._func', ['arg', 'dirname', 'fnames'], ''),
               ('numpy.numarray.alter_code2.converttree',
                ['direc=os.path.curdir'],
                'Convert all .py files in the tree given\n\n    '),
               ('numpy.numarray.alter_code1.changeimports', ['fstr', 'name', 'newname'], ''),
               ('numpy.numarray.alter_code1.addimport', ['astr'], ''),
               ('numpy.numarray.alter_code1.replaceattr', ['astr'], ''),
               ('numpy.numarray.alter_code1.replaceother', ['astr'], ''),
               ('numpy.numarray.alter_code1.fromstr', ['filestr'], ''),
               ('numpy.numarray.alter_code1.makenewfile', ['name', 'filestr'], ''),
               ('numpy.numarray.alter_code1.convertfile',
                ['filename', 'orig=1'],
                'Convert the filename given from using Numarray to using NumPy\n\n    Copies the file to filename.orig and then over-writes the file\n    with the updated code\n    '),
               ('numpy.numarray.alter_code1.fromargs', ['args'], ''),
               ('numpy.numarray.alter_code1.convertall',
                ['direc=os.path.curdir', 'orig=1'],
                'Convert all .py files to use numpy.oldnumeric (from Numeric) in the directory given\n\n    For each file, a backup of <usesnumeric>.py is made as\n    <usesnumeric>.py.orig.  A new file named <usesnumeric>.py\n    is then written with the updated code.\n    '),
               ('numpy.numarray.alter_code1.convertsrc',
                ['direc=os.path.curdir', 'ext=None', 'orig=1'],
                'Replace Numeric/arrayobject.h with numpy/oldnumeric.h in all files in the\n    directory with extension give by list ext (if ext is None, then all files are\n    replaced).'),
               ('numpy.numarray.alter_code1._func', ['arg', 'dirname', 'fnames'], ''),
               ('numpy.numarray.alter_code1.converttree',
                ['direc=os.path.curdir'],
                'Convert all .py files in the tree given\n\n    '),
               ('numpy.numarray.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.numarray.session._foo', [], ''),
               ('numpy.numarray.session._update_proxy_types',
                [],
                'Suppress warnings for known un-picklables with working proxies.'),
               ('numpy.numarray.session._unknown',
                ['_type'],
                "returns True iff _type isn't known as OK to proxy"),
               ('numpy.numarray.session._caller',
                [],
                "caller() returns the frame object of the function's caller."),
               ('numpy.numarray.session._callers_globals',
                [],
                'callers_globals() returns the global dictionary of the caller.'),
               ('numpy.numarray.session._callers_modules',
                [],
                "returns a list containing the names of all the modules in the caller's\n    global namespace."),
               ('numpy.numarray.session._errout', ['*args'], ''),
               ('numpy.numarray.session._verbose', ['*args'], ''),
               ('numpy.numarray.session._loadmodule', ['module'], ''),
               ('numpy.numarray.session._locate', ['modules', 'object'], ''),
               ('numpy.numarray.session.save',
                ['variables=None', 'file=SAVEFILE', 'dictionary=None', 'verbose=False'],
                'saves variables from a numpy session to a file.  Variables\n    which won\'t pickle are "proxied" if possible.\n\n    \'variables\'       a string of comma seperated variables: e.g. "a,b,c"\n                      Defaults to dictionary.keys().\n\n    \'file\'            a filename or file object for the session file.\n\n    \'dictionary\'      the dictionary in which to look up the variables.\n                      Defaults to the caller\'s globals()\n\n    \'verbose\'         print additional debug output when True.\n    '),
               ('numpy.numarray.session.load',
                ['variables=None', 'file=SAVEFILE', 'dictionary=None', 'verbose=False'],
                'load a numpy session from a file and store the specified\n    \'variables\' into \'dictionary\'.\n\n    \'variables\'       a string of comma seperated variables: e.g. "a,b,c"\n                      Defaults to dictionary.keys().\n\n    \'file\'            a filename or file object for the session file.\n\n    \'dictionary\'      the dictionary in which to look up the variables.\n                      Defaults to the caller\'s globals()\n\n    \'verbose\'         print additional debug output when True.\n    '),
               ('numpy.numarray.session.test', [], ''),
               ('numpy.numarray.numerictypes.IsType',
                ['rep'],
                "Determines whether the given object or string, 'rep', represents\n    a numarray type."),
               ('numpy.numarray.numerictypes._register',
                ['name', 'type', 'force=0'],
                'Register the type object.  Raise an exception if it is already registered\n    unless force is true.\n    '),
               ('numpy.numarray.numerictypes._scipy_alias', ['scipy_type', 'numarray_type'], ''),
               ('numpy.numarray.numerictypes._initGenericCoercions', [], ''),
               ('numpy.numarray.numerictypes.MaximumType',
                ['t'],
                "returns the type of highest precision of the same general kind as 't'"),
               ('numpy.numarray.numerictypes.getType',
                ['type'],
                'Return the numeric type object for type\n\n    type may be the name of a type object or the actual object\n    '),
               ('numpy.numarray.numerictypes.typefrom', ['obj'], ''),
               ('numpy.numarray.functions.type2dtype',
                ['typecode', 'type', 'dtype', 'use_default=True'],
                ''),
               ('numpy.numarray.functions.fromfunction',
                ['shape', 'dimensions', 'type=None', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.numarray.functions.ones',
                ['shape', 'type=None', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.numarray.functions.zeros',
                ['shape', 'type=None', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.numarray.functions.where',
                ['condition', 'x=None', 'y=None', 'out=None'],
                ''),
               ('numpy.numarray.functions.indices', ['shape', 'type=None'], ''),
               ('numpy.numarray.functions.arange',
                ['a1',
                 'a2=None',
                 'stride=1',
                 'type=None',
                 'shape=None',
                 'typecode=None',
                 'dtype=None'],
                ''),
               ('numpy.numarray.functions.alltrue', ['x', 'axis=0'], ''),
               ('numpy.numarray.functions.and_', ['a', 'b'], 'Same as a & b\n    '),
               ('numpy.numarray.functions.divide_remainder', ['a', 'b'], ''),
               ('numpy.numarray.functions.around', ['array', 'digits=0', 'output=None'], ''),
               ('numpy.numarray.functions.array2list', ['arr'], ''),
               ('numpy.numarray.functions.choose',
                ['selector', 'population', 'outarr=None', 'clipmode=RAISE'],
                ''),
               ('numpy.numarray.functions.compress', ['condition', 'a', 'axis=0'], ''),
               ('numpy.numarray.functions.explicit_type', ['a'], ''),
               ('numpy.numarray.functions.flush_caches', [], ''),
               ('numpy.numarray.functions.fromfile',
                ['infile',
                 'type=None',
                 'shape=None',
                 'sizing=STRICT',
                 'typecode=None',
                 'dtype=None'],
                ''),
               ('numpy.numarray.functions.fromstring',
                ['datastring', 'type=None', 'shape=None', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.numarray.functions.fromlist',
                ['seq',
                 'type=None',
                 'shape=None',
                 'check_overflow=0',
                 'typecode=None',
                 'dtype=None'],
                ''),
               ('numpy.numarray.functions.array',
                ['sequence=None',
                 'typecode=None',
                 'copy=1',
                 'savespace=0',
                 'type=None',
                 'shape=None',
                 'dtype=None'],
                ''),
               ('numpy.numarray.functions.asarray',
                ['seq', 'type=None', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.numarray.functions.getTypeObject', ['sequence', 'type'], ''),
               ('numpy.numarray.functions.getShape', ['shape', '*args'], ''),
               ('numpy.numarray.functions.identity',
                ['n', 'type=None', 'typecode=None', 'dtype=None'],
                ''),
               ('numpy.numarray.functions.info', ['obj', 'output=sys.stdout', 'numpy=0'], ''),
               ('numpy.numarray.functions.put',
                ['array', 'indices', 'values', 'axis=0', 'clipmode=RAISE'],
                ''),
               ('numpy.numarray.functions.repeat', ['array', 'repeats', 'axis=0'], ''),
               ('numpy.numarray.functions.reshape', ['array', 'shape', '*args'], ''),
               ('numpy.numarray.functions.round', ['*args', '**keys'], ''),
               ('numpy.numarray.functions.sometrue', ['array', 'axis=0'], ''),
               ('numpy.numarray.functions.take',
                ['array', 'indices', 'axis=0', 'outarr=None', 'clipmode=RAISE'],
                ''),
               ('numpy.numarray.functions.tensormultiply', ['a1', 'a2'], ''),
               ('numpy.numarray.functions.cumsum',
                ['a1', 'axis=0', 'out=None', 'type=None', 'dim=0'],
                ''),
               ('numpy.numarray.functions.cumproduct',
                ['a1', 'axis=0', 'out=None', 'type=None', 'dim=0'],
                ''),
               ('numpy.numarray.functions.argmax', ['x', 'axis=-1'], ''),
               ('numpy.numarray.functions.argmin', ['x', 'axis=-1'], ''),
               ('numpy.numarray.functions.newobj', ['self', 'type'], ''),
               ('numpy.numarray.functions.togglebyteorder', ['self'], ''),
               ('numpy.numarray.functions.average',
                ['a', 'axis=0', 'weights=None', 'returned=0'],
                ''),
               ('numpy.numarray.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('test_matlib.test_empty', [], ''),
               ('test_matlib.test_ones', [], ''),
               ('test_matlib.test_zeros', [], ''),
               ('test_matlib.test_identity', [], ''),
               ('test_matlib.test_eye', [], ''),
               ('test_matlib.test_rand', [], ''),
               ('test_matlib.test_randn', [], ''),
               ('test_matlib.test_repmat', [], ''),
               ('numpy.matrixlib.defmatrix._eval', ['astr'], ''),
               ('numpy.matrixlib.defmatrix._eval', ['astr'], ''),
               ('numpy.matrixlib.defmatrix._convert_from_string', ['data'], ''),
               ('numpy.matrixlib.defmatrix.asmatrix',
                ['data', 'dtype=None'],
                '\n    Interpret the input as a matrix.\n\n    Unlike `matrix`, `asmatrix` does not make a copy if the input is already\n    a matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``.\n\n    Parameters\n    ----------\n    data : array_like\n        Input data.\n\n    Returns\n    -------\n    mat : matrix\n        `data` interpreted as a matrix.\n\n    Examples\n    --------\n    >>> x = np.array([[1, 2], [3, 4]])\n\n    >>> m = np.asmatrix(x)\n\n    >>> x[0,0] = 5\n\n    >>> m\n    matrix([[5, 2],\n            [3, 4]])\n\n    '),
               ('numpy.matrixlib.defmatrix.matrix_power',
                ['M', 'n'],
                '\n    Raise a square matrix to the (integer) power `n`.\n\n    For positive integers `n`, the power is computed by repeated matrix\n    squarings and matrix multiplications. If ``n == 0``, the identity matrix\n    of the same shape as M is returned. If ``n < 0``, the inverse\n    is computed and then raised to the ``abs(n)``.\n\n    Parameters\n    ----------\n    M : ndarray or matrix object\n        Matrix to be "powered."  Must be square, i.e. ``M.shape == (m, m)``,\n        with `m` a positive integer.\n    n : int\n        The exponent can be any integer or long integer, positive,\n        negative, or zero.\n\n    Returns\n    -------\n    M**n : ndarray or matrix object\n        The return value is the same shape and type as `M`;\n        if the exponent is positive or zero then the type of the\n        elements is the same as those of `M`. If the exponent is\n        negative the elements are floating-point.\n\n    Raises\n    ------\n    LinAlgError\n        If the matrix is not numerically invertible.\n\n    See Also\n    --------\n    matrix\n        Provides an equivalent function as the exponentiation operator\n        (``**``, not ``^``).\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> i = np.array([[0, 1], [-1, 0]]) # matrix equiv. of the imaginary unit\n    >>> LA.matrix_power(i, 3) # should = -i\n    array([[ 0, -1],\n           [ 1,  0]])\n    >>> LA.matrix_power(np.matrix(i), 3) # matrix arg returns matrix\n    matrix([[ 0, -1],\n            [ 1,  0]])\n    >>> LA.matrix_power(i, 0)\n    array([[1, 0],\n           [0, 1]])\n    >>> LA.matrix_power(i, -3) # should = 1/(-i) = i, but w/ f.p. elements\n    array([[ 0.,  1.],\n           [-1.,  0.]])\n\n    Somewhat more sophisticated example\n\n    >>> q = np.zeros((4, 4))\n    >>> q[0:2, 0:2] = -i\n    >>> q[2:4, 2:4] = i\n    >>> q # one of the three quarternion units not equal to 1\n    array([[ 0., -1.,  0.,  0.],\n           [ 1.,  0.,  0.,  0.],\n           [ 0.,  0.,  0.,  1.],\n           [ 0.,  0., -1.,  0.]])\n    >>> LA.matrix_power(q, 2) # = -np.eye(4)\n    array([[-1.,  0.,  0.,  0.],\n           [ 0., -1.,  0.,  0.],\n           [ 0.,  0., -1.,  0.],\n           [ 0.,  0.,  0., -1.]])\n\n    '),
               ('numpy.matrixlib.defmatrix._from_string', ['str', 'gdict', 'ldict'], ''),
               ('numpy.matrixlib.defmatrix.bmat',
                ['obj', 'ldict=None', 'gdict=None'],
                "\n    Build a matrix object from a string, nested sequence, or array.\n\n    Parameters\n    ----------\n    obj : str or array_like\n        Input data.  Names of variables in the current scope may be\n        referenced, even if `obj` is a string.\n\n    Returns\n    -------\n    out : matrix\n        Returns a matrix object, which is a specialized 2-D array.\n\n    See Also\n    --------\n    matrix\n\n    Examples\n    --------\n    >>> A = np.mat('1 1; 1 1')\n    >>> B = np.mat('2 2; 2 2')\n    >>> C = np.mat('3 4; 5 6')\n    >>> D = np.mat('7 8; 9 0')\n\n    All the following expressions construct the same block matrix:\n\n    >>> np.bmat([[A, B], [C, D]])\n    matrix([[1, 1, 2, 2],\n            [1, 1, 2, 2],\n            [3, 4, 7, 8],\n            [5, 6, 9, 0]])\n    >>> np.bmat(np.r_[np.c_[A, B], np.c_[C, D]])\n    matrix([[1, 1, 2, 2],\n            [1, 1, 2, 2],\n            [3, 4, 7, 8],\n            [5, 6, 9, 0]])\n    >>> np.bmat('A,B; C,D')\n    matrix([[1, 1, 2, 2],\n            [1, 1, 2, 2],\n            [3, 4, 7, 8],\n            [5, 6, 9, 0]])\n\n    "),
               ('numpy.matrixlib.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.matrixlib.setup.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.distutils.system_info.libpaths',
                ['paths', 'bits'],
                "Return a list of library paths valid on 32 or 64 bit systems.\n\n    Inputs:\n      paths : sequence\n        A sequence of strings (typically paths)\n      bits : int\n        An integer, the only valid values are 32 or 64.  A ValueError exception\n      is raised otherwise.\n\n    Examples:\n\n    Consider a list of directories\n    >>> paths = ['/usr/X11R6/lib','/usr/X11/lib','/usr/lib']\n\n    For a 32-bit platform, this is already valid:\n    >>> np.distutils.system_info.libpaths(paths,32)\n    ['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib']\n\n    On 64 bits, we prepend the '64' postfix\n    >>> np.distutils.system_info.libpaths(paths,64)\n    ['/usr/X11R6/lib64', '/usr/X11R6/lib', '/usr/X11/lib64', '/usr/X11/lib',\n    '/usr/lib64', '/usr/lib']\n    "),
               ('numpy.distutils.system_info.get_standard_file',
                ['fname'],
                "Returns a list of files named 'fname' from\n    1) System-wide directory (directory-location of this module)\n    2) Users HOME directory (os.environ['HOME'])\n    3) Local directory\n    "),
               ('numpy.distutils.system_info.get_info',
                ['name', 'notfound_action=0'],
                '\n    notfound_action:\n      0 - do nothing\n      1 - display warning message\n      2 - raise error\n    '),
               ('numpy.distutils.system_info.get_atlas_version', ['**config'], ''),
               ('numpy.distutils.system_info.combine_paths',
                ['*args', '**kws'],
                ' Return a list of existing paths composed by all combinations of\n        items from arguments.\n    '),
               ('numpy.distutils.system_info.dict_append', ['d', '**kws'], ''),
               ('numpy.distutils.system_info.parseCmdLine', ['argv=(None)'], ''),
               ('numpy.distutils.system_info.show_all', ['argv=None'], ''),
               ('numpy.distutils.log._fix_args', ['args', 'flag=1'], ''),
               ('numpy.distutils.log.set_threshold', ['level', 'force=False'], ''),
               ('numpy.distutils.log.set_verbosity', ['v', 'force=False'], ''),
               ('numpy.distutils.npy_pkg_config.parse_flags',
                ['line'],
                "\n    Parse a line from a config file containing compile flags.\n\n    Parameters\n    ----------\n    line : str\n        A single line containing one or more compile flags.\n\n    Returns\n    -------\n    d : dict\n        Dictionary of parsed flags, split into relevant categories.\n        These categories are the keys of `d`:\n\n        * 'include_dirs'\n        * 'library_dirs'\n        * 'libraries'\n        * 'macros'\n        * 'ignored'\n\n    "),
               ('numpy.distutils.npy_pkg_config._escape_backslash', ['val'], ''),
               ('numpy.distutils.npy_pkg_config.parse_meta', ['config'], ''),
               ('numpy.distutils.npy_pkg_config.parse_variables', ['config'], ''),
               ('numpy.distutils.npy_pkg_config.parse_sections', ['config'], ''),
               ('numpy.distutils.npy_pkg_config.pkg_to_filename', ['pkg_name'], ''),
               ('numpy.distutils.npy_pkg_config.parse_config', ['filename', 'dirs=None'], ''),
               ('numpy.distutils.npy_pkg_config._read_config_imp',
                ['filenames', 'dirs=None'],
                ''),
               ('numpy.distutils.npy_pkg_config.read_config',
                ['pkgname', 'dirs=None'],
                "\n    Return library info for a package from its configuration file.\n\n    Parameters\n    ----------\n    pkgname : str\n        Name of the package (should match the name of the .ini file, without\n        the extension, e.g. foo for the file foo.ini).\n    dirs : sequence, optional\n        If given, should be a sequence of directories - usually including\n        the NumPy base directory - where to look for npy-pkg-config files.\n\n    Returns\n    -------\n    pkginfo : class instance\n        The `LibraryInfo` instance containing the build information.\n\n    Raises\n    ------\n    PkgNotFound\n        If the package is not found.\n\n    See Also\n    --------\n    misc_util.get_info, misc_util.get_pkg_info\n\n    Examples\n    --------\n    >>> npymath_info = np.distutils.npy_pkg_config.read_config('npymath')\n    >>> type(npymath_info)\n    <class 'numpy.distutils.npy_pkg_config.LibraryInfo'>\n    >>> print npymath_info\n    Name: npymath\n    Description: Portable, core math library implementing C99 standard\n    Requires:\n    Version: 0.1  #random\n\n    "),
               ('numpy.distutils.core._dict_append', ['d', '**kws'], ''),
               ('numpy.distutils.core._command_line_ok',
                ['_cache=[]'],
                ' Return True if command line does not contain any\n    help or display requests.\n    '),
               ('numpy.distutils.core.get_distribution', ['always=False'], ''),
               ('numpy.distutils.core._exit_interactive_session', ['_cache=[]'], ''),
               ('numpy.distutils.core.setup', ['**attr'], ''),
               ('numpy.distutils.core._check_append_library', ['libraries', 'item'], ''),
               ('numpy.distutils.core._check_append_ext_library',
                ['libraries', 'lib_name', 'build_info'],
                ''),
               ('numpy.distutils.line_endings.dos2unix',
                ['file'],
                'Replace CRLF with LF in argument files.  Print names of changed files.'),
               ('numpy.distutils.line_endings.dos2unix_one_dir',
                ['modified_files', 'dir_name', 'file_names'],
                ''),
               ('numpy.distutils.line_endings.dos2unix_dir', ['dir_name'], ''),
               ('numpy.distutils.line_endings.unix2dos',
                ['file'],
                'Replace LF with CRLF in argument files.  Print names of changed files.'),
               ('numpy.distutils.line_endings.unix2dos_one_dir',
                ['modified_files', 'dir_name', 'file_names'],
                ''),
               ('numpy.distutils.line_endings.unix2dos_dir', ['dir_name'], ''),
               ('numpy.distutils.compat.get_exception', [], ''),
               ('numpy.distutils.conv_template.parse_structure',
                ['astr', 'level'],
                '\n    The returned line number is from the beginning of the string, starting\n    at zero. Returns an empty list if no loops found.\n\n    '),
               ('numpy.distutils.conv_template.paren_repl', ['obj'], ''),
               ('numpy.distutils.conv_template.parse_values', ['astr'], ''),
               ('numpy.distutils.conv_template.parse_loop_header',
                ['loophead'],
                "Find all named replacements in the header\n\n    Returns a list of dictionaries, one for each loop iteration,\n    where each key is a name to be substituted and the corresponding\n    value is the replacement string.\n\n    Also return a list of exclusions.  The exclusions are dictionaries\n     of key value pairs. There can be more than one exclusion.\n     [{'var1':'value1', 'var2', 'value2'[,...]}, ...]\n\n    "),
               ('numpy.distutils.conv_template.parse_string',
                ['astr', 'env', 'level', 'line'],
                ''),
               ('numpy.distutils.conv_template.process_str', ['astr'], ''),
               ('numpy.distutils.conv_template.resolve_includes', ['source'], ''),
               ('numpy.distutils.conv_template.process_file', ['source'], ''),
               ('numpy.distutils.conv_template.unique_key', ['adict'], ''),
               ('numpy.distutils.unixccompiler.UnixCCompiler__compile',
                ['self', 'obj', 'src', 'ext', 'cc_args', 'extra_postargs', 'pp_opts'],
                'Compile a single source files with a Unix-style compiler.'),
               ('numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib',
                ['self',
                 'objects',
                 'output_libname',
                 'output_dir=None',
                 'debug=0',
                 'target_lang=None'],
                '\n    Build a static library in a separate sub-process.\n\n    Parameters\n    ----------\n    objects : list or tuple of str\n        List of paths to object files used to build the static library.\n    output_libname : str\n        The library name as an absolute or relative (if `output_dir` is used)\n        path.\n    output_dir : str, optional\n        The path to the output directory. Default is None, in which case\n        the ``output_dir`` attribute of the UnixCCompiler instance.\n    debug : bool, optional\n        This parameter is not used.\n    target_lang : str, optional\n        This parameter is not used.\n\n    Returns\n    -------\n    None\n\n    '),
               ('numpy.distutils.exec_command.temp_file_name', [], ''),
               ('numpy.distutils.exec_command.get_pythonexe', [], ''),
               ('numpy.distutils.exec_command.splitcmdline', ['line'], ''),
               ('numpy.distutils.exec_command.find_executable',
                ['exe', 'path=None', '_cache={}'],
                'Return full path of a executable or None.\n\n    Symbolic links are not followed.\n    '),
               ('numpy.distutils.exec_command._preserve_environment', ['names'], ''),
               ('numpy.distutils.exec_command._update_environment', ['**env'], ''),
               ('numpy.distutils.exec_command.exec_command',
                ['command',
                 "execute_in=''",
                 'use_shell=None',
                 'use_tee=None',
                 '_with_python=1',
                 '**env'],
                ' Return (status,output) of executed command.\n\n    command is a concatenated string of executable and arguments.\n    The output contains both stdout and stderr messages.\n    The following special keyword arguments can be used:\n      use_shell - execute `sh -c command`\n      use_tee   - pipe the output of command through tee\n      execute_in - before run command `cd execute_in` and after `cd -`.\n\n    On NT, DOS systems the returned status is correct for external commands.\n    Wild cards will not work for non-posix systems or when use_shell=0.\n    '),
               ('numpy.distutils.exec_command._exec_command_posix',
                ['command', 'use_shell=None', 'use_tee=None', '**env'],
                ''),
               ('numpy.distutils.exec_command._exec_command_python',
                ['command', "exec_command_dir=''", '**env'],
                ''),
               ('numpy.distutils.exec_command.quote_arg', ['arg'], ''),
               ('numpy.distutils.exec_command._exec_command',
                ['command', 'use_shell=None', 'use_tee=None', '**env'],
                ''),
               ('numpy.distutils.exec_command.test_nt', ['**kws'], ''),
               ('numpy.distutils.exec_command.test_posix', ['**kws'], ''),
               ('numpy.distutils.exec_command.test_execute_in', ['**kws'], ''),
               ('numpy.distutils.exec_command.test_svn', ['**kws'], ''),
               ('numpy.distutils.exec_command.test_cl', ['**kws'], ''),
               ('numpy.distutils.ccompiler.replace_method', ['klass', 'method_name', 'func'], ''),
               ('numpy.distutils.ccompiler.CCompiler_spawn',
                ['self', 'cmd', 'display=None'],
                '\n    Execute a command in a sub-process.\n\n    Parameters\n    ----------\n    cmd : str\n        The command to execute.\n    display : str or sequence of str, optional\n        The text to add to the log file kept by `numpy.distutils`.\n        If not given, `display` is equal to `cmd`.\n\n    Returns\n    -------\n    None\n\n    Raises\n    ------\n    DistutilsExecError\n        If the command failed, i.e. the exit status was not 0.\n\n    '),
               ('numpy.distutils.ccompiler.CCompiler_object_filenames',
                ['self', 'source_filenames', 'strip_dir=0', "output_dir=''"],
                '\n    Return the name of the object files for the given source files.\n\n    Parameters\n    ----------\n    source_filenames : list of str\n        The list of paths to source files. Paths can be either relative or\n        absolute, this is handled transparently.\n    strip_dir : bool, optional\n        Whether to strip the directory from the returned paths. If True,\n        the file name prepended by `output_dir` is returned. Default is False.\n    output_dir : str, optional\n        If given, this path is prepended to the returned paths to the\n        object files.\n\n    Returns\n    -------\n    obj_names : list of str\n        The list of paths to the object files corresponding to the source\n        files in `source_filenames`.\n\n    '),
               ('numpy.distutils.ccompiler.CCompiler_compile',
                ['self',
                 'sources',
                 'output_dir=None',
                 'macros=None',
                 'include_dirs=None',
                 'debug=0',
                 'extra_preargs=None',
                 'extra_postargs=None',
                 'depends=None'],
                '\n    Compile one or more source files.\n\n    Please refer to the Python distutils API reference for more details.\n\n    Parameters\n    ----------\n    sources : list of str\n        A list of filenames\n    output_dir : str, optional\n        Path to the output directory.\n    macros : list of tuples\n        A list of macro definitions.\n    include_dirs : list of str, optional\n        The directories to add to the default include file search path for\n        this compilation only.\n    debug : bool, optional\n        Whether or not to output debug symbols in or alongside the object\n        file(s).\n    extra_preargs, extra_postargs : ?\n        Extra pre- and post-arguments.\n    depends : list of str, optional\n        A list of file names that all targets depend on.\n\n    Returns\n    -------\n    objects : list of str\n        A list of object file names, one per source file `sources`.\n\n    Raises\n    ------\n    CompileError\n        If compilation fails.\n\n    '),
               ('numpy.distutils.ccompiler.CCompiler_customize_cmd',
                ['self', 'cmd', 'ignore=()'],
                "\n    Customize compiler using distutils command.\n\n    Parameters\n    ----------\n    cmd : class instance\n        An instance inheriting from `distutils.cmd.Command`.\n    ignore : sequence of str, optional\n        List of `CCompiler` commands (without ``'set_'``) that should not be\n        altered. Strings that are checked for are:\n        ``('include_dirs', 'define', 'undef', 'libraries', 'library_dirs',\n        'rpath', 'link_objects')``.\n\n    Returns\n    -------\n    None\n\n    "),
               ('numpy.distutils.ccompiler._compiler_to_string', ['compiler'], ''),
               ('numpy.distutils.ccompiler.CCompiler_show_customization',
                ['self'],
                '\n    Print the compiler customizations to stdout.\n\n    Parameters\n    ----------\n    None\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    Printing is only done if the distutils log threshold is < 2.\n\n    '),
               ('numpy.distutils.ccompiler.CCompiler_customize',
                ['self', 'dist', 'need_cxx=0'],
                '\n    Do any platform-specific customization of a compiler instance.\n\n    This method calls `distutils.sysconfig.customize_compiler` for\n    platform-specific customization, as well as optionally remove a flag\n    to suppress spurious warnings in case C++ code is being compiled.\n\n    Parameters\n    ----------\n    dist : object\n        This parameter is not used for anything.\n    need_cxx : bool, optional\n        Whether or not C++ has to be compiled. If so (True), the\n        ``"-Wstrict-prototypes"`` option is removed to prevent spurious\n        warnings. Default is False.\n\n    Returns\n    -------\n    None\n\n    Notes\n    -----\n    All the default options used by distutils can be extracted with::\n\n      from distutils import sysconfig\n      sysconfig.get_config_vars(\'CC\', \'CXX\', \'OPT\', \'BASECFLAGS\',\n                                \'CCSHARED\', \'LDSHARED\', \'SO\')\n\n    '),
               ('numpy.distutils.ccompiler.simple_version_match',
                ["pat='[-.\\\\d]+'", "ignore=''", "start=''"],
                "\n    Simple matching of version numbers, for use in CCompiler and FCompiler.\n\n    Parameters\n    ----------\n    pat : str, optional\n        A regular expression matching version numbers.\n        Default is ``r'[-.\\d]+'``.\n    ignore : str, optional\n        A regular expression matching patterns to skip.\n        Default is ``''``, in which case nothing is skipped.\n    start : str, optional\n        A regular expression matching the start of where to start looking\n        for version numbers.\n        Default is ``''``, in which case searching is started at the\n        beginning of the version string given to `matcher`.\n\n    Returns\n    -------\n    matcher : callable\n        A function that is appropriate to use as the ``.version_match``\n        attribute of a `CCompiler` class. `matcher` takes a single parameter,\n        a version string.\n\n    "),
               ('numpy.distutils.ccompiler.CCompiler_get_version',
                ['self', 'force=False', 'ok_status=[0]'],
                '\n    Return compiler version, or None if compiler is not available.\n\n    Parameters\n    ----------\n    force : bool, optional\n        If True, force a new determination of the version, even if the\n        compiler already has a version attribute. Default is False.\n    ok_status : list of int, optional\n        The list of status values returned by the version look-up process\n        for which a version string is returned. If the status value is not\n        in `ok_status`, None is returned. Default is ``[0]``.\n\n    Returns\n    -------\n    version : str or None\n        Version string, in the format of `distutils.version.LooseVersion`.\n\n    '),
               ('numpy.distutils.ccompiler.CCompiler_cxx_compiler',
                ['self'],
                '\n    Return the C++ compiler.\n\n    Parameters\n    ----------\n    None\n\n    Returns\n    -------\n    cxx : class instance\n        The C++ compiler, as a `CCompiler` instance.\n\n    '),
               ('numpy.distutils.ccompiler.new_compiler',
                ['plat=None', 'compiler=None', 'verbose=0', 'dry_run=0', 'force=0'],
                ''),
               ('numpy.distutils.ccompiler.gen_lib_options',
                ['compiler', 'library_dirs', 'runtime_library_dirs', 'libraries'],
                ''),
               ('numpy.distutils.ccompiler.gen_preprocess_options',
                ['macros', 'include_dirs'],
                ''),
               ('numpy.distutils.ccompiler.split_quoted', ['s'], ''),
               ('numpy.distutils.cpuinfo.getoutput',
                ['cmd', 'successful_status=(0)', 'stacklevel=1'],
                ''),
               ('numpy.distutils.cpuinfo.command_info',
                ['successful_status=(0)', 'stacklevel=1', '**kw'],
                ''),
               ('numpy.distutils.cpuinfo.command_by_line',
                ['cmd', 'successful_status=(0)', 'stacklevel=1'],
                ''),
               ('numpy.distutils.cpuinfo.key_value_from_command',
                ['cmd', 'sep', 'successful_status=(0)', 'stacklevel=1'],
                ''),
               ('numpy.distutils.lib2def.parse_cmd',
                [],
                'Parses the command-line arguments.\n\nlibfile, deffile = parse_cmd()'),
               ('numpy.distutils.lib2def.getnm',
                ["nm_cmd=['nm', '-Cs', 'python%s.lib'%py_ver]"],
                "Returns the output of nm_cmd via a pipe.\n\nnm_output = getnam(nm_cmd = 'nm -Cs py_lib')"),
               ('numpy.distutils.lib2def.parse_nm',
                ['nm_output'],
                'Returns a tuple of lists: dlist for the list of data\nsymbols and flist for the list of function symbols.\n\ndlist, flist = parse_nm(nm_output)'),
               ('numpy.distutils.lib2def.output_def',
                ['dlist', 'flist', 'header', 'file=sys.stdout'],
                'Outputs the final DEF file to a file defaulting to stdout.\n\noutput_def(dlist, flist, header, file = sys.stdout)'),
               ('numpy.distutils.mingw32ccompiler.find_python_dll', [], ''),
               ('numpy.distutils.mingw32ccompiler.dump_table', ['dll'], ''),
               ('numpy.distutils.mingw32ccompiler.generate_def',
                ['dll', 'dfile'],
                'Given a dll file location,  get all its exported symbols and dump them\n    into the given def file.\n\n    The .def file will be overwritten'),
               ('numpy.distutils.mingw32ccompiler.build_import_library', [], ''),
               ('numpy.distutils.mingw32ccompiler._build_import_library_amd64', [], ''),
               ('numpy.distutils.mingw32ccompiler._build_import_library_x86',
                [],
                ' Build the import libraries for Mingw32-gcc on Windows\n    '),
               ('numpy.distutils.mingw32ccompiler.msvc_manifest_xml',
                ['maj', 'min'],
                'Given a major and minor version of the MSVCR, returns the\n    corresponding XML file.'),
               ('numpy.distutils.mingw32ccompiler.manifest_rc',
                ['name', "type='dll'"],
                "Return the rc file used to generate the res file which will be embedded\n    as manifest for given manifest file name, of given type ('dll' or\n    'exe').\n\n    Parameters\n    ---------- name: str\n            name of the manifest file to embed\n        type: str ('dll', 'exe')\n            type of the binary which will embed the manifest"),
               ('numpy.distutils.mingw32ccompiler.check_embedded_msvcr_match_linked',
                ['msver'],
                'msver is the ms runtime version used for the MANIFEST.'),
               ('numpy.distutils.mingw32ccompiler.configtest_name', ['config'], ''),
               ('numpy.distutils.mingw32ccompiler.manifest_name', ['config'], ''),
               ('numpy.distutils.mingw32ccompiler.rc_name', ['config'], ''),
               ('numpy.distutils.mingw32ccompiler.generate_manifest', ['config'], ''),
               ('numpy.distutils.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.distutils.interactive.show_information', ['*args'], ''),
               ('numpy.distutils.interactive.show_environ', ['*args'], ''),
               ('numpy.distutils.interactive.show_fortran_compilers', ['*args'], ''),
               ('numpy.distutils.interactive.show_compilers', ['*args'], ''),
               ('numpy.distutils.interactive.show_tasks', ['argv', 'ccompiler', 'fcompiler'], ''),
               ('numpy.distutils.interactive.edit_argv', ['*args'], ''),
               ('numpy.distutils.interactive.interactive_sys_argv', ['argv'], ''),
               ('numpy.distutils.from_template.parse_structure',
                ['astr'],
                ' Return a list of tuples for each function or subroutine each\n    tuple is the start and end of a subroutine or function to be\n    expanded.\n    '),
               ('numpy.distutils.from_template.find_repl_patterns', ['astr'], ''),
               ('numpy.distutils.from_template.conv', ['astr'], ''),
               ('numpy.distutils.from_template.unique_key',
                ['adict'],
                ' Obtain a unique key given a dictionary.'),
               ('numpy.distutils.from_template.expand_sub', ['substr', 'names'], ''),
               ('numpy.distutils.from_template.process_str', ['allstr'], ''),
               ('numpy.distutils.from_template.resolve_includes', ['source'], ''),
               ('numpy.distutils.from_template.process_file', ['source'], ''),
               ('numpy.distutils.misc_util.quote_args', ['args'], ''),
               ('numpy.distutils.misc_util.allpath',
                ['name'],
                "Convert a /-separated pathname to one using the OS's path separator."),
               ('numpy.distutils.misc_util.rel_path',
                ['path', 'parent_path'],
                'Return path relative to parent_path.\n    '),
               ('numpy.distutils.misc_util.get_path_from_frame',
                ['frame', 'parent_path=None'],
                'Return path of the module given a frame object from the call stack.\n\n    Returned path is relative to parent_path when given,\n    otherwise it is absolute path.\n    '),
               ('numpy.distutils.misc_util.njoin',
                ['*path'],
                "Join two or more pathname components +\n    - convert a /-separated pathname to one using the OS's path separator.\n    - resolve `..` and `.` from path.\n\n    Either passing n arguments as in njoin('a','b'), or a sequence\n    of n names as in njoin(['a','b']) is handled, or a mixture of such arguments.\n    "),
               ('numpy.distutils.misc_util.get_mathlibs',
                ['path=None'],
                'Return the MATHLIB line from numpyconfig.h\n    '),
               ('numpy.distutils.misc_util.minrelpath',
                ['path'],
                "Resolve `..` and '.' from path.\n    "),
               ('numpy.distutils.misc_util._fix_paths',
                ['paths', 'local_path', 'include_non_existing'],
                ''),
               ('numpy.distutils.misc_util.gpaths',
                ['paths', "local_path=''", 'include_non_existing=True'],
                'Apply glob to paths and prepend local_path if needed.\n    '),
               ('numpy.distutils.misc_util.clean_up_temporary_directory', [], ''),
               ('numpy.distutils.misc_util.make_temp_file',
                ["suffix=''", "prefix=''", 'text=True'],
                ''),
               ('numpy.distutils.misc_util.terminal_has_colors', [], ''),
               ('numpy.distutils.misc_util.colour_text',
                ['s', 'fg=None', 'bg=None', 'bold=False'],
                ''),
               ('numpy.distutils.misc_util.colour_text', ['s', 'fg=None', 'bg=None'], ''),
               ('numpy.distutils.misc_util.default_text', ['s'], ''),
               ('numpy.distutils.misc_util.red_text', ['s'], ''),
               ('numpy.distutils.misc_util.green_text', ['s'], ''),
               ('numpy.distutils.misc_util.yellow_text', ['s'], ''),
               ('numpy.distutils.misc_util.cyan_text', ['s'], ''),
               ('numpy.distutils.misc_util.blue_text', ['s'], ''),
               ('numpy.distutils.misc_util.cyg2win32', ['path'], ''),
               ('numpy.distutils.misc_util.mingw32',
                [],
                'Return true when using mingw32 environment.\n    '),
               ('numpy.distutils.misc_util.msvc_runtime_library',
                [],
                'Return name of MSVC runtime library if Python was built with MSVC >= 7'),
               ('numpy.distutils.misc_util.msvc_on_amd64', [], ''),
               ('numpy.distutils.misc_util._get_f90_modules',
                ['source'],
                'Return a list of Fortran f90 module names that\n    given source file defines.\n    '),
               ('numpy.distutils.misc_util.is_string', ['s'], ''),
               ('numpy.distutils.misc_util.all_strings',
                ['lst'],
                'Return True if all items in lst are string objects. '),
               ('numpy.distutils.misc_util.is_sequence', ['seq'], ''),
               ('numpy.distutils.misc_util.is_glob_pattern', ['s'], ''),
               ('numpy.distutils.misc_util.as_list', ['seq'], ''),
               ('numpy.distutils.misc_util.get_language',
                ['sources'],
                'Determine language value (c,f77,f90) from sources '),
               ('numpy.distutils.misc_util.has_f_sources',
                ['sources'],
                'Return True if sources contains Fortran files '),
               ('numpy.distutils.misc_util.has_cxx_sources',
                ['sources'],
                'Return True if sources contains C++ files '),
               ('numpy.distutils.misc_util.filter_sources',
                ['sources'],
                'Return four lists of filenames containing\n    C, C++, Fortran, and Fortran 90 module sources,\n    respectively.\n    '),
               ('numpy.distutils.misc_util._get_headers', ['directory_list'], ''),
               ('numpy.distutils.misc_util._get_directories', ['list_of_sources'], ''),
               ('numpy.distutils.misc_util.get_dependencies', ['sources'], ''),
               ('numpy.distutils.misc_util.is_local_src_dir',
                ['directory'],
                'Return true if directory is local directory.\n    '),
               ('numpy.distutils.misc_util.general_source_files', ['top_path'], ''),
               ('numpy.distutils.misc_util.general_source_directories_files',
                ['top_path'],
                'Return a directory name relative to top_path and\n    files contained.\n    '),
               ('numpy.distutils.misc_util.get_ext_source_files', ['ext'], ''),
               ('numpy.distutils.misc_util.get_script_files', ['scripts'], ''),
               ('numpy.distutils.misc_util.get_lib_source_files', ['lib'], ''),
               ('numpy.distutils.misc_util.get_shared_lib_extension',
                ['is_python_ext=False'],
                "Return the correct file extension for shared libraries.\n\n    Parameters\n    ----------\n    is_python_ext : bool, optional\n        Whether the shared library is a Python extension.  Default is False.\n\n    Returns\n    -------\n    so_ext : str\n        The shared library extension.\n\n    Notes\n    -----\n    For Python shared libs, `so_ext` will typically be '.so' on Linux and OS X,\n    and '.pyd' on Windows.  For Python >= 3.2 `so_ext` has a tag prepended on\n    POSIX systems according to PEP 3149.  For Python 3.2 this is implemented on\n    Linux, but not on OS X.\n\n    "),
               ('numpy.distutils.misc_util.get_data_files', ['data'], ''),
               ('numpy.distutils.misc_util.dot_join', ['*args'], ''),
               ('numpy.distutils.misc_util.get_frame',
                ['level=0'],
                'Return frame object from call stack with given level.\n    '),
               ('numpy.distutils.misc_util.get_cmd', ['cmdname', '_cache={}'], ''),
               ('numpy.distutils.misc_util.get_numpy_include_dirs', [], ''),
               ('numpy.distutils.misc_util.get_npy_pkg_dir',
                [],
                'Return the path where to find the npy-pkg-config directory.'),
               ('numpy.distutils.misc_util.get_pkg_info',
                ['pkgname', 'dirs=None'],
                '\n    Return library info for the given package.\n\n    Parameters\n    ----------\n    pkgname : str\n        Name of the package (should match the name of the .ini file, without\n        the extension, e.g. foo for the file foo.ini).\n    dirs : sequence, optional\n        If given, should be a sequence of additional directories where to look\n        for npy-pkg-config files. Those directories are searched prior to the\n        NumPy directory.\n\n    Returns\n    -------\n    pkginfo : class instance\n        The `LibraryInfo` instance containing the build information.\n\n    Raises\n    ------\n    PkgNotFound\n        If the package is not found.\n\n    See Also\n    --------\n    Configuration.add_npy_pkg_config, Configuration.add_installed_library,\n    get_info\n\n    '),
               ('numpy.distutils.misc_util.get_info',
                ['pkgname', 'dirs=None'],
                "\n    Return an info dict for a given C library.\n\n    The info dict contains the necessary options to use the C library.\n\n    Parameters\n    ----------\n    pkgname : str\n        Name of the package (should match the name of the .ini file, without\n        the extension, e.g. foo for the file foo.ini).\n    dirs : sequence, optional\n        If given, should be a sequence of additional directories where to look\n        for npy-pkg-config files. Those directories are searched prior to the\n        NumPy directory.\n\n    Returns\n    -------\n    info : dict\n        The dictionary with build information.\n\n    Raises\n    ------\n    PkgNotFound\n        If the package is not found.\n\n    See Also\n    --------\n    Configuration.add_npy_pkg_config, Configuration.add_installed_library,\n    get_pkg_info\n\n    Examples\n    --------\n    To get the necessary information for the npymath library from NumPy:\n\n    >>> npymath_info = np.distutils.misc_util.get_info('npymath')\n    >>> npymath_info                                    #doctest: +SKIP\n    {'define_macros': [], 'libraries': ['npymath'], 'library_dirs':\n    ['.../numpy/core/lib'], 'include_dirs': ['.../numpy/core/include']}\n\n    This info dict can then be used as input to a `Configuration` instance::\n\n      config.add_extension('foo', sources=['foo.c'], extra_info=npymath_info)\n\n    "),
               ('numpy.distutils.misc_util.is_bootstrapping', [], ''),
               ('numpy.distutils.misc_util.scons_generate_config_py',
                ['target'],
                "generate config.py file containing system_info information\n    used during building the package.\n\n    usage:\n        config['py_modules'].append((packagename, '__config__',generate_config_py))\n    "),
               ('numpy.distutils.misc_util.default_config_dict',
                ['name=None', 'parent_name=None', 'local_path=None'],
                'Return a configuration dictionary for usage in\n    configuration() function defined in file setup_<name>.py.\n    '),
               ('numpy.distutils.misc_util.dict_append', ['d', '**kws'], ''),
               ('numpy.distutils.misc_util.appendpath', ['prefix', 'path'], ''),
               ('numpy.distutils.misc_util.generate_config_py',
                ['target'],
                "Generate config.py file containing system_info information\n    used during building the package.\n\n    Usage:\n        config['py_modules'].append((packagename, '__config__',generate_config_py))\n    "),
               ('numpy.distutils.misc_util.msvc_version',
                ['compiler'],
                'Return version major and minor of compiler instance if it is\n    MSVC, raise an exception otherwise.'),
               ('numpy.distutils.misc_util.get_build_architecture', [], ''),
               ('numpy.distutils.misc_util.get_build_architecture',
                [],
                'Return the processor architecture.\n\n        Possible results are "Intel", "Itanium", or "AMD64".\n        '),
               ('numpy.distutils.setup.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.distutils.__config__.get_info', ['name'], ''),
               ('numpy.distutils.__config__.show', [], ''),
               ('numpy.distutils.command.build_src.have_pyrex', [], ''),
               ('numpy.distutils.command.build_src.subst_vars',
                ['target', 'source', 'd'],
                "Substitute any occurence of @foo@ by d['foo'] from source file into\n    target."),
               ('numpy.distutils.command.build_src.get_swig_target', ['source'], ''),
               ('numpy.distutils.command.build_src.get_swig_modulename', ['source'], ''),
               ('numpy.distutils.command.build_src._find_swig_target',
                ['target_dir', 'name'],
                ''),
               ('numpy.distutils.command.build_src.get_f2py_modulename', ['source'], ''),
               ('numpy.distutils.command.autodist.check_inline',
                ['cmd'],
                'Return the inline identifier (may be empty).'),
               ('numpy.distutils.command.autodist.check_compiler_gcc4',
                ['cmd'],
                'Return True if the C compiler is GCC 4.x.'),
               ('numpy.distutils.command.config_compiler.show_fortran_compilers',
                ['_cache=[]'],
                ''),
               ('numpy.distutils.command.scons.get_scons_build_dir',
                [],
                'Return the top path where everything produced by scons will be put.\n\n    The path is relative to the top setup.py'),
               ('numpy.distutils.command.scons.get_scons_pkg_build_dir',
                ['pkg'],
                'Return the build directory for the given package (foo.bar).\n\n    The path is relative to the top setup.py'),
               ('numpy.distutils.command.scons.get_scons_configres_dir',
                [],
                'Return the top path where everything produced by scons will be put.\n\n    The path is relative to the top setup.py'),
               ('numpy.distutils.command.scons.get_scons_configres_filename',
                [],
                'Return the top path where everything produced by scons will be put.\n\n    The path is relative to the top setup.py'),
               ('numpy.distutils.command.scons.get_scons_local_path',
                [],
                'This returns the full path where scons.py for scons-local is located.'),
               ('numpy.distutils.command.scons._get_top_dir', ['pkg'], ''),
               ('numpy.distutils.command.scons.get_distutils_libdir',
                ['cmd', 'pkg'],
                'Returns the path where distutils install libraries, relatively to the\n    scons build directory.'),
               ('numpy.distutils.command.scons.get_distutils_clibdir',
                ['cmd', 'pkg'],
                'Returns the path where distutils put pure C libraries.'),
               ('numpy.distutils.command.scons.get_distutils_install_prefix',
                ['pkg', 'inplace'],
                'Returns the installation path for the current package.'),
               ('numpy.distutils.command.scons.get_python_exec_invoc',
                [],
                'This returns the python executable from which this file is invocated.'),
               ('numpy.distutils.command.scons.get_numpy_include_dirs',
                ['sconscript_path'],
                'Return include dirs for numpy.\n\n    The paths are relatively to the setup.py script path.'),
               ('numpy.distutils.command.scons.dirl_to_str',
                ['dirlist'],
                "Given a list of directories, returns a string where the paths are\n    concatenated by the path separator.\n\n    example: ['foo/bar', 'bar/foo'] will return 'foo/bar:bar/foo'."),
               ('numpy.distutils.command.scons.dist2sconscc',
                ['compiler'],
                'This converts the name passed to distutils to scons name convention (C\n    compiler). compiler should be a CCompiler instance.\n\n    Example:\n        --compiler=intel -> intelc'),
               ('numpy.distutils.command.scons.dist2sconsfc',
                ['compiler'],
                'This converts the name passed to distutils to scons name convention\n    (Fortran compiler). The argument should be a FCompiler instance.\n\n    Example:\n        --fcompiler=intel -> ifort on linux, ifl on windows'),
               ('numpy.distutils.command.scons.dist2sconscxx',
                ['compiler'],
                'This converts the name passed to distutils to scons name convention\n    (C++ compiler). The argument should be a Compiler instance.'),
               ('numpy.distutils.command.scons.get_compiler_executable',
                ['compiler'],
                'For any give CCompiler instance, this gives us the name of C compiler\n    (the actual executable).\n\n    NOTE: does NOT work with FCompiler instances.'),
               ('numpy.distutils.command.scons.get_f77_compiler_executable',
                ['compiler'],
                'For any give FCompiler instance, this gives us the name of F77 compiler\n    (the actual executable).'),
               ('numpy.distutils.command.scons.get_cxxcompiler_executable',
                ['compiler'],
                'For any give CCompiler instance, this gives us the name of CXX compiler\n    (the actual executable).\n\n    NOTE: does NOT work with FCompiler instances.'),
               ('numpy.distutils.command.scons.get_tool_path',
                ['compiler'],
                'Given a distutils.ccompiler.CCompiler class, returns the path of the\n    toolset related to C compilation.'),
               ('numpy.distutils.command.scons.get_f77_tool_path',
                ['compiler'],
                'Given a distutils.ccompiler.FCompiler class, returns the path of the\n    toolset related to F77 compilation.'),
               ('numpy.distutils.command.scons.get_cxx_tool_path',
                ['compiler'],
                'Given a distutils.ccompiler.CCompiler class, returns the path of the\n    toolset related to C compilation.'),
               ('numpy.distutils.command.scons.protect_path',
                ['path'],
                'Convert path (given as a string) to something the shell will have no\n    problem to understand (space, etc... problems).'),
               ('numpy.distutils.command.scons.parse_package_list', ['pkglist'], ''),
               ('numpy.distutils.command.scons.find_common',
                ['seq1', 'seq2'],
                'Given two list, return the index of the common items.\n\n    The index are relative to seq1.\n\n    Note: do not handle duplicate items.'),
               ('numpy.distutils.command.scons.select_packages',
                ['sconspkg', 'pkglist'],
                'Given a list of packages in pkglist, return the list of packages which\n    match this list.'),
               ('numpy.distutils.command.scons.check_numscons',
                ['minver'],
                'Check that we can use numscons.\n\n    minver is a 3 integers tuple which defines the min version.'),
               ('numpy.distutils.fcompiler.flaglist', ['s'], ''),
               ('numpy.distutils.fcompiler.str2bool', ['s'], ''),
               ('numpy.distutils.fcompiler.is_sequence_of_strings', ['seq'], ''),
               ('numpy.distutils.fcompiler.load_all_fcompiler_classes',
                [],
                'Cache all the FCompiler classes found in modules in the\n    numpy.distutils.fcompiler package.\n    '),
               ('numpy.distutils.fcompiler._find_existing_fcompiler',
                ['compiler_types',
                 'osname=None',
                 'platform=None',
                 'requiref90=False',
                 'c_compiler=None'],
                ''),
               ('numpy.distutils.fcompiler.available_fcompilers_for_platform',
                ['osname=None', 'platform=None'],
                ''),
               ('numpy.distutils.fcompiler.get_default_fcompiler',
                ['osname=None', 'platform=None', 'requiref90=False', 'c_compiler=None'],
                'Determine the default Fortran compiler to use for the given\n    platform.'),
               ('numpy.distutils.fcompiler.new_fcompiler',
                ['plat=None',
                 'compiler=None',
                 'verbose=0',
                 'dry_run=0',
                 'force=0',
                 'requiref90=False',
                 'c_compiler=None'],
                'Generate an instance of some FCompiler subclass for the supplied\n    platform/compiler combination.\n    '),
               ('numpy.distutils.fcompiler.show_fcompilers',
                ['dist=None'],
                'Print list of available compilers (used by the "--help-fcompiler"\n    option to "config_fc").\n    '),
               ('numpy.distutils.fcompiler.dummy_fortran_file', [], ''),
               ('numpy.distutils.fcompiler.is_free_format',
                ['file'],
                'Check if file is in free format Fortran.'),
               ('numpy.distutils.fcompiler.has_f90_header', ['src'], ''),
               ('numpy.distutils.fcompiler.get_f77flags',
                ['src'],
                '\n    Search the first 20 lines of fortran 77 code for line pattern\n      `CF77FLAGS(<fcompiler type>)=<f77 flags>`\n    Return a dictionary {<fcompiler type>:<f77 flags>}.\n    '),
               ('numpy.distutils.fcompiler.gnu.is_win64', [], ''),
               ('numpy.distutils.fcompiler.gnu._can_target',
                ['cmd', 'arch'],
                'Return true is the command supports the -arch flag for the given\n    architecture.'),
               ('numpy.distutils.fcompiler.intel.intel_version_match', ['type'], ''),
               ('setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('gen_ext.setup.source_func', ['ext', 'build_dir'], ''),
               ('gen_ext.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('swig_ext.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('f2py_f90_ext.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('f2py_ext.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('pyrex_ext.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.ma.core.doc_note',
                ['initialdoc', 'note'],
                '\n    Adds a Notes section to an existing docstring.\n    '),
               ('numpy.ma.core.get_object_signature',
                ['obj'],
                '\n    Get the signature from obj\n    '),
               ('numpy.ma.core.default_fill_value',
                ['obj'],
                "\n    Return the default fill value for the argument object.\n\n    The default filling value depends on the datatype of the input\n    array or the type of the input scalar:\n\n       ========  ========\n       datatype  default\n       ========  ========\n       bool      True\n       int       999999\n       float     1.e20\n       complex   1.e20+0j\n       object    '?'\n       string    'N/A'\n       ========  ========\n\n\n    Parameters\n    ----------\n    obj : ndarray, dtype or scalar\n        The array data-type or scalar for which the default fill value\n        is returned.\n\n    Returns\n    -------\n    fill_value : scalar\n        The default fill value.\n\n    Examples\n    --------\n    >>> np.ma.default_fill_value(1)\n    999999\n    >>> np.ma.default_fill_value(np.array([1.1, 2., np.pi]))\n    1e+20\n    >>>  np.ma.default_fill_value(np.dtype(complex))\n    (1e+20+0j)\n\n    "),
               ('numpy.ma.core._recursive_extremum_fill_value', ['ndtype', 'extremum'], ''),
               ('numpy.ma.core.minimum_fill_value',
                ['obj'],
                "\n    Return the maximum value that can be represented by the dtype of an object.\n\n    This function is useful for calculating a fill value suitable for\n    taking the minimum of an array with a given dtype.\n\n    Parameters\n    ----------\n    obj : ndarray or dtype\n        An object that can be queried for it's numeric type.\n\n    Returns\n    -------\n    val : scalar\n        The maximum representable value.\n\n    Raises\n    ------\n    TypeError\n        If `obj` isn't a suitable numeric type.\n\n    See Also\n    --------\n    maximum_fill_value : The inverse function.\n    set_fill_value : Set the filling value of a masked array.\n    MaskedArray.fill_value : Return current fill value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.int8()\n    >>> ma.minimum_fill_value(a)\n    127\n    >>> a = np.int32()\n    >>> ma.minimum_fill_value(a)\n    2147483647\n\n    An array of numeric data can also be passed.\n\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\n    >>> ma.minimum_fill_value(a)\n    127\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\n    >>> ma.minimum_fill_value(a)\n    inf\n\n    "),
               ('numpy.ma.core.maximum_fill_value',
                ['obj'],
                "\n    Return the minimum value that can be represented by the dtype of an object.\n\n    This function is useful for calculating a fill value suitable for\n    taking the maximum of an array with a given dtype.\n\n    Parameters\n    ----------\n    obj : {ndarray, dtype}\n        An object that can be queried for it's numeric type.\n\n    Returns\n    -------\n    val : scalar\n        The minimum representable value.\n\n    Raises\n    ------\n    TypeError\n        If `obj` isn't a suitable numeric type.\n\n    See Also\n    --------\n    minimum_fill_value : The inverse function.\n    set_fill_value : Set the filling value of a masked array.\n    MaskedArray.fill_value : Return current fill value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.int8()\n    >>> ma.maximum_fill_value(a)\n    -128\n    >>> a = np.int32()\n    >>> ma.maximum_fill_value(a)\n    -2147483648\n\n    An array of numeric data can also be passed.\n\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\n    >>> ma.maximum_fill_value(a)\n    -128\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\n    >>> ma.maximum_fill_value(a)\n    -inf\n\n    "),
               ('numpy.ma.core._recursive_set_default_fill_value', ['dtypedescr'], ''),
               ('numpy.ma.core._recursive_set_fill_value', ['fillvalue', 'dtypedescr'], ''),
               ('numpy.ma.core._check_fill_value',
                ['fill_value', 'ndtype'],
                '\n    Private function validating the given `fill_value` for the given dtype.\n\n    If fill_value is None, it is set to the default corresponding to the dtype\n    if this latter is standard (no fields). If the datatype is flexible (named\n    fields), fill_value is set to a tuple whose elements are the default fill\n    values corresponding to each field.\n\n    If fill_value is not None, its value is forced to the given dtype.\n\n    '),
               ('numpy.ma.core.set_fill_value',
                ['a', 'fill_value'],
                '\n    Set the filling value of a, if a is a masked array.\n\n    This function changes the fill value of the masked array `a` in place.\n    If `a` is not a masked array, the function returns silently, without\n    doing anything.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    fill_value : dtype\n        Filling value. A consistency test is performed to make sure\n        the value is compatible with the dtype of `a`.\n\n    Returns\n    -------\n    None\n        Nothing returned by this function.\n\n    See Also\n    --------\n    maximum_fill_value : Return the default fill value for a dtype.\n    MaskedArray.fill_value : Return current fill value.\n    MaskedArray.set_fill_value : Equivalent method.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(5)\n    >>> a\n    array([0, 1, 2, 3, 4])\n    >>> a = ma.masked_where(a < 3, a)\n    >>> a\n    masked_array(data = [-- -- -- 3 4],\n          mask = [ True  True  True False False],\n          fill_value=999999)\n    >>> ma.set_fill_value(a, -999)\n    >>> a\n    masked_array(data = [-- -- -- 3 4],\n          mask = [ True  True  True False False],\n          fill_value=-999)\n\n    Nothing happens if `a` is not a masked array.\n\n    >>> a = range(5)\n    >>> a\n    [0, 1, 2, 3, 4]\n    >>> ma.set_fill_value(a, 100)\n    >>> a\n    [0, 1, 2, 3, 4]\n    >>> a = np.arange(5)\n    >>> a\n    array([0, 1, 2, 3, 4])\n    >>> ma.set_fill_value(a, 100)\n    >>> a\n    array([0, 1, 2, 3, 4])\n\n    '),
               ('numpy.ma.core.get_fill_value',
                ['a'],
                '\n    Return the filling value of a, if any.  Otherwise, returns the\n    default filling value for that type.\n\n    '),
               ('numpy.ma.core.common_fill_value',
                ['a', 'b'],
                '\n    Return the common filling value of two masked arrays, if any.\n\n    If ``a.fill_value == b.fill_value``, return the fill value,\n    otherwise return None.\n\n    Parameters\n    ----------\n    a, b : MaskedArray\n        The masked arrays for which to compare fill values.\n\n    Returns\n    -------\n    fill_value : scalar or None\n        The common fill value, or None.\n\n    Examples\n    --------\n    >>> x = np.ma.array([0, 1.], fill_value=3)\n    >>> y = np.ma.array([0, 1.], fill_value=3)\n    >>> np.ma.common_fill_value(x, y)\n    3.0\n\n    '),
               ('numpy.ma.core.filled',
                ['a', 'fill_value=None'],
                '\n    Return input as an array with masked data replaced by a fill value.\n\n    If `a` is not a `MaskedArray`, `a` itself is returned.\n    If `a` is a `MaskedArray` and `fill_value` is None, `fill_value` is set to\n    ``a.fill_value``.\n\n    Parameters\n    ----------\n    a : MaskedArray or array_like\n        An input object.\n    fill_value : scalar, optional\n        Filling value. Default is None.\n\n    Returns\n    -------\n    a : ndarray\n        The filled array.\n\n    See Also\n    --------\n    compressed\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\n    ...                                                   [1, 0, 0],\n    ...                                                   [0, 0, 0]])\n    >>> x.filled()\n    array([[999999,      1,      2],\n           [999999,      4,      5],\n           [     6,      7,      8]])\n\n    '),
               ('numpy.ma.core.get_masked_subclass',
                ['*arrays'],
                '\n    Return the youngest subclass of MaskedArray from a list of (masked) arrays.\n    In case of siblings, the first listed takes over.\n\n    '),
               ('numpy.ma.core.getdata',
                ['a', 'subok=True'],
                '\n    Return the data of a masked array as an ndarray.\n\n    Return the data of `a` (if any) as an ndarray if `a` is a ``MaskedArray``,\n    else return `a` as a ndarray or subclass (depending on `subok`) if not.\n\n    Parameters\n    ----------\n    a : array_like\n        Input ``MaskedArray``, alternatively a ndarray or a subclass thereof.\n    subok : bool\n        Whether to force the output to be a `pure` ndarray (False) or to\n        return a subclass of ndarray if appropriate (True, default).\n\n    See Also\n    --------\n    getmask : Return the mask of a masked array, or nomask.\n    getmaskarray : Return the mask of a masked array, or full array of False.\n\n    Examples\n    --------\n\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n          mask =\n     [[False  True]\n     [False False]],\n          fill_value=999999)\n    >>> ma.getdata(a)\n    array([[1, 2],\n           [3, 4]])\n\n    Equivalently use the ``MaskedArray`` `data` attribute.\n\n    >>> a.data\n    array([[1, 2],\n           [3, 4]])\n\n    '),
               ('numpy.ma.core.fix_invalid',
                ['a', 'mask=nomask', 'copy=True', 'fill_value=None'],
                '\n    Return input with invalid data masked and replaced by a fill value.\n\n    Invalid data means values of `nan`, `inf`, etc.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, a (subclass of) ndarray.\n    copy : bool, optional\n        Whether to use a copy of `a` (True) or to fix `a` in place (False).\n        Default is True.\n    fill_value : scalar, optional\n        Value used for fixing invalid data. Default is None, in which case\n        the ``a.fill_value`` is used.\n\n    Returns\n    -------\n    b : MaskedArray\n        The input array with invalid entries fixed.\n\n    Notes\n    -----\n    A copy is performed by default.\n\n    Examples\n    --------\n    >>> x = np.ma.array([1., -1, np.nan, np.inf], mask=[1] + [0]*3)\n    >>> x\n    masked_array(data = [-- -1.0 nan inf],\n                 mask = [ True False False False],\n           fill_value = 1e+20)\n    >>> np.ma.fix_invalid(x)\n    masked_array(data = [-- -1.0 -- --],\n                 mask = [ True False  True  True],\n           fill_value = 1e+20)\n\n    >>> fixed = np.ma.fix_invalid(x)\n    >>> fixed.data\n    array([  1.00000000e+00,  -1.00000000e+00,   1.00000000e+20,\n             1.00000000e+20])\n    >>> x.data\n    array([  1.,  -1.,  NaN,  Inf])\n\n    '),
               ('numpy.ma.core._recursive_make_descr',
                ['datatype', 'newtype=bool_'],
                'Private function allowing recursion in make_descr.'),
               ('numpy.ma.core.make_mask_descr',
                ['ndtype'],
                "\n    Construct a dtype description list from a given dtype.\n\n    Returns a new dtype object, with the type of all fields in `ndtype` to a\n    boolean type. Field names are not altered.\n\n    Parameters\n    ----------\n    ndtype : dtype\n        The dtype to convert.\n\n    Returns\n    -------\n    result : dtype\n        A dtype that looks like `ndtype`, the type of all fields is boolean.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> dtype = np.dtype({'names':['foo', 'bar'],\n                          'formats':[np.float32, np.int]})\n    >>> dtype\n    dtype([('foo', '<f4'), ('bar', '<i4')])\n    >>> ma.make_mask_descr(dtype)\n    dtype([('foo', '|b1'), ('bar', '|b1')])\n    >>> ma.make_mask_descr(np.float32)\n    <type 'numpy.bool_'>\n\n    "),
               ('numpy.ma.core.getmask',
                ['a'],
                '\n    Return the mask of a masked array, or nomask.\n\n    Return the mask of `a` as an ndarray if `a` is a `MaskedArray` and the\n    mask is not `nomask`, else return `nomask`. To guarantee a full array\n    of booleans of the same shape as a, use `getmaskarray`.\n\n    Parameters\n    ----------\n    a : array_like\n        Input `MaskedArray` for which the mask is required.\n\n    See Also\n    --------\n    getdata : Return the data of a masked array as an ndarray.\n    getmaskarray : Return the mask of a masked array, or full array of False.\n\n    Examples\n    --------\n\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n          mask =\n     [[False  True]\n     [False False]],\n          fill_value=999999)\n    >>> ma.getmask(a)\n    array([[False,  True],\n           [False, False]], dtype=bool)\n\n    Equivalently use the `MaskedArray` `mask` attribute.\n\n    >>> a.mask\n    array([[False,  True],\n           [False, False]], dtype=bool)\n\n    Result when mask == `nomask`\n\n    >>> b = ma.masked_array([[1,2],[3,4]])\n    >>> b\n    masked_array(data =\n     [[1 2]\n     [3 4]],\n          mask =\n     False,\n          fill_value=999999)\n    >>> ma.nomask\n    False\n    >>> ma.getmask(b) == ma.nomask\n    True\n    >>> b.mask == ma.nomask\n    True\n\n    '),
               ('numpy.ma.core.getmaskarray',
                ['arr'],
                '\n    Return the mask of a masked array, or full boolean array of False.\n\n    Return the mask of `arr` as an ndarray if `arr` is a `MaskedArray` and\n    the mask is not `nomask`, else return a full boolean array of False of\n    the same shape as `arr`.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input `MaskedArray` for which the mask is required.\n\n    See Also\n    --------\n    getmask : Return the mask of a masked array, or nomask.\n    getdata : Return the data of a masked array as an ndarray.\n\n    Examples\n    --------\n\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n          mask =\n     [[False  True]\n     [False False]],\n          fill_value=999999)\n    >>> ma.getmaskarray(a)\n    array([[False,  True],\n           [False, False]], dtype=bool)\n\n    Result when mask == ``nomask``\n\n    >>> b = ma.masked_array([[1,2],[3,4]])\n    >>> b\n    masked_array(data =\n     [[1 2]\n     [3 4]],\n          mask =\n     False,\n          fill_value=999999)\n    >>> >ma.getmaskarray(b)\n    array([[False, False],\n           [False, False]], dtype=bool)\n\n    '),
               ('numpy.ma.core.is_mask',
                ['m'],
                "\n    Return True if m is a valid, standard mask.\n\n    This function does not check the contents of the input, only that the\n    type is MaskType. In particular, this function returns False if the\n    mask has a flexible dtype.\n\n    Parameters\n    ----------\n    m : array_like\n        Array to test.\n\n    Returns\n    -------\n    result : bool\n        True if `m.dtype.type` is MaskType, False otherwise.\n\n    See Also\n    --------\n    isMaskedArray : Test whether input is an instance of MaskedArray.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> m = ma.masked_equal([0, 1, 0, 2, 3], 0)\n    >>> m\n    masked_array(data = [-- 1 -- 2 3],\n          mask = [ True False  True False False],\n          fill_value=999999)\n    >>> ma.is_mask(m)\n    False\n    >>> ma.is_mask(m.mask)\n    True\n\n    Input must be an ndarray (or have similar attributes)\n    for it to be considered a valid mask.\n\n    >>> m = [False, True, False]\n    >>> ma.is_mask(m)\n    False\n    >>> m = np.array([False, True, False])\n    >>> m\n    array([False,  True, False], dtype=bool)\n    >>> ma.is_mask(m)\n    True\n\n    Arrays with complex dtypes don't return True.\n\n    >>> dtype = np.dtype({'names':['monty', 'pithon'],\n                          'formats':[np.bool, np.bool]})\n    >>> dtype\n    dtype([('monty', '|b1'), ('pithon', '|b1')])\n    >>> m = np.array([(True, False), (False, True), (True, False)],\n                     dtype=dtype)\n    >>> m\n    array([(True, False), (False, True), (True, False)],\n          dtype=[('monty', '|b1'), ('pithon', '|b1')])\n    >>> ma.is_mask(m)\n    False\n\n    "),
               ('numpy.ma.core.make_mask',
                ['m', 'copy=False', 'shrink=True', 'dtype=MaskType'],
                "\n    Create a boolean mask from an array.\n\n    Return `m` as a boolean mask, creating a copy if necessary or requested.\n    The function can accept any sequence that is convertible to integers,\n    or ``nomask``.  Does not require that contents must be 0s and 1s, values\n    of 0 are interepreted as False, everything else as True.\n\n    Parameters\n    ----------\n    m : array_like\n        Potential mask.\n    copy : bool, optional\n        Whether to return a copy of `m` (True) or `m` itself (False).\n    shrink : bool, optional\n        Whether to shrink `m` to ``nomask`` if all its values are False.\n    dtype : dtype, optional\n        Data-type of the output mask. By default, the output mask has\n        a dtype of MaskType (bool). If the dtype is flexible, each field\n        has a boolean dtype.\n\n    Returns\n    -------\n    result : ndarray\n        A boolean mask derived from `m`.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> m = [True, False, True, True]\n    >>> ma.make_mask(m)\n    array([ True, False,  True,  True], dtype=bool)\n    >>> m = [1, 0, 1, 1]\n    >>> ma.make_mask(m)\n    array([ True, False,  True,  True], dtype=bool)\n    >>> m = [1, 0, 2, -3]\n    >>> ma.make_mask(m)\n    array([ True, False,  True,  True], dtype=bool)\n\n    Effect of the `shrink` parameter.\n\n    >>> m = np.zeros(4)\n    >>> m\n    array([ 0.,  0.,  0.,  0.])\n    >>> ma.make_mask(m)\n    False\n    >>> ma.make_mask(m, shrink=False)\n    array([False, False, False, False], dtype=bool)\n\n    Using a flexible `dtype`.\n\n    >>> m = [1, 0, 1, 1]\n    >>> n = [0, 1, 0, 0]\n    >>> arr = []\n    >>> for man, mouse in zip(m, n):\n    ...     arr.append((man, mouse))\n    >>> arr\n    [(1, 0), (0, 1), (1, 0), (1, 0)]\n    >>> dtype = np.dtype({'names':['man', 'mouse'],\n                          'formats':[np.int, np.int]})\n    >>> arr = np.array(arr, dtype=dtype)\n    >>> arr\n    array([(1, 0), (0, 1), (1, 0), (1, 0)],\n          dtype=[('man', '<i4'), ('mouse', '<i4')])\n    >>> ma.make_mask(arr, dtype=dtype)\n    array([(True, False), (False, True), (True, False), (True, False)],\n          dtype=[('man', '|b1'), ('mouse', '|b1')])\n\n    "),
               ('numpy.ma.core.make_mask_none',
                ['newshape', 'dtype=None'],
                "\n    Return a boolean mask of the given shape, filled with False.\n\n    This function returns a boolean ndarray with all entries False, that can\n    be used in common mask manipulations. If a complex dtype is specified, the\n    type of each field is converted to a boolean type.\n\n    Parameters\n    ----------\n    newshape : tuple\n        A tuple indicating the shape of the mask.\n    dtype: {None, dtype}, optional\n        If None, use a MaskType instance. Otherwise, use a new datatype with\n        the same fields as `dtype`, converted to boolean types.\n\n    Returns\n    -------\n    result : ndarray\n        An ndarray of appropriate shape and dtype, filled with False.\n\n    See Also\n    --------\n    make_mask : Create a boolean mask from an array.\n    make_mask_descr : Construct a dtype description list from a given dtype.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> ma.make_mask_none((3,))\n    array([False, False, False], dtype=bool)\n\n    Defining a more complex dtype.\n\n    >>> dtype = np.dtype({'names':['foo', 'bar'],\n                          'formats':[np.float32, np.int]})\n    >>> dtype\n    dtype([('foo', '<f4'), ('bar', '<i4')])\n    >>> ma.make_mask_none((3,), dtype=dtype)\n    array([(False, False), (False, False), (False, False)],\n          dtype=[('foo', '|b1'), ('bar', '|b1')])\n\n    "),
               ('numpy.ma.core.mask_or',
                ['m1', 'm2', 'copy=False', 'shrink=True'],
                '\n    Combine two masks with the ``logical_or`` operator.\n\n    The result may be a view on `m1` or `m2` if the other is `nomask`\n    (i.e. False).\n\n    Parameters\n    ----------\n    m1, m2 : array_like\n        Input masks.\n    copy : bool, optional\n        If copy is False and one of the inputs is `nomask`, return a view\n        of the other input mask. Defaults to False.\n    shrink : bool, optional\n        Whether to shrink the output to `nomask` if all its values are\n        False. Defaults to True.\n\n    Returns\n    -------\n    mask : output mask\n        The result masks values that are masked in either `m1` or `m2`.\n\n    Raises\n    ------\n    ValueError\n        If `m1` and `m2` have different flexible dtypes.\n\n    Examples\n    --------\n    >>> m1 = np.ma.make_mask([0, 1, 1, 0])\n    >>> m2 = np.ma.make_mask([1, 0, 0, 0])\n    >>> np.ma.mask_or(m1, m2)\n    array([ True,  True,  True, False], dtype=bool)\n\n    '),
               ('numpy.ma.core.flatten_mask',
                ['mask'],
                "\n    Returns a completely flattened version of the mask, where nested fields\n    are collapsed.\n\n    Parameters\n    ----------\n    mask : array_like\n        Input array, which will be interpreted as booleans.\n\n    Returns\n    -------\n    flattened_mask : ndarray of bools\n        The flattened input.\n\n    Examples\n    --------\n    >>> mask = np.array([0, 0, 1], dtype=np.bool)\n    >>> flatten_mask(mask)\n    array([False, False,  True], dtype=bool)\n\n    >>> mask = np.array([(0, 0), (0, 1)], dtype=[('a', bool), ('b', bool)])\n    >>> flatten_mask(mask)\n    array([False, False, False,  True], dtype=bool)\n\n    >>> mdtype = [('a', bool), ('b', [('ba', bool), ('bb', bool)])]\n    >>> mask = np.array([(0, (0, 0)), (0, (0, 1))], dtype=mdtype)\n    >>> flatten_mask(mask)\n    array([False, False, False, False, False,  True], dtype=bool)\n\n    "),
               ('numpy.ma.core._check_mask_axis',
                ['mask', 'axis'],
                'Check whether there are masked values along the given axis'),
               ('numpy.ma.core.masked_where',
                ['condition', 'a', 'copy=True'],
                "\n    Mask an array where a condition is met.\n\n    Return `a` as an array masked where `condition` is True.\n    Any masked values of `a` or `condition` are also masked in the output.\n\n    Parameters\n    ----------\n    condition : array_like\n        Masking condition.  When `condition` tests floating point values for\n        equality, consider using ``masked_values`` instead.\n    a : array_like\n        Array to mask.\n    copy : bool\n        If True (default) make a copy of `a` in the result.  If False modify\n        `a` in place and return a view.\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `a` where `condition` is True.\n\n    See Also\n    --------\n    masked_values : Mask using floating point equality.\n    masked_equal : Mask where equal to a given value.\n    masked_not_equal : Mask where `not` equal to a given value.\n    masked_less_equal : Mask where less than or equal to a given value.\n    masked_greater_equal : Mask where greater than or equal to a given value.\n    masked_less : Mask where less than a given value.\n    masked_greater : Mask where greater than a given value.\n    masked_inside : Mask inside a given interval.\n    masked_outside : Mask outside a given interval.\n    masked_invalid : Mask invalid values (NaNs or infs).\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_where(a <= 2, a)\n    masked_array(data = [-- -- -- 3],\n          mask = [ True  True  True False],\n          fill_value=999999)\n\n    Mask array `b` conditional on `a`.\n\n    >>> b = ['a', 'b', 'c', 'd']\n    >>> ma.masked_where(a == 2, b)\n    masked_array(data = [a b -- d],\n          mask = [False False  True False],\n          fill_value=N/A)\n\n    Effect of the `copy` argument.\n\n    >>> c = ma.masked_where(a <= 2, a)\n    >>> c\n    masked_array(data = [-- -- -- 3],\n          mask = [ True  True  True False],\n          fill_value=999999)\n    >>> c[0] = 99\n    >>> c\n    masked_array(data = [99 -- -- 3],\n          mask = [False  True  True False],\n          fill_value=999999)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> c = ma.masked_where(a <= 2, a, copy=False)\n    >>> c[0] = 99\n    >>> c\n    masked_array(data = [99 -- -- 3],\n          mask = [False  True  True False],\n          fill_value=999999)\n    >>> a\n    array([99,  1,  2,  3])\n\n    When `condition` or `a` contain masked values.\n\n    >>> a = np.arange(4)\n    >>> a = ma.masked_where(a == 2, a)\n    >>> a\n    masked_array(data = [0 1 -- 3],\n          mask = [False False  True False],\n          fill_value=999999)\n    >>> b = np.arange(4)\n    >>> b = ma.masked_where(b == 0, b)\n    >>> b\n    masked_array(data = [-- 1 2 3],\n          mask = [ True False False False],\n          fill_value=999999)\n    >>> ma.masked_where(a == 3, b)\n    masked_array(data = [-- 1 -- --],\n          mask = [ True False  True  True],\n          fill_value=999999)\n\n    "),
               ('numpy.ma.core.masked_greater',
                ['x', 'value', 'copy=True'],
                '\n    Mask an array where greater than a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x > value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_greater(a, 2)\n    masked_array(data = [0 1 2 --],\n          mask = [False False False  True],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_greater_equal',
                ['x', 'value', 'copy=True'],
                '\n    Mask an array where greater than or equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x >= value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_greater_equal(a, 2)\n    masked_array(data = [0 1 -- --],\n          mask = [False False  True  True],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_less',
                ['x', 'value', 'copy=True'],
                '\n    Mask an array where less than a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x < value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_less(a, 2)\n    masked_array(data = [-- -- 2 3],\n          mask = [ True  True False False],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_less_equal',
                ['x', 'value', 'copy=True'],
                '\n    Mask an array where less than or equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x <= value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_less_equal(a, 2)\n    masked_array(data = [-- -- -- 3],\n          mask = [ True  True  True False],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_not_equal',
                ['x', 'value', 'copy=True'],
                '\n    Mask an array where `not` equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x != value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_not_equal(a, 2)\n    masked_array(data = [-- -- 2 --],\n          mask = [ True  True False  True],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_equal',
                ['x', 'value', 'copy=True'],
                '\n    Mask an array where equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x == value).  For floating point arrays,\n    consider using ``masked_values(x, value)``.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_values : Mask using floating point equality.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_equal(a, 2)\n    masked_array(data = [0 1 -- 3],\n          mask = [False False  True False],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_inside',
                ['x', 'v1', 'v2', 'copy=True'],
                "\n    Mask an array inside a given interval.\n\n    Shortcut to ``masked_where``, where `condition` is True for `x` inside\n    the interval [v1,v2] (v1 <= x <= v2).  The boundaries `v1` and `v2`\n    can be given in either order.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The array `x` is prefilled with its filling value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n    >>> ma.masked_inside(x, -0.3, 0.3)\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\n          mask = [False False  True  True False False],\n          fill_value=1e+20)\n\n    The order of `v1` and `v2` doesn't matter.\n\n    >>> ma.masked_inside(x, 0.3, -0.3)\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\n          mask = [False False  True  True False False],\n          fill_value=1e+20)\n\n    "),
               ('numpy.ma.core.masked_outside',
                ['x', 'v1', 'v2', 'copy=True'],
                "\n    Mask an array outside a given interval.\n\n    Shortcut to ``masked_where``, where `condition` is True for `x` outside\n    the interval [v1,v2] (x < v1)|(x > v2).\n    The boundaries `v1` and `v2` can be given in either order.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The array `x` is prefilled with its filling value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n    >>> ma.masked_outside(x, -0.3, 0.3)\n    masked_array(data = [-- -- 0.01 0.2 -- --],\n          mask = [ True  True False False  True  True],\n          fill_value=1e+20)\n\n    The order of `v1` and `v2` doesn't matter.\n\n    >>> ma.masked_outside(x, 0.3, -0.3)\n    masked_array(data = [-- -- 0.01 0.2 -- --],\n          mask = [ True  True False False  True  True],\n          fill_value=1e+20)\n\n    "),
               ('numpy.ma.core.masked_object',
                ['x', 'value', 'copy=True', 'shrink=True'],
                "\n    Mask the array `x` where the data are exactly equal to value.\n\n    This function is similar to `masked_values`, but only suitable\n    for object arrays: for floating point, use `masked_values` instead.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to mask\n    value : object\n        Comparison value\n    copy : {True, False}, optional\n        Whether to return a copy of `x`.\n    shrink : {True, False}, optional\n        Whether to collapse a mask full of False to nomask\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `x` where equal to `value`.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_equal : Mask where equal to a given value (integers).\n    masked_values : Mask using floating point equality.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> food = np.array(['green_eggs', 'ham'], dtype=object)\n    >>> # don't eat spoiled food\n    >>> eat = ma.masked_object(food, 'green_eggs')\n    >>> print eat\n    [-- ham]\n    >>> # plain ol` ham is boring\n    >>> fresh_food = np.array(['cheese', 'ham', 'pineapple'], dtype=object)\n    >>> eat = ma.masked_object(fresh_food, 'green_eggs')\n    >>> print eat\n    [cheese ham pineapple]\n\n    Note that `mask` is set to ``nomask`` if possible.\n\n    >>> eat\n    masked_array(data = [cheese ham pineapple],\n          mask = False,\n          fill_value=?)\n\n    "),
               ('numpy.ma.core.masked_values',
                ['x', 'value', 'rtol=1e-05', 'atol=1e-08', 'copy=True', 'shrink=True'],
                '\n    Mask using floating point equality.\n\n    Return a MaskedArray, masked where the data in array `x` are approximately\n    equal to `value`, i.e. where the following condition is True\n\n    (abs(x - value) <= atol+rtol*abs(value))\n\n    The fill_value is set to `value` and the mask is set to ``nomask`` if\n    possible.  For integers, consider using ``masked_equal``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to mask.\n    value : float\n        Masking value.\n    rtol : float, optional\n        Tolerance parameter.\n    atol : float, optional\n        Tolerance parameter (1e-8).\n    copy : bool, optional\n        Whether to return a copy of `x`.\n    shrink : bool, optional\n        Whether to collapse a mask full of False to ``nomask``.\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `x` where approximately equal to `value`.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_equal : Mask where equal to a given value (integers).\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = np.array([1, 1.1, 2, 1.1, 3])\n    >>> ma.masked_values(x, 1.1)\n    masked_array(data = [1.0 -- 2.0 -- 3.0],\n          mask = [False  True False  True False],\n          fill_value=1.1)\n\n    Note that `mask` is set to ``nomask`` if possible.\n\n    >>> ma.masked_values(x, 1.5)\n    masked_array(data = [ 1.   1.1  2.   1.1  3. ],\n          mask = False,\n          fill_value=1.5)\n\n    For integers, the fill value will be different in general to the\n    result of ``masked_equal``.\n\n    >>> x = np.arange(5)\n    >>> x\n    array([0, 1, 2, 3, 4])\n    >>> ma.masked_values(x, 2)\n    masked_array(data = [0 1 -- 3 4],\n          mask = [False False  True False False],\n          fill_value=2)\n    >>> ma.masked_equal(x, 2)\n    masked_array(data = [0 1 -- 3 4],\n          mask = [False False  True False False],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.core.masked_invalid',
                ['a', 'copy=True'],
                '\n    Mask an array where invalid values occur (NaNs or infs).\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = ~(np.isfinite(a)). Any pre-existing mask is conserved.\n    Only applies to arrays with a dtype where NaNs or infs make sense\n    (i.e. floating point types), but accepts any array_like object.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(5, dtype=np.float)\n    >>> a[2] = np.NaN\n    >>> a[3] = np.PINF\n    >>> a\n    array([  0.,   1.,  NaN,  Inf,   4.])\n    >>> ma.masked_invalid(a)\n    masked_array(data = [0.0 1.0 -- -- 4.0],\n          mask = [False False  True  True False],\n          fill_value=1e+20)\n\n    '),
               ('numpy.ma.core._recursive_printoption',
                ['result', 'mask', 'printopt'],
                '\n    Puts printoptions in result where mask is True.\n    Private function allowing for recursion\n    '),
               ('numpy.ma.core._recursive_filled',
                ['a', 'mask', 'fill_value'],
                '\n    Recursively fill `a` with `fill_value`.\n    Private function\n    '),
               ('numpy.ma.core.flatten_structured_array',
                ['a'],
                "\n    Flatten a structured array.\n\n    The data type of the output is chosen such that it can represent all of the\n    (nested) fields.\n\n    Parameters\n    ----------\n    a : structured array\n\n    Returns\n    -------\n    output : masked array or ndarray\n        A flattened masked array if the input is a masked array, otherwise a\n        standard ndarray.\n\n    Examples\n    --------\n    >>> ndtype = [('a', int), ('b', float)]\n    >>> a = np.array([(1, 1), (2, 2)], dtype=ndtype)\n    >>> flatten_structured_array(a)\n    array([[1., 1.],\n           [2., 2.]])\n\n    "),
               ('numpy.ma.core._mareconstruct',
                ['subtype', 'baseclass', 'baseshape', 'basetype'],
                'Internal function that builds a new MaskedArray from the\n    information stored in a pickle.\n\n    '),
               ('numpy.ma.core.isMaskedArray',
                ['x'],
                '\n    Test whether input is an instance of MaskedArray.\n\n    This function returns True if `x` is an instance of MaskedArray\n    and returns False otherwise.  Any object is accepted as input.\n\n    Parameters\n    ----------\n    x : object\n        Object to test.\n\n    Returns\n    -------\n    result : bool\n        True if `x` is a MaskedArray.\n\n    See Also\n    --------\n    isMA : Alias to isMaskedArray.\n    isarray : Alias to isMaskedArray.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.eye(3, 3)\n    >>> a\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n    >>> m = ma.masked_values(a, 0)\n    >>> m\n    masked_array(data =\n     [[1.0 -- --]\n     [-- 1.0 --]\n     [-- -- 1.0]],\n          mask =\n     [[False  True  True]\n     [ True False  True]\n     [ True  True False]],\n          fill_value=0.0)\n    >>> ma.isMaskedArray(a)\n    False\n    >>> ma.isMaskedArray(m)\n    True\n    >>> ma.isMaskedArray([0, 1, 2])\n    False\n\n    '),
               ('numpy.ma.core.array',
                ['data',
                 'dtype=None',
                 'copy=False',
                 'order=False',
                 'mask=nomask',
                 'fill_value=None',
                 'keep_mask=True',
                 'hard_mask=False',
                 'shrink=True',
                 'subok=True',
                 'ndmin=0'],
                'array(data, dtype=None, copy=False, order=False, mask=nomask,\n             fill_value=None, keep_mask=True, hard_mask=False, shrink=True,\n             subok=True, ndmin=0)\n\n    Acts as shortcut to MaskedArray, with options in a different order\n    for convenience.  And backwards compatibility...\n\n    '),
               ('numpy.ma.core.is_masked',
                ['x'],
                "\n    Determine whether input has masked values.\n\n    Accepts any object as input, but always returns False unless the\n    input is a MaskedArray containing masked values.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to check for masked values.\n\n    Returns\n    -------\n    result : bool\n        True if `x` is a MaskedArray with masked values, False otherwise.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.masked_equal([0, 1, 0, 2, 3], 0)\n    >>> x\n    masked_array(data = [-- 1 -- 2 3],\n          mask = [ True False  True False False],\n          fill_value=999999)\n    >>> ma.is_masked(x)\n    True\n    >>> x = ma.masked_equal([0, 1, 0, 2, 3], 42)\n    >>> x\n    masked_array(data = [0 1 0 2 3],\n          mask = False,\n          fill_value=999999)\n    >>> ma.is_masked(x)\n    False\n\n    Always returns False if `x` isn't a MaskedArray.\n\n    >>> x = [False, True, False]\n    >>> ma.is_masked(x)\n    False\n    >>> x = 'a string'\n    >>> ma.is_masked(x)\n    False\n\n    "),
               ('numpy.ma.core.min', ['obj', 'axis=None', 'out=None', 'fill_value=None'], ''),
               ('numpy.ma.core.max', ['obj', 'axis=None', 'out=None', 'fill_value=None'], ''),
               ('numpy.ma.core.ptp',
                ['obj', 'axis=None', 'out=None', 'fill_value=None'],
                'a.ptp(axis=None) =  a.max(axis)-a.min(axis)'),
               ('numpy.ma.core.take',
                ['a', 'indices', 'axis=None', 'out=None', "mode='raise'"],
                '\n    '),
               ('numpy.ma.core.power',
                ['a', 'b', 'third=None'],
                '\n    Returns element-wise base array raised to power from second array.\n\n    This is the masked array version of `numpy.power`. For details see\n    `numpy.power`.\n\n    See Also\n    --------\n    numpy.power\n\n    Notes\n    -----\n    The *out* argument to `numpy.power` is not supported, `third` has to be\n    None.\n\n    '),
               ('numpy.ma.core.argsort',
                ['a', 'axis=None', "kind='quicksort'", 'order=None', 'fill_value=None'],
                'Function version of the eponymous method.'),
               ('numpy.ma.core.argmin',
                ['a', 'axis=None', 'fill_value=None'],
                'Function version of the eponymous method.'),
               ('numpy.ma.core.argmax',
                ['a', 'axis=None', 'fill_value=None'],
                'Function version of the eponymous method.'),
               ('numpy.ma.core.sort',
                ['a',
                 'axis=-1',
                 "kind='quicksort'",
                 'order=None',
                 'endwith=True',
                 'fill_value=None'],
                'Function version of the eponymous method.'),
               ('numpy.ma.core.compressed',
                ['x'],
                '\n    Return all the non-masked data as a 1-D array.\n\n    This function is equivalent to calling the "compressed" method of a\n    `MaskedArray`, see `MaskedArray.compressed` for details.\n\n    See Also\n    --------\n    MaskedArray.compressed\n        Equivalent method.\n\n    '),
               ('numpy.ma.core.concatenate',
                ['arrays', 'axis=0'],
                '\n    Concatenate a sequence of arrays along the given axis.\n\n    Parameters\n    ----------\n    arrays : sequence of array_like\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int, optional\n        The axis along which the arrays will be joined. Default is 0.\n\n    Returns\n    -------\n    result : MaskedArray\n        The concatenated array with any masked entries preserved.\n\n    See Also\n    --------\n    numpy.concatenate : Equivalent function in the top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.arange(3)\n    >>> a[1] = ma.masked\n    >>> b = ma.arange(2, 5)\n    >>> a\n    masked_array(data = [0 -- 2],\n                 mask = [False  True False],\n           fill_value = 999999)\n    >>> b\n    masked_array(data = [2 3 4],\n                 mask = False,\n           fill_value = 999999)\n    >>> ma.concatenate([a, b])\n    masked_array(data = [0 -- 2 2 3 4],\n                 mask = [False  True False False False False],\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.core.count', ['a', 'axis=None'], ''),
               ('numpy.ma.core.diag',
                ['v', 'k=0'],
                '\n    Extract a diagonal or construct a diagonal array.\n\n    This function is the equivalent of `numpy.diag` that takes masked\n    values into account, see `numpy.diag` for details.\n\n    See Also\n    --------\n    numpy.diag : Equivalent function for ndarrays.\n\n    '),
               ('numpy.ma.core.expand_dims',
                ['x', 'axis'],
                '\n    Expand the shape of an array.\n\n    Expands the shape of the array by including a new axis before the one\n    specified by the `axis` parameter. This function behaves the same as\n    `numpy.expand_dims` but preserves masked elements.\n\n    See Also\n    --------\n    numpy.expand_dims : Equivalent function in top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.array([1, 2, 4])\n    >>> x[1] = ma.masked\n    >>> x\n    masked_array(data = [1 -- 4],\n                 mask = [False  True False],\n           fill_value = 999999)\n    >>> np.expand_dims(x, axis=0)\n    array([[1, 2, 4]])\n    >>> ma.expand_dims(x, axis=0)\n    masked_array(data =\n     [[1 -- 4]],\n                 mask =\n     [[False  True False]],\n           fill_value = 999999)\n\n    The same result can be achieved using slicing syntax with `np.newaxis`.\n\n    >>> x[np.newaxis, :]\n    masked_array(data =\n     [[1 -- 4]],\n                 mask =\n     [[False  True False]],\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.core.left_shift',
                ['a', 'n'],
                '\n    Shift the bits of an integer to the left.\n\n    This is the masked array version of `numpy.left_shift`, for details\n    see that function.\n\n    See Also\n    --------\n    numpy.left_shift\n\n    '),
               ('numpy.ma.core.right_shift',
                ['a', 'n'],
                '\n    Shift the bits of an integer to the right.\n\n    This is the masked array version of `numpy.right_shift`, for details\n    see that function.\n\n    See Also\n    --------\n    numpy.right_shift\n\n    '),
               ('numpy.ma.core.put',
                ['a', 'indices', 'values', "mode='raise'"],
                '\n    Set storage-indexed locations to corresponding values.\n\n    This function is equivalent to `MaskedArray.put`, see that method\n    for details.\n\n    See Also\n    --------\n    MaskedArray.put\n\n    '),
               ('numpy.ma.core.putmask',
                ['a', 'mask', 'values'],
                '\n    Changes elements of an array based on conditional and input values.\n\n    This is the masked array version of `numpy.putmask`, for details see\n    `numpy.putmask`.\n\n    See Also\n    --------\n    numpy.putmask\n\n    Notes\n    -----\n    Using a masked array as `values` will **not** transform a `ndarray` into\n    a `MaskedArray`.\n\n    '),
               ('numpy.ma.core.transpose',
                ['a', 'axes=None'],
                '\n    Permute the dimensions of an array.\n\n    This function is exactly equivalent to `numpy.transpose`.\n\n    See Also\n    --------\n    numpy.transpose : Equivalent function in top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.arange(4).reshape((2,2))\n    >>> x[1, 1] = ma.masked\n    >>>> x\n    masked_array(data =\n     [[0 1]\n     [2 --]],\n                 mask =\n     [[False False]\n     [False  True]],\n           fill_value = 999999)\n    >>> ma.transpose(x)\n    masked_array(data =\n     [[0 2]\n     [1 --]],\n                 mask =\n     [[False False]\n     [False  True]],\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.core.reshape',
                ['a', 'new_shape', "order='C'"],
                '\n    Returns an array containing the same data with a new shape.\n\n    Refer to `MaskedArray.reshape` for full documentation.\n\n    See Also\n    --------\n    MaskedArray.reshape : equivalent function\n\n    '),
               ('numpy.ma.core.resize',
                ['x', 'new_shape'],
                '\n    Return a new masked array with the specified size and shape.\n\n    This is the masked equivalent of the `numpy.resize` function. The new\n    array is filled with repeated copies of `x` (in the order that the\n    data are stored in memory). If `x` is masked, the new array will be\n    masked, and the new mask will be a repetition of the old one.\n\n    See Also\n    --------\n    numpy.resize : Equivalent function in the top level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.array([[1, 2] ,[3, 4]])\n    >>> a[0, 1] = ma.masked\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n                 mask =\n     [[False  True]\n     [False False]],\n           fill_value = 999999)\n    >>> np.resize(a, (3, 3))\n    array([[1, 2, 3],\n           [4, 1, 2],\n           [3, 4, 1]])\n    >>> ma.resize(a, (3, 3))\n    masked_array(data =\n     [[1 -- 3]\n     [4 1 --]\n     [3 4 1]],\n                 mask =\n     [[False  True False]\n     [False False  True]\n     [False False False]],\n           fill_value = 999999)\n\n    A MaskedArray is always returned, regardless of the input type.\n\n    >>> a = np.array([[1, 2] ,[3, 4]])\n    >>> ma.resize(a, (3, 3))\n    masked_array(data =\n     [[1 2 3]\n     [4 1 2]\n     [3 4 1]],\n                 mask =\n     False,\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.core.rank', ['obj'], 'maskedarray version of the numpy function.'),
               ('numpy.ma.core.shape', ['obj'], 'maskedarray version of the numpy function.'),
               ('numpy.ma.core.size',
                ['obj', 'axis=None'],
                'maskedarray version of the numpy function.'),
               ('numpy.ma.core.where',
                ['condition', 'x=None', 'y=None'],
                '\n    Return a masked array with elements from x or y, depending on condition.\n\n    Returns a masked array, shaped like condition, where the elements\n    are from `x` when `condition` is True, and from `y` otherwise.\n    If neither `x` nor `y` are given, the function returns a tuple of\n    indices where `condition` is True (the result of\n    ``condition.nonzero()``).\n\n    Parameters\n    ----------\n    condition : array_like, bool\n        The condition to meet. For each True element, yield the corresponding\n        element from `x`, otherwise from `y`.\n    x, y : array_like, optional\n        Values from which to choose. `x` and `y` need to have the same shape\n        as condition, or be broadcast-able to that shape.\n\n    Returns\n    -------\n    out : MaskedArray or tuple of ndarrays\n        The resulting masked array if `x` and `y` were given, otherwise\n        the result of ``condition.nonzero()``.\n\n    See Also\n    --------\n    numpy.where : Equivalent function in the top-level NumPy module.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9.).reshape(3, 3), mask=[[0, 1, 0],\n    ...                                                    [1, 0, 1],\n    ...                                                    [0, 1, 0]])\n    >>> print x\n    [[0.0 -- 2.0]\n     [-- 4.0 --]\n     [6.0 -- 8.0]]\n    >>> np.ma.where(x > 5)    # return the indices where x > 5\n    (array([2, 2]), array([0, 2]))\n\n    >>> print np.ma.where(x > 5, x, -3.1416)\n    [[-3.1416 -- -3.1416]\n     [-- -3.1416 --]\n     [6.0 -- 8.0]]\n\n    '),
               ('numpy.ma.core.choose',
                ['indices', 'choices', 'out=None', "mode='raise'"],
                "\n    Use an index array to construct a new array from a set of choices.\n\n    Given an array of integers and a set of n choice arrays, this method\n    will create a new array that merges each of the choice arrays.  Where a\n    value in `a` is i, the new array will have the value that choices[i]\n    contains in the same place.\n\n    Parameters\n    ----------\n    a : ndarray of ints\n        This array must contain integers in ``[0, n-1]``, where n is the\n        number of choices.\n    choices : sequence of arrays\n        Choice arrays. The index array and all of the choices should be\n        broadcastable to the same shape.\n    out : array, optional\n        If provided, the result will be inserted into this array. It should\n        be of the appropriate shape and `dtype`.\n    mode : {'raise', 'wrap', 'clip'}, optional\n        Specifies how out-of-bounds indices will behave.\n\n        * 'raise' : raise an error\n        * 'wrap' : wrap around\n        * 'clip' : clip to the range\n\n    Returns\n    -------\n    merged_array : array\n\n    See Also\n    --------\n    choose : equivalent function\n\n    Examples\n    --------\n    >>> choice = np.array([[1,1,1], [2,2,2], [3,3,3]])\n    >>> a = np.array([2, 1, 0])\n    >>> np.ma.choose(a, choice)\n    masked_array(data = [3 2 1],\n          mask = False,\n          fill_value=999999)\n\n    "),
               ('numpy.ma.core.round_',
                ['a', 'decimals=0', 'out=None'],
                "\n    Return a copy of a, rounded to 'decimals' places.\n\n    When 'decimals' is negative, it specifies the number of positions\n    to the left of the decimal point.  The real and imaginary parts of\n    complex numbers are rounded separately. Nothing is done if the\n    array is not of float type and 'decimals' is greater than or equal\n    to 0.\n\n    Parameters\n    ----------\n    decimals : int\n        Number of decimals to round to. May be negative.\n    out : array_like\n        Existing array to use for output.\n        If not given, returns a default copy of a.\n\n    Notes\n    -----\n    If out is given and does not have a mask attribute, the mask of a\n    is lost!\n\n    "),
               ('numpy.ma.core.inner',
                ['a', 'b'],
                '\n    Returns the inner product of a and b for arrays of floating point types.\n\n    Like the generic NumPy equivalent the product sum is over the last dimension\n    of a and b.\n\n    Notes\n    -----\n    The first argument is not conjugated.\n\n    '),
               ('numpy.ma.core.outer', ['a', 'b'], 'maskedarray version of the numpy function.'),
               ('numpy.ma.core.allequal',
                ['a', 'b', 'fill_value=True'],
                '\n    Return True if all entries of a and b are equal, using\n    fill_value as a truth value where either or both are masked.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    fill_value : bool, optional\n        Whether masked values in a or b are considered equal (True) or not\n        (False).\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance, False otherwise. If either array contains NaN,\n        then False is returned.\n\n    See Also\n    --------\n    all, any\n    numpy.ma.allclose\n\n    Examples\n    --------\n    >>> a = ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])\n    >>> a\n    masked_array(data = [10000000000.0 1e-07 --],\n          mask = [False False  True],\n          fill_value=1e+20)\n\n    >>> b = array([1e10, 1e-7, -42.0])\n    >>> b\n    array([  1.00000000e+10,   1.00000000e-07,  -4.20000000e+01])\n    >>> ma.allequal(a, b, fill_value=False)\n    False\n    >>> ma.allequal(a, b)\n    True\n\n    '),
               ('numpy.ma.core.allclose',
                ['a', 'b', 'masked_equal=True', 'rtol=1e-05', 'atol=1e-08'],
                '\n    Returns True if two arrays are element-wise equal within a tolerance.\n\n    This function is equivalent to `allclose` except that masked values\n    are treated as equal (default) or unequal, depending on the `masked_equal`\n    argument.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    masked_equal : bool, optional\n        Whether masked values in `a` and `b` are considered equal (True) or not\n        (False). They are considered equal by default.\n    rtol : float, optional\n        Relative tolerance. The relative difference is equal to ``rtol * b``.\n        Default is 1e-5.\n    atol : float, optional\n        Absolute tolerance. The absolute difference is equal to `atol`.\n        Default is 1e-8.\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance, False otherwise. If either array contains NaN, then\n        False is returned.\n\n    See Also\n    --------\n    all, any\n    numpy.allclose : the non-masked `allclose`.\n\n    Notes\n    -----\n    If the following equation is element-wise True, then `allclose` returns\n    True::\n\n      absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\n\n    Return True if all elements of `a` and `b` are equal subject to\n    given tolerances.\n\n    Examples\n    --------\n    >>> a = ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])\n    >>> a\n    masked_array(data = [10000000000.0 1e-07 --],\n                 mask = [False False  True],\n           fill_value = 1e+20)\n    >>> b = ma.array([1e10, 1e-8, -42.0], mask=[0, 0, 1])\n    >>> ma.allclose(a, b)\n    False\n\n    >>> a = ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])\n    >>> b = ma.array([1.00001e10, 1e-9, -42.0], mask=[0, 0, 1])\n    >>> ma.allclose(a, b)\n    True\n    >>> ma.allclose(a, b, masked_equal=False)\n    False\n\n    Masked values are not compared directly.\n\n    >>> a = ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])\n    >>> b = ma.array([1.00001e10, 1e-9, 42.0], mask=[0, 0, 1])\n    >>> ma.allclose(a, b)\n    True\n    >>> ma.allclose(a, b, masked_equal=False)\n    False\n\n    '),
               ('numpy.ma.core.asarray',
                ['a', 'dtype=None', 'order=None'],
                "\n    Convert the input to a masked array of the given data-type.\n\n    No copy is performed if the input is already an `ndarray`. If `a` is\n    a subclass of `MaskedArray`, a base class `MaskedArray` is returned.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to a masked array. This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists, ndarrays and masked arrays.\n    dtype : dtype, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('FORTRAN') memory\n        representation.  Default is 'C'.\n\n    Returns\n    -------\n    out : MaskedArray\n        Masked array interpretation of `a`.\n\n    See Also\n    --------\n    asanyarray : Similar to `asarray`, but conserves subclasses.\n\n    Examples\n    --------\n    >>> x = np.arange(10.).reshape(2, 5)\n    >>> x\n    array([[ 0.,  1.,  2.,  3.,  4.],\n           [ 5.,  6.,  7.,  8.,  9.]])\n    >>> np.ma.asarray(x)\n    masked_array(data =\n     [[ 0.  1.  2.  3.  4.]\n     [ 5.  6.  7.  8.  9.]],\n                 mask =\n     False,\n           fill_value = 1e+20)\n    >>> type(np.ma.asarray(x))\n    <class 'numpy.ma.core.MaskedArray'>\n\n    "),
               ('numpy.ma.core.asanyarray',
                ['a', 'dtype=None'],
                "\n    Convert the input to a masked array, conserving subclasses.\n\n    If `a` is a subclass of `MaskedArray`, its class is conserved.\n    No copy is performed if the input is already an `ndarray`.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.\n    dtype : dtype, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('FORTRAN') memory\n        representation.  Default is 'C'.\n\n    Returns\n    -------\n    out : MaskedArray\n        MaskedArray interpretation of `a`.\n\n    See Also\n    --------\n    asarray : Similar to `asanyarray`, but does not conserve subclass.\n\n    Examples\n    --------\n    >>> x = np.arange(10.).reshape(2, 5)\n    >>> x\n    array([[ 0.,  1.,  2.,  3.,  4.],\n           [ 5.,  6.,  7.,  8.,  9.]])\n    >>> np.ma.asanyarray(x)\n    masked_array(data =\n     [[ 0.  1.  2.  3.  4.]\n     [ 5.  6.  7.  8.  9.]],\n                 mask =\n     False,\n           fill_value = 1e+20)\n    >>> type(np.ma.asanyarray(x))\n    <class 'numpy.ma.core.MaskedArray'>\n\n    "),
               ('numpy.ma.core.dump',
                ['a', 'F'],
                '\n    Pickle a masked array to a file.\n\n    This is a wrapper around ``cPickle.dump``.\n\n    Parameters\n    ----------\n    a : MaskedArray\n        The array to be pickled.\n    F : str or file-like object\n        The file to pickle `a` to. If a string, the full path to the file.\n\n    '),
               ('numpy.ma.core.dumps',
                ['a'],
                '\n    Return a string corresponding to the pickling of a masked array.\n\n    This is a wrapper around ``cPickle.dumps``.\n\n    Parameters\n    ----------\n    a : MaskedArray\n        The array for which the string representation of the pickle is\n        returned.\n\n    '),
               ('numpy.ma.core.load',
                ['F'],
                '\n    Wrapper around ``cPickle.load`` which accepts either a file-like object\n    or a filename.\n\n    Parameters\n    ----------\n    F : str or file\n        The file or file name to load.\n\n    See Also\n    --------\n    dump : Pickle an array\n\n    Notes\n    -----\n    This is different from `numpy.load`, which does not use cPickle but loads\n    the NumPy binary .npy format.\n\n    '),
               ('numpy.ma.core.loads',
                ['strg'],
                '\n    Load a pickle from the current string.\n\n    The result of ``cPickle.loads(strg)`` is returned.\n\n    Parameters\n    ----------\n    strg : str\n        The string to load.\n\n    See Also\n    --------\n    dumps : Return a string corresponding to the pickling of a masked array.\n\n    '),
               ('numpy.ma.core.fromfile', ['file', 'dtype=float', 'count=-1', "sep=''"], ''),
               ('numpy.ma.core.fromflex',
                ['fxarray'],
                "\n    Build a masked array from a suitable flexible-type array.\n\n    The input array has to have a data-type with ``_data`` and ``_mask``\n    fields. This type of array is output by `MaskedArray.toflex`.\n\n    Parameters\n    ----------\n    fxarray : ndarray\n        The structured input array, containing ``_data`` and ``_mask``\n        fields. If present, other fields are discarded.\n\n    Returns\n    -------\n    result : MaskedArray\n        The constructed masked array.\n\n    See Also\n    --------\n    MaskedArray.toflex : Build a flexible-type array from a masked array.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[0] + [1, 0] * 4)\n    >>> rec = x.toflex()\n    >>> rec\n    array([[(0, False), (1, True), (2, False)],\n           [(3, True), (4, False), (5, True)],\n           [(6, False), (7, True), (8, False)]],\n          dtype=[('_data', '<i4'), ('_mask', '|b1')])\n    >>> x2 = np.ma.fromflex(rec)\n    >>> x2\n    masked_array(data =\n     [[0 -- 2]\n     [-- 4 --]\n     [6 -- 8]],\n                 mask =\n     [[False  True False]\n     [ True False  True]\n     [False  True False]],\n           fill_value = 999999)\n\n    Extra fields can be present in the structured array but are discarded:\n\n    >>> dt = [('_data', '<i4'), ('_mask', '|b1'), ('field3', '<f4')]\n    >>> rec2 = np.zeros((2, 2), dtype=dt)\n    >>> rec2\n    array([[(0, False, 0.0), (0, False, 0.0)],\n           [(0, False, 0.0), (0, False, 0.0)]],\n          dtype=[('_data', '<i4'), ('_mask', '|b1'), ('field3', '<f4')])\n    >>> y = np.ma.fromflex(rec2)\n    >>> y\n    masked_array(data =\n     [[0 0]\n     [0 0]],\n                 mask =\n     [[False False]\n     [False False]],\n           fill_value = 999999)\n\n    "),
               ('numpy.ma.bench.timer', ['s', "v=''", 'nloop=500', 'nrep=3'], ''),
               ('numpy.ma.bench.compare_functions_1v',
                ['func', 'nloop=500', 'xs=xs', 'nmxs=nmxs', 'xl=xl', 'nmxl=nmxl'],
                ''),
               ('numpy.ma.bench.compare_methods',
                ['methodname',
                 'args',
                 "vars='x'",
                 'nloop=500',
                 'test=True',
                 'xs=xs',
                 'nmxs=nmxs',
                 'xl=xl',
                 'nmxl=nmxl'],
                ''),
               ('numpy.ma.bench.compare_functions_2v',
                ['func',
                 'nloop=500',
                 'test=True',
                 'xs=xs',
                 'nmxs=nmxs',
                 'ys=ys',
                 'nmys=nmys',
                 'xl=xl',
                 'nmxl=nmxl',
                 'yl=yl',
                 'nmyl=nmyl'],
                ''),
               ('numpy.ma.extras.issequence',
                ['seq'],
                'Is seq a sequence (ndarray, list or tuple)?'),
               ('numpy.ma.extras.count_masked',
                ['arr', 'axis=None'],
                '\n    Count the number of masked elements along the given axis.\n\n    Parameters\n    ----------\n    arr : array_like\n        An array with (possibly) masked elements.\n    axis : int, optional\n        Axis along which to count. If None (default), a flattened\n        version of the array is used.\n\n    Returns\n    -------\n    count : int, ndarray\n        The total number of masked elements (axis=None) or the number\n        of masked elements along each slice of the given axis.\n\n    See Also\n    --------\n    MaskedArray.count : Count non-masked elements.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(9).reshape((3,3))\n    >>> a = ma.array(a)\n    >>> a[1, 0] = ma.masked\n    >>> a[1, 2] = ma.masked\n    >>> a[2, 1] = ma.masked\n    >>> a\n    masked_array(data =\n     [[0 1 2]\n     [-- 4 --]\n     [6 -- 8]],\n          mask =\n     [[False False False]\n     [ True False  True]\n     [False  True False]],\n          fill_value=999999)\n    >>> ma.count_masked(a)\n    3\n\n    When the `axis` keyword is used an array is returned.\n\n    >>> ma.count_masked(a, axis=0)\n    array([1, 1, 1])\n    >>> ma.count_masked(a, axis=1)\n    array([0, 2, 1])\n\n    '),
               ('numpy.ma.extras.masked_all',
                ['shape', 'dtype=float'],
                "\n    Empty masked array with all elements masked.\n\n    Return an empty masked array of the given shape and dtype, where all the\n    data are masked.\n\n    Parameters\n    ----------\n    shape : tuple\n        Shape of the required MaskedArray.\n    dtype : dtype, optional\n        Data type of the output.\n\n    Returns\n    -------\n    a : MaskedArray\n        A masked array with all data masked.\n\n    See Also\n    --------\n    masked_all_like : Empty masked array modelled on an existing array.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> ma.masked_all((3, 3))\n    masked_array(data =\n     [[-- -- --]\n     [-- -- --]\n     [-- -- --]],\n          mask =\n     [[ True  True  True]\n     [ True  True  True]\n     [ True  True  True]],\n          fill_value=1e+20)\n\n    The `dtype` parameter defines the underlying data type.\n\n    >>> a = ma.masked_all((3, 3))\n    >>> a.dtype\n    dtype('float64')\n    >>> a = ma.masked_all((3, 3), dtype=np.int32)\n    >>> a.dtype\n    dtype('int32')\n\n    "),
               ('numpy.ma.extras.masked_all_like',
                ['arr'],
                "\n    Empty masked array with the properties of an existing array.\n\n    Return an empty masked array of the same shape and dtype as\n    the array `arr`, where all the data are masked.\n\n    Parameters\n    ----------\n    arr : ndarray\n        An array describing the shape and dtype of the required MaskedArray.\n\n    Returns\n    -------\n    a : MaskedArray\n        A masked array with all data masked.\n\n    Raises\n    ------\n    AttributeError\n        If `arr` doesn't have a shape attribute (i.e. not an ndarray)\n\n    See Also\n    --------\n    masked_all : Empty masked array with all elements masked.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> arr = np.zeros((2, 3), dtype=np.float32)\n    >>> arr\n    array([[ 0.,  0.,  0.],\n           [ 0.,  0.,  0.]], dtype=float32)\n    >>> ma.masked_all_like(arr)\n    masked_array(data =\n     [[-- -- --]\n     [-- -- --]],\n          mask =\n     [[ True  True  True]\n     [ True  True  True]],\n          fill_value=1e+20)\n\n    The dtype of the masked array matches the dtype of `arr`.\n\n    >>> arr.dtype\n    dtype('float32')\n    >>> ma.masked_all_like(arr).dtype\n    dtype('float32')\n\n    "),
               ('numpy.ma.extras.flatten_inplace', ['seq'], 'Flatten a sequence in place.'),
               ('numpy.ma.extras.apply_along_axis',
                ['func1d', 'axis', 'arr', '*args', '**kwargs'],
                '\n    (This docstring should be overwritten)\n    '),
               ('numpy.ma.extras.apply_over_axes',
                ['func', 'a', 'axes'],
                '\n    (This docstring will be overwritten)\n    '),
               ('numpy.ma.extras.average',
                ['a', 'axis=None', 'weights=None', 'returned=False'],
                '\n    Return the weighted average of array over the given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Data to be averaged.\n        Masked entries are not taken into account in the computation.\n    axis : int, optional\n        Axis along which the variance is computed. The default is to compute\n        the variance of the flattened array.\n    weights : array_like, optional\n        The importance that each element has in the computation of the average.\n        The weights array can either be 1-D (in which case its length must be\n        the size of `a` along the given axis) or of the same shape as `a`.\n        If ``weights=None``, then all data in `a` are assumed to have a\n        weight equal to one.\n    returned : bool, optional\n        Flag indicating whether a tuple ``(result, sum of weights)``\n        should be returned as output (True), or just the result (False).\n        Default is False.\n\n    Returns\n    -------\n    average, [sum_of_weights] : (tuple of) scalar or MaskedArray\n        The average along the specified axis. When returned is `True`,\n        return a tuple with the average as the first element and the sum\n        of the weights as the second element. The return type is `np.float64`\n        if `a` is of integer type, otherwise it is of the same type as `a`.\n        If returned, `sum_of_weights` is of the same type as `average`.\n\n    Examples\n    --------\n    >>> a = np.ma.array([1., 2., 3., 4.], mask=[False, False, True, True])\n    >>> np.ma.average(a, weights=[3, 1, 0, 0])\n    1.25\n\n    >>> x = np.ma.arange(6.).reshape(3, 2)\n    >>> print x\n    [[ 0.  1.]\n     [ 2.  3.]\n     [ 4.  5.]]\n    >>> avg, sumweights = np.ma.average(x, axis=0, weights=[1, 2, 3],\n    ...                                 returned=True)\n    >>> print avg\n    [2.66666666667 3.66666666667]\n\n    '),
               ('numpy.ma.extras.median',
                ['a', 'axis=None', 'out=None', 'overwrite_input=False'],
                '\n    Compute the median along the specified axis.\n\n    Returns the median of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int, optional\n        Axis along which the medians are computed. The default (None) is\n        to compute the median along a flattened version of the array.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output\n        but the type will be cast if necessary.\n    overwrite_input : bool, optional\n        If True, then allow use of memory of input array (a) for\n        calculations. The input array will be modified by the call to\n        median. This will save memory when you do not need to preserve\n        the contents of the input array. Treat the input as undefined,\n        but it will probably be fully or partially sorted. Default is\n        False. Note that, if `overwrite_input` is True, and the input\n        is not already an `ndarray`, an error will be raised.\n\n    Returns\n    -------\n    median : ndarray\n        A new array holding the result is returned unless out is\n        specified, in which case a reference to out is returned.\n        Return data-type is `float64` for integers and floats smaller than\n        `float64`, or the input data-type, otherwise.\n\n    See Also\n    --------\n    mean\n\n    Notes\n    -----\n    Given a vector ``V`` with ``N`` non masked values, the median of ``V``\n    is the middle value of a sorted copy of ``V`` (``Vs``) - i.e.\n    ``Vs[(N-1)/2]``, when ``N`` is odd, or ``{Vs[N/2 - 1] + Vs[N/2]}/2``\n    when ``N`` is even.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(8), mask=[0]*4 + [1]*4)\n    >>> np.ma.extras.median(x)\n    1.5\n\n    >>> x = np.ma.array(np.arange(10).reshape(2, 5), mask=[0]*6 + [1]*4)\n    >>> np.ma.extras.median(x)\n    2.5\n    >>> np.ma.extras.median(x, axis=-1, overwrite_input=True)\n    masked_array(data = [ 2.  5.],\n                 mask = False,\n           fill_value = 1e+20)\n\n    '),
               ('numpy.ma.extras.compress_rowcols',
                ['x', 'axis=None'],
                '\n    Suppress the rows and/or columns of a 2-D array that contain\n    masked values.\n\n    The suppression behavior is selected with the `axis` parameter.\n\n    - If axis is None, both rows and columns are suppressed.\n    - If axis is 0, only rows are suppressed.\n    - If axis is 1 or -1, only columns are suppressed.\n\n    Parameters\n    ----------\n    axis : int, optional\n        Axis along which to perform the operation. Default is None.\n\n    Returns\n    -------\n    compressed_array : ndarray\n        The compressed array.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\n    ...                                                   [1, 0, 0],\n    ...                                                   [0, 0, 0]])\n    >>> x\n    masked_array(data =\n     [[-- 1 2]\n     [-- 4 5]\n     [6 7 8]],\n                 mask =\n     [[ True False False]\n     [ True False False]\n     [False False False]],\n           fill_value = 999999)\n\n    >>> np.ma.extras.compress_rowcols(x)\n    array([[7, 8]])\n    >>> np.ma.extras.compress_rowcols(x, 0)\n    array([[6, 7, 8]])\n    >>> np.ma.extras.compress_rowcols(x, 1)\n    array([[1, 2],\n           [4, 5],\n           [7, 8]])\n\n    '),
               ('numpy.ma.extras.compress_rows',
                ['a'],
                '\n    Suppress whole rows of a 2-D array that contain masked values.\n\n    This is equivalent to ``np.ma.extras.compress_rowcols(a, 0)``, see\n    `extras.compress_rowcols` for details.\n\n    See Also\n    --------\n    extras.compress_rowcols\n\n    '),
               ('numpy.ma.extras.compress_cols',
                ['a'],
                '\n    Suppress whole columns of a 2-D array that contain masked values.\n\n    This is equivalent to ``np.ma.extras.compress_rowcols(a, 1)``, see\n    `extras.compress_rowcols` for details.\n\n    See Also\n    --------\n    extras.compress_rowcols\n\n    '),
               ('numpy.ma.extras.mask_rowcols',
                ['a', 'axis=None'],
                "\n    Mask rows and/or columns of a 2D array that contain masked values.\n\n    Mask whole rows and/or columns of a 2D array that contain\n    masked values.  The masking behavior is selected using the\n    `axis` parameter.\n\n      - If `axis` is None, rows *and* columns are masked.\n      - If `axis` is 0, only rows are masked.\n      - If `axis` is 1 or -1, only columns are masked.\n\n    Parameters\n    ----------\n    a : array_like, MaskedArray\n        The array to mask.  If not a MaskedArray instance (or if no array\n        elements are masked).  The result is a MaskedArray with `mask` set\n        to `nomask` (False). Must be a 2D array.\n    axis : int, optional\n        Axis along which to perform the operation. If None, applies to a\n        flattened version of the array.\n\n    Returns\n    -------\n    a : MaskedArray\n        A modified version of the input array, masked depending on the value\n        of the `axis` parameter.\n\n    Raises\n    ------\n    NotImplementedError\n        If input array `a` is not 2D.\n\n    See Also\n    --------\n    mask_rows : Mask rows of a 2D array that contain masked values.\n    mask_cols : Mask cols of a 2D array that contain masked values.\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The input array's mask is modified by this function.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.zeros((3, 3), dtype=np.int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = ma.masked_equal(a, 1)\n    >>> a\n    masked_array(data =\n     [[0 0 0]\n     [0 -- 0]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [False  True False]\n     [False False False]],\n          fill_value=999999)\n    >>> ma.mask_rowcols(a)\n    masked_array(data =\n     [[0 -- 0]\n     [-- -- --]\n     [0 -- 0]],\n          mask =\n     [[False  True False]\n     [ True  True  True]\n     [False  True False]],\n          fill_value=999999)\n\n    "),
               ('numpy.ma.extras.mask_rows',
                ['a', 'axis=None'],
                '\n    Mask rows of a 2D array that contain masked values.\n\n    This function is a shortcut to ``mask_rowcols`` with `axis` equal to 0.\n\n    See Also\n    --------\n    mask_rowcols : Mask rows and/or columns of a 2D array.\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.zeros((3, 3), dtype=np.int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = ma.masked_equal(a, 1)\n    >>> a\n    masked_array(data =\n     [[0 0 0]\n     [0 -- 0]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [False  True False]\n     [False False False]],\n          fill_value=999999)\n    >>> ma.mask_rows(a)\n    masked_array(data =\n     [[0 0 0]\n     [-- -- --]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [ True  True  True]\n     [False False False]],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.extras.mask_cols',
                ['a', 'axis=None'],
                '\n    Mask columns of a 2D array that contain masked values.\n\n    This function is a shortcut to ``mask_rowcols`` with `axis` equal to 1.\n\n    See Also\n    --------\n    mask_rowcols : Mask rows and/or columns of a 2D array.\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.zeros((3, 3), dtype=np.int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = ma.masked_equal(a, 1)\n    >>> a\n    masked_array(data =\n     [[0 0 0]\n     [0 -- 0]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [False  True False]\n     [False False False]],\n          fill_value=999999)\n    >>> ma.mask_cols(a)\n    masked_array(data =\n     [[0 -- 0]\n     [0 -- 0]\n     [0 -- 0]],\n          mask =\n     [[False  True False]\n     [False  True False]\n     [False  True False]],\n          fill_value=999999)\n\n    '),
               ('numpy.ma.extras.dot',
                ['a', 'b', 'strict=False'],
                '\n    Return the dot product of two arrays.\n\n    .. note::\n      Works only with 2-D arrays at the moment.\n\n    This function is the equivalent of `numpy.dot` that takes masked values\n    into account, see `numpy.dot` for details.\n\n    Parameters\n    ----------\n    a, b : ndarray\n        Inputs arrays.\n    strict : bool, optional\n        Whether masked data are propagated (True) or set to 0 (False) for the\n        computation. Default is False.\n        Propagating the mask means that if a masked value appears in a row or\n        column, the whole row or column is considered masked.\n\n    See Also\n    --------\n    numpy.dot : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> a = ma.array([[1, 2, 3], [4, 5, 6]], mask=[[1, 0, 0], [0, 0, 0]])\n    >>> b = ma.array([[1, 2], [3, 4], [5, 6]], mask=[[1, 0], [0, 0], [0, 0]])\n    >>> np.ma.dot(a, b)\n    masked_array(data =\n     [[21 26]\n     [45 64]],\n                 mask =\n     [[False False]\n     [False False]],\n           fill_value = 999999)\n    >>> np.ma.dot(a, b, strict=True)\n    masked_array(data =\n     [[-- --]\n     [-- 64]],\n                 mask =\n     [[ True  True]\n     [ True False]],\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.extras.ediff1d',
                ['arr', 'to_end=None', 'to_begin=None'],
                '\n    Compute the differences between consecutive elements of an array.\n\n    This function is the equivalent of `numpy.ediff1d` that takes masked\n    values into account, see `numpy.ediff1d` for details.\n\n    See Also\n    --------\n    numpy.ediff1d : Equivalent function for ndarrays.\n\n    '),
               ('numpy.ma.extras.unique',
                ['ar1', 'return_index=False', 'return_inverse=False'],
                '\n    Finds the unique elements of an array.\n\n    Masked values are considered the same element (masked). The output array\n    is always a masked array. See `numpy.unique` for more details.\n\n    See Also\n    --------\n    numpy.unique : Equivalent function for ndarrays.\n\n    '),
               ('numpy.ma.extras.intersect1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Returns the unique elements common to both arrays.\n\n    Masked values are considered equal one to the other.\n    The output is always a masked array.\n\n    See `numpy.intersect1d` for more details.\n\n    See Also\n    --------\n    numpy.intersect1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> x = array([1, 3, 3, 3], mask=[0, 0, 0, 1])\n    >>> y = array([3, 1, 1, 1], mask=[0, 0, 0, 1])\n    >>> intersect1d(x, y)\n    masked_array(data = [1 3 --],\n                 mask = [False False  True],\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.extras.setxor1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Set exclusive-or of 1-D arrays with unique elements.\n\n    The output is always a masked array. See `numpy.setxor1d` for more details.\n\n    See Also\n    --------\n    numpy.setxor1d : Equivalent function for ndarrays.\n\n    '),
               ('numpy.ma.extras.in1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Test whether each element of an array is also present in a second\n    array.\n\n    The output is always a masked array. See `numpy.in1d` for more details.\n\n    See Also\n    --------\n    numpy.in1d : Equivalent function for ndarrays.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    '),
               ('numpy.ma.extras.union1d',
                ['ar1', 'ar2'],
                '\n    Union of two arrays.\n\n    The output is always a masked array. See `numpy.union1d` for more details.\n\n    See also\n    --------\n    numpy.union1d : Equivalent function for ndarrays.\n\n    '),
               ('numpy.ma.extras.setdiff1d',
                ['ar1', 'ar2', 'assume_unique=False'],
                '\n    Set difference of 1D arrays with unique elements.\n\n    The output is always a masked array. See `numpy.setdiff1d` for more\n    details.\n\n    See Also\n    --------\n    numpy.setdiff1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> x = np.ma.array([1, 2, 3, 4], mask=[0, 1, 0, 1])\n    >>> np.ma.extras.setdiff1d(x, [1, 2])\n    masked_array(data = [3 --],\n                 mask = [False  True],\n           fill_value = 999999)\n\n    '),
               ('numpy.ma.extras._covhelper',
                ['x', 'y=None', 'rowvar=True', 'allow_masked=True'],
                '\n    Private function for the computation of covariance and correlation\n    coefficients.\n\n    '),
               ('numpy.ma.extras.cov',
                ['x', 'y=None', 'rowvar=True', 'bias=False', 'allow_masked=True', 'ddof=None'],
                '\n    Estimate the covariance matrix.\n\n    Except for the handling of missing data this function does the same as\n    `numpy.cov`. For more details and examples, see `numpy.cov`.\n\n    By default, masked values are recognized as such. If `x` and `y` have the\n    same shape, a common mask is allocated: if ``x[i,j]`` is masked, then\n    ``y[i,j]`` will also be masked.\n    Setting `allow_masked` to False will raise an exception if values are\n    missing in either of the input arrays.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `x` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        form as `x`.\n    rowvar : bool, optional\n        If `rowvar` is True (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : bool, optional\n        Default normalization (False) is by ``(N-1)``, where ``N`` is the\n        number of observations given (unbiased estimate). If `bias` is True,\n        then normalization is by ``N``. This keyword can be overridden by\n        the keyword ``ddof`` in numpy versions >= 1.5.\n    allow_masked : bool, optional\n        If True, masked values are propagated pair-wise: if a value is masked\n        in `x`, the corresponding value is masked in `y`.\n        If False, raises a `ValueError` exception when some values are missing.\n    ddof : {None, int}, optional\n        .. versionadded:: 1.5\n        If not ``None`` normalization is by ``(N - ddof)``, where ``N`` is\n        the number of observations; this overrides the value implied by\n        ``bias``. The default value is ``None``.\n\n\n    Raises\n    ------\n    ValueError:\n        Raised if some values are missing and `allow_masked` is False.\n\n    See Also\n    --------\n    numpy.cov\n\n    '),
               ('numpy.ma.extras.corrcoef',
                ['x', 'y=None', 'rowvar=True', 'bias=False', 'allow_masked=True', 'ddof=None'],
                '\n    Return correlation coefficients of the input array.\n\n    Except for the handling of missing data this function does the same as\n    `numpy.corrcoef`. For more details and examples, see `numpy.corrcoef`.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `x` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        shape as `x`.\n    rowvar : bool, optional\n        If `rowvar` is True (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : bool, optional\n        Default normalization (False) is by ``(N-1)``, where ``N`` is the\n        number of observations given (unbiased estimate). If `bias` is 1,\n        then normalization is by ``N``. This keyword can be overridden by\n        the keyword ``ddof`` in numpy versions >= 1.5.\n    allow_masked : bool, optional\n        If True, masked values are propagated pair-wise: if a value is masked\n        in `x`, the corresponding value is masked in `y`.\n        If False, raises an exception.\n    ddof : {None, int}, optional\n        .. versionadded:: 1.5\n        If not ``None`` normalization is by ``(N - ddof)``, where ``N`` is\n        the number of observations; this overrides the value implied by\n        ``bias``. The default value is ``None``.\n\n    See Also\n    --------\n    numpy.corrcoef : Equivalent function in top-level NumPy module.\n    cov : Estimate the covariance matrix.\n\n    '),
               ('numpy.ma.extras.flatnotmasked_edges',
                ['a'],
                '\n    Find the indices of the first and last unmasked values.\n\n    Expects a 1-D `MaskedArray`, returns None if all values are masked.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input 1-D `MaskedArray`\n\n    Returns\n    -------\n    edges : ndarray or None\n        The indices of first and last non-masked value in the array.\n        Returns None if all values are masked.\n\n    See Also\n    --------\n    flatnotmasked_contiguous, notmasked_contiguous, notmasked_edges,\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 1-D arrays.\n\n    Examples\n    --------\n    >>> a = np.ma.arange(10)\n    >>> flatnotmasked_edges(a)\n    [0,-1]\n\n    >>> mask = (a < 3) | (a > 8) | (a == 5)\n    >>> a[mask] = np.ma.masked\n    >>> np.array(a[~a.mask])\n    array([3, 4, 6, 7, 8])\n\n    >>> flatnotmasked_edges(a)\n    array([3, 8])\n\n    >>> a[:] = np.ma.masked\n    >>> print flatnotmasked_edges(ma)\n    None\n\n    '),
               ('numpy.ma.extras.notmasked_edges',
                ['a', 'axis=None'],
                '\n    Find the indices of the first and last unmasked values along an axis.\n\n    If all values are masked, return None.  Otherwise, return a list\n    of two tuples, corresponding to the indices of the first and last\n    unmasked values respectively.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    axis : int, optional\n        Axis along which to perform the operation.\n        If None (default), applies to a flattened version of the array.\n\n    Returns\n    -------\n    edges : ndarray or list\n        An array of start and end indexes if there are any masked data in\n        the array. If there are no masked data in the array, `edges` is a\n        list of the first and last index.\n\n    See Also\n    --------\n    flatnotmasked_contiguous, flatnotmasked_edges, notmasked_contiguous,\n    clump_masked, clump_unmasked\n\n    Examples\n    --------\n    >>> a = np.arange(9).reshape((3, 3))\n    >>> m = np.zeros_like(a)\n    >>> m[1:, 1:] = 1\n\n    >>> am = np.ma.array(a, mask=m)\n    >>> np.array(am[~am.mask])\n    array([0, 1, 2, 3, 6])\n\n    >>> np.ma.extras.notmasked_edges(ma)\n    array([0, 6])\n\n    '),
               ('numpy.ma.extras.flatnotmasked_contiguous',
                ['a'],
                '\n    Find contiguous unmasked data in a masked array along the given axis.\n\n    Parameters\n    ----------\n    a : narray\n        The input array.\n\n    Returns\n    -------\n    slice_list : list\n        A sorted sequence of slices (start index, end index).\n\n    See Also\n    --------\n    flatnotmasked_edges, notmasked_contiguous, notmasked_edges,\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 2-D arrays at most.\n\n    Examples\n    --------\n    >>> a = np.ma.arange(10)\n    >>> np.ma.extras.flatnotmasked_contiguous(a)\n    slice(0, 10, None)\n\n    >>> mask = (a < 3) | (a > 8) | (a == 5)\n    >>> a[mask] = np.ma.masked\n    >>> np.array(a[~a.mask])\n    array([3, 4, 6, 7, 8])\n\n    >>> np.ma.extras.flatnotmasked_contiguous(a)\n    [slice(3, 5, None), slice(6, 9, None)]\n    >>> a[:] = np.ma.masked\n    >>> print np.ma.extras.flatnotmasked_edges(a)\n    None\n\n    '),
               ('numpy.ma.extras.notmasked_contiguous',
                ['a', 'axis=None'],
                '\n    Find contiguous unmasked data in a masked array along the given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    axis : int, optional\n        Axis along which to perform the operation.\n        If None (default), applies to a flattened version of the array.\n\n    Returns\n    -------\n    endpoints : list\n        A list of slices (start and end indexes) of unmasked indexes\n        in the array.\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 2-D arrays at most.\n\n    Examples\n    --------\n    >>> a = np.arange(9).reshape((3, 3))\n    >>> mask = np.zeros_like(a)\n    >>> mask[1:, 1:] = 1\n\n    >>> ma = np.ma.array(a, mask=mask)\n    >>> np.array(ma[~ma.mask])\n    array([0, 1, 2, 3, 6])\n\n    >>> np.ma.extras.notmasked_contiguous(ma)\n    [slice(0, 4, None), slice(6, 7, None)]\n\n    '),
               ('numpy.ma.extras._ezclump',
                ['mask'],
                '\n    Finds the clumps (groups of data with the same values) for a 1D bool array.\n\n    Returns a series of slices.\n    '),
               ('numpy.ma.extras.clump_unmasked',
                ['a'],
                '\n    Return list of slices corresponding to the unmasked clumps of a 1-D array.\n    (A "clump" is defined as a contiguous region of the array).\n\n    Parameters\n    ----------\n    a : ndarray\n        A one-dimensional masked array.\n\n    Returns\n    -------\n    slices : list of slice\n        The list of slices, one for each continuous region of unmasked\n        elements in `a`.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,\n    notmasked_contiguous, clump_masked\n\n    Examples\n    --------\n    >>> a = np.ma.masked_array(np.arange(10))\n    >>> a[[0, 1, 2, 6, 8, 9]] = np.ma.masked\n    >>> np.ma.extras.clump_unmasked(a)\n    [slice(3, 6, None), slice(7, 8, None)]\n\n    '),
               ('numpy.ma.extras.clump_masked',
                ['a'],
                '\n    Returns a list of slices corresponding to the masked clumps of a 1-D array.\n    (A "clump" is defined as a contiguous region of the array).\n\n    Parameters\n    ----------\n    a : ndarray\n        A one-dimensional masked array.\n\n    Returns\n    -------\n    slices : list of slice\n        The list of slices, one for each continuous region of masked elements\n        in `a`.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,\n    notmasked_contiguous, clump_unmasked\n\n    Examples\n    --------\n    >>> a = np.ma.masked_array(np.arange(10))\n    >>> a[[0, 1, 2, 6, 8, 9]] = np.ma.masked\n    >>> np.ma.extras.clump_masked(a)\n    [slice(0, 3, None), slice(6, 7, None), slice(8, 10, None)]\n\n    '),
               ('numpy.ma.extras.vander',
                ['x', 'n=None'],
                '\n    Masked values in the input array result in rows of zeros.\n    '),
               ('numpy.ma.extras.polyfit',
                ['x', 'y', 'deg', 'rcond=None', 'full=False'],
                '\n    Any masked values in x is propagated in y, and vice-versa.\n    '),
               ('numpy.ma.setupscons.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.ma.mrecords._getformats',
                ['data'],
                'Returns the formats of each array of arraylist as a comma-separated string.'),
               ('numpy.ma.mrecords._checknames',
                ['descr', 'names=None'],
                "Checks that the field names of the descriptor ``descr`` are not some\nreserved keywords. If this is the case, a default 'f%i' is substituted.\nIf the argument `names` is not None, updates the field names to valid names.\n    "),
               ('numpy.ma.mrecords._get_fieldmask', ['self'], ''),
               ('numpy.ma.mrecords._mrreconstruct',
                ['subtype', 'baseclass', 'baseshape', 'basetype'],
                'Internal function that builds a new MaskedArray from the\n    information stored in a pickle.\n\n    '),
               ('numpy.ma.mrecords.fromarrays',
                ['arraylist',
                 'dtype=None',
                 'shape=None',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None',
                 'fill_value=None'],
                'Creates a mrecarray from a (flat) list of masked arrays.\n\n    Parameters\n    ----------\n    arraylist : sequence\n        A list of (masked) arrays. Each element of the sequence is first converted\n        to a masked array if needed. If a 2D array is passed as argument, it is\n        processed line by line\n    dtype : {None, dtype}, optional\n        Data type descriptor.\n    shape : {None, integer}, optional\n        Number of records. If None, shape is defined from the shape of the\n        first array in the list.\n    formats : {None, sequence}, optional\n        Sequence of formats for each individual field. If None, the formats will\n        be autodetected by inspecting the fields and selecting the highest dtype\n        possible.\n    names : {None, sequence}, optional\n        Sequence of the names of each field.\n    fill_value : {None, sequence}, optional\n        Sequence of data to be used as filling values.\n\n    Notes\n    -----\n    Lists of tuples should be preferred over lists of lists for faster processing.\n    '),
               ('numpy.ma.mrecords.fromrecords',
                ['reclist',
                 'dtype=None',
                 'shape=None',
                 'formats=None',
                 'names=None',
                 'titles=None',
                 'aligned=False',
                 'byteorder=None',
                 'fill_value=None',
                 'mask=nomask'],
                'Creates a MaskedRecords from a list of records.\n\n    Parameters\n    ----------\n    reclist : sequence\n        A list of records. Each element of the sequence is first converted\n        to a masked array if needed. If a 2D array is passed as argument, it is\n        processed line by line\n    dtype : {None, dtype}, optional\n        Data type descriptor.\n    shape : {None,int}, optional\n        Number of records. If None, ``shape`` is defined from the shape of the\n        first array in the list.\n    formats : {None, sequence}, optional\n        Sequence of formats for each individual field. If None, the formats will\n        be autodetected by inspecting the fields and selecting the highest dtype\n        possible.\n    names : {None, sequence}, optional\n        Sequence of the names of each field.\n    fill_value : {None, sequence}, optional\n        Sequence of data to be used as filling values.\n    mask : {nomask, sequence}, optional.\n        External mask to apply on the data.\n\n    Notes\n    -----\n    Lists of tuples should be preferred over lists of lists for faster processing.\n    '),
               ('numpy.ma.mrecords._guessvartypes',
                ['arr'],
                'Tries to guess the dtypes of the str_ ndarray `arr`, by testing element-wise\nconversion. Returns a list of dtypes.\nThe array is first converted to ndarray. If the array is 2D, the test is performed\non the first line. An exception is raised if the file is 3D or more.\n    '),
               ('numpy.ma.mrecords.openfile', ['fname'], 'Opens the file handle of file `fname`'),
               ('numpy.ma.mrecords.fromtextfile',
                ['fname',
                 'delimitor=None',
                 "commentchar='#'",
                 "missingchar=''",
                 'varnames=None',
                 'vartypes=None'],
                "Creates a mrecarray from data stored in the file `filename`.\n\n    Parameters\n    ----------\n    filename : {file name/handle}\n        Handle of an opened file.\n    delimitor : {None, string}, optional\n        Alphanumeric character used to separate columns in the file.\n        If None, any (group of) white spacestring(s) will be used.\n    commentchar : {'#', string}, optional\n        Alphanumeric character used to mark the start of a comment.\n    missingchar : {'', string}, optional\n        String indicating missing data, and used to create the masks.\n    varnames : {None, sequence}, optional\n        Sequence of the variable names. If None, a list will be created from\n        the first non empty line of the file.\n    vartypes : {None, sequence}, optional\n        Sequence of the variables dtypes. If None, it will be estimated from\n        the first non-commented line.\n\n\n    Ultra simple: the varnames are in the header, one line"),
               ('numpy.ma.mrecords.addfield',
                ['mrecord', 'newfield', 'newfieldname=None'],
                "Adds a new field to the masked record array, using `newfield` as data\nand `newfieldname` as name. If `newfieldname` is None, the new field name is\nset to 'fi', where `i` is the number of existing fields.\n    "),
               ('numpy.ma.testutils.approx',
                ['a', 'b', 'fill_value=True', 'rtol=1e-05', 'atol=1e-08'],
                'Returns true if all components of a and b are equal subject to given tolerances.\n\nIf fill_value is True, masked values considered equal. Otherwise, masked values\nare considered unequal.\nThe relative error rtol should be positive and << 1.0\nThe absolute error atol comes into play for those elements of b that are very\nsmall or zero; it says how small a must be also.\n    '),
               ('numpy.ma.testutils.almost',
                ['a', 'b', 'decimal=6', 'fill_value=True'],
                'Returns True if a and b are equal up to decimal places.\nIf fill_value is True, masked values considered equal. Otherwise, masked values\nare considered unequal.\n    '),
               ('numpy.ma.testutils._assert_equal_on_sequences',
                ['actual', 'desired', "err_msg=''"],
                'Asserts the equality of two non-array sequences.'),
               ('numpy.ma.testutils.assert_equal_records',
                ['a', 'b'],
                'Asserts that two records are equal. Pretty crude for now.'),
               ('numpy.ma.testutils.assert_equal',
                ['actual', 'desired', "err_msg=''"],
                'Asserts that two items are equal.'),
               ('numpy.ma.testutils.fail_if_equal',
                ['actual', 'desired', "err_msg=''"],
                'Raises an assertion error if two items are equal.\n    '),
               ('numpy.ma.testutils.assert_almost_equal',
                ['actual', 'desired', 'decimal=7', "err_msg=''", 'verbose=True'],
                'Asserts that two items are almost equal.\n    The test is equivalent to abs(desired-actual) < 0.5 * 10**(-decimal)\n    '),
               ('numpy.ma.testutils.assert_array_compare',
                ['comparison',
                 'x',
                 'y',
                 "err_msg=''",
                 'verbose=True',
                 "header=''",
                 'fill_value=True'],
                'Asserts that a comparison relation between two masked arrays is satisfied\n    elementwise.'),
               ('numpy.ma.testutils.assert_array_equal',
                ['x', 'y', "err_msg=''", 'verbose=True'],
                'Checks the elementwise equality of two masked arrays.'),
               ('numpy.ma.testutils.fail_if_array_equal',
                ['x', 'y', "err_msg=''", 'verbose=True'],
                'Raises an assertion error if two masked arrays are not equal (elementwise).'),
               ('numpy.ma.testutils.assert_array_approx_equal',
                ['x', 'y', 'decimal=6', "err_msg=''", 'verbose=True'],
                'Checks the elementwise equality of two masked arrays, up to a given\n    number of decimals.'),
               ('numpy.ma.testutils.assert_array_almost_equal',
                ['x', 'y', 'decimal=6', "err_msg=''", 'verbose=True'],
                'Checks the elementwise equality of two masked arrays, up to a given\n    number of decimals.'),
               ('numpy.ma.testutils.assert_array_less',
                ['x', 'y', "err_msg=''", 'verbose=True'],
                'Checks that x is smaller than y elementwise.'),
               ('numpy.ma.testutils.assert_mask_equal',
                ['m1', 'm2', "err_msg=''"],
                'Asserts the equality of two masks.'),
               ('numpy.ma.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('test_core.test_masked_array', [], ''),
               ('test_old_ma.eq', ['v', 'w', "msg=''"], ''),
               ('test_old_ma.eqmask', ['m1', 'm2'], ''),
               ('numpy.random.__RandomState_ctor',
                [],
                'Return a RandomState instance.\n\n    This function exists solely to assist (un)pickling.\n    '),
               ('numpy.random.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.random.setupscons.testcode_wincrypt', [], ''),
               ('numpy.random.setup.needs_mingw_ftime_workaround', [], ''),
               ('numpy.random.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.random.setup.testcode_wincrypt', [], ''),
               ('numpy.compat.py3k.asbytes', ['s'], ''),
               ('numpy.compat.py3k.asstr', ['s'], ''),
               ('numpy.compat.py3k.isfileobj', ['f'], ''),
               ('numpy.compat.py3k.open_latin1', ['filename', "mode='r'"], ''),
               ('numpy.compat.py3k.isfileobj', ['f'], ''),
               ('numpy.compat.py3k.asunicode', ['s'], ''),
               ('numpy.compat.py3k.open_latin1', ['filename', "mode='r'"], ''),
               ('numpy.compat.py3k.getexception', [], ''),
               ('numpy.compat.py3k.asbytes_nested', ['x'], ''),
               ('numpy.compat.py3k.asunicode_nested', ['x'], ''),
               ('numpy.compat._inspect.ismethod',
                ['object'],
                'Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        im_class        class object in which this method belongs\n        im_func         function object containing implementation of method\n        im_self         instance to which this method is bound, or None'),
               ('numpy.compat._inspect.isfunction',
                ['object'],
                'Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        func_code       code object containing compiled function bytecode\n        func_defaults   tuple of any default values for arguments\n        func_doc        (same as __doc__)\n        func_globals    global namespace in which this function was defined\n        func_name       (same as __name__)'),
               ('numpy.compat._inspect.iscode',
                ['object'],
                'Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount     number of arguments (not including * or ** args)\n        co_code         string of raw compiled bytecode\n        co_consts       tuple of constants used in the bytecode\n        co_filename     name of file in which this code object was created\n        co_firstlineno  number of first line in Python source code\n        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n        co_lnotab       encoded mapping of line numbers to bytecode indices\n        co_name         name with which this code object was defined\n        co_names        tuple of names of local variables\n        co_nlocals      number of local variables\n        co_stacksize    virtual machine stack space required\n        co_varnames     tuple of names of arguments and local variables'),
               ('numpy.compat._inspect.getargs',
                ['co'],
                "Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where 'args' is\n    a list of argument names (possibly containing nested lists), and\n    'varargs' and 'varkw' are the names of the * and ** arguments or None."),
               ('numpy.compat._inspect.getargspec',
                ['func'],
                "Get the names and default values of a function's arguments.\n\n    A tuple of four things is returned: (args, varargs, varkw, defaults).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    "),
               ('numpy.compat._inspect.getargvalues',
                ['frame'],
                "Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame."),
               ('numpy.compat._inspect.joinseq', ['seq'], ''),
               ('numpy.compat._inspect.strseq',
                ['object', 'convert', 'join=joinseq'],
                'Recursively walk a sequence, stringifying each element.'),
               ('numpy.compat._inspect.formatargspec',
                ['args',
                 'varargs=None',
                 'varkw=None',
                 'defaults=None',
                 'formatarg=str',
                 "formatvarargs=lambda name: '*'+name",
                 "formatvarkw=lambda name: '**'+name",
                 "formatvalue=lambda value: '='+repr(value)",
                 'join=joinseq'],
                'Format an argument spec from the 4 values returned by getargspec.\n\n    The first four arguments are (args, varargs, varkw, defaults).  The\n    other four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'),
               ('numpy.compat._inspect.formatargvalues',
                ['args',
                 'varargs',
                 'varkw',
                 'locals',
                 'formatarg=str',
                 "formatvarargs=lambda name: '*'+name",
                 "formatvarkw=lambda name: '**'+name",
                 "formatvalue=lambda value: '='+repr(value)",
                 'join=joinseq'],
                'Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'),
               ('numpy.compat._inspect.foo', ['x', 'y', 'z=None'], ''),
               ('numpy.compat.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.compat.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.f2py.diagnose.run_command', ['cmd'], ''),
               ('numpy.f2py.diagnose.run', [], ''),
               ('numpy.f2py.capi_maps.getctype', ['var'], '\n    Determines C type\n    '),
               ('numpy.f2py.capi_maps.getstrlength', ['var'], ''),
               ('numpy.f2py.capi_maps.getarrdims', ['a', 'var', 'verbose=0'], ''),
               ('numpy.f2py.capi_maps.getpydocsign', ['a', 'var'], ''),
               ('numpy.f2py.capi_maps.getarrdocsign', ['a', 'var'], ''),
               ('numpy.f2py.capi_maps.getinit', ['a', 'var'], ''),
               ('numpy.f2py.capi_maps.sign2map',
                ['a', 'var'],
                '\n    varname,ctype,atype\n    init,init.r,init.i,pytype\n    vardebuginfo,vardebugshowvalue,varshowvalue\n    varrfromat\n    intent\n    '),
               ('numpy.f2py.capi_maps.routsign2map',
                ['rout'],
                '\n    name,NAME,begintitle,endtitle\n    rname,ctype,rformat\n    routdebugshowvalue\n    '),
               ('numpy.f2py.capi_maps.modsign2map', ['m'], '\n    modulename\n    '),
               ('numpy.f2py.capi_maps.cb_sign2map', ['a', 'var', 'index=None'], ''),
               ('numpy.f2py.capi_maps.cb_routsign2map',
                ['rout', 'um'],
                '\n    name,begintitle,endtitle,argname\n    ctype,rctype,maxnofargs,nofoptargs,returncptr\n    '),
               ('numpy.f2py.capi_maps.common_sign2map', ['a', 'var'], ''),
               ('numpy.f2py.cfuncs.buildcfuncs', [], ''),
               ('numpy.f2py.cfuncs.append_needs', ['need', 'flag=1'], ''),
               ('numpy.f2py.cfuncs.get_needs', [], ''),
               ('numpy.f2py.f2py_testing.cmdline', [], ''),
               ('numpy.f2py.f2py_testing.run', ['runtest', 'test_functions', 'repeat=1'], ''),
               ('numpy.f2py.common_rules.findcommonblocks', ['block', 'top=1'], ''),
               ('numpy.f2py.common_rules.buildhooks', ['m'], ''),
               ('numpy.f2py.compile',
                ['source',
                 "modulename='untitled'",
                 "extra_args=''",
                 'verbose=1',
                 'source_fn=None'],
                ' Build extension module from processing source with f2py.\n    Read the source of this function for more information.\n    '),
               ('numpy.f2py.f2py2e.scaninputline', ['inputline'], ''),
               ('numpy.f2py.f2py2e.callcrackfortran', ['files', 'options'], ''),
               ('numpy.f2py.f2py2e.buildmodules', ['lst'], ''),
               ('numpy.f2py.f2py2e.dict_append', ['d_out', 'd_in'], ''),
               ('numpy.f2py.f2py2e.run_main',
                ['comline_list'],
                "Run f2py as if string.join(comline_list,' ') is used as a command line.\n    In case of using -h flag, return None.\n    "),
               ('numpy.f2py.f2py2e.filter_files',
                ['prefix', 'suffix', 'files', 'remove_prefix=None'],
                '\n    Filter files by prefix and suffix.\n    '),
               ('numpy.f2py.f2py2e.get_prefix', ['module'], ''),
               ('numpy.f2py.f2py2e.run_compile', [], '\n    Do it all in one call!\n    '),
               ('numpy.f2py.f2py2e.main', [], ''),
               ('numpy.f2py.func2subr.var2fixfortran',
                ['vars', 'a', 'fa=None', 'f90mode=None'],
                ''),
               ('numpy.f2py.func2subr.createfuncwrapper', ['rout', 'signature=0'], ''),
               ('numpy.f2py.func2subr.createsubrwrapper', ['rout', 'signature=0'], ''),
               ('numpy.f2py.func2subr.assubr', ['rout'], ''),
               ('numpy.f2py.rules.buildmodule', ['m', 'um'], '\n    Return\n    '),
               ('numpy.f2py.rules.buildapi', ['rout'], ''),
               ('numpy.f2py.cb_rules.buildcallbacks', ['m'], ''),
               ('numpy.f2py.cb_rules.buildcallback', ['rout', 'um'], ''),
               ('numpy.f2py.auxfuncs.outmess', ['t'], ''),
               ('numpy.f2py.auxfuncs.debugcapi', ['var'], ''),
               ('numpy.f2py.auxfuncs._isstring', ['var'], ''),
               ('numpy.f2py.auxfuncs.isstring', ['var'], ''),
               ('numpy.f2py.auxfuncs.ischaracter', ['var'], ''),
               ('numpy.f2py.auxfuncs.isstringarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isarrayofstrings', ['var'], ''),
               ('numpy.f2py.auxfuncs.isarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isscalar', ['var'], ''),
               ('numpy.f2py.auxfuncs.iscomplex', ['var'], ''),
               ('numpy.f2py.auxfuncs.islogical', ['var'], ''),
               ('numpy.f2py.auxfuncs.isinteger', ['var'], ''),
               ('numpy.f2py.auxfuncs.isreal', ['var'], ''),
               ('numpy.f2py.auxfuncs.get_kind', ['var'], ''),
               ('numpy.f2py.auxfuncs.islong_long', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned_char', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned_short', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned_long_long', ['var'], ''),
               ('numpy.f2py.auxfuncs.isdouble', ['var'], ''),
               ('numpy.f2py.auxfuncs.islong_double', ['var'], ''),
               ('numpy.f2py.auxfuncs.islong_complex', ['var'], ''),
               ('numpy.f2py.auxfuncs.iscomplexarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isint1array', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned_chararray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned_shortarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsignedarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isunsigned_long_longarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.issigned_chararray', ['var'], ''),
               ('numpy.f2py.auxfuncs.issigned_shortarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.issigned_array', ['var'], ''),
               ('numpy.f2py.auxfuncs.issigned_long_longarray', ['var'], ''),
               ('numpy.f2py.auxfuncs.isallocatable', ['var'], ''),
               ('numpy.f2py.auxfuncs.ismutable', ['var'], ''),
               ('numpy.f2py.auxfuncs.ismoduleroutine', ['rout'], ''),
               ('numpy.f2py.auxfuncs.ismodule', ['rout'], ''),
               ('numpy.f2py.auxfuncs.isfunction', ['rout'], ''),
               ('numpy.f2py.auxfuncs.isfunction_wrap', ['rout'], ''),
               ('numpy.f2py.auxfuncs.issubroutine', ['rout'], ''),
               ('numpy.f2py.auxfuncs.issubroutine_wrap', ['rout'], ''),
               ('numpy.f2py.auxfuncs.hasassumedshape', ['rout'], ''),
               ('numpy.f2py.auxfuncs.isroutine', ['rout'], ''),
               ('numpy.f2py.auxfuncs.islogicalfunction', ['rout'], ''),
               ('numpy.f2py.auxfuncs.islong_longfunction', ['rout'], ''),
               ('numpy.f2py.auxfuncs.islong_doublefunction', ['rout'], ''),
               ('numpy.f2py.auxfuncs.iscomplexfunction', ['rout'], ''),
               ('numpy.f2py.auxfuncs.iscomplexfunction_warn', ['rout'], ''),
               ('numpy.f2py.auxfuncs.isstringfunction', ['rout'], ''),
               ('numpy.f2py.auxfuncs.hasexternals', ['rout'], ''),
               ('numpy.f2py.auxfuncs.isthreadsafe', ['rout'], ''),
               ('numpy.f2py.auxfuncs.hasvariables', ['rout'], ''),
               ('numpy.f2py.auxfuncs.isoptional', ['var'], ''),
               ('numpy.f2py.auxfuncs.isexternal', ['var'], ''),
               ('numpy.f2py.auxfuncs.isrequired', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_in', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_inout', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_out', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_hide', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_nothide', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_c', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_cache', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_copy', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_overwrite', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_callback', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_inplace', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_aux', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_aligned4', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_aligned8', ['var'], ''),
               ('numpy.f2py.auxfuncs.isintent_aligned16', ['var'], ''),
               ('numpy.f2py.auxfuncs.isprivate', ['var'], ''),
               ('numpy.f2py.auxfuncs.hasinitvalue', ['var'], ''),
               ('numpy.f2py.auxfuncs.hasinitvalueasstring', ['var'], ''),
               ('numpy.f2py.auxfuncs.hasnote', ['var'], ''),
               ('numpy.f2py.auxfuncs.hasresultnote', ['rout'], ''),
               ('numpy.f2py.auxfuncs.hascommon', ['rout'], ''),
               ('numpy.f2py.auxfuncs.containscommon', ['rout'], ''),
               ('numpy.f2py.auxfuncs.containsmodule', ['block'], ''),
               ('numpy.f2py.auxfuncs.hasbody', ['rout'], ''),
               ('numpy.f2py.auxfuncs.hascallstatement', ['rout'], ''),
               ('numpy.f2py.auxfuncs.istrue', ['var'], ''),
               ('numpy.f2py.auxfuncs.isfalse', ['var'], ''),
               ('numpy.f2py.auxfuncs.l_and', ['*f'], ''),
               ('numpy.f2py.auxfuncs.l_or', ['*f'], ''),
               ('numpy.f2py.auxfuncs.l_not', ['f'], ''),
               ('numpy.f2py.auxfuncs.isdummyroutine', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getfortranname', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getmultilineblock',
                ['rout', 'blockname', 'comment=1', 'counter=0'],
                ''),
               ('numpy.f2py.auxfuncs.getcallstatement', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getcallprotoargument', ['rout', 'cb_map={}'], ''),
               ('numpy.f2py.auxfuncs.getusercode', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getusercode1', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getpymethoddef', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getargs', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getargs2', ['rout'], ''),
               ('numpy.f2py.auxfuncs.getrestdoc', ['rout'], ''),
               ('numpy.f2py.auxfuncs.gentitle', ['name'], ''),
               ('numpy.f2py.auxfuncs.flatlist', ['l'], ''),
               ('numpy.f2py.auxfuncs.stripcomma', ['s'], ''),
               ('numpy.f2py.auxfuncs.replace', ['str', 'd', "defaultsep=''"], ''),
               ('numpy.f2py.auxfuncs.dictappend', ['rd', 'ar'], ''),
               ('numpy.f2py.auxfuncs.applyrules', ['rules', 'd', 'var={}'], ''),
               ('numpy.f2py.setupscons.configuration',
                ["parent_package=''", 'top_path=None'],
                ''),
               ('numpy.f2py.f90mod_rules.findf90modules', ['m'], ''),
               ('numpy.f2py.f90mod_rules.buildhooks', ['pymod'], ''),
               ('numpy.f2py.use_rules.buildusevars', ['m', 'r'], ''),
               ('numpy.f2py.use_rules.buildusevar',
                ['name', 'realname', 'vars', 'usemodulename'],
                ''),
               ('numpy.f2py.setup.configuration', ["parent_package=''", 'top_path=None'], ''),
               ('numpy.f2py.crackfortran.show', ['o', 'f=0'], ''),
               ('numpy.f2py.crackfortran.outmess', ['line', 'flag=1'], ''),
               ('numpy.f2py.crackfortran.rmbadname1', ['name'], ''),
               ('numpy.f2py.crackfortran.rmbadname', ['names'], ''),
               ('numpy.f2py.crackfortran.undo_rmbadname1', ['name'], ''),
               ('numpy.f2py.crackfortran.undo_rmbadname', ['names'], ''),
               ('numpy.f2py.crackfortran.getextension', ['name'], ''),
               ('numpy.f2py.crackfortran.is_free_format',
                ['file'],
                'Check if file is in free format Fortran.'),
               ('numpy.f2py.crackfortran.readfortrancode',
                ['ffile', 'dowithline=show', 'istop=1'],
                '\n    Read fortran codes from files and\n     1) Get rid of comments, line continuations, and empty lines; lower cases.\n     2) Call dowithline(line) on every line.\n     3) Recursively call itself when statement "include \'<filename>\'" is met.\n    '),
               ('numpy.f2py.crackfortran._simplifyargs', ['argsline'], ''),
               ('numpy.f2py.crackfortran.crackline',
                ['line', 'reset=0'],
                '\n    reset=-1  --- initialize\n    reset=0   --- crack the line\n    reset=1   --- final check if mismatch of blocks occured\n\n    Cracked data is saved in grouplist[0].\n    '),
               ('numpy.f2py.crackfortran.markouterparen', ['line'], ''),
               ('numpy.f2py.crackfortran.markoutercomma', ['line', "comma=','"], ''),
               ('numpy.f2py.crackfortran.unmarkouterparen', ['line'], ''),
               ('numpy.f2py.crackfortran.appenddecl', ['decl', 'decl2', 'force=1'], ''),
               ('numpy.f2py.crackfortran._is_intent_callback', ['vdecl'], ''),
               ('numpy.f2py.crackfortran._resolvenameargspattern', ['line'], ''),
               ('numpy.f2py.crackfortran.analyzeline', ['m', 'case', 'line'], ''),
               ('numpy.f2py.crackfortran.appendmultiline', ['group', 'context_name', 'ml'], ''),
               ('numpy.f2py.crackfortran.cracktypespec0', ['typespec', 'll'], ''),
               ('numpy.f2py.crackfortran.removespaces', ['expr'], ''),
               ('numpy.f2py.crackfortran.markinnerspaces', ['line'], ''),
               ('numpy.f2py.crackfortran.updatevars',
                ['typespec', 'selector', 'attrspec', 'entitydecl'],
                ''),
               ('numpy.f2py.crackfortran.cracktypespec', ['typespec', 'selector'], ''),
               ('numpy.f2py.crackfortran.setattrspec', ['decl', 'attr', 'force=0'], ''),
               ('numpy.f2py.crackfortran.setkindselector', ['decl', 'sel', 'force=0'], ''),
               ('numpy.f2py.crackfortran.setcharselector', ['decl', 'sel', 'force=0'], ''),
               ('numpy.f2py.crackfortran.getblockname', ['block', "unknown='unknown'"], ''),
               ('numpy.f2py.crackfortran.setmesstext', ['block'], ''),
               ('numpy.f2py.crackfortran.get_usedict', ['block'], ''),
               ('numpy.f2py.crackfortran.get_useparameters', ['block', 'param_map=None'], ''),
               ('numpy.f2py.crackfortran.postcrack2', ['block', "tab=''", 'param_map=None'], ''),
               ('numpy.f2py.crackfortran.postcrack',
                ['block', 'args=None', "tab=''"],
                '\n    TODO:\n          function return values\n          determine expression types if in argument list\n    '),
               ('numpy.f2py.crackfortran.sortvarnames', ['vars'], ''),
               ('numpy.f2py.crackfortran.analyzecommon', ['block'], ''),
               ('numpy.f2py.crackfortran.analyzebody', ['block', 'args', "tab=''"], ''),
               ('numpy.f2py.crackfortran.buildimplicitrules', ['block'], ''),
               ('numpy.f2py.crackfortran.myeval', ['e', 'g=None', 'l=None'], ''),
               ('numpy.f2py.crackfortran.getlincoef', ['e', 'xset'], ''),
               ('numpy.f2py.crackfortran.getarrlen', ['dl', 'args', "star='*'"], ''),
               ('numpy.f2py.crackfortran._get_depend_dict', ['name', 'vars', 'deps'], ''),
               ('numpy.f2py.crackfortran._calc_depend_dict', ['vars'], ''),
               ('numpy.f2py.crackfortran.get_sorted_names', ['vars'], '\n    '),
               ('numpy.f2py.crackfortran._kind_func', ['string'], ''),
               ('numpy.f2py.crackfortran._selected_int_kind_func', ['r'], ''),
               ('numpy.f2py.crackfortran._selected_real_kind_func', ['p', 'r=0', 'radix=0'], ''),
               ('numpy.f2py.crackfortran.get_parameters', ['vars', 'global_params={}'], ''),
               ('numpy.f2py.crackfortran._eval_length', ['length', 'params'], ''),
               ('numpy.f2py.crackfortran._eval_scalar', ['value', 'params'], ''),
               ('numpy.f2py.crackfortran.analyzevars', ['block'], ''),
               ('numpy.f2py.crackfortran.expr2name', ['a', 'block', 'args=[]'], ''),
               ('numpy.f2py.crackfortran.analyzeargs', ['block'], ''),
               ('numpy.f2py.crackfortran._ensure_exprdict', ['r'], ''),
               ('numpy.f2py.crackfortran.determineexprtype', ['expr', 'vars', 'rules={}'], ''),
               ('numpy.f2py.crackfortran.crack2fortrangen',
                ['block', "tab='\\n'", 'as_interface=False'],
                ''),
               ('numpy.f2py.crackfortran.common2fortran', ['common', "tab=''"], ''),
               ('numpy.f2py.crackfortran.use2fortran', ['use', "tab=''"], ''),
               ('numpy.f2py.crackfortran.true_intent_list', ['var'], ''),
               ('numpy.f2py.crackfortran.vars2fortran',
                ['block', 'vars', 'args', "tab=''", 'as_interface=False'],
                '\n    TODO:\n    public sub\n    ...\n    '),
               ('numpy.f2py.crackfortran.crackfortran', ['files'], ''),
               ('numpy.f2py.crackfortran.crack2fortran', ['block'], ''),
               ('pytest.foo', ['a'], ''),
               ('util._cleanup', [], ''),
               ('util.get_module_dir', [], ''),
               ('util.get_temp_module_name', [], ''),
               ('util._memoize', ['func'], ''),
               ('util.build_module',
                ['source_files', 'options=[]', 'skip=[]', 'only=[]', 'module_name=None'],
                '\n    Compile and import a f2py module, built from the given files.\n\n    '),
               ('util.build_code',
                ['source_code',
                 'options=[]',
                 'skip=[]',
                 'only=[]',
                 'suffix=None',
                 'module_name=None'],
                '\n    Compile and import Fortran code using f2py.\n\n    '),
               ('util._get_compiler_status', [], ''),
               ('util.has_c_compiler', [], ''),
               ('util.has_f77_compiler', [], ''),
               ('util.has_f90_compiler', [], ''),
               ('util.build_module_distutils',
                ['source_files', 'config_code', 'module_name', '**kw'],
                '\n    Build a module via distutils and import it.\n\n    '),
               ('test_kind._path', ['*a'], ''),
               ('test_mixed._path', ['*a'], ''),
               ('test_size._path', ['*a'], ''),
               ('test_array_from_pyobj.setup',
                [],
                '\n    Build the required testing extension module\n\n    '),
               ('test_array_from_pyobj.flags_info', ['arr'], ''),
               ('test_array_from_pyobj.flags2names', ['flags'], ''),
               ('test_assumed_shape._path', ['*a'], ''),
               ('paramiko.primes._generate_prime',
                ['bits', 'rng'],
                'primtive attempt at prime generation'),
               ('paramiko.primes._roll_random', ['rng', 'n'], 'returns a random # from 0 to N-1'),
               ('paramiko.util.inflate_long',
                ['s', 'always_positive=False'],
                'turns a normalized byte string into a long-int (adapted from Crypto.Util.number)'),
               ('paramiko.util.deflate_long',
                ['n', 'add_sign_padding=True'],
                'turns a long-int into a normalized byte string (adapted from Crypto.Util.number)'),
               ('paramiko.util.format_binary_weird', ['data'], ''),
               ('paramiko.util.format_binary', ['data', "prefix=''"], ''),
               ('paramiko.util.format_binary_line', ['data'], ''),
               ('paramiko.util.hexify', ['s'], ''),
               ('paramiko.util.unhexify', ['s'], ''),
               ('paramiko.util.safe_string', ['s'], ''),
               ('paramiko.util.bit_length', ['n'], ''),
               ('paramiko.util.tb_strings', [], ''),
               ('paramiko.util.generate_key_bytes',
                ['hashclass', 'salt', 'key', 'nbytes'],
                '\n    Given a password, passphrase, or other human-source key, scramble it\n    through a secure hash into some keyworthy bytes.  This specific algorithm\n    is used for encrypting/decrypting private key files.\n\n    @param hashclass: class from L{Crypto.Hash} that can be used as a secure\n        hashing function (like C{MD5} or C{SHA}).\n    @type hashclass: L{Crypto.Hash}\n    @param salt: data to salt the hash with.\n    @type salt: string\n    @param key: human-entered password or passphrase.\n    @type key: string\n    @param nbytes: number of bytes to generate.\n    @type nbytes: int\n    @return: key data\n    @rtype: string\n    '),
               ('paramiko.util.load_host_keys',
                ['filename'],
                '\n    Read a file of known SSH host keys, in the format used by openssh, and\n    return a compound dict of C{hostname -> keytype ->} L{PKey <paramiko.pkey.PKey>}.\n    The hostname may be an IP address or DNS name.  The keytype will be either\n    C{"ssh-rsa"} or C{"ssh-dss"}.\n\n    This type of file unfortunately doesn\'t exist on Windows, but on posix,\n    it will usually be stored in C{os.path.expanduser("~/.ssh/known_hosts")}.\n\n    Since 1.5.3, this is just a wrapper around L{HostKeys}.\n\n    @param filename: name of the file to read host keys from\n    @type filename: str\n    @return: dict of host keys, indexed by hostname and then keytype\n    @rtype: dict(hostname, dict(keytype, L{PKey <paramiko.pkey.PKey>}))\n    '),
               ('paramiko.util.parse_ssh_config',
                ['file_obj'],
                '\n    Provided only as a backward-compatible wrapper around L{SSHConfig}.\n    '),
               ('paramiko.util.lookup_ssh_host_config',
                ['hostname', 'config'],
                '\n    Provided only as a backward-compatible wrapper around L{SSHConfig}.\n    '),
               ('paramiko.util.mod_inverse', ['x', 'm'], ''),
               ('paramiko.util.get_thread_id', [], ''),
               ('paramiko.util.log_to_file',
                ['filename', 'level=DEBUG'],
                "send paramiko logs to a logfile, if they're not already going somewhere"),
               ('paramiko.util.get_logger', ['name'], ''),
               ('paramiko.util.retry_on_signal',
                ['function'],
                "Retries function until it doesn't raise an EINTR error"),
               ('paramiko.packet.compute_hmac', ['key', 'message', 'digest_class'], ''),
               ('paramiko.sftp_client._to_unicode',
                ['s'],
                "\n    decode a string as ascii or utf8 if possible (as required by the sftp\n    protocol).  if neither works, just return a byte string because the server\n    probably doesn't know the filename's encoding.\n    "),
               ('paramiko.logging22.getLogger', ['name'], ''),
               ('paramiko.pipe.make_pipe', [], ''),
               ('paramiko.pipe.make_or_pipe',
                ['pipe'],
                '\n    wraps a pipe into two pipe-like objects which are "or"d together to\n    affect the real pipe. if either returned pipe is set, the wrapped pipe\n    is set. when both are cleared, the wrapped pipe is cleared.\n    '),
               ('paramiko.win_pageant._get_pageant_window_object', [], ''),
               ('paramiko.win_pageant.can_talk_to_agent',
                [],
                '\n    Check to see if there is a "Pageant" agent we can talk to.\n\n    This checks both if we have the required libraries (win32all or ctypes)\n    and if there is a Pageant currently running.\n    '),
               ('paramiko.win_pageant._query_pageant', ['msg'], ''),
               ('serial.serialcli.device', ['portnum'], 'Turn a port number into a device name'),
               ('serial.serialcli.as_byte_array', ['string'], ''),
               ('serial.sermsdos.device', ['portnum'], ''),
               ('serial.serial_for_url',
                ['url', '*args', '**kwargs'],
                '    Get an instance of the Serial class, depending on port/url. The port is not\n    opened when the keyword parameter \'do_not_open\' is true, by default it\n    is. All other parameters are directly passed to the __init__ method when\n    the port is instantiated.\n\n    The list of package names that is searched for protocol handlers is kept in\n    ``protocol_handler_packages``.\n\n    e.g. we want to support a URL ``foobar://``. A module\n    ``my_handlers.protocol_foobar`` is provided by the user. Then\n    ``protocol_handler_packages.append("my_handlers")`` would extend the search\n    path so that ``serial_for_url("foobar://"))`` would work.\n    '),
               ('serial.serialwin32.device',
                ['portnum'],
                'Turn a port number into a device name'),
               ('serial.serialjava.my_import', ['name'], ''),
               ('serial.serialjava.detect_java_comm',
                ['names'],
                'try given list of modules and return that imports'),
               ('serial.serialjava.device',
                ['portnumber'],
                'Turn a port number into a device name'),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['port'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.serialposix.device', ['portum'], ''),
               ('serial.serialposix.set_special_baudrate', ['port', 'baudrate'], ''),
               ('serial.win32.is_64bit', [], 'Returns true when running on a 64 bit system'),
               ('serial.serialutil.to_bytes', ['seq'], 'convert a sequence to a bytes type'),
               ('serial.tools.list_ports_posix.popen', ['argv'], ''),
               ('serial.tools.list_ports_posix.popen', ['argv'], ''),
               ('serial.tools.list_ports_posix.read_line',
                ['filename'],
                'help function to read a single line from a file. returns none'),
               ('serial.tools.list_ports_posix.re_group',
                ['regexp', 'text'],
                'search for regexp in text, return 1st group on match'),
               ('serial.tools.list_ports_posix.usb_sysfs_hw_string',
                ['sysfs_path'],
                'given a path to a usb device in sysfs, return a string describing it'),
               ('serial.tools.list_ports_posix.usb_lsusb_string', ['sysfs_path'], ''),
               ('serial.tools.list_ports_posix.describe',
                ['device'],
                '        Get a human readable description.\n        For USB-Serial devices try to run lsusb to get a human readable description.\n        For USB-CDC devices read the description from sysfs.\n        '),
               ('serial.tools.list_ports_posix.hwinfo',
                ['device'],
                'Try to get a HW identification using sysfs'),
               ('serial.tools.list_ports_posix.comports', [], ''),
               ('serial.tools.list_ports_posix.comports', [], ''),
               ('serial.tools.list_ports_posix.comports', [], ''),
               ('serial.tools.list_ports_posix.comports', [], ''),
               ('serial.tools.list_ports_posix.comports',
                [],
                'scan for available ports. return a list of device names.'),
               ('serial.tools.list_ports_posix.comports',
                [],
                'scan for available ports. return a list of device names.'),
               ('serial.tools.list_ports_posix.comports',
                [],
                'scan for available ports. return a list of device names.'),
               ('serial.tools.list_ports_posix.comports',
                [],
                'scan for available ports. return a list of device names.'),
               ('serial.tools.list_ports_posix.comports',
                [],
                'scan for available ports. return a list of device names.'),
               ('serial.tools.list_ports_posix.comports',
                [],
                'scan for available ports. return a list of device names.'),
               ('serial.tools.list_ports.grep',
                ['regexp'],
                '    Search for ports using a regular expression. Port name, description and\n    hardware ID are searched. The function returns an iterable that returns the\n    same tuples as comport() would do.\n    '),
               ('serial.tools.list_ports.main', [], ''),
               ('serial.tools.miniterm.key_description',
                ['character'],
                'generate a readable description for a key'),
               ('serial.tools.miniterm.get_help_text', [], ''),
               ('serial.tools.miniterm.character', ['b'], ''),
               ('serial.tools.miniterm.character', ['b'], ''),
               ('serial.tools.miniterm.cleanup_console', [], ''),
               ('serial.tools.miniterm.main', [], ''),
               ('serial.tools.list_ports_windows.ValidHandle',
                ['value', 'func', 'arguments'],
                ''),
               ('serial.tools.list_ports_windows.byte_buffer',
                ['length'],
                'Get a buffer for a string'),
               ('serial.tools.list_ports_windows.string', ['buffer'], ''),
               ('serial.tools.list_ports_windows.comports',
                [],
                'This generator scans the device registry for com ports and yields port, desc, hwid')],
 'HIERARCHY': ['mock',
               'nose.pyversion',
               'nose.core',
               'nose.commands',
               'nose.util',
               'nose',
               'nose.proxy',
               'nose.importer',
               'nose.failure',
               'nose.config',
               'nose.suite',
               'nose.exc',
               'nose.loader',
               'nose.twistedtools',
               'nose.selector',
               'nose.inspector',
               'nose.result',
               'nose.case',
               'nose.plugins.prof',
               'nose.plugins',
               'nose.plugins.builtin',
               'nose.plugins.xunit',
               'nose.plugins.multiprocess',
               'nose.plugins.isolate',
               'nose.plugins.doctests',
               'nose.plugins.debug',
               'nose.plugins.plugintest',
               'nose.plugins.capture',
               'nose.plugins.attrib',
               'nose.plugins.base',
               'nose.plugins.manager',
               'nose.plugins.errorclass',
               'nose.plugins.allmodules',
               'nose.plugins.cover',
               'nose.plugins.logcapture',
               'nose.plugins.collect',
               'nose.plugins.skip',
               'nose.plugins.failuredetail',
               'nose.plugins.testid',
               'nose.plugins.deprecated',
               'nose.tools',
               'nose.tools.nontrivial',
               'nose.tools.trivial',
               'nose.ext',
               'nose.ext.dtcompat',
               'nose.sphinx',
               'nose.sphinx.pluginopts',
               'numpy',
               'numpy.version',
               'numpy.dual',
               'numpy._import_tools',
               'numpy.matlib',
               'numpy.setupscons',
               'numpy.ctypeslib',
               'numpy.add_newdocs',
               'numpy.setup',
               'numpy.__config__',
               'numpy.doc.glossary',
               'numpy.doc',
               'numpy.doc.creation',
               'numpy.doc.broadcasting',
               'numpy.doc.constants',
               'numpy.doc.misc',
               'numpy.doc.jargon',
               'numpy.doc.performance',
               'numpy.doc.basics',
               'numpy.doc.internals',
               'numpy.doc.structured_arrays',
               'numpy.doc.ufuncs',
               'numpy.doc.methods_vs_functions',
               'numpy.doc.subclassing',
               'numpy.doc.byteswapping',
               'numpy.doc.io',
               'numpy.doc.indexing',
               'numpy.doc.howtofind',
               'numpy.lib.shape_base',
               'numpy.lib.ufunclike',
               'numpy.lib',
               'numpy.lib.arrayterator',
               'numpy.lib.recfunctions',
               'numpy.lib.function_base',
               'numpy.lib.stride_tricks',
               'numpy.lib.type_check',
               'numpy.lib.index_tricks',
               'numpy.lib.utils',
               'numpy.lib.scimath',
               'numpy.lib.npyio',
               'numpy.lib.financial',
               'numpy.lib._iotools',
               'numpy.lib.setupscons',
               'numpy.lib.polynomial',
               'numpy.lib.user_array',
               'numpy.lib.twodim_base',
               'numpy.lib.arraysetops',
               'numpy.lib.info',
               'numpy.lib._datasource',
               'numpy.lib.format',
               'numpy.lib.setup',
               'test_arraysetops',
               'test_stride_tricks',
               'test_type_check',
               'test_regression',
               'test_format',
               'test_shape_base',
               'test_recfunctions',
               'test_function_base',
               'test_financial',
               'test__iotools',
               'test_index_tricks',
               'test_polynomial',
               'test_io',
               'test_utils',
               'test_twodim_base',
               'test_arrayterator',
               'test_ufunclike',
               'test__datasource',
               'simpleindex',
               'casting',
               'benchmark',
               'sorting',
               'creating',
               'numpy.fft',
               'numpy.fft.fftpack',
               'numpy.fft.helper',
               'numpy.fft.setupscons',
               'numpy.fft.info',
               'numpy.fft.setup',
               'test_helper',
               'test_fftpack',
               'numpy.linalg',
               'numpy.linalg.setupscons',
               'numpy.linalg.info',
               'numpy.linalg.setup',
               'numpy.linalg.linalg',
               'test_regression',
               'test_linalg',
               'test_build',
               'numpy.testing',
               'numpy.testing.print_coercion_tables',
               'numpy.testing.utils',
               'numpy.testing.noseclasses',
               'numpy.testing.nulltester',
               'numpy.testing.numpytest',
               'numpy.testing.decorators',
               'numpy.testing.nosetester',
               'numpy.testing.setupscons',
               'numpy.testing.setup',
               'test_decorators',
               'test_utils',
               'numpy.oldnumeric.random_array',
               'numpy.oldnumeric',
               'numpy.oldnumeric.compat',
               'numpy.oldnumeric.rng',
               'numpy.oldnumeric.array_printer',
               'numpy.oldnumeric.fft',
               'numpy.oldnumeric.precision',
               'numpy.oldnumeric.misc',
               'numpy.oldnumeric.linear_algebra',
               'numpy.oldnumeric.arrayfns',
               'numpy.oldnumeric.matrix',
               'numpy.oldnumeric.rng_stats',
               'numpy.oldnumeric.ufuncs',
               'numpy.oldnumeric.alter_code2',
               'numpy.oldnumeric.typeconv',
               'numpy.oldnumeric.fix_default_axis',
               'numpy.oldnumeric.alter_code1',
               'numpy.oldnumeric.setupscons',
               'numpy.oldnumeric.user_array',
               'numpy.oldnumeric.ma',
               'numpy.oldnumeric.functions',
               'numpy.oldnumeric.setup',
               'numpy.oldnumeric.mlab',
               'test_oldnumeric',
               'test_regression',
               'numpy.polynomial.laguerre',
               'numpy.polynomial.hermite',
               'numpy.polynomial',
               'numpy.polynomial.polyutils',
               'numpy.polynomial.legendre',
               'numpy.polynomial.polytemplate',
               'numpy.polynomial.chebyshev',
               'numpy.polynomial.polynomial',
               'numpy.polynomial.hermite_e',
               'numpy.polynomial.setup',
               'test_legendre',
               'test_hermite',
               'test_hermite_e',
               'test_polyutils',
               'test_polynomial',
               'test_chebyshev',
               'test_printing',
               'test_laguerre',
               'numpy.core.shape_base',
               'numpy.core.scons_support',
               'numpy.core.machar',
               'numpy.core._internal',
               'numpy.core.arrayprint',
               'numpy.core',
               'numpy.core.function_base',
               'numpy.core.getlimits',
               'numpy.core._mx_datetime_parser',
               'numpy.core.records',
               'numpy.core.defchararray',
               'numpy.core.memmap',
               'numpy.core.setupscons',
               'numpy.core.fromnumeric',
               'numpy.core.setup_common',
               'numpy.core.generate_numpy_api',
               'numpy.core.numerictypes',
               'numpy.core.info',
               'numpy.core.setup',
               'numpy.core.numeric',
               'test_numerictypes',
               'test_regression',
               'test_memmap',
               'test_print',
               'test_blasdot',
               'test_umath_complex',
               'test_api',
               'test_einsum',
               'test_shape_base',
               'test_records',
               'test_function_base',
               'test_half',
               'test_scalarmath',
               'test_machar',
               'test_unicode',
               'test_numeric',
               'test_dtype',
               'test_errstate',
               'test_arrayprint',
               'test_multiarray',
               'test_datetime',
               'test_getlimits',
               'test_iterator',
               'test_defchararray',
               'test_ufunc',
               'numpy.numarray.random_array',
               'numpy.numarray.util',
               'numpy.numarray.nd_image',
               'numpy.numarray',
               'numpy.numarray.compat',
               'numpy.numarray.fft',
               'numpy.numarray.linear_algebra',
               'numpy.numarray.matrix',
               'numpy.numarray.convolve',
               'numpy.numarray.ufuncs',
               'numpy.numarray.alter_code2',
               'numpy.numarray.alter_code1',
               'numpy.numarray.setupscons',
               'numpy.numarray.session',
               'numpy.numarray.ma',
               'numpy.numarray.numerictypes',
               'numpy.numarray.image',
               'numpy.numarray.functions',
               'numpy.numarray.setup',
               'numpy.numarray.mlab',
               'test_ctypeslib',
               'test_matlib',
               'numpy.matrixlib',
               'numpy.matrixlib.defmatrix',
               'numpy.matrixlib.setupscons',
               'numpy.matrixlib.setup',
               'test_regression',
               'test_numeric',
               'test_multiarray',
               'test_defmatrix',
               'numpy.distutils.environment',
               'numpy.distutils.system_info',
               'numpy.distutils.log',
               'numpy.distutils.npy_pkg_config',
               'numpy.distutils.core',
               'numpy.distutils.line_endings',
               'numpy.distutils',
               'numpy.distutils.compat',
               'numpy.distutils.intelccompiler',
               'numpy.distutils.conv_template',
               'numpy.distutils.unixccompiler',
               'numpy.distutils.exec_command',
               'numpy.distutils.ccompiler',
               'numpy.distutils.cpuinfo',
               'numpy.distutils.lib2def',
               'numpy.distutils.__version__',
               'numpy.distutils.mingw32ccompiler',
               'numpy.distutils.setupscons',
               'numpy.distutils.interactive',
               'numpy.distutils.from_template',
               'numpy.distutils.misc_util',
               'numpy.distutils.numpy_distribution',
               'numpy.distutils.pathccompiler',
               'numpy.distutils.info',
               'numpy.distutils.setup',
               'numpy.distutils.extension',
               'numpy.distutils.__config__',
               'numpy.distutils.command',
               'numpy.distutils.command.build_src',
               'numpy.distutils.command.egg_info',
               'numpy.distutils.command.install',
               'numpy.distutils.command.autodist',
               'numpy.distutils.command.config_compiler',
               'numpy.distutils.command.build_py',
               'numpy.distutils.command.bdist_rpm',
               'numpy.distutils.command.scons',
               'numpy.distutils.command.config',
               'numpy.distutils.command.build_ext',
               'numpy.distutils.command.build',
               'numpy.distutils.command.build_scripts',
               'numpy.distutils.command.develop',
               'numpy.distutils.command.install_data',
               'numpy.distutils.command.install_clib',
               'numpy.distutils.command.sdist',
               'numpy.distutils.command.install_headers',
               'numpy.distutils.command.build_clib',
               'numpy.distutils.fcompiler.pathf95',
               'numpy.distutils.fcompiler.sun',
               'numpy.distutils.fcompiler',
               'numpy.distutils.fcompiler.absoft',
               'numpy.distutils.fcompiler.gnu',
               'numpy.distutils.fcompiler.mips',
               'numpy.distutils.fcompiler.ibm',
               'numpy.distutils.fcompiler.none',
               'numpy.distutils.fcompiler.pg',
               'numpy.distutils.fcompiler.compaq',
               'numpy.distutils.fcompiler.hpux',
               'numpy.distutils.fcompiler.nag',
               'numpy.distutils.fcompiler.vast',
               'numpy.distutils.fcompiler.lahey',
               'numpy.distutils.fcompiler.g95',
               'numpy.distutils.fcompiler.intel',
               'test_misc_util',
               'test_npy_pkg_config',
               'test_fcompiler_intel',
               'test_fcompiler_gnu',
               'setup',
               'gen_ext',
               'gen_ext.setup',
               'test_fib3',
               'swig_ext',
               'swig_ext.setup',
               'test_example2',
               'test_example',
               'f2py_f90_ext',
               'f2py_f90_ext.setup',
               'test_foo',
               'f2py_ext',
               'f2py_ext.setup',
               'test_fib2',
               'pyrex_ext',
               'pyrex_ext.setup',
               'test_primes',
               'numpy.ma.core',
               'numpy.ma',
               'numpy.ma.timer_comparison',
               'numpy.ma.version',
               'numpy.ma.bench',
               'numpy.ma.extras',
               'numpy.ma.setupscons',
               'numpy.ma.mrecords',
               'numpy.ma.testutils',
               'numpy.ma.setup',
               'test_regression',
               'test_subclassing',
               'test_core',
               'test_extras',
               'test_old_ma',
               'test_mrecords',
               'numpy.random',
               'numpy.random.setupscons',
               'numpy.random.info',
               'numpy.random.setup',
               'test_regression',
               'test_random',
               'numpy.compat.py3k',
               'numpy.compat',
               'numpy.compat._inspect',
               'numpy.compat.setupscons',
               'numpy.compat.setup',
               'numpy.f2py.diagnose',
               'numpy.f2py.capi_maps',
               'numpy.f2py.cfuncs',
               'numpy.f2py.f2py_testing',
               'numpy.f2py.common_rules',
               'numpy.f2py',
               'numpy.f2py.f2py2e',
               'numpy.f2py.func2subr',
               'numpy.f2py.rules',
               'numpy.f2py.cb_rules',
               'numpy.f2py.__version__',
               'numpy.f2py.auxfuncs',
               'numpy.f2py.setupscons',
               'numpy.f2py.f90mod_rules',
               'numpy.f2py.use_rules',
               'numpy.f2py.info',
               'numpy.f2py.setup',
               'numpy.f2py.crackfortran',
               'pytest',
               'setup_example',
               'util',
               'test_kind',
               'test_callback',
               'test_return_real',
               'test_return_integer',
               'test_mixed',
               'test_size',
               'test_return_complex',
               'test_return_logical',
               'test_array_from_pyobj',
               'test_assumed_shape',
               'test_return_character',
               'paramiko.sftp',
               'paramiko.message',
               'paramiko.compress',
               'paramiko.kex_gex',
               'paramiko.primes',
               'paramiko.buffered_pipe',
               'paramiko.hostkeys',
               'paramiko.util',
               'paramiko',
               'paramiko.rsakey',
               'paramiko.pkey',
               'paramiko.proxy',
               'paramiko.channel',
               'paramiko.sftp_file',
               'paramiko.sftp_server',
               'paramiko.sftp_handle',
               'paramiko.packet',
               'paramiko.config',
               'paramiko.agent',
               'paramiko.auth_handler',
               'paramiko.sftp_si',
               'paramiko.sftp_client',
               'paramiko.logging22',
               'paramiko.sftp_attr',
               'paramiko.kex_group1',
               'paramiko.client',
               'paramiko.file',
               'paramiko.ssh_exception',
               'paramiko.resource',
               'paramiko.common',
               'paramiko.server',
               'paramiko.ber',
               'paramiko.pipe',
               'paramiko.win_pageant',
               'serial.serialcli',
               'serial.sermsdos',
               'serial',
               'serial.serialwin32',
               'serial.serialjava',
               'serial.serialposix',
               'serial.rfc2217',
               'serial.win32',
               'serial.serialutil',
               'serial.urlhandler',
               'serial.urlhandler.protocol_hwgrep',
               'serial.urlhandler.protocol_rfc2217',
               'serial.urlhandler.protocol_loop',
               'serial.urlhandler.protocol_socket',
               'serial.tools.list_ports_posix',
               'serial.tools',
               'serial.tools.list_ports',
               'serial.tools.miniterm',
               'serial.tools.list_ports_windows'],
 'POINTERS': {'benchmark.Timer': 'timeit.Timer',
              'casting.Benchmark': 'benchmark.Benchmark',
              'creating.Benchmark': 'benchmark.Benchmark',
              'f2py_ext.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'f2py_ext.setup.setup': 'numpy.distutils.core.setup',
              'f2py_f90_ext.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'f2py_f90_ext.setup.setup': 'numpy.distutils.core.setup',
              'gen_ext.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'gen_ext.setup.newer': 'distutils.dep_util.newer',
              'gen_ext.setup.os': 'os',
              'gen_ext.setup.setup': 'numpy.distutils.core.setup',
              'mock._io': '_io',
              'mock.inspect': 'inspect',
              'mock.java': 'java',
              'mock.keyword': 'keyword',
              'mock.original_wraps': 'functools.wraps',
              'mock.pprint': 'pprint',
              'mock.re': 're',
              'mock.sys': 'sys',
              'nose.DeprecatedTest': 'nose.exc.DeprecatedTest',
              'nose.SkipTest': 'nose.exc.SkipTest',
              'nose.case.Config': 'nose.config.Config',
              'nose.case.Failure': 'nose.failure.Failure',
              'nose.case.isfunction': 'inspect.isfunction',
              'nose.case.logging': 'logging',
              'nose.case.resolve_name': 'nose.util.resolve_name',
              'nose.case.sys': 'sys',
              'nose.case.test_address': 'nose.util.test_address',
              'nose.case.try_run': 'nose.util.try_run',
              'nose.case.unittest': 'unittest',
              'nose.collector': 'nose.core.collector',
              'nose.commands.Command': 'setuptools.Command',
              'nose.commands.Config': 'nose.config.Config',
              'nose.commands.DefaultPluginManager': 'nose.plugins.DefaultPluginManager',
              'nose.commands.TestProgram': 'nose.core.TestProgram',
              'nose.commands._bool': 'nose.config._bool',
              'nose.commands.flag': 'nose.config.flag',
              'nose.commands.option_blacklist': 'nose.config.option_blacklist',
              'nose.commands.user_config_files': 'nose.config.user_config_files',
              'nose.config.ConfigParser': 'ConfigParser',
              'nose.config.NoPlugins': 'nose.plugins.manager.NoPlugins',
              'nose.config.OptionParser': 'optparse.OptionParser',
              'nose.config.absdir': 'nose.util.absdir',
              'nose.config.add_path': 'nose.importer.add_path',
              'nose.config.fileConfig': 'logging.config.fileConfig',
              'nose.config.logging': 'logging',
              'nose.config.optparse': 'optparse',
              'nose.config.os': 'os',
              'nose.config.re': 're',
              'nose.config.sys': 'sys',
              'nose.config.tolist': 'nose.util.tolist',
              'nose.config.warn': 'warnings.warn',
              'nose.core.Config': 'nose.config.Config',
              'nose.core.DefaultPluginManager': 'nose.plugins.manager.DefaultPluginManager',
              'nose.core.FinalizingSuiteWrapper': 'nose.suite.FinalizingSuiteWrapper',
              'nose.core.PluginManager': 'nose.plugins.manager.PluginManager',
              'nose.core.RestrictedPluginManager': 'nose.plugins.manager.RestrictedPluginManager',
              'nose.core.TextTestResult': 'nose.result.TextTestResult',
              'nose.core.__version__': 'nose.__version__',
              'nose.core.all_config_files': 'nose.config.all_config_files',
              'nose.core.defaultTestLoader': 'nose.loader.defaultTestLoader',
              'nose.core.generators': '__future__.generators',
              'nose.core.isclass': 'nose.util.isclass',
              'nose.core.logging': 'logging',
              'nose.core.nose': 'nose',
              'nose.core.os': 'os',
              'nose.core.sys': 'sys',
              'nose.core.textwrap': 'textwrap',
              'nose.core.time': 'time',
              'nose.core.tolist': 'nose.util.tolist',
              'nose.core.unittest': 'unittest',
              'nose.exc.DeprecatedTest': 'nose.plugins.deprecated.DeprecatedTest',
              'nose.exc.SkipTest': 'nose.plugins.skip.SkipTest',
              'nose.ext.dtcompat.StringIO': 'StringIO.StringIO',
              'nose.ext.dtcompat.__future__': '__future__',
              'nose.ext.dtcompat.difflib': 'difflib',
              'nose.ext.dtcompat.inspect': 'inspect',
              'nose.ext.dtcompat.linecache': 'linecache',
              'nose.ext.dtcompat.new': 'new',
              'nose.ext.dtcompat.os': 'os',
              'nose.ext.dtcompat.pdb': 'pdb',
              'nose.ext.dtcompat.re': 're',
              'nose.ext.dtcompat.sys': 'sys',
              'nose.ext.dtcompat.tempfile': 'tempfile',
              'nose.ext.dtcompat.traceback': 'traceback',
              'nose.ext.dtcompat.unittest': 'unittest',
              'nose.ext.dtcompat.warnings': 'warnings',
              'nose.failure.format_tb': 'traceback.format_tb',
              'nose.failure.logging': 'logging',
              'nose.failure.unittest': 'unittest',
              'nose.importer.Config': 'nose.config.Config',
              'nose.importer.acquire_lock': 'imp.acquire_lock',
              'nose.importer.find_module': 'imp.find_module',
              'nose.importer.load_module': 'imp.load_module',
              'nose.importer.logging': 'logging',
              'nose.importer.os': 'os',
              'nose.importer.release_lock': 'imp.release_lock',
              'nose.importer.sys': 'sys',
              'nose.inspector.StringIO': 'StringIO.StringIO',
              'nose.inspector.inspect': 'inspect',
              'nose.inspector.logging': 'logging',
              'nose.inspector.re': 're',
              'nose.inspector.sys': 'sys',
              'nose.inspector.textwrap': 'textwrap',
              'nose.inspector.tokenize': 'tokenize',
              'nose.loader.Config': 'nose.config.Config',
              'nose.loader.ContextList': 'nose.suite.ContextList',
              'nose.loader.ContextSuiteFactory': 'nose.suite.ContextSuiteFactory',
              'nose.loader.Failure': 'nose.failure.Failure',
              'nose.loader.FunctionTestCase': 'nose.case.FunctionTestCase',
              'nose.loader.Importer': 'nose.importer.Importer',
              'nose.loader.LazySuite': 'nose.suite.LazySuite',
              'nose.loader.MethodTestCase': 'nose.case.MethodTestCase',
              'nose.loader.TestAddress': 'nose.selector.TestAddress',
              'nose.loader.add_path': 'nose.importer.add_path',
              'nose.loader.cmp_to_key': 'nose.pyversion.cmp_to_key',
              'nose.loader.defaultSelector': 'nose.selector.defaultSelector',
              'nose.loader.func_lineno': 'nose.util.func_lineno',
              'nose.loader.generators': '__future__.generators',
              'nose.loader.getpackage': 'nose.util.getpackage',
              'nose.loader.isclass': 'nose.util.isclass',
              'nose.loader.isfunction': 'inspect.isfunction',
              'nose.loader.isgenerator': 'nose.util.isgenerator',
              'nose.loader.ismethod': 'nose.pyversion.ismethod',
              'nose.loader.ispackage': 'nose.util.ispackage',
              'nose.loader.logging': 'logging',
              'nose.loader.os': 'os',
              'nose.loader.regex_last_key': 'nose.util.regex_last_key',
              'nose.loader.remove_path': 'nose.importer.remove_path',
              'nose.loader.resolve_name': 'nose.util.resolve_name',
              'nose.loader.sort_list': 'nose.pyversion.sort_list',
              'nose.loader.sys': 'sys',
              'nose.loader.test_address': 'nose.util.test_address',
              'nose.loader.transplant_class': 'nose.util.transplant_class',
              'nose.loader.transplant_func': 'nose.util.transplant_func',
              'nose.loader.types': 'types',
              'nose.loader.unbound_method': 'nose.pyversion.unbound_method',
              'nose.loader.unittest': 'unittest',
              'nose.main': 'nose.core.main',
              'nose.plugins.*': 'nose.plugins.manager.*',
              'nose.plugins.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.PluginTester': 'nose.plugins.plugintest.PluginTester',
              'nose.plugins.allmodules.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.allmodules.os': 'os',
              'nose.plugins.attrib.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.attrib.inspect': 'inspect',
              'nose.plugins.attrib.isfunction': 'inspect.isfunction',
              'nose.plugins.attrib.logging': 'logging',
              'nose.plugins.attrib.os': 'os',
              'nose.plugins.attrib.sys': 'sys',
              'nose.plugins.attrib.tolist': 'nose.util.tolist',
              'nose.plugins.base.OptionConflictError': 'optparse.OptionConflictError',
              'nose.plugins.base.os': 'os',
              'nose.plugins.base.textwrap': 'textwrap',
              'nose.plugins.base.tolist': 'nose.util.tolist',
              'nose.plugins.base.warn': 'warnings.warn',
              'nose.plugins.capture.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.capture.StringIO': 'StringIO.StringIO',
              'nose.plugins.capture.ln': 'nose.util.ln',
              'nose.plugins.capture.logging': 'logging',
              'nose.plugins.capture.os': 'os',
              'nose.plugins.capture.sys': 'sys',
              'nose.plugins.collect.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.collect.Test': 'nose.case.Test',
              'nose.plugins.collect.logging': 'logging',
              'nose.plugins.collect.unittest': 'unittest',
              'nose.plugins.cover.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.cover.StringIO': 'StringIO',
              'nose.plugins.cover.coverage': 'coverage',
              'nose.plugins.cover.logging': 'logging',
              'nose.plugins.cover.re': 're',
              'nose.plugins.cover.src': 'nose.util.src',
              'nose.plugins.cover.sys': 'sys',
              'nose.plugins.cover.tolist': 'nose.util.tolist',
              'nose.plugins.debug.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.debug.pdb': 'pdb',
              'nose.plugins.debug.sys': 'sys',
              'nose.plugins.deprecated.ErrorClass': 'nose.plugins.errorclass.ErrorClass',
              'nose.plugins.deprecated.ErrorClassPlugin': 'nose.plugins.errorclass.ErrorClassPlugin',
              'nose.plugins.doctest': 'doctest',
              'nose.plugins.doctests.ContextList': 'nose.suite.ContextList',
              'nose.plugins.doctests.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.doctests.StringIO': 'StringIO.StringIO',
              'nose.plugins.doctests.anyp': 'nose.util.anyp',
              'nose.plugins.doctests.builtin_mod': '__builtin__',
              'nose.plugins.doctests.doctest': 'nose.ext.dtcompat',
              'nose.plugins.doctests.generators': '__future__.generators',
              'nose.plugins.doctests.getmodule': 'inspect.getmodule',
              'nose.plugins.doctests.getpackage': 'nose.util.getpackage',
              'nose.plugins.doctests.isproperty': 'nose.util.isproperty',
              'nose.plugins.doctests.logging': 'logging',
              'nose.plugins.doctests.os': 'os',
              'nose.plugins.doctests.resolve_name': 'nose.util.resolve_name',
              'nose.plugins.doctests.src': 'nose.util.src',
              'nose.plugins.doctests.sys': 'sys',
              'nose.plugins.doctests.test_address': 'nose.util.test_address',
              'nose.plugins.doctests.tolist': 'nose.util.tolist',
              'nose.plugins.doctests.unittest': 'unittest',
              'nose.plugins.errorclass.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.errorclass.TextTestResult': 'nose.result.TextTestResult',
              'nose.plugins.errorclass.doctest': 'doctest',
              'nose.plugins.errorclass.isclass': 'nose.util.isclass',
              'nose.plugins.errorclass.make_instancemethod': 'nose.pyversion.make_instancemethod',
              'nose.plugins.failuredetail.Plugin': 'nose.plugins.Plugin',
              'nose.plugins.failuredetail.inspect_traceback': 'nose.inspector.inspect_traceback',
              'nose.plugins.isolate.Plugin': 'nose.plugins.Plugin',
              'nose.plugins.isolate.logging': 'logging',
              'nose.plugins.isolate.sys': 'sys',
              'nose.plugins.logcapture.BufferingHandler': 'logging.handlers.BufferingHandler',
              'nose.plugins.logcapture.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.logcapture.StringIO': 'StringIO.StringIO',
              'nose.plugins.logcapture.anyp': 'nose.util.anyp',
              'nose.plugins.logcapture.ln': 'nose.util.ln',
              'nose.plugins.logcapture.logging': 'logging',
              'nose.plugins.logcapture.safe_str': 'nose.util.safe_str',
              'nose.plugins.logcapture.threading': 'threading',
              'nose.plugins.manager.DeprecatedTest': 'nose.exc.DeprecatedTest',
              'nose.plugins.manager.Failure': 'nose.failure.Failure',
              'nose.plugins.manager.IPluginInterface': 'nose.plugins.base.IPluginInterface',
              'nose.plugins.manager.OptionParser': 'optparse.OptionParser',
              'nose.plugins.manager.SkipTest': 'nose.exc.SkipTest',
              'nose.plugins.manager.StringIO': 'StringIO.StringIO',
              'nose.plugins.manager.builtin': 'nose.plugins.builtin',
              'nose.plugins.manager.inspect': 'inspect',
              'nose.plugins.manager.iter_entry_points': 'pkg_resources.iter_entry_points',
              'nose.plugins.manager.iterchain': 'itertools.chain',
              'nose.plugins.manager.logging': 'logging',
              'nose.plugins.manager.nose.config': 'nose.config',
              'nose.plugins.manager.os': 'os',
              'nose.plugins.manager.pickle': 'pickle',
              'nose.plugins.manager.pkg_resources': 'pkg_resources',
              'nose.plugins.manager.sort_list': 'nose.pyversion.sort_list',
              'nose.plugins.manager.sys': 'sys',
              'nose.plugins.manager.warn': 'warnings.warn',
              'nose.plugins.multiprocess.ContextSuite': 'nose.suite.ContextSuite',
              'nose.plugins.multiprocess.Empty': 'Queue.Empty',
              'nose.plugins.multiprocess.Manager': 'multiprocessing.Manager',
              'nose.plugins.multiprocess.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.multiprocess.Process': 'multiprocessing.Process',
              'nose.plugins.multiprocess.StringIO': 'StringIO',
              'nose.plugins.multiprocess.TextTestResult': 'nose.result.TextTestResult',
              'nose.plugins.multiprocess.TextTestRunner': 'nose.core.TextTestRunner',
              'nose.plugins.multiprocess._WritelnDecorator': 'unittest._WritelnDecorator',
              'nose.plugins.multiprocess.bytes_': 'nose.pyversion.bytes_',
              'nose.plugins.multiprocess.failure': 'nose.failure',
              'nose.plugins.multiprocess.loader': 'nose.loader',
              'nose.plugins.multiprocess.logging': 'logging',
              'nose.plugins.multiprocess.nose.case': 'nose.case',
              'nose.plugins.multiprocess.os': 'os',
              'nose.plugins.multiprocess.pickle': 'pickle',
              'nose.plugins.multiprocess.signal': 'signal',
              'nose.plugins.multiprocess.sys': 'sys',
              'nose.plugins.multiprocess.test_address': 'nose.util.test_address',
              'nose.plugins.multiprocess.time': 'time',
              'nose.plugins.multiprocess.traceback': 'traceback',
              'nose.plugins.multiprocess.unittest': 'unittest',
              'nose.plugins.multiprocess.warn': 'warnings.warn',
              'nose.plugins.plugintest.Config': 'nose.config.Config',
              'nose.plugins.plugintest.Empty': 'Queue.Empty',
              'nose.plugins.plugintest.Manager': 'multiprocessing.Manager',
              'nose.plugins.plugintest.PluginManager': 'nose.plugins.manager.PluginManager',
              'nose.plugins.plugintest.StringIO': 'StringIO.StringIO',
              'nose.plugins.plugintest.TestProgram': 'nose.core.TestProgram',
              'nose.plugins.plugintest.current_process': 'multiprocessing.current_process',
              'nose.plugins.plugintest.defaultdict': 'collections.defaultdict',
              'nose.plugins.plugintest.doctest': 'doctest',
              'nose.plugins.plugintest.getpid': 'os.getpid',
              'nose.plugins.plugintest.re': 're',
              'nose.plugins.plugintest.run': 'nose.run',
              'nose.plugins.plugintest.sys': 'sys',
              'nose.plugins.plugintest.warn': 'warnings.warn',
              'nose.plugins.prof.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.prof.hotshot': 'hotshot',
              'nose.plugins.prof.logging': 'logging',
              'nose.plugins.prof.os': 'os',
              'nose.plugins.prof.stats': 'hotshot.stats',
              'nose.plugins.prof.sys': 'sys',
              'nose.plugins.prof.tempfile': 'tempfile',
              'nose.plugins.prof.tolist': 'nose.util.tolist',
              'nose.plugins.skip.ErrorClass': 'nose.plugins.errorclass.ErrorClass',
              'nose.plugins.skip.ErrorClassPlugin': 'nose.plugins.errorclass.ErrorClassPlugin',
              'nose.plugins.skip.SkipTest': 'unittest.case.SkipTest',
              'nose.plugins.testid.Plugin': 'nose.plugins.Plugin',
              'nose.plugins.testid.dump': 'pickle.dump',
              'nose.plugins.testid.load': 'pickle.load',
              'nose.plugins.testid.logging': 'logging',
              'nose.plugins.testid.os': 'os',
              'nose.plugins.testid.set': 'nose.util.set',
              'nose.plugins.testid.src': 'nose.util.src',
              'nose.plugins.xunit.Plugin': 'nose.plugins.base.Plugin',
              'nose.plugins.xunit.SkipTest': 'nose.exc.SkipTest',
              'nose.plugins.xunit.UNICODE_STRINGS': 'nose.pyversion.UNICODE_STRINGS',
              'nose.plugins.xunit.codecs': 'codecs',
              'nose.plugins.xunit.doctest': 'doctest',
              'nose.plugins.xunit.inspect': 'inspect',
              'nose.plugins.xunit.os': 'os',
              'nose.plugins.xunit.re': 're',
              'nose.plugins.xunit.saxutils': 'xml.sax.saxutils',
              'nose.plugins.xunit.time': 'time.time',
              'nose.plugins.xunit.traceback': 'traceback',
              'nose.proxy.Config': 'nose.config.Config',
              'nose.proxy.SkipTest': 'nose.plugins.skip.SkipTest',
              'nose.proxy.logging': 'logging',
              'nose.pyversion.inspect': 'inspect',
              'nose.pyversion.new': 'new',
              'nose.pyversion.nose.util': 'nose.util',
              'nose.pyversion.os': 'os',
              'nose.pyversion.sys': 'sys',
              'nose.pyversion.types': 'types',
              'nose.result.Config': 'nose.config.Config',
              'nose.result.SkipTest': 'nose.plugins.skip.SkipTest',
              'nose.result._TextTestResult': 'unittest._TextTestResult',
              'nose.result._ln': 'nose.util.ln',
              'nose.result.isclass': 'nose.util.isclass',
              'nose.result.logging': 'logging',
              'nose.result.warn': 'warnings.warn',
              'nose.run': 'nose.core.run',
              'nose.run_exit': 'nose.core.run_exit',
              'nose.runmodule': 'nose.core.runmodule',
              'nose.selector.Config': 'nose.config.Config',
              'nose.selector.getfilename': 'nose.util.getfilename',
              'nose.selector.getpackage': 'nose.util.getpackage',
              'nose.selector.ispackage': 'nose.util.ispackage',
              'nose.selector.logging': 'logging',
              'nose.selector.os': 'os',
              'nose.selector.split_test_name': 'nose.util.split_test_name',
              'nose.selector.src': 'nose.util.src',
              'nose.selector.unittest': 'unittest',
              'nose.sphinx.pluginopts.BuiltinPluginManager': 'nose.plugins.manager.BuiltinPluginManager',
              'nose.sphinx.pluginopts.Config': 'nose.config.Config',
              'nose.sphinx.pluginopts.Plugin': 'nose.plugins.base.Plugin',
              'nose.sphinx.pluginopts.TestProgram': 'nose.core.TestProgram',
              'nose.sphinx.pluginopts.ViewList': 'docutils.statemachine.ViewList',
              'nose.sphinx.pluginopts.directives': 'docutils.parsers.rst.directives',
              'nose.sphinx.pluginopts.isclass': 'inspect.isclass',
              'nose.sphinx.pluginopts.nodes': 'docutils.nodes',
              'nose.sphinx.pluginopts.os': 'os',
              'nose.sphinx.pluginopts.resolve_name': 'nose.util.resolve_name',
              'nose.suite.Config': 'nose.config.Config',
              'nose.suite.ResultProxyFactory': 'nose.proxy.ResultProxyFactory',
              'nose.suite.StringException': 'IronPython.Runtime.Exceptions.StringException',
              'nose.suite.Test': 'nose.case.Test',
              'nose.suite.clr': 'clr',
              'nose.suite.generators': '__future__.generators',
              'nose.suite.isclass': 'nose.util.isclass',
              'nose.suite.logging': 'logging',
              'nose.suite.resolve_name': 'nose.util.resolve_name',
              'nose.suite.sys': 'sys',
              'nose.suite.try_run': 'nose.util.try_run',
              'nose.suite.unittest': 'unittest',
              'nose.tools.*': 'nose.tools.trivial.*',
              'nose.tools.nontrivial.pdb': 'pdb',
              'nose.tools.nontrivial.sys': 'sys',
              'nose.tools.nontrivial.time': 'time',
              'nose.tools.trivial.re': 're',
              'nose.tools.trivial.unittest': 'unittest',
              'nose.twistedtools.Empty': 'Queue.Empty',
              'nose.twistedtools.Queue': 'Queue.Queue',
              'nose.twistedtools.Thread': 'threading.Thread',
              'nose.twistedtools.TimeExpired': 'nose.tools.TimeExpired',
              'nose.twistedtools.make_decorator': 'nose.tools.make_decorator',
              'nose.twistedtools.reactor': 'twisted.internet.reactor',
              'nose.twistedtools.sys': 'sys',
              'nose.twistedtools.threadable': 'twisted.python.threadable',
              'nose.util.CO_GENERATOR': 'compiler.consts.CO_GENERATOR',
              'nose.util.ClassType': 'nose.pyversion.ClassType',
              'nose.util.TypeType': 'nose.pyversion.TypeType',
              'nose.util.doctest': 'doctest',
              'nose.util.inspect': 'inspect',
              'nose.util.itertools': 'itertools',
              'nose.util.logging': 'logging',
              'nose.util.make_decorator': 'nose.tools.make_decorator',
              'nose.util.os': 'os',
              'nose.util.re': 're',
              'nose.util.set': 'sets.Set',
              'nose.util.sys': 'sys',
              'nose.util.types': 'types',
              'nose.util.unittest': 'unittest',
              'nose.with_setup': 'nose.tools.with_setup',
              'numpy.*': 'numpy.matrixlib.*',
              'numpy.PackageLoader': 'numpy._import_tools.PackageLoader',
              'numpy.Tester': 'numpy.testing.Tester',
              'numpy.__git_revision__': 'numpy.version.git_revision',
              'numpy.__version__': 'numpy.version.version',
              'numpy._import_tools.glob': 'glob.glob',
              'numpy._import_tools.imp': 'imp',
              'numpy._import_tools.os': 'os',
              'numpy._import_tools.sys': 'sys',
              'numpy._mat': 'numpy.matrixlib',
              'numpy._sys': 'sys',
              'numpy.abs': 'numpy.core.abs',
              'numpy.add_newdocs': 'numpy.add_newdocs',
              'numpy.add_newdocs.add_newdoc': 'numpy.lib.add_newdoc',
              'numpy.bool': '__builtin__.bool',
              'numpy.compat': 'numpy.compat',
              'numpy.compat.*': 'numpy.compat.py3k.*',
              'numpy.compat._inspect': 'numpy.compat._inspect',
              'numpy.compat._inspect.inspect': 'inspect',
              'numpy.compat._inspect.types': 'types',
              'numpy.compat.formatargspec': 'numpy.compat._inspect.formatargspec',
              'numpy.compat.getargspec': 'numpy.compat._inspect.getargspec',
              'numpy.compat.py3k': 'numpy.compat.py3k',
              'numpy.compat.py3k.io': 'io',
              'numpy.compat.py3k.sys': 'sys',
              'numpy.compat.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.compat.setup.setup': 'numpy.distutils.core.setup',
              'numpy.compat.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.compat.setupscons.os.path': 'os.path',
              'numpy.compat.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.complex': '__builtin__.complex',
              'numpy.core': 'numpy.core',
              'numpy.core.*': 'numpy.core.shape_base.*',
              'numpy.core.Tester': 'numpy.testing.Tester',
              'numpy.core.__doc__': 'numpy.core.info.__doc__',
              'numpy.core.__version__': 'numpy.version.version',
              'numpy.core._internal': 'numpy.core._internal',
              'numpy.core._internal.METADATA_DTSTR': 'multiarray.METADATA_DTSTR',
              'numpy.core._internal.asbytes': 'numpy.compat.asbytes',
              'numpy.core._internal.bytes': 'numpy.compat.bytes',
              'numpy.core._internal.ctypes': 'ctypes',
              'numpy.core._internal.dtype': 'numpy.core.multiarray.dtype',
              'numpy.core._internal.empty': 'multiarray.empty',
              'numpy.core._internal.ndarray': 'multiarray.ndarray',
              'numpy.core._internal.re': 're',
              'numpy.core._internal.sys': 'sys',
              'numpy.core._internal.warnings': 'warnings',
              'numpy.core._mx_datetime_parser.dt': 'datetime',
              'numpy.core._mx_datetime_parser.re': 're',
              'numpy.core._mx_datetime_parser.sys': 'sys',
              'numpy.core._mx_datetime_parser.types': 'types',
              'numpy.core._sort': '_sort',
              'numpy.core.abs': 'numpy.core.numeric.absolute',
              'numpy.core.arrayprint._nc': 'numpy.core.numeric',
              'numpy.core.arrayprint._nt': 'numpy.core.numerictypes',
              'numpy.core.arrayprint.absolute': 'umath.absolute',
              'numpy.core.arrayprint.format_longfloat': 'multiarray.format_longfloat',
              'numpy.core.arrayprint.isinf': 'umath.isinf',
              'numpy.core.arrayprint.isnan': 'umath.isnan',
              'numpy.core.arrayprint.maximum': 'umath.maximum',
              'numpy.core.arrayprint.minimum': 'umath.minimum',
              'numpy.core.arrayprint.not_equal': 'umath.not_equal',
              'numpy.core.arrayprint.ravel': 'numpy.core.fromnumeric.ravel',
              'numpy.core.arrayprint.reduce': 'functools.reduce',
              'numpy.core.arrayprint.sys': 'sys',
              'numpy.core.char': 'numpy.core.defchararray',
              'numpy.core.chararray': 'numpy.core.defchararray.chararray',
              'numpy.core.defchararray._vec_string': 'numpy.core.multiarray._vec_string',
              'numpy.core.defchararray.asbytes': 'numpy.compat.asbytes',
              'numpy.core.defchararray.bool_': 'numpy.core.numerictypes.bool_',
              'numpy.core.defchararray.character': 'numpy.core.numerictypes.character',
              'numpy.core.defchararray.compare_chararrays': 'numpy.core.numeric.compare_chararrays',
              'numpy.core.defchararray.integer': 'numpy.core.numerictypes.integer',
              'numpy.core.defchararray.narray': 'numpy.core.numeric.array',
              'numpy.core.defchararray.ndarray': 'numpy.core.numeric.ndarray',
              'numpy.core.defchararray.numpy': 'numpy',
              'numpy.core.defchararray.object_': 'numpy.core.numerictypes.object_',
              'numpy.core.defchararray.string_': 'numpy.core.numerictypes.string_',
              'numpy.core.defchararray.sys': 'sys',
              'numpy.core.defchararray.unicode_': 'numpy.core.numerictypes.unicode_',
              'numpy.core.fromnumeric.array': 'numpy.core.numeric.array',
              'numpy.core.fromnumeric.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.core.fromnumeric.asarray': 'numpy.core.numeric.asarray',
              'numpy.core.fromnumeric.concatenate': 'numpy.core.numeric.concatenate',
              'numpy.core.fromnumeric.mu': 'multiarray',
              'numpy.core.fromnumeric.nt': 'numpy.core.numerictypes',
              'numpy.core.fromnumeric.types': 'types',
              'numpy.core.fromnumeric.um': 'umath',
              'numpy.core.function_base._nx': 'numpy.core.numeric',
              'numpy.core.function_base.array': 'numpy.core.numeric.array',
              'numpy.core.generate_numpy_api.BoolValuesApi': 'genapi.BoolValuesApi',
              'numpy.core.generate_numpy_api.FunctionApi': 'genapi.FunctionApi',
              'numpy.core.generate_numpy_api.GlobalVarApi': 'genapi.GlobalVarApi',
              'numpy.core.generate_numpy_api.TypeApi': 'genapi.TypeApi',
              'numpy.core.generate_numpy_api.genapi': 'genapi',
              'numpy.core.generate_numpy_api.numpy_api': 'numpy_api',
              'numpy.core.generate_numpy_api.os': 'os',
              'numpy.core.getlimits.MachAr': 'numpy.core.machar.MachAr',
              'numpy.core.getlimits.array': 'numpy.core.numeric.array',
              'numpy.core.getlimits.ntypes': 'numpy.core.numerictypes',
              'numpy.core.getlimits.numeric': 'numpy.core.numeric',
              'numpy.core.machar.any': 'numpy.core.fromnumeric.any',
              'numpy.core.machar.math': 'math',
              'numpy.core.machar.seterr': 'numpy.core.numeric.seterr',
              'numpy.core.max': 'numpy.core.fromnumeric.amax',
              'numpy.core.memmap.asbytes': 'numpy.compat.asbytes',
              'numpy.core.memmap.dtype': 'numpy.core.numeric.dtype',
              'numpy.core.memmap.mmap': 'mmap',
              'numpy.core.memmap.ndarray': 'numpy.core.numeric.ndarray',
              'numpy.core.memmap.os.path': 'os.path',
              'numpy.core.memmap.sys': 'sys',
              'numpy.core.memmap.uint8': 'numpy.core.numeric.uint8',
              'numpy.core.memmap.warnings': 'warnings',
              'numpy.core.min': 'numpy.core.fromnumeric.amin',
              'numpy.core.multiarray': 'multiarray',
              'numpy.core.nt': 'numpy.core.numerictypes',
              'numpy.core.numeric.*': 'numpy.core.fromnumeric.*',
              'numpy.core.numeric.alterdot': '_dotblas.alterdot',
              'numpy.core.numeric.array2string': 'numpy.core.arrayprint.array2string',
              'numpy.core.numeric.dot': '_dotblas.dot',
              'numpy.core.numeric.fromnumeric': 'numpy.core.fromnumeric',
              'numpy.core.numeric.get_printoptions': 'numpy.core.arrayprint.get_printoptions',
              'numpy.core.numeric.inner': '_dotblas.inner',
              'numpy.core.numeric.load': 'cPickle.load',
              'numpy.core.numeric.loads': 'cPickle.loads',
              'numpy.core.numeric.multiarray': 'multiarray',
              'numpy.core.numeric.numerictypes': 'numpy.core.numerictypes',
              'numpy.core.numeric.restoredot': '_dotblas.restoredot',
              'numpy.core.numeric.set_printoptions': 'numpy.core.arrayprint.set_printoptions',
              'numpy.core.numeric.sys': 'sys',
              'numpy.core.numeric.umath': 'umath',
              'numpy.core.numeric.vdot': '_dotblas.vdot',
              'numpy.core.numeric.warnings': 'warnings',
              'numpy.core.numerictypes._types': 'types',
              'numpy.core.numerictypes.array': 'numpy.core.multiarray.array',
              'numpy.core.numerictypes.bool': '__builtin__.bool',
              'numpy.core.numerictypes.bytes': 'numpy.compat.bytes',
              'numpy.core.numerictypes.complex': '__builtin__.complex',
              'numpy.core.numerictypes.dtype': 'numpy.core.multiarray.dtype',
              'numpy.core.numerictypes.empty': 'numpy.core.multiarray.empty',
              'numpy.core.numerictypes.float': '__builtin__.float',
              'numpy.core.numerictypes.int': '__builtin__.int',
              'numpy.core.numerictypes.long': '__builtin__.long',
              'numpy.core.numerictypes.ndarray': 'numpy.core.multiarray.ndarray',
              'numpy.core.numerictypes.object': '__builtin__.object',
              'numpy.core.numerictypes.str': '__builtin__.str',
              'numpy.core.numerictypes.sys': 'sys',
              'numpy.core.numerictypes.typeinfo': 'numpy.core.multiarray.typeinfo',
              'numpy.core.numerictypes.unicode': '__builtin__.unicode',
              'numpy.core.rec': 'numpy.core.records',
              'numpy.core.records.bytes': 'numpy.compat.bytes',
              'numpy.core.records.chararray': 'numpy.core.defchararray.chararray',
              'numpy.core.records.isfileobj': 'numpy.compat.isfileobj',
              'numpy.core.records.nt': 'numpy.core.numerictypes',
              'numpy.core.records.os': 'os',
              'numpy.core.records.sb': 'numpy.core.numeric',
              'numpy.core.records.sys': 'sys',
              'numpy.core.records.types': 'types',
              'numpy.core.round': 'numpy.core.fromnumeric.round_',
              'numpy.core.scalarmath': 'scalarmath',
              'numpy.core.scons_support.Action': 'SCons.Action.Action',
              'numpy.core.scons_support.Builder': 'SCons.Builder.Builder',
              'numpy.core.scons_support.LONG_DOUBLE_REPRESENTATION_SRC': 'numpy.core.setup_common.LONG_DOUBLE_REPRESENTATION_SRC',
              'numpy.core.scons_support.SCons': 'SCons',
              'numpy.core.scons_support.SCons.Node': 'SCons.Node',
              'numpy.core.scons_support._check_api_version': 'numpy.core.setup_common.check_api_version',
              'numpy.core.scons_support.code_generators': 'code_generators',
              'numpy.core.scons_support.deepcopy': 'copy.deepcopy',
              'numpy.core.scons_support.generate_umath': 'code_generators.generate_umath',
              'numpy.core.scons_support.long_double_representation': 'numpy.core.setup_common.long_double_representation',
              'numpy.core.scons_support.nowrap_do_generate_numpy_api': 'code_generators.generate_numpy_api.do_generate_api',
              'numpy.core.scons_support.nowrap_do_generate_ufunc_api': 'code_generators.generate_ufunc_api.do_generate_api',
              'numpy.core.scons_support.os': 'os',
              'numpy.core.scons_support.pbasename': 'os.path.basename',
              'numpy.core.scons_support.pdirname': 'os.path.dirname',
              'numpy.core.scons_support.pjoin': 'os.path.join',
              'numpy.core.scons_support.process_str': 'numscons.numdist.process_c_str',
              'numpy.core.scons_support.pyod': 'numpy.core.setup_common.pyod',
              'numpy.core.scons_support.sys': 'sys',
              'numpy.core.setup.*': 'numpy.core.setup_common.*',
              'numpy.core.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.core.setup._pik': 'pickle',
              'numpy.core.setup.copy': 'copy',
              'numpy.core.setup.default_lib_dirs': 'numpy.distutils.system_info.default_lib_dirs',
              'numpy.core.setup.dot_join': 'numpy.distutils.misc_util.dot_join',
              'numpy.core.setup.get_build_architecture': 'numpy.distutils.misc_util.get_build_architecture',
              'numpy.core.setup.get_cmd': 'numpy.distutils.misc_util.get_cmd',
              'numpy.core.setup.get_config_var': 'distutils.sysconfig.get_config_var',
              'numpy.core.setup.get_info': 'numpy.distutils.system_info.get_info',
              'numpy.core.setup.imp': 'imp',
              'numpy.core.setup.join': 'os.path.join',
              'numpy.core.setup.log': 'numpy.distutils.log',
              'numpy.core.setup.newer': 'distutils.dep_util.newer',
              'numpy.core.setup.os': 'os',
              'numpy.core.setup.re': 're',
              'numpy.core.setup.setup': 'numpy.distutils.core.setup',
              'numpy.core.setup.shutil': 'shutil',
              'numpy.core.setup.sys': 'sys',
              'numpy.core.setup.warnings': 'warnings',
              'numpy.core.setup_common.CompileError': 'distutils.ccompiler.CompileError',
              'numpy.core.setup_common.LooseVersion': 'distutils.version.LooseVersion',
              'numpy.core.setup_common.binascii': 'binascii',
              'numpy.core.setup_common.copy': 'copy',
              'numpy.core.setup_common.join': 'os.path.join',
              'numpy.core.setup_common.sys': 'sys',
              'numpy.core.setup_common.warnings': 'warnings',
              'numpy.core.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.core.setupscons.basename': 'os.path.basename',
              'numpy.core.setupscons.default_lib_dirs': 'numpy.distutils.system_info.default_lib_dirs',
              'numpy.core.setupscons.dot_join': 'numpy.distutils.misc_util.dot_join',
              'numpy.core.setupscons.get_info': 'numpy.distutils.system_info.get_info',
              'numpy.core.setupscons.get_scons_build_dir': 'numscons.get_scons_build_dir',
              'numpy.core.setupscons.get_scons_pkg_build_dir': 'numpy.distutils.command.scons.get_scons_pkg_build_dir',
              'numpy.core.setupscons.glob': 'glob',
              'numpy.core.setupscons.join': 'os.path.join',
              'numpy.core.setupscons.log': 'numpy.distutils.log',
              'numpy.core.setupscons.os': 'os',
              'numpy.core.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.core.setupscons.sys': 'sys',
              'numpy.core.shape_base._nx': 'numpy.core.numeric',
              'numpy.core.shape_base.array': 'numpy.core.numeric.array',
              'numpy.core.shape_base.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.core.shape_base.newaxis': 'numpy.core.numeric.newaxis',
              'numpy.core.umath': 'umath',
              'numpy.ctypeslib': 'numpy.ctypeslib',
              'numpy.ctypeslib._dtype': 'numpy.dtype',
              'numpy.ctypeslib._flagdict': 'numpy.core.multiarray._flagdict',
              'numpy.ctypeslib.array': 'numpy.array',
              'numpy.ctypeslib.c_intp': 'numpy.intp',
              'numpy.ctypeslib.ctypes': 'ctypes',
              'numpy.ctypeslib.deprecate': 'numpy.deprecate',
              'numpy.ctypeslib.flagsobj': 'numpy.core.multiarray.flagsobj',
              'numpy.ctypeslib.get_shared_lib_extension': 'numpy.distutils.misc_util.get_shared_lib_extension',
              'numpy.ctypeslib.integer': 'numpy.integer',
              'numpy.ctypeslib.ndarray': 'numpy.ndarray',
              'numpy.ctypeslib.nic': 'numpy.core._internal',
              'numpy.ctypeslib.os': 'os',
              'numpy.ctypeslib.sys': 'sys',
              'numpy.ctypeslib.warnings': 'warnings',
              'numpy.distutils.*': 'numpy.distutils.npy_pkg_config.*',
              'numpy.distutils.Tester': 'numpy.testing.Tester',
              'numpy.distutils.__config__': 'numpy.distutils.__config__',
              'numpy.distutils.__doc__': 'numpy.distutils.info.__doc__',
              'numpy.distutils.__version__': 'numpy.distutils.__version__.version',
              'numpy.distutils.ccompiler': 'numpy.distutils.ccompiler',
              'numpy.distutils.ccompiler.*': 'distutils.ccompiler.*',
              'numpy.distutils.ccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'numpy.distutils.ccompiler.DistutilsModuleError': 'distutils.errors.DistutilsModuleError',
              'numpy.distutils.ccompiler.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'numpy.distutils.ccompiler.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.ccompiler.LooseVersion': 'distutils.version.LooseVersion',
              'numpy.distutils.ccompiler.ccompiler': 'distutils.ccompiler',
              'numpy.distutils.ccompiler.copy': 'copy.copy',
              'numpy.distutils.ccompiler.customize_compiler': 'distutils.sysconfig.customize_compiler',
              'numpy.distutils.ccompiler.cyg2win32': 'numpy.distutils.misc_util.cyg2win32',
              'numpy.distutils.ccompiler.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.distutils.ccompiler.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.ccompiler.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.ccompiler.log': 'numpy.distutils.log',
              'numpy.distutils.ccompiler.mingw32': 'numpy.distutils.misc_util.mingw32',
              'numpy.distutils.ccompiler.msvc_on_amd64': 'numpy.distutils.misc_util.msvc_on_amd64',
              'numpy.distutils.ccompiler.os': 'os',
              'numpy.distutils.ccompiler.quote_args': 'numpy.distutils.misc_util.quote_args',
              'numpy.distutils.ccompiler.re': 're',
              'numpy.distutils.ccompiler.string': 'string',
              'numpy.distutils.ccompiler.sys': 'sys',
              'numpy.distutils.ccompiler.types': 'types',
              'numpy.distutils.command.bdist_rpm.old_bdist_rpm': 'distutils.command.bdist_rpm.bdist_rpm',
              'numpy.distutils.command.bdist_rpm.os': 'os',
              'numpy.distutils.command.bdist_rpm.sys': 'sys',
              'numpy.distutils.command.build.get_platform': 'distutils.util.get_platform',
              'numpy.distutils.command.build.old_build': 'distutils.command.build.build',
              'numpy.distutils.command.build.os': 'os',
              'numpy.distutils.command.build.show_fortran_compilers': 'numpy.distutils.command.config_compiler.show_fortran_compilers',
              'numpy.distutils.command.build.sys': 'sys',
              'numpy.distutils.command.build_clib.DistutilsError': 'distutils.errors.DistutilsError',
              'numpy.distutils.command.build_clib.DistutilsFileError': 'distutils.errors.DistutilsFileError',
              'numpy.distutils.command.build_clib.DistutilsSetupError': 'distutils.errors.DistutilsSetupError',
              'numpy.distutils.command.build_clib.all_strings': 'numpy.distutils.misc_util.all_strings',
              'numpy.distutils.command.build_clib.filter_sources': 'numpy.distutils.misc_util.filter_sources',
              'numpy.distutils.command.build_clib.get_lib_source_files': 'numpy.distutils.misc_util.get_lib_source_files',
              'numpy.distutils.command.build_clib.get_numpy_include_dirs': 'numpy.distutils.misc_util.get_numpy_include_dirs',
              'numpy.distutils.command.build_clib.glob': 'glob.glob',
              'numpy.distutils.command.build_clib.has_cxx_sources': 'numpy.distutils.misc_util.has_cxx_sources',
              'numpy.distutils.command.build_clib.has_f_sources': 'numpy.distutils.misc_util.has_f_sources',
              'numpy.distutils.command.build_clib.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.command.build_clib.log': 'numpy.distutils.log',
              'numpy.distutils.command.build_clib.new_compiler': 'distutils.ccompiler.new_compiler',
              'numpy.distutils.command.build_clib.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.command.build_clib.newer_group': 'distutils.dep_util.newer_group',
              'numpy.distutils.command.build_clib.old_build_clib': 'distutils.command.build_clib.build_clib',
              'numpy.distutils.command.build_clib.os': 'os',
              'numpy.distutils.command.build_clib.shutil': 'shutil',
              'numpy.distutils.command.build_ext.DistutilsError': 'distutils.errors.DistutilsError',
              'numpy.distutils.command.build_ext.DistutilsFileError': 'distutils.errors.DistutilsFileError',
              'numpy.distutils.command.build_ext.DistutilsSetupError': 'distutils.errors.DistutilsSetupError',
              'numpy.distutils.command.build_ext.combine_paths': 'numpy.distutils.system_info.combine_paths',
              'numpy.distutils.command.build_ext.copy_file': 'distutils.file_util.copy_file',
              'numpy.distutils.command.build_ext.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.distutils.command.build_ext.filter_sources': 'numpy.distutils.misc_util.filter_sources',
              'numpy.distutils.command.build_ext.get_build_architecture': 'numpy.distutils.misc_util.get_build_architecture',
              'numpy.distutils.command.build_ext.get_ext_source_files': 'numpy.distutils.misc_util.get_ext_source_files',
              'numpy.distutils.command.build_ext.get_numpy_include_dirs': 'numpy.distutils.misc_util.get_numpy_include_dirs',
              'numpy.distutils.command.build_ext.glob': 'glob.glob',
              'numpy.distutils.command.build_ext.has_cxx_sources': 'numpy.distutils.misc_util.has_cxx_sources',
              'numpy.distutils.command.build_ext.has_f_sources': 'numpy.distutils.misc_util.has_f_sources',
              'numpy.distutils.command.build_ext.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.command.build_ext.log': 'numpy.distutils.log',
              'numpy.distutils.command.build_ext.msvc_version': 'numpy.distutils.misc_util.msvc_version',
              'numpy.distutils.command.build_ext.new_compiler': 'distutils.ccompiler.new_compiler',
              'numpy.distutils.command.build_ext.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.command.build_ext.newer_group': 'distutils.dep_util.newer_group',
              'numpy.distutils.command.build_ext.old_build_ext': 'distutils.command.build_ext.build_ext',
              'numpy.distutils.command.build_ext.os': 'os',
              'numpy.distutils.command.build_ext.set': 'sets.Set',
              'numpy.distutils.command.build_ext.show_fortran_compilers': 'numpy.distutils.command.config_compiler.show_fortran_compilers',
              'numpy.distutils.command.build_ext.sys': 'sys',
              'numpy.distutils.command.build_py.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.command.build_py.old_build_py': 'distutils.command.build_py.build_py',
              'numpy.distutils.command.build_scripts.get_script_files': 'numpy.distutils.misc_util.get_script_files',
              'numpy.distutils.command.build_scripts.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.command.build_scripts.log': 'numpy.distutils.log',
              'numpy.distutils.command.build_scripts.old_build_scripts': 'distutils.command.build_scripts.build_scripts',
              'numpy.distutils.command.build_src.DistutilsError': 'distutils.errors.DistutilsError',
              'numpy.distutils.command.build_src.DistutilsSetupError': 'distutils.errors.DistutilsSetupError',
              'numpy.distutils.command.build_src.Pyrex.Compiler.Main': 'Pyrex.Compiler.Main',
              'numpy.distutils.command.build_src.appendpath': 'numpy.distutils.misc_util.appendpath',
              'numpy.distutils.command.build_src.build_ext': 'distutils.command.build_ext',
              'numpy.distutils.command.build_src.copy': 'copy',
              'numpy.distutils.command.build_src.fortran_ext_match': 'numpy.distutils.misc_util.fortran_ext_match',
              'numpy.distutils.command.build_src.get_cmd': 'numpy.distutils.misc_util.get_cmd',
              'numpy.distutils.command.build_src.get_data_files': 'numpy.distutils.misc_util.get_data_files',
              'numpy.distutils.command.build_src.get_platform': 'distutils.util.get_platform',
              'numpy.distutils.command.build_src.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.command.build_src.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.command.build_src.log': 'numpy.distutils.log',
              'numpy.distutils.command.build_src.newer': 'distutils.dep_util.newer',
              'numpy.distutils.command.build_src.newer_group': 'distutils.dep_util.newer_group',
              'numpy.distutils.command.build_src.numpy.f2py': 'numpy.f2py',
              'numpy.distutils.command.build_src.os': 'os',
              'numpy.distutils.command.build_src.process_c_file': 'numpy.distutils.conv_template.process_file',
              'numpy.distutils.command.build_src.process_f_file': 'numpy.distutils.from_template.process_file',
              'numpy.distutils.command.build_src.re': 're',
              'numpy.distutils.command.build_src.shlex': 'shlex',
              'numpy.distutils.command.build_src.shutil': 'shutil',
              'numpy.distutils.command.build_src.sys': 'sys',
              'numpy.distutils.command.config.CompileError': 'distutils.ccompiler.CompileError',
              'numpy.distutils.command.config.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'numpy.distutils.command.config.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.command.config.LANG_EXT': 'distutils.command.config.LANG_EXT',
              'numpy.distutils.command.config.LinkError': 'distutils.ccompiler.LinkError',
              'numpy.distutils.command.config.check_compiler_gcc4': 'numpy.distutils.command.autodist.check_compiler_gcc4',
              'numpy.distutils.command.config.check_inline': 'numpy.distutils.command.autodist.check_inline',
              'numpy.distutils.command.config.copy_file': 'distutils.file_util.copy_file',
              'numpy.distutils.command.config.distutils': 'distutils',
              'numpy.distutils.command.config.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.distutils.command.config.generate_manifest': 'numpy.distutils.mingw32ccompiler.generate_manifest',
              'numpy.distutils.command.config.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.command.config.log': 'distutils.log',
              'numpy.distutils.command.config.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.command.config.old_config': 'distutils.command.config.config',
              'numpy.distutils.command.config.os': 'os',
              'numpy.distutils.command.config.signal': 'signal',
              'numpy.distutils.command.config.sys': 'sys',
              'numpy.distutils.command.config.warnings': 'warnings',
              'numpy.distutils.command.config_compiler.Command': 'distutils.core.Command',
              'numpy.distutils.command.config_compiler.distutils.core': 'distutils.core',
              'numpy.distutils.command.config_compiler.log': 'numpy.distutils.log',
              'numpy.distutils.command.config_compiler.show_fcompilers': 'numpy.distutils.fcompiler.show_fcompilers',
              'numpy.distutils.command.develop.old_develop': 'setuptools.command.develop.develop',
              'numpy.distutils.command.egg_info._egg_info': 'setuptools.command.egg_info.egg_info',
              'numpy.distutils.command.install.old_install_mod': 'distutils.command.install',
              'numpy.distutils.command.install.sys': 'sys',
              'numpy.distutils.command.install.write_file': 'distutils.file_util.write_file',
              'numpy.distutils.command.install_clib.Command': 'distutils.core.Command',
              'numpy.distutils.command.install_clib.get_cmd': 'numpy.distutils.misc_util.get_cmd',
              'numpy.distutils.command.install_clib.new_compiler': 'distutils.ccompiler.new_compiler',
              'numpy.distutils.command.install_clib.os': 'os',
              'numpy.distutils.command.install_data.old_install_data': 'distutils.command.install_data.install_data',
              'numpy.distutils.command.install_data.sys': 'sys',
              'numpy.distutils.command.install_headers.old_install_headers': 'distutils.command.install_headers.install_headers',
              'numpy.distutils.command.install_headers.os': 'os',
              'numpy.distutils.command.scons.CCompiler': 'numpy.distutils.ccompiler.CCompiler',
              'numpy.distutils.command.scons.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'numpy.distutils.command.scons.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'numpy.distutils.command.scons.DistutilsSetupError': 'distutils.errors.DistutilsSetupError',
              'numpy.distutils.command.scons.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.command.scons._incdir': 'numpy.distutils.misc_util.get_numpy_include_dirs',
              'numpy.distutils.command.scons.find_executable': 'numpy.distutils.exec_command.find_executable',
              'numpy.distutils.command.scons.get_cmd': 'numpy.distutils.misc_util.get_cmd',
              'numpy.distutils.command.scons.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.command.scons.get_scons_build_dir': 'numscons.get_scons_build_dir',
              'numpy.distutils.command.scons.get_scons_configres_dir': 'numscons.get_scons_configres_dir',
              'numpy.distutils.command.scons.get_scons_configres_filename': 'numscons.get_scons_configres_filename',
              'numpy.distutils.command.scons.get_scons_path': 'numscons.get_scons_path',
              'numpy.distutils.command.scons.is_bootstrapping': 'numpy.distutils.misc_util.is_bootstrapping',
              'numpy.distutils.command.scons.log': 'numpy.distutils.log',
              'numpy.distutils.command.scons.new_compiler': 'numpy.distutils.ccompiler.new_compiler',
              'numpy.distutils.command.scons.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.command.scons.numscons': 'numscons',
              'numpy.distutils.command.scons.old_build_ext': 'numpy.distutils.command.build_ext.build_ext',
              'numpy.distutils.command.scons.os': 'os',
              'numpy.distutils.command.scons.os.path': 'os.path',
              'numpy.distutils.command.scons.pdirname': 'os.path.dirname',
              'numpy.distutils.command.scons.pjoin': 'os.path.join',
              'numpy.distutils.command.scons.pkg_to_path': 'numscons.core.utils.pkg_to_path',
              'numpy.distutils.command.scons.sys': 'sys',
              'numpy.distutils.command.scons.version_info': 'numscons.version_info',
              'numpy.distutils.command.sdist.get_data_files': 'numpy.distutils.misc_util.get_data_files',
              'numpy.distutils.command.sdist.old_sdist': 'distutils.command.sdist.sdist',
              'numpy.distutils.command.sdist.sys': 'sys',
              'numpy.distutils.compat.sys': 'sys',
              'numpy.distutils.conv_template.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.conv_template.os': 'os',
              'numpy.distutils.conv_template.re': 're',
              'numpy.distutils.conv_template.sys': 'sys',
              'numpy.distutils.core.*': 'distutils.core.*',
              'numpy.distutils.core.Extension': 'numpy.distutils.extension.Extension',
              'numpy.distutils.core.NumpyDistribution': 'numpy.distutils.numpy_distribution.NumpyDistribution',
              'numpy.distutils.core.atexit': 'atexit',
              'numpy.distutils.core.bdist_egg': 'setuptools.command.bdist_egg',
              'numpy.distutils.core.bdist_rpm': 'numpy.distutils.command.bdist_rpm',
              'numpy.distutils.core.build': 'numpy.distutils.command.build',
              'numpy.distutils.core.build_clib': 'numpy.distutils.command.build_clib',
              'numpy.distutils.core.build_ext': 'numpy.distutils.command.build_ext',
              'numpy.distutils.core.build_py': 'numpy.distutils.command.build_py',
              'numpy.distutils.core.build_scripts': 'numpy.distutils.command.build_scripts',
              'numpy.distutils.core.build_src': 'numpy.distutils.command.build_src',
              'numpy.distutils.core.config': 'numpy.distutils.command.config',
              'numpy.distutils.core.config_compiler': 'numpy.distutils.command.config_compiler',
              'numpy.distutils.core.develop': 'numpy.distutils.command.develop',
              'numpy.distutils.core.distutils.core': 'distutils.core',
              'numpy.distutils.core.distutils.dist': 'distutils.dist',
              'numpy.distutils.core.easy_install': 'setuptools.command.easy_install',
              'numpy.distutils.core.egg_info': 'numpy.distutils.command.egg_info',
              'numpy.distutils.core.get_data_files': 'numpy.distutils.misc_util.get_data_files',
              'numpy.distutils.core.install': 'numpy.distutils.command.install',
              'numpy.distutils.core.install_clib': 'numpy.distutils.command.install_clib',
              'numpy.distutils.core.install_data': 'numpy.distutils.command.install_data',
              'numpy.distutils.core.install_headers': 'numpy.distutils.command.install_headers',
              'numpy.distutils.core.interactive_sys_argv': 'numpy.distutils.interactive.interactive_sys_argv',
              'numpy.distutils.core.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.core.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.core.old_setup': 'distutils.core.setup',
              'numpy.distutils.core.scons': 'numpy.distutils.command.scons',
              'numpy.distutils.core.sdist': 'numpy.distutils.command.sdist',
              'numpy.distutils.core.sys': 'sys',
              'numpy.distutils.core.warnings': 'warnings',
              'numpy.distutils.cpuinfo._winreg': '_winreg',
              'numpy.distutils.cpuinfo.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.cpuinfo.getstatusoutput': 'subprocess.getstatusoutput',
              'numpy.distutils.cpuinfo.os': 'os',
              'numpy.distutils.cpuinfo.platform': 'platform',
              'numpy.distutils.cpuinfo.re': 're',
              'numpy.distutils.cpuinfo.sys': 'sys',
              'numpy.distutils.cpuinfo.types': 'types',
              'numpy.distutils.cpuinfo.warnings': 'warnings',
              'numpy.distutils.environment.Distribution': 'distutils.dist.Distribution',
              'numpy.distutils.environment.os': 'os',
              'numpy.distutils.exec_command.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.exec_command.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.exec_command.log': 'numpy.distutils.log',
              'numpy.distutils.exec_command.make_temp_file': 'numpy.distutils.misc_util.make_temp_file',
              'numpy.distutils.exec_command.open_latin1': 'numpy.compat.open_latin1',
              'numpy.distutils.exec_command.os': 'os',
              'numpy.distutils.exec_command.shlex': 'shlex',
              'numpy.distutils.exec_command.sys': 'sys',
              'numpy.distutils.exec_command.warnings': 'warnings',
              'numpy.distutils.extension.old_Extension': 'distutils.extension.Extension',
              'numpy.distutils.extension.re': 're',
              'numpy.distutils.extension.warnings': 'warnings',
              'numpy.distutils.fcompiler.CCompiler': 'numpy.distutils.ccompiler.CCompiler',
              'numpy.distutils.fcompiler.CompileError': 'distutils.errors.CompileError',
              'numpy.distutils.fcompiler.Distribution': 'distutils.dist.Distribution',
              'numpy.distutils.fcompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'numpy.distutils.fcompiler.DistutilsModuleError': 'distutils.errors.DistutilsModuleError',
              'numpy.distutils.fcompiler.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'numpy.distutils.fcompiler.EnvironmentConfig': 'numpy.distutils.environment.EnvironmentConfig',
              'numpy.distutils.fcompiler.FancyGetopt': 'distutils.fancy_getopt.FancyGetopt',
              'numpy.distutils.fcompiler.LinkError': 'distutils.errors.LinkError',
              'numpy.distutils.fcompiler.absoft.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.absoft.cpu': 'numpy.distutils.cpuinfo.cpu',
              'numpy.distutils.fcompiler.absoft.cyg2win32': 'numpy.distutils.misc_util.cyg2win32',
              'numpy.distutils.fcompiler.absoft.dummy_fortran_file': 'numpy.distutils.fcompiler.dummy_fortran_file',
              'numpy.distutils.fcompiler.absoft.log': 'distutils.log',
              'numpy.distutils.fcompiler.absoft.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.absoft.os': 'os',
              'numpy.distutils.fcompiler.all_strings': 'numpy.distutils.misc_util.all_strings',
              'numpy.distutils.fcompiler.compaq.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'numpy.distutils.fcompiler.compaq.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.compaq.MSVCCompiler': 'distutils.msvccompiler.MSVCCompiler',
              'numpy.distutils.fcompiler.compaq.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.fcompiler.compaq.log': 'distutils.log',
              'numpy.distutils.fcompiler.compaq.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.compaq.os': 'os',
              'numpy.distutils.fcompiler.compaq.sys': 'sys',
              'numpy.distutils.fcompiler.config_fc': 'numpy.distutils.command.config_compiler.config_fc',
              'numpy.distutils.fcompiler.find_executable': 'numpy.distutils.exec_command.find_executable',
              'numpy.distutils.fcompiler.g95.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.g95.log': 'distutils.log',
              'numpy.distutils.fcompiler.gen_lib_options': 'numpy.distutils.ccompiler.gen_lib_options',
              'numpy.distutils.fcompiler.get_distribution': 'numpy.distutils.core.get_distribution',
              'numpy.distutils.fcompiler.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.fcompiler.get_python_lib': 'distutils.sysconfig.get_python_lib',
              'numpy.distutils.fcompiler.get_shared_lib_extension': 'numpy.distutils.misc_util.get_shared_lib_extension',
              'numpy.distutils.fcompiler.glob': 'glob.glob',
              'numpy.distutils.fcompiler.gnu.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.gnu.PIPE': 'subprocess.PIPE',
              'numpy.distutils.fcompiler.gnu.Popen': 'subprocess.Popen',
              'numpy.distutils.fcompiler.gnu.STDOUT': 'subprocess.STDOUT',
              'numpy.distutils.fcompiler.gnu.cpu': 'numpy.distutils.cpuinfo.cpu',
              'numpy.distutils.fcompiler.gnu.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.distutils.fcompiler.gnu.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.fcompiler.gnu.log': 'distutils.log',
              'numpy.distutils.fcompiler.gnu.msvc_runtime_library': 'numpy.distutils.misc_util.msvc_runtime_library',
              'numpy.distutils.fcompiler.gnu.os': 'os',
              'numpy.distutils.fcompiler.gnu.platform': 'platform',
              'numpy.distutils.fcompiler.gnu.re': 're',
              'numpy.distutils.fcompiler.gnu.sc': 'distutils.sysconfig',
              'numpy.distutils.fcompiler.gnu.sys': 'sys',
              'numpy.distutils.fcompiler.gnu.sysconfig': 'distutils.sysconfig',
              'numpy.distutils.fcompiler.gnu.tempfile': 'tempfile',
              'numpy.distutils.fcompiler.gnu.warnings': 'warnings',
              'numpy.distutils.fcompiler.hpux.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.hpux.log': 'distutils.log',
              'numpy.distutils.fcompiler.hpux.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.ibm.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.ibm.LooseVersion': 'distutils.version.LooseVersion',
              'numpy.distutils.fcompiler.ibm.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.distutils.fcompiler.ibm.find_executable': 'numpy.distutils.exec_command.find_executable',
              'numpy.distutils.fcompiler.ibm.log': 'distutils.log',
              'numpy.distutils.fcompiler.ibm.make_temp_file': 'numpy.distutils.misc_util.make_temp_file',
              'numpy.distutils.fcompiler.ibm.os': 'os',
              'numpy.distutils.fcompiler.ibm.re': 're',
              'numpy.distutils.fcompiler.ibm.sys': 'sys',
              'numpy.distutils.fcompiler.intel.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.intel.cpu': 'numpy.distutils.cpuinfo.cpu',
              'numpy.distutils.fcompiler.intel.dummy_fortran_file': 'numpy.distutils.fcompiler.dummy_fortran_file',
              'numpy.distutils.fcompiler.intel.log': 'distutils.log',
              'numpy.distutils.fcompiler.intel.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.intel.simple_version_match': 'numpy.distutils.ccompiler.simple_version_match',
              'numpy.distutils.fcompiler.intel.sys': 'sys',
              'numpy.distutils.fcompiler.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.fcompiler.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.fcompiler.lahey.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.lahey.log': 'distutils.log',
              'numpy.distutils.fcompiler.lahey.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.lahey.os': 'os',
              'numpy.distutils.fcompiler.log': 'numpy.distutils.log',
              'numpy.distutils.fcompiler.make_temp_file': 'numpy.distutils.misc_util.make_temp_file',
              'numpy.distutils.fcompiler.mips.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.mips.cpu': 'numpy.distutils.cpuinfo.cpu',
              'numpy.distutils.fcompiler.mips.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.nag.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.nag.log': 'distutils.log',
              'numpy.distutils.fcompiler.nag.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.nag.sys': 'sys',
              'numpy.distutils.fcompiler.none.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.none.log': 'distutils.log',
              'numpy.distutils.fcompiler.open_latin1': 'numpy.compat.open_latin1',
              'numpy.distutils.fcompiler.os': 'os',
              'numpy.distutils.fcompiler.pathf95.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.pathf95.log': 'distutils.log',
              'numpy.distutils.fcompiler.pathf95.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.pg.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.pg.log': 'distutils.log',
              'numpy.distutils.fcompiler.pg.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.pg.platform': 'sys.platform',
              'numpy.distutils.fcompiler.re': 're',
              'numpy.distutils.fcompiler.set': 'sets.Set',
              'numpy.distutils.fcompiler.split_quoted': 'distutils.util.split_quoted',
              'numpy.distutils.fcompiler.strtobool': 'distutils.util.strtobool',
              'numpy.distutils.fcompiler.sun.FCompiler': 'numpy.distutils.fcompiler.FCompiler',
              'numpy.distutils.fcompiler.sun.log': 'distutils.log',
              'numpy.distutils.fcompiler.sun.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.sun.simple_version_match': 'numpy.distutils.ccompiler.simple_version_match',
              'numpy.distutils.fcompiler.sys': 'sys',
              'numpy.distutils.fcompiler.types': 'types',
              'numpy.distutils.fcompiler.vast.GnuFCompiler': 'numpy.distutils.fcompiler.gnu.GnuFCompiler',
              'numpy.distutils.fcompiler.vast.log': 'distutils.log',
              'numpy.distutils.fcompiler.vast.new_fcompiler': 'numpy.distutils.fcompiler.new_fcompiler',
              'numpy.distutils.fcompiler.vast.os': 'os',
              'numpy.distutils.from_template.os': 'os',
              'numpy.distutils.from_template.re': 're',
              'numpy.distutils.from_template.sys': 'sys',
              'numpy.distutils.intelccompiler.UnixCCompiler': 'distutils.unixccompiler.UnixCCompiler',
              'numpy.distutils.intelccompiler.find_executable': 'numpy.distutils.exec_command.find_executable',
              'numpy.distutils.interactive.atexit': 'atexit',
              'numpy.distutils.interactive.os': 'os',
              'numpy.distutils.interactive.pformat': 'pprint.pformat',
              'numpy.distutils.interactive.readline': 'readline',
              'numpy.distutils.interactive.shlex': 'shlex',
              'numpy.distutils.interactive.show_compilers': 'distutils.ccompiler.show_compilers',
              'numpy.distutils.interactive.show_fcompilers': 'numpy.distutils.fcompiler.show_fcompilers',
              'numpy.distutils.interactive.sys': 'sys',
              'numpy.distutils.interactive.tempfile': 'tempfile',
              'numpy.distutils.lib2def.os': 'os',
              'numpy.distutils.lib2def.re': 're',
              'numpy.distutils.lib2def.subprocess': 'subprocess',
              'numpy.distutils.lib2def.sys': 'sys',
              'numpy.distutils.line_endings.os': 'os',
              'numpy.distutils.line_endings.re': 're',
              'numpy.distutils.line_endings.sys': 'sys',
              'numpy.distutils.log.*': 'distutils.log.*',
              'numpy.distutils.log._global_log': 'distutils.log._global_log',
              'numpy.distutils.log.cyan_text': 'numpy.distutils.misc_util.cyan_text',
              'numpy.distutils.log.default_text': 'numpy.distutils.misc_util.default_text',
              'numpy.distutils.log.green_text': 'numpy.distutils.misc_util.green_text',
              'numpy.distutils.log.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.log.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.log.old_Log': 'distutils.log.Log',
              'numpy.distutils.log.red_text': 'numpy.distutils.misc_util.red_text',
              'numpy.distutils.log.sys': 'sys',
              'numpy.distutils.mingw32ccompiler.CompileError': 'distutils.errors.CompileError',
              'numpy.distutils.mingw32ccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'numpy.distutils.mingw32ccompiler.StrictVersion': 'distutils.version.StrictVersion',
              'numpy.distutils.mingw32ccompiler.UnixCCompiler': 'distutils.unixccompiler.UnixCCompiler',
              'numpy.distutils.mingw32ccompiler.UnknownFileError': 'distutils.errors.UnknownFileError',
              'numpy.distutils.mingw32ccompiler.distutils.cygwinccompiler': 'distutils.cygwinccompiler',
              'numpy.distutils.mingw32ccompiler.gen_lib_options': 'numpy.distutils.ccompiler.gen_lib_options',
              'numpy.distutils.mingw32ccompiler.gen_preprocess_options': 'numpy.distutils.ccompiler.gen_preprocess_options',
              'numpy.distutils.mingw32ccompiler.get_build_architecture': 'numpy.distutils.misc_util.get_build_architecture',
              'numpy.distutils.mingw32ccompiler.get_build_msvc_version': 'distutils.msvccompiler.get_build_version',
              'numpy.distutils.mingw32ccompiler.lib2def': 'numpy.distutils.lib2def',
              'numpy.distutils.mingw32ccompiler.log': 'numpy.distutils.log',
              'numpy.distutils.mingw32ccompiler.msvc_runtime_library': 'numpy.distutils.misc_util.msvc_runtime_library',
              'numpy.distutils.mingw32ccompiler.msvcrt': 'msvcrt',
              'numpy.distutils.mingw32ccompiler.numpy.distutils.ccompiler': 'numpy.distutils.ccompiler',
              'numpy.distutils.mingw32ccompiler.os': 'os',
              'numpy.distutils.mingw32ccompiler.re': 're',
              'numpy.distutils.mingw32ccompiler.subprocess': 'subprocess',
              'numpy.distutils.mingw32ccompiler.sys': 'sys',
              'numpy.distutils.misc_util.DistutilsError': 'distutils.errors.DistutilsError',
              'numpy.distutils.misc_util.DistutilsInternalError': 'distutils.errors.DistutilsInternalError',
              'numpy.distutils.misc_util.Extension': 'numpy.distutils.core.Extension',
              'numpy.distutils.misc_util.__builtin__': '__builtin__',
              'numpy.distutils.misc_util.atexit': 'atexit',
              'numpy.distutils.misc_util.copy': 'copy',
              'numpy.distutils.misc_util.curses': 'curses',
              'numpy.distutils.misc_util.dict_append': 'numpy.distutils.system_info.dict_append',
              'numpy.distutils.misc_util.distutils': 'distutils',
              'numpy.distutils.misc_util.distutils.core': 'distutils.core',
              'numpy.distutils.misc_util.get_build_architecture': 'distutils.msvccompiler.get_build_architecture',
              'numpy.distutils.misc_util.get_distribution': 'numpy.distutils.core.get_distribution',
              'numpy.distutils.misc_util.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.misc_util.get_info': 'numpy.distutils.system_info.get_info',
              'numpy.distutils.misc_util.get_scons_configres_dir': 'numscons.get_scons_configres_dir',
              'numpy.distutils.misc_util.get_scons_configres_filename': 'numscons.get_scons_configres_filename',
              'numpy.distutils.misc_util.glob': 'glob',
              'numpy.distutils.misc_util.imp': 'imp',
              'numpy.distutils.misc_util.log': 'numpy.distutils.log',
              'numpy.distutils.misc_util.mkpath': 'distutils.dir_util.mkpath',
              'numpy.distutils.misc_util.nnu': 'numpy.numarray.util',
              'numpy.distutils.misc_util.numpy': 'numpy',
              'numpy.distutils.misc_util.os': 'os',
              'numpy.distutils.misc_util.parse_flags': 'numpy.distutils.npy_pkg_config.parse_flags',
              'numpy.distutils.misc_util.pformat': 'pprint.pformat',
              'numpy.distutils.misc_util.re': 're',
              'numpy.distutils.misc_util.read_config': 'numpy.distutils.npy_pkg_config.read_config',
              'numpy.distutils.misc_util.set': 'sets.Set',
              'numpy.distutils.misc_util.shutil': 'shutil',
              'numpy.distutils.misc_util.subprocess': 'subprocess',
              'numpy.distutils.misc_util.sys': 'sys',
              'numpy.distutils.misc_util.system_info': 'numpy.distutils.system_info.system_info',
              'numpy.distutils.misc_util.tempfile': 'tempfile',
              'numpy.distutils.misc_util.warnings': 'warnings',
              'numpy.distutils.npy_pkg_config.ConfigParser': 'configparser.ConfigParser',
              'numpy.distutils.npy_pkg_config.NoOptionError': 'configparser.NoOptionError',
              'numpy.distutils.npy_pkg_config.OptionParser': 'optparse.OptionParser',
              'numpy.distutils.npy_pkg_config.SafeConfigParser': 'configparser.SafeConfigParser',
              'numpy.distutils.npy_pkg_config.glob': 'glob',
              'numpy.distutils.npy_pkg_config.os': 'os',
              'numpy.distutils.npy_pkg_config.re': 're',
              'numpy.distutils.npy_pkg_config.shlex': 'shlex',
              'numpy.distutils.npy_pkg_config.sys': 'sys',
              'numpy.distutils.numpy.distutils.__config__': 'numpy.distutils.__config__',
              'numpy.distutils.numpy.distutils.ccompiler': 'numpy.distutils.ccompiler',
              'numpy.distutils.numpy.distutils.unixccompiler': 'numpy.distutils.unixccompiler',
              'numpy.distutils.numpy_distribution.Distribution': 'distutils.core.Distribution',
              'numpy.distutils.pathccompiler.UnixCCompiler': 'distutils.unixccompiler.UnixCCompiler',
              'numpy.distutils.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.distutils.setup.setup': 'numpy.distutils.core.setup',
              'numpy.distutils.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.distutils.setupscons.os.path': 'os.path',
              'numpy.distutils.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.distutils.sys': 'sys',
              'numpy.distutils.system_info.ConfigParser': 'configparser.ConfigParser',
              'numpy.distutils.system_info.Distribution': 'distutils.dist.Distribution',
              'numpy.distutils.system_info.DistutilsError': 'distutils.errors.DistutilsError',
              'numpy.distutils.system_info.NoOptionError': 'configparser.NoOptionError',
              'numpy.distutils.system_info.Numeric': 'Numeric',
              'numpy.distutils.system_info.cmd_config': 'numpy.distutils.command.config.config',
              'numpy.distutils.system_info.copy': 'copy',
              'numpy.distutils.system_info.cpu': 'numpy.distutils.cpuinfo.cpu',
              'numpy.distutils.system_info.distutils.sysconfig': 'distutils.sysconfig',
              'numpy.distutils.system_info.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.distutils.system_info.f2py': 'numpy.f2py',
              'numpy.distutils.system_info.find_executable': 'numpy.distutils.exec_command.find_executable',
              'numpy.distutils.system_info.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.system_info.get_platform': 'distutils.util.get_platform',
              'numpy.distutils.system_info.get_pythonexe': 'numpy.distutils.exec_command.get_pythonexe',
              'numpy.distutils.system_info.get_shared_lib_extension': 'numpy.distutils.misc_util.get_shared_lib_extension',
              'numpy.distutils.system_info.glob': 'glob.glob',
              'numpy.distutils.system_info.inspect': 'inspect',
              'numpy.distutils.system_info.is_sequence': 'numpy.distutils.misc_util.is_sequence',
              'numpy.distutils.system_info.is_string': 'numpy.distutils.misc_util.is_string',
              'numpy.distutils.system_info.log': 'distutils.log',
              'numpy.distutils.system_info.numarray': 'numarray',
              'numpy.distutils.system_info.numpy': 'numpy',
              'numpy.distutils.system_info.optparse': 'optparse',
              'numpy.distutils.system_info.os': 'os',
              'numpy.distutils.system_info.platform': 'platform',
              'numpy.distutils.system_info.re': 're',
              'numpy.distutils.system_info.reduce': 'functools.reduce',
              'numpy.distutils.system_info.sys': 'sys',
              'numpy.distutils.system_info.warnings': 'warnings',
              'numpy.distutils.unixccompiler': 'numpy.distutils.unixccompiler',
              'numpy.distutils.unixccompiler.*': 'distutils.unixccompiler.*',
              'numpy.distutils.unixccompiler.CompileError': 'distutils.errors.CompileError',
              'numpy.distutils.unixccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'numpy.distutils.unixccompiler.get_exception': 'numpy.distutils.compat.get_exception',
              'numpy.distutils.unixccompiler.log': 'numpy.distutils.log',
              'numpy.distutils.unixccompiler.os': 'os',
              'numpy.distutils.unixccompiler.replace_method': 'numpy.distutils.ccompiler.replace_method',
              'numpy.doc.constants.re': 're',
              'numpy.doc.constants.textwrap': 'textwrap',
              'numpy.doc.os': 'os',
              'numpy.dual.fftpkg': 'numpy.fft',
              'numpy.dual.i0': 'numpy.lib.i0',
              'numpy.dual.linpkg': 'numpy.linalg',
              'numpy.dual.sys': 'sys',
              'numpy.f2py.Tester': 'numpy.testing.Tester',
              'numpy.f2py.__doc__': 'numpy.f2py.info.__doc__',
              'numpy.f2py.__version__.version': '__svn_version__.version',
              'numpy.f2py.auxfuncs.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.auxfuncs.cfuncs': 'numpy.f2py.cfuncs',
              'numpy.f2py.auxfuncs.getctype': 'numpy.f2py.capi_maps.getctype',
              'numpy.f2py.auxfuncs.pprint': 'pprint',
              'numpy.f2py.auxfuncs.reduce': 'functools.reduce',
              'numpy.f2py.auxfuncs.sys': 'sys',
              'numpy.f2py.auxfuncs.types': 'types',
              'numpy.f2py.capi_maps.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.capi_maps.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.capi_maps.cb_rules': 'numpy.f2py.cb_rules',
              'numpy.f2py.capi_maps.copy': 'copy',
              'numpy.f2py.capi_maps.markoutercomma': 'numpy.f2py.crackfortran.markoutercomma',
              'numpy.f2py.capi_maps.os': 'os',
              'numpy.f2py.capi_maps.re': 're',
              'numpy.f2py.capi_maps.sys': 'sys',
              'numpy.f2py.cb_rules.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.cb_rules.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.cb_rules.capi_maps': 'numpy.f2py.capi_maps',
              'numpy.f2py.cb_rules.cfuncs': 'numpy.f2py.cfuncs',
              'numpy.f2py.cb_rules.pprint': 'pprint',
              'numpy.f2py.cb_rules.sys': 'sys',
              'numpy.f2py.cb_rules.types': 'types',
              'numpy.f2py.cfuncs.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.cfuncs.c2capi_map': 'numpy.f2py.capi_maps.c2capi_map',
              'numpy.f2py.cfuncs.copy': 'copy',
              'numpy.f2py.cfuncs.sys': 'sys',
              'numpy.f2py.cfuncs.types': 'types',
              'numpy.f2py.commands': 'commands',
              'numpy.f2py.common_rules.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.common_rules.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.common_rules.capi_maps': 'numpy.f2py.capi_maps',
              'numpy.f2py.common_rules.func2subr': 'numpy.f2py.func2subr',
              'numpy.f2py.common_rules.pprint': 'pprint',
              'numpy.f2py.common_rules.rmbadname': 'numpy.f2py.crackfortran.rmbadname',
              'numpy.f2py.common_rules.sys': 'sys',
              'numpy.f2py.crackfortran.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.crackfortran.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.crackfortran.copy': 'copy',
              'numpy.f2py.crackfortran.fileinput': 'fileinput',
              'numpy.f2py.crackfortran.os': 'os',
              'numpy.f2py.crackfortran.platform': 'platform',
              'numpy.f2py.crackfortran.pprint': 'pprint',
              'numpy.f2py.crackfortran.re': 're',
              'numpy.f2py.crackfortran.string': 'string',
              'numpy.f2py.crackfortran.sys': 'sys',
              'numpy.f2py.diagnose': 'numpy.f2py.diagnose',
              'numpy.f2py.diagnose.build_flib': 'numpy_distutils.command.build_flib',
              'numpy.f2py.diagnose.cpuinfo': 'numpy_distutils.cpuinfo.cpuinfo',
              'numpy.f2py.diagnose.f2py2e': 'numpy.f2py.f2py2e',
              'numpy.f2py.diagnose.fcompiler': 'numpy_distutils.fcompiler',
              'numpy.f2py.diagnose.numpy': 'numpy',
              'numpy.f2py.diagnose.numpy.distutils': 'numpy.distutils',
              'numpy.f2py.diagnose.numpy_distutils': 'numpy_distutils',
              'numpy.f2py.diagnose.os': 'os',
              'numpy.f2py.diagnose.sys': 'sys',
              'numpy.f2py.diagnose.tempfile': 'tempfile',
              'numpy.f2py.exec_command': 'numpy.distutils.exec_command.exec_command',
              'numpy.f2py.f2py2e': 'numpy.f2py.f2py2e',
              'numpy.f2py.f2py2e.Extension': 'numpy.distutils.core.Extension',
              'numpy.f2py.f2py2e.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.f2py2e.auxfuncs': 'numpy.f2py.auxfuncs',
              'numpy.f2py.f2py2e.cb_rules': 'numpy.f2py.cb_rules',
              'numpy.f2py.f2py2e.cfuncs': 'numpy.f2py.cfuncs',
              'numpy.f2py.f2py2e.crackfortran': 'numpy.f2py.crackfortran',
              'numpy.f2py.f2py2e.dict_append': 'numpy.distutils.misc_util.dict_append',
              'numpy.f2py.f2py2e.f90mod_rules': 'numpy.f2py.f90mod_rules',
              'numpy.f2py.f2py2e.fcompiler': 'numpy.distutils.fcompiler',
              'numpy.f2py.f2py2e.get_f2py_modulename': 'numpy.distutils.command.build_src.get_f2py_modulename',
              'numpy.f2py.f2py2e.get_info': 'numpy.distutils.system_info.get_info',
              'numpy.f2py.f2py2e.imp': 'imp',
              'numpy.f2py.f2py2e.numpy_version': 'numpy.__version__',
              'numpy.f2py.f2py2e.os': 'os',
              'numpy.f2py.f2py2e.pprint': 'pprint',
              'numpy.f2py.f2py2e.re': 're',
              'numpy.f2py.f2py2e.rules': 'numpy.f2py.rules',
              'numpy.f2py.f2py2e.setup': 'numpy.distutils.core.setup',
              'numpy.f2py.f2py2e.show_all': 'numpy.distutils.system_info.show_all',
              'numpy.f2py.f2py2e.shutil': 'shutil',
              'numpy.f2py.f2py2e.sys': 'sys',
              'numpy.f2py.f2py2e.tempfile': 'tempfile',
              'numpy.f2py.f2py2e.types': 'types',
              'numpy.f2py.f2py_testing': 'numpy.f2py.f2py_testing',
              'numpy.f2py.f2py_testing.jiffies': 'numpy.testing.utils.jiffies',
              'numpy.f2py.f2py_testing.memusage': 'numpy.testing.utils.memusage',
              'numpy.f2py.f2py_testing.re': 're',
              'numpy.f2py.f2py_testing.sys': 'sys',
              'numpy.f2py.f90mod_rules.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.f90mod_rules.capi_maps': 'numpy.f2py.capi_maps',
              'numpy.f2py.f90mod_rules.func2subr': 'numpy.f2py.func2subr',
              'numpy.f2py.f90mod_rules.np': 'numpy',
              'numpy.f2py.f90mod_rules.pprint': 'pprint',
              'numpy.f2py.f90mod_rules.rules': 'numpy.f2py.rules',
              'numpy.f2py.f90mod_rules.sys': 'sys',
              'numpy.f2py.f90mod_rules.undo_rmbadname': 'numpy.f2py.crackfortran.undo_rmbadname',
              'numpy.f2py.f90mod_rules.undo_rmbadname1': 'numpy.f2py.crackfortran.undo_rmbadname1',
              'numpy.f2py.func2subr.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.func2subr.copy': 'copy',
              'numpy.f2py.func2subr.pprint': 'pprint',
              'numpy.f2py.func2subr.sys': 'sys',
              'numpy.f2py.os': 'os',
              'numpy.f2py.rules.*': 'numpy.f2py.capi_maps.*',
              'numpy.f2py.rules.__version__': 'numpy.f2py.__version__',
              'numpy.f2py.rules.capi_maps': 'numpy.f2py.capi_maps',
              'numpy.f2py.rules.cfuncs': 'numpy.f2py.cfuncs',
              'numpy.f2py.rules.common_rules': 'numpy.f2py.common_rules',
              'numpy.f2py.rules.copy': 'copy',
              'numpy.f2py.rules.f90mod_rules': 'numpy.f2py.f90mod_rules',
              'numpy.f2py.rules.func2subr': 'numpy.f2py.func2subr',
              'numpy.f2py.rules.pprint': 'pprint',
              'numpy.f2py.rules.sys': 'sys',
              'numpy.f2py.rules.time': 'time',
              'numpy.f2py.rules.types': 'types',
              'numpy.f2py.rules.use_rules': 'numpy.f2py.use_rules',
              'numpy.f2py.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.f2py.setup.log': 'numpy.distutils.log',
              'numpy.f2py.setup.newer': 'distutils.dep_util.newer',
              'numpy.f2py.setup.os': 'os',
              'numpy.f2py.setup.setup': 'numpy.distutils.core.setup',
              'numpy.f2py.setup.sys': 'sys',
              'numpy.f2py.setup.version': 'numpy.f2py.__version__.version',
              'numpy.f2py.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.f2py.setupscons.log': 'numpy.distutils.log',
              'numpy.f2py.setupscons.newer': 'distutils.dep_util.newer',
              'numpy.f2py.setupscons.os': 'os',
              'numpy.f2py.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.f2py.setupscons.sys': 'sys',
              'numpy.f2py.setupscons.version': 'numpy.f2py.__version__.version',
              'numpy.f2py.sys': 'sys',
              'numpy.f2py.tempfile': 'tempfile',
              'numpy.f2py.use_rules.*': 'numpy.f2py.auxfuncs.*',
              'numpy.f2py.use_rules.pprint': 'pprint',
              'numpy.f2py.use_rules.sys': 'sys',
              'numpy.fft': 'numpy.fft',
              'numpy.fft.*': 'numpy.fft.helper.*',
              'numpy.fft.Tester': 'numpy.testing.Tester',
              'numpy.fft.__doc__': 'numpy.fft.info.__doc__',
              'numpy.fft.fftpack.asarray': 'numpy.core.asarray',
              'numpy.fft.fftpack.conjugate': 'numpy.core.conjugate',
              'numpy.fft.fftpack.fftpack': 'fftpack_lite',
              'numpy.fft.fftpack.shape': 'numpy.core.shape',
              'numpy.fft.fftpack.swapaxes': 'numpy.core.swapaxes',
              'numpy.fft.fftpack.take': 'numpy.core.take',
              'numpy.fft.fftpack.zeros': 'numpy.core.zeros',
              'numpy.fft.helper.arange': 'numpy.core.arange',
              'numpy.fft.helper.asarray': 'numpy.core.asarray',
              'numpy.fft.helper.concatenate': 'numpy.core.concatenate',
              'numpy.fft.helper.empty': 'numpy.core.empty',
              'numpy.fft.helper.integer': 'numpy.core.integer',
              'numpy.fft.helper.nt': 'numpy.core.numerictypes',
              'numpy.fft.helper.take': 'numpy.core.take',
              'numpy.fft.helper.types': 'types',
              'numpy.fft.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.fft.setup.setup': 'numpy.distutils.core.setup',
              'numpy.fft.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.fft.setupscons.get_numpy_include_dirs': 'numpy.distutils.misc_util.get_numpy_include_dirs',
              'numpy.fft.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.float': '__builtin__.float',
              'numpy.int': '__builtin__.int',
              'numpy.lib': 'numpy.lib',
              'numpy.lib.*': 'numpy.lib.arrayterator.*',
              'numpy.lib.Tester': 'numpy.testing.Tester',
              'numpy.lib.__doc__': 'numpy.lib.info.__doc__',
              'numpy.lib.__version__': 'numpy.version.version',
              'numpy.lib._datasource.URLError': 'urllib2.URLError',
              'numpy.lib._datasource.bz2': 'bz2',
              'numpy.lib._datasource.copyfile': 'shutil.copyfile',
              'numpy.lib._datasource.copyfileobj': 'shutil.copyfileobj',
              'numpy.lib._datasource.gzip': 'gzip',
              'numpy.lib._datasource.os': 'os',
              'numpy.lib._datasource.rmtree': 'shutil.rmtree',
              'numpy.lib._datasource.tempfile': 'tempfile',
              'numpy.lib._datasource.urlopen': 'urllib2.urlopen',
              'numpy.lib._datasource.urlparse': 'urlparse.urlparse',
              'numpy.lib._iotools.asbytes': 'numpy.compat.asbytes',
              'numpy.lib._iotools.asbytes_nested': 'numpy.compat.asbytes_nested',
              'numpy.lib._iotools.bool': '__builtin__.bool',
              'numpy.lib._iotools.bytes': 'numpy.compat.bytes',
              'numpy.lib._iotools.bz2': 'bz2',
              'numpy.lib._iotools.complex': '__builtin__.complex',
              'numpy.lib._iotools.float': '__builtin__.float',
              'numpy.lib._iotools.gzip': 'gzip',
              'numpy.lib._iotools.int': '__builtin__.int',
              'numpy.lib._iotools.long': '__builtin__.long',
              'numpy.lib._iotools.np': 'numpy',
              'numpy.lib._iotools.nx': 'numpy.core.numeric',
              'numpy.lib._iotools.object': '__builtin__.object',
              'numpy.lib._iotools.str': '__builtin__.str',
              'numpy.lib._iotools.sys': 'sys',
              'numpy.lib._iotools.unicode': '__builtin__.unicode',
              'numpy.lib.arraysetops.deprecate': 'numpy.lib.utils.deprecate',
              'numpy.lib.arraysetops.np': 'numpy',
              'numpy.lib.arrayterator.division': '__future__.division',
              'numpy.lib.arrayterator.mul': 'operator.mul',
              'numpy.lib.arrayterator.reduce': 'functools.reduce',
              'numpy.lib.arrayterator.sys': 'sys',
              'numpy.lib.emath': 'numpy.lib.scimath',
              'numpy.lib.financial.np': 'numpy',
              'numpy.lib.format.asbytes': 'numpy.compat.asbytes',
              'numpy.lib.format.cPickle': 'cPickle',
              'numpy.lib.format.isfileobj': 'numpy.compat.isfileobj',
              'numpy.lib.format.numpy': 'numpy',
              'numpy.lib.format.safe_eval': 'numpy.lib.utils.safe_eval',
              'numpy.lib.format.struct': 'struct',
              'numpy.lib.format.sys': 'sys',
              'numpy.lib.function_base.ScalarType': 'numpy.core.numeric.ScalarType',
              'numpy.lib.function_base._insert': '_compiled_base._insert',
              'numpy.lib.function_base._nx': 'numpy.core.numeric',
              'numpy.lib.function_base.add': 'numpy.core.umath.add',
              'numpy.lib.function_base.add_docstring': '_compiled_base.add_docstring',
              'numpy.lib.function_base.arange': 'numpy.core.numeric.arange',
              'numpy.lib.function_base.arctan2': 'numpy.core.umath.arctan2',
              'numpy.lib.function_base.around': 'numpy.core.numeric.around',
              'numpy.lib.function_base.array': 'numpy.core.numeric.array',
              'numpy.lib.function_base.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.lib.function_base.asarray': 'numpy.core.numeric.asarray',
              'numpy.lib.function_base.atleast_1d': 'numpy.core.atleast_1d',
              'numpy.lib.function_base.atleast_2d': 'numpy.core.atleast_2d',
              'numpy.lib.function_base.bincount': '_compiled_base.bincount',
              'numpy.lib.function_base.choose': 'numpy.core.fromnumeric.choose',
              'numpy.lib.function_base.compiled_interp': '_compiled_base.interp',
              'numpy.lib.function_base.concatenate': 'numpy.core.numeric.concatenate',
              'numpy.lib.function_base.cos': 'numpy.core.umath.cos',
              'numpy.lib.function_base.deprecate': 'numpy.lib.utils.deprecate',
              'numpy.lib.function_base.diag': 'numpy.lib.twodim_base.diag',
              'numpy.lib.function_base.digitize': '_compiled_base.digitize',
              'numpy.lib.function_base.dot': 'numpy.core.numeric.dot',
              'numpy.lib.function_base.empty': 'numpy.core.numeric.empty',
              'numpy.lib.function_base.empty_like': 'numpy.core.numeric.empty_like',
              'numpy.lib.function_base.exp': 'numpy.core.umath.exp',
              'numpy.lib.function_base.frompyfunc': 'numpy.core.umath.frompyfunc',
              'numpy.lib.function_base.i0': 'numpy.dual.i0',
              'numpy.lib.function_base.inspect': 'inspect',
              'numpy.lib.function_base.integer': 'numpy.core.numeric.integer',
              'numpy.lib.function_base.intp': 'numpy.core.numeric.intp',
              'numpy.lib.function_base.isnan': 'numpy.core.umath.isnan',
              'numpy.lib.function_base.isscalar': 'numpy.core.numeric.isscalar',
              'numpy.lib.function_base.less_equal': 'numpy.core.umath.less_equal',
              'numpy.lib.function_base.linspace': 'numpy.core.linspace',
              'numpy.lib.function_base.log10': 'numpy.core.umath.log10',
              'numpy.lib.function_base.mean': 'numpy.core.fromnumeric.mean',
              'numpy.lib.function_base.mod': 'numpy.core.umath.mod',
              'numpy.lib.function_base.multiply': 'numpy.core.umath.multiply',
              'numpy.lib.function_base.ndarray': 'numpy.core.numeric.ndarray',
              'numpy.lib.function_base.newaxis': 'numpy.core.numeric.newaxis',
              'numpy.lib.function_base.nonzero': 'numpy.core.fromnumeric.nonzero',
              'numpy.lib.function_base.np': 'numpy',
              'numpy.lib.function_base.number': 'numpy.core.numerictypes.number',
              'numpy.lib.function_base.ones': 'numpy.core.numeric.ones',
              'numpy.lib.function_base.pi': 'numpy.core.umath.pi',
              'numpy.lib.function_base.ravel': 'numpy.core.fromnumeric.ravel',
              'numpy.lib.function_base.re': 're',
              'numpy.lib.function_base.set': 'sets.Set',
              'numpy.lib.function_base.setdiff1d': 'numpy.lib.arraysetops.setdiff1d',
              'numpy.lib.function_base.sin': 'numpy.core.umath.sin',
              'numpy.lib.function_base.sort': 'numpy.core.fromnumeric.sort',
              'numpy.lib.function_base.sqrt': 'numpy.core.umath.sqrt',
              'numpy.lib.function_base.sys': 'sys',
              'numpy.lib.function_base.typecodes': 'numpy.core.numerictypes.typecodes',
              'numpy.lib.function_base.types': 'types',
              'numpy.lib.function_base.warnings': 'warnings',
              'numpy.lib.function_base.where': 'numpy.core.numeric.where',
              'numpy.lib.function_base.zeros': 'numpy.core.numeric.zeros',
              'numpy.lib.index_tricks.ScalarType': 'numpy.core.numeric.ScalarType',
              'numpy.lib.index_tricks._nx': 'numpy.core.numeric',
              'numpy.lib.index_tricks.alltrue': 'numpy.core.numeric.alltrue',
              'numpy.lib.index_tricks.arange': 'numpy.core.numeric.arange',
              'numpy.lib.index_tricks.array': 'numpy.core.numeric.array',
              'numpy.lib.index_tricks.asarray': 'numpy.core.numeric.asarray',
              'numpy.lib.index_tricks.cumprod': 'numpy.core.numeric.cumprod',
              'numpy.lib.index_tricks.diff': 'numpy.lib.function_base.diff',
              'numpy.lib.index_tricks.find_common_type': 'numpy.core.numerictypes.find_common_type',
              'numpy.lib.index_tricks.function_base': 'numpy.lib.function_base',
              'numpy.lib.index_tricks.math': 'math',
              'numpy.lib.index_tricks.matrix': 'numpy.matrixlib',
              'numpy.lib.index_tricks.ravel_multi_index': 'numpy.lib._compiled_base.ravel_multi_index',
              'numpy.lib.index_tricks.sys': 'sys',
              'numpy.lib.index_tricks.unravel_index': 'numpy.lib._compiled_base.unravel_index',
              'numpy.lib.math': 'math',
              'numpy.lib.npyio.BytesIO': 'cStringIO.StringIO',
              'numpy.lib.npyio.ConversionWarning': 'numpy.lib._iotools.ConversionWarning',
              'numpy.lib.npyio.ConverterError': 'numpy.lib._iotools.ConverterError',
              'numpy.lib.npyio.ConverterLockError': 'numpy.lib._iotools.ConverterLockError',
              'numpy.lib.npyio.DataSource': 'numpy.lib._datasource.DataSource',
              'numpy.lib.npyio.LineSplitter': 'numpy.lib._iotools.LineSplitter',
              'numpy.lib.npyio.MaskedArray': 'numpy.ma.MaskedArray',
              'numpy.lib.npyio.MaskedRecords': 'numpy.ma.mrecords.MaskedRecords',
              'numpy.lib.npyio.NameValidator': 'numpy.lib._iotools.NameValidator',
              'numpy.lib.npyio.StringConverter': 'numpy.lib._iotools.StringConverter',
              'numpy.lib.npyio._bytes_to_name': 'numpy.lib._iotools._bytes_to_name',
              'numpy.lib.npyio._cload': 'cPickle.load',
              'numpy.lib.npyio._is_string_like': 'numpy.lib._iotools._is_string_like',
              'numpy.lib.npyio.asbytes': 'numpy.compat.asbytes',
              'numpy.lib.npyio.asbytes_nested': 'numpy.compat.asbytes_nested',
              'numpy.lib.npyio.asstr': 'numpy.compat.asstr',
              'numpy.lib.npyio.bytes': 'numpy.compat.bytes',
              'numpy.lib.npyio.bz2': 'bz2',
              'numpy.lib.npyio.easy_dtype': 'numpy.lib._iotools.easy_dtype',
              'numpy.lib.npyio.flatten_dtype': 'numpy.lib._iotools.flatten_dtype',
              'numpy.lib.npyio.format': 'numpy.lib.format',
              'numpy.lib.npyio.gzip': 'gzip',
              'numpy.lib.npyio.has_nested_fields': 'numpy.lib._iotools.has_nested_fields',
              'numpy.lib.npyio.itemgetter': 'operator.itemgetter',
              'numpy.lib.npyio.itertools': 'itertools',
              'numpy.lib.npyio.loads': 'cPickle.loads',
              'numpy.lib.npyio.make_mask_descr': 'numpy.ma.make_mask_descr',
              'numpy.lib.npyio.np': 'numpy',
              'numpy.lib.npyio.os': 'os',
              'numpy.lib.npyio.packbits': '_compiled_base.packbits',
              'numpy.lib.npyio.re': 're',
              'numpy.lib.npyio.sys': 'sys',
              'numpy.lib.npyio.tempfile': 'tempfile',
              'numpy.lib.npyio.unpackbits': '_compiled_base.unpackbits',
              'numpy.lib.npyio.warnings': 'warnings',
              'numpy.lib.npyio.weakref': 'weakref',
              'numpy.lib.npyio.zipfile': 'zipfile',
              'numpy.lib.polynomial.NX': 'numpy.core.numeric',
              'numpy.lib.polynomial.abs': 'numpy.core.abs',
              'numpy.lib.polynomial.atleast_1d': 'numpy.core.atleast_1d',
              'numpy.lib.polynomial.diag': 'numpy.lib.twodim_base.diag',
              'numpy.lib.polynomial.eigvals': 'numpy.linalg.eigvals',
              'numpy.lib.polynomial.finfo': 'numpy.core.finfo',
              'numpy.lib.polynomial.hstack': 'numpy.core.hstack',
              'numpy.lib.polynomial.imag': 'numpy.lib.type_check.imag',
              'numpy.lib.polynomial.iscomplex': 'numpy.lib.type_check.iscomplex',
              'numpy.lib.polynomial.isscalar': 'numpy.core.isscalar',
              'numpy.lib.polynomial.lstsq': 'numpy.linalg.lstsq',
              'numpy.lib.polynomial.re': 're',
              'numpy.lib.polynomial.real': 'numpy.lib.type_check.real',
              'numpy.lib.polynomial.sort_complex': 'numpy.lib.function_base.sort_complex',
              'numpy.lib.polynomial.trim_zeros': 'numpy.lib.function_base.trim_zeros',
              'numpy.lib.polynomial.vander': 'numpy.lib.twodim_base.vander',
              'numpy.lib.polynomial.warnings': 'warnings',
              'numpy.lib.recfunctions.MaskedArray': 'numpy.ma.MaskedArray',
              'numpy.lib.recfunctions.MaskedRecords': 'numpy.ma.mrecords.MaskedRecords',
              'numpy.lib.recfunctions._is_string_like': 'numpy.lib._iotools._is_string_like',
              'numpy.lib.recfunctions.itertools': 'itertools',
              'numpy.lib.recfunctions.ma': 'numpy.ma',
              'numpy.lib.recfunctions.ndarray': 'numpy.ndarray',
              'numpy.lib.recfunctions.np': 'numpy',
              'numpy.lib.recfunctions.recarray': 'numpy.recarray',
              'numpy.lib.recfunctions.sys': 'sys',
              'numpy.lib.scimath.any': 'numpy.core.numeric.any',
              'numpy.lib.scimath.asarray': 'numpy.core.numeric.asarray',
              'numpy.lib.scimath.isreal': 'numpy.lib.type_check.isreal',
              'numpy.lib.scimath.nt': 'numpy.core.numerictypes',
              'numpy.lib.scimath.nx': 'numpy.core.numeric',
              'numpy.lib.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.lib.setup.join': 'os.path.join',
              'numpy.lib.setup.setup': 'numpy.distutils.core.setup',
              'numpy.lib.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.lib.setupscons.join': 'os.path.join',
              'numpy.lib.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.lib.shape_base._nx': 'numpy.core.numeric',
              'numpy.lib.shape_base.array': 'numpy.core.numeric.array',
              'numpy.lib.shape_base.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.lib.shape_base.asarray': 'numpy.core.numeric.asarray',
              'numpy.lib.shape_base.atleast_3d': 'numpy.core.atleast_3d',
              'numpy.lib.shape_base.concatenate': 'numpy.core.numeric.concatenate',
              'numpy.lib.shape_base.hstack': 'numpy.core.hstack',
              'numpy.lib.shape_base.isscalar': 'numpy.core.numeric.isscalar',
              'numpy.lib.shape_base.newaxis': 'numpy.core.numeric.newaxis',
              'numpy.lib.shape_base.outer': 'numpy.core.numeric.outer',
              'numpy.lib.shape_base.product': 'numpy.core.fromnumeric.product',
              'numpy.lib.shape_base.reshape': 'numpy.core.fromnumeric.reshape',
              'numpy.lib.shape_base.vstack': 'numpy.core.vstack',
              'numpy.lib.shape_base.zeros': 'numpy.core.numeric.zeros',
              'numpy.lib.stride_tricks.np': 'numpy',
              'numpy.lib.twodim_base.alltrue': 'numpy.core.numeric.alltrue',
              'numpy.lib.twodim_base.arange': 'numpy.core.numeric.arange',
              'numpy.lib.twodim_base.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.lib.twodim_base.asarray': 'numpy.core.numeric.asarray',
              'numpy.lib.twodim_base.empty': 'numpy.core.numeric.empty',
              'numpy.lib.twodim_base.equal': 'numpy.core.numeric.equal',
              'numpy.lib.twodim_base.greater_equal': 'numpy.core.numeric.greater_equal',
              'numpy.lib.twodim_base.histogramdd': 'numpy.histogramdd',
              'numpy.lib.twodim_base.multiply': 'numpy.core.numeric.multiply',
              'numpy.lib.twodim_base.ones': 'numpy.core.numeric.ones',
              'numpy.lib.twodim_base.subtract': 'numpy.core.numeric.subtract',
              'numpy.lib.twodim_base.where': 'numpy.core.numeric.where',
              'numpy.lib.twodim_base.zeros': 'numpy.core.numeric.zeros',
              'numpy.lib.type_check.DATETIMEUNITS': 'numpy.core.multiarray.DATETIMEUNITS',
              'numpy.lib.type_check.METADATA_DTSTR': 'numpy.core.multiarray.METADATA_DTSTR',
              'numpy.lib.type_check._nx': 'numpy.core.numeric',
              'numpy.lib.type_check.array': 'numpy.core.numeric.array',
              'numpy.lib.type_check.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.lib.type_check.asarray': 'numpy.core.numeric.asarray',
              'numpy.lib.type_check.ctypes': 'ctypes',
              'numpy.lib.type_check.getlimits': 'numpy.core.getlimits',
              'numpy.lib.type_check.isnan': 'numpy.core.numeric.isnan',
              'numpy.lib.type_check.isneginf': 'numpy.lib.ufunclike.isneginf',
              'numpy.lib.type_check.isposinf': 'numpy.lib.ufunclike.isposinf',
              'numpy.lib.type_check.obj2sctype': 'numpy.core.numeric.obj2sctype',
              'numpy.lib.type_check.sys': 'sys',
              'numpy.lib.type_check.zeros': 'numpy.core.numeric.zeros',
              'numpy.lib.ufunclike.nx': 'numpy.core.numeric',
              'numpy.lib.user_array.absolute': 'numpy.core.absolute',
              'numpy.lib.user_array.add': 'numpy.core.add',
              'numpy.lib.user_array.arange': 'numpy.core.arange',
              'numpy.lib.user_array.array': 'numpy.core.array',
              'numpy.lib.user_array.asarray': 'numpy.core.asarray',
              'numpy.lib.user_array.bitwise_and': 'numpy.core.bitwise_and',
              'numpy.lib.user_array.bitwise_or': 'numpy.core.bitwise_or',
              'numpy.lib.user_array.bitwise_xor': 'numpy.core.bitwise_xor',
              'numpy.lib.user_array.divide': 'numpy.core.divide',
              'numpy.lib.user_array.equal': 'numpy.core.equal',
              'numpy.lib.user_array.greater': 'numpy.core.greater',
              'numpy.lib.user_array.greater_equal': 'numpy.core.greater_equal',
              'numpy.lib.user_array.invert': 'numpy.core.invert',
              'numpy.lib.user_array.left_shift': 'numpy.core.left_shift',
              'numpy.lib.user_array.less': 'numpy.core.less',
              'numpy.lib.user_array.less_equal': 'numpy.core.less_equal',
              'numpy.lib.user_array.multiply': 'numpy.core.multiply',
              'numpy.lib.user_array.not_equal': 'numpy.core.not_equal',
              'numpy.lib.user_array.power': 'numpy.core.power',
              'numpy.lib.user_array.remainder': 'numpy.core.remainder',
              'numpy.lib.user_array.reshape': 'numpy.core.reshape',
              'numpy.lib.user_array.right_shift': 'numpy.core.right_shift',
              'numpy.lib.user_array.shape': 'numpy.core.shape',
              'numpy.lib.user_array.sin': 'numpy.core.sin',
              'numpy.lib.user_array.sqrt': 'numpy.core.sqrt',
              'numpy.lib.user_array.subtract': 'numpy.core.subtract',
              'numpy.lib.user_array.transpose': 'numpy.core.transpose',
              'numpy.lib.utils.StringIO': 'cStringIO.StringIO',
              'numpy.lib.utils.ast': 'ast',
              'numpy.lib.utils.compiler': 'ast',
              'numpy.lib.utils.core': 'numpy.core',
              'numpy.lib.utils.get_numarray_include_dirs': 'numpy.numarray.get_numarray_include_dirs',
              'numpy.lib.utils.inspect': 'inspect',
              'numpy.lib.utils.issubclass_': 'numpy.core.numerictypes.issubclass_',
              'numpy.lib.utils.issubdtype': 'numpy.core.numerictypes.issubdtype',
              'numpy.lib.utils.issubsctype': 'numpy.core.numerictypes.issubsctype',
              'numpy.lib.utils.ndarray': 'numpy.core.ndarray',
              'numpy.lib.utils.new': 'new',
              'numpy.lib.utils.nn': 'numpy.numarray',
              'numpy.lib.utils.numpy': 'numpy',
              'numpy.lib.utils.os': 'os',
              'numpy.lib.utils.product': 'numpy.core.product',
              'numpy.lib.utils.pydoc': 'pydoc',
              'numpy.lib.utils.re': 're',
              'numpy.lib.utils.sys': 'sys',
              'numpy.lib.utils.types': 'types',
              'numpy.lib.utils.ufunc': 'numpy.core.ufunc',
              'numpy.lib.utils.warnings': 'warnings',
              'numpy.linalg': 'numpy.linalg',
              'numpy.linalg.*': 'numpy.linalg.linalg.*',
              'numpy.linalg.Tester': 'numpy.testing.Tester',
              'numpy.linalg.__doc__': 'numpy.linalg.info.__doc__',
              'numpy.linalg.linalg.Inf': 'numpy.core.Inf',
              'numpy.linalg.linalg.absolute': 'numpy.core.absolute',
              'numpy.linalg.linalg.add': 'numpy.core.add',
              'numpy.linalg.linalg.all': 'numpy.core.all',
              'numpy.linalg.linalg.arange': 'numpy.core.arange',
              'numpy.linalg.linalg.array': 'numpy.core.array',
              'numpy.linalg.linalg.asarray': 'numpy.core.asarray',
              'numpy.linalg.linalg.asbytes': 'numpy.compat.asbytes',
              'numpy.linalg.linalg.cdouble': 'numpy.core.cdouble',
              'numpy.linalg.linalg.complexfloating': 'numpy.core.complexfloating',
              'numpy.linalg.linalg.csingle': 'numpy.core.csingle',
              'numpy.linalg.linalg.diagonal': 'numpy.core.diagonal',
              'numpy.linalg.linalg.dot': 'numpy.core.dot',
              'numpy.linalg.linalg.double': 'numpy.core.double',
              'numpy.linalg.linalg.empty': 'numpy.core.empty',
              'numpy.linalg.linalg.exp': 'numpy.core.exp',
              'numpy.linalg.linalg.fastCopyAndTranspose': 'numpy.core.fastCopyAndTranspose',
              'numpy.linalg.linalg.finfo': 'numpy.core.finfo',
              'numpy.linalg.linalg.flatnonzero': 'numpy.core.flatnonzero',
              'numpy.linalg.linalg.identity': 'numpy.core.identity',
              'numpy.linalg.linalg.inexact': 'numpy.core.inexact',
              'numpy.linalg.linalg.intc': 'numpy.core.intc',
              'numpy.linalg.linalg.isfinite': 'numpy.core.isfinite',
              'numpy.linalg.linalg.lapack_lite': 'numpy.linalg.lapack_lite',
              'numpy.linalg.linalg.log': 'numpy.core.log',
              'numpy.linalg.linalg.math': 'math',
              'numpy.linalg.linalg.matrix_power': 'numpy.matrixlib.defmatrix.matrix_power',
              'numpy.linalg.linalg.maximum': 'numpy.core.maximum',
              'numpy.linalg.linalg.multiply': 'numpy.core.multiply',
              'numpy.linalg.linalg.newaxis': 'numpy.core.newaxis',
              'numpy.linalg.linalg.ravel': 'numpy.core.ravel',
              'numpy.linalg.linalg.single': 'numpy.core.single',
              'numpy.linalg.linalg.size': 'numpy.core.size',
              'numpy.linalg.linalg.sqrt': 'numpy.core.sqrt',
              'numpy.linalg.linalg.sum': 'numpy.core.sum',
              'numpy.linalg.linalg.transpose': 'numpy.core.transpose',
              'numpy.linalg.linalg.triu': 'numpy.lib.triu',
              'numpy.linalg.linalg.zeros': 'numpy.core.zeros',
              'numpy.linalg.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.linalg.setup.get_info': 'numpy.distutils.system_info.get_info',
              'numpy.linalg.setup.setup': 'numpy.distutils.core.setup',
              'numpy.linalg.setup.sys': 'sys',
              'numpy.linalg.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.linalg.setupscons.get_info': 'numpy.distutils.system_info.get_info',
              'numpy.linalg.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.long': '__builtin__.long',
              'numpy.ma': 'numpy.ma',
              'numpy.ma.*': 'numpy.ma.extras.*',
              'numpy.ma.Tester': 'numpy.testing.Tester',
              'numpy.ma.bench.numpy': 'numpy',
              'numpy.ma.bench.timeit': 'timeit',
              'numpy.ma.core': 'numpy.ma.core',
              'numpy.ma.core.amax': 'numpy.amax',
              'numpy.ma.core.amin': 'numpy.amin',
              'numpy.ma.core.bool_': 'numpy.bool_',
              'numpy.ma.core.cPickle': 'cPickle',
              'numpy.ma.core.deepcopy': 'copy.deepcopy',
              'numpy.ma.core.formatargspec': 'numpy.compat.formatargspec',
              'numpy.ma.core.getargspec': 'numpy.compat.getargspec',
              'numpy.ma.core.iscomplexobj': 'numpy.iscomplexobj',
              'numpy.ma.core.n_expand_dims': 'numpy.expand_dims',
              'numpy.ma.core.narray': 'numpy.array',
              'numpy.ma.core.ndarray': 'numpy.ndarray',
              'numpy.ma.core.np': 'numpy',
              'numpy.ma.core.ntypes': 'numpy.core.numerictypes',
              'numpy.ma.core.reduce': 'functools.reduce',
              'numpy.ma.core.sys': 'sys',
              'numpy.ma.core.umath': 'numpy.core.umath',
              'numpy.ma.core.warnings': 'warnings',
              'numpy.ma.extras': 'numpy.ma.extras',
              'numpy.ma.extras.AxisConcatenator': 'numpy.lib.index_tricks.AxisConcatenator',
              'numpy.ma.extras.MAError': 'numpy.ma.core.MAError',
              'numpy.ma.extras.MaskedArray': 'numpy.ma.core.MaskedArray',
              'numpy.ma.extras.add': 'numpy.ma.core.add',
              'numpy.ma.extras.array': 'numpy.ma.core.array',
              'numpy.ma.extras.asarray': 'numpy.ma.core.asarray',
              'numpy.ma.extras.concatenate': 'numpy.ma.core.concatenate',
              'numpy.ma.extras.count': 'numpy.ma.core.count',
              'numpy.ma.extras.filled': 'numpy.ma.core.filled',
              'numpy.ma.extras.getmask': 'numpy.ma.core.getmask',
              'numpy.ma.extras.getmaskarray': 'numpy.ma.core.getmaskarray',
              'numpy.ma.extras.itertools': 'itertools',
              'numpy.ma.extras.lstsq': 'numpy.linalg.lstsq',
              'numpy.ma.extras.ma': 'numpy.ma.core',
              'numpy.ma.extras.make_mask_descr': 'numpy.ma.core.make_mask_descr',
              'numpy.ma.extras.mask_or': 'numpy.ma.core.mask_or',
              'numpy.ma.extras.masked': 'numpy.ma.core.masked',
              'numpy.ma.extras.masked_array': 'numpy.ma.core.masked_array',
              'numpy.ma.extras.ndarray': 'numpy.ndarray',
              'numpy.ma.extras.nomask': 'numpy.ma.core.nomask',
              'numpy.ma.extras.np': 'numpy',
              'numpy.ma.extras.nxarray': 'numpy.array',
              'numpy.ma.extras.ones': 'numpy.ma.core.ones',
              'numpy.ma.extras.sort': 'numpy.ma.core.sort',
              'numpy.ma.extras.umath': 'numpy.core.umath',
              'numpy.ma.extras.warnings': 'warnings',
              'numpy.ma.extras.zeros': 'numpy.ma.core.zeros',
              'numpy.ma.mrecords.MAError': 'numpy.ma.MAError',
              'numpy.ma.mrecords.MaskedArray': 'numpy.ma.MaskedArray',
              'numpy.ma.mrecords.bool_': 'numpy.bool_',
              'numpy.ma.mrecords.dtype': 'numpy.dtype',
              'numpy.ma.mrecords.filled': 'numpy.ma.filled',
              'numpy.ma.mrecords.getdata': 'numpy.ma.getdata',
              'numpy.ma.mrecords.getmaskarray': 'numpy.ma.getmaskarray',
              'numpy.ma.mrecords.ma': 'numpy.ma',
              'numpy.ma.mrecords.masked': 'numpy.ma.masked',
              'numpy.ma.mrecords.masked_array': 'numpy.ma.masked_array',
              'numpy.ma.mrecords.narray': 'numpy.array',
              'numpy.ma.mrecords.ndarray': 'numpy.ndarray',
              'numpy.ma.mrecords.nomask': 'numpy.ma.nomask',
              'numpy.ma.mrecords.np': 'numpy',
              'numpy.ma.mrecords.ntypes': 'numpy.core.numerictypes',
              'numpy.ma.mrecords.recarray': 'numpy.recarray',
              'numpy.ma.mrecords.recfromarrays': 'numpy.core.records.fromarrays',
              'numpy.ma.mrecords.recfromrecords': 'numpy.core.records.fromrecords',
              'numpy.ma.mrecords.sys': 'sys',
              'numpy.ma.mrecords.warnings': 'warnings',
              'numpy.ma.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.ma.setup.os': 'os',
              'numpy.ma.setup.setup': 'numpy.distutils.core.setup',
              'numpy.ma.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.ma.setupscons.os': 'os',
              'numpy.ma.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.ma.testutils.*': 'numpy.testing.*',
              'numpy.ma.testutils.equal': 'numpy.ma.core.equal',
              'numpy.ma.testutils.filled': 'numpy.ma.core.filled',
              'numpy.ma.testutils.float_': 'numpy.float_',
              'numpy.ma.testutils.getmask': 'numpy.ma.core.getmask',
              'numpy.ma.testutils.less': 'numpy.ma.core.less',
              'numpy.ma.testutils.mask_or': 'numpy.ma.core.mask_or',
              'numpy.ma.testutils.masked': 'numpy.ma.core.masked',
              'numpy.ma.testutils.masked_array': 'numpy.ma.core.masked_array',
              'numpy.ma.testutils.ndarray': 'numpy.ndarray',
              'numpy.ma.testutils.nomask': 'numpy.ma.core.nomask',
              'numpy.ma.testutils.np': 'numpy',
              'numpy.ma.testutils.operator': 'operator',
              'numpy.ma.testutils.umath': 'numpy.core.umath',
              'numpy.ma.testutils.utils': 'numpy.testing.utils',
              'numpy.ma.timer_comparison.build_err_msg': 'np.testing.utils.build_err_msg',
              'numpy.ma.timer_comparison.float_': 'numpy.float_',
              'numpy.ma.timer_comparison.fromnumeric': 'np.core.fromnumeric',
              'numpy.ma.timer_comparison.np': 'numpy',
              'numpy.ma.timer_comparison.reduce': 'functools.reduce',
              'numpy.ma.timer_comparison.sys': 'sys',
              'numpy.ma.timer_comparison.timeit': 'timeit',
              'numpy.ma.version.core': 'numpy.ma.core',
              'numpy.ma.version.extras': 'numpy.ma.extras',
              'numpy.matlib.*': 'numpy.*',
              'numpy.matlib.asmatrix': 'numpy.matrixlib.defmatrix.asmatrix',
              'numpy.matlib.matrix': 'numpy.matrixlib.defmatrix.matrix',
              'numpy.matlib.np': 'numpy',
              'numpy.matrixlib.*': 'numpy.matrixlib.defmatrix.*',
              'numpy.matrixlib.Tester': 'numpy.testing.Tester',
              'numpy.matrixlib.defmatrix.N': 'numpy.core.numeric',
              'numpy.matrixlib.defmatrix.asanyarray': 'numpy.core.numeric.asanyarray',
              'numpy.matrixlib.defmatrix.binary_repr': 'numpy.core.numeric.binary_repr',
              'numpy.matrixlib.defmatrix.concatenate': 'numpy.core.numeric.concatenate',
              'numpy.matrixlib.defmatrix.func': 'numpy.dual.pinv',
              'numpy.matrixlib.defmatrix.identity': 'numpy.core.numeric.identity',
              'numpy.matrixlib.defmatrix.inv': 'numpy.linalg.inv',
              'numpy.matrixlib.defmatrix.isscalar': 'numpy.core.numeric.isscalar',
              'numpy.matrixlib.defmatrix.issubdtype': 'numpy.core.numerictypes.issubdtype',
              'numpy.matrixlib.defmatrix.sys': 'sys',
              'numpy.matrixlib.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.matrixlib.setup.os': 'os',
              'numpy.matrixlib.setup.setup': 'numpy.distutils.core.setup',
              'numpy.matrixlib.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.matrixlib.setupscons.os': 'os',
              'numpy.matrixlib.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.max': 'numpy.core.max',
              'numpy.min': 'numpy.core.min',
              'numpy.numarray.*': 'numpy.numarray.session.*',
              'numpy.numarray.Tester': 'numpy.testing.Tester',
              'numpy.numarray.alter_code1.datetime': 'datetime',
              'numpy.numarray.alter_code1.glob': 'glob',
              'numpy.numarray.alter_code1.os': 'os',
              'numpy.numarray.alter_code1.re': 're',
              'numpy.numarray.alter_code1.sys': 'sys',
              'numpy.numarray.alter_code2.glob': 'glob',
              'numpy.numarray.alter_code2.os': 'os',
              'numpy.numarray.alter_code2.sys': 'sys',
              'numpy.numarray.alter_code2.warnings': 'warnings',
              'numpy.numarray.compat': 'numpy.numarray.compat',
              'numpy.numarray.compat.ArrayType': 'numpy.ndarray',
              'numpy.numarray.compat.NewAxis': 'numpy.newaxis',
              'numpy.numarray.convolve.*': 'scipy.stsci.convolve.*',
              'numpy.numarray.fft.*': 'numpy.oldnumeric.fft.*',
              'numpy.numarray.fft.nof': 'numpy.oldnumeric.fft',
              'numpy.numarray.functions': 'numpy.numarray.functions',
              'numpy.numarray.functions.CLIP': 'numpy.CLIP',
              'numpy.numarray.functions.RAISE': 'numpy.RAISE',
              'numpy.numarray.functions.WRAP': 'numpy.WRAP',
              'numpy.numarray.functions._warnings': 'warnings',
              'numpy.numarray.functions.all': 'numpy.all',
              'numpy.numarray.functions.allclose': 'numpy.allclose',
              'numpy.numarray.functions.any': 'numpy.any',
              'numpy.numarray.functions.argsort': 'numpy.argsort',
              'numpy.numarray.functions.array_equal': 'numpy.array_equal',
              'numpy.numarray.functions.array_equiv': 'numpy.array_equiv',
              'numpy.numarray.functions.array_repr': 'numpy.array_repr',
              'numpy.numarray.functions.array_str': 'numpy.array_str',
              'numpy.numarray.functions.clip': 'numpy.clip',
              'numpy.numarray.functions.concatenate': 'numpy.concatenate',
              'numpy.numarray.functions.copy': 'copy',
              'numpy.numarray.functions.copy_reg': 'copyreg',
              'numpy.numarray.functions.diagonal': 'numpy.diagonal',
              'numpy.numarray.functions.dot': 'numpy.dot',
              'numpy.numarray.functions.e': 'numpy.e',
              'numpy.numarray.functions.innerproduct': 'numpy.inner',
              'numpy.numarray.functions.kroneckerproduct': 'numpy.kron',
              'numpy.numarray.functions.lexsort': 'numpy.lexsort',
              'numpy.numarray.functions.math': 'math',
              'numpy.numarray.functions.matrixmultiply': 'numpy.dot',
              'numpy.numarray.functions.nonzero': 'numpy.nonzero',
              'numpy.numarray.functions.np': 'numpy',
              'numpy.numarray.functions.operator': 'operator',
              'numpy.numarray.functions.os': 'os',
              'numpy.numarray.functions.outerproduct': 'numpy.outer',
              'numpy.numarray.functions.pi': 'numpy.pi',
              'numpy.numarray.functions.putmask': 'numpy.putmask',
              'numpy.numarray.functions.rank': 'numpy.rank',
              'numpy.numarray.functions.ravel': 'numpy.ravel',
              'numpy.numarray.functions.resize': 'numpy.resize',
              'numpy.numarray.functions.searchsorted': 'numpy.searchsorted',
              'numpy.numarray.functions.shape': 'numpy.shape',
              'numpy.numarray.functions.size': 'numpy.size',
              'numpy.numarray.functions.sort': 'numpy.sort',
              'numpy.numarray.functions.swapaxes': 'numpy.swapaxes',
              'numpy.numarray.functions.sys': 'sys',
              'numpy.numarray.functions.trace': 'numpy.trace',
              'numpy.numarray.functions.transpose': 'numpy.transpose',
              'numpy.numarray.functions.typefrom': 'numpy.numarray.numerictypes.typefrom',
              'numpy.numarray.functions.types': 'types',
              'numpy.numarray.functions.vdot': 'numpy.vdot',
              'numpy.numarray.image.*': 'scipy.stsci.image.*',
              'numpy.numarray.linear_algebra.*': 'numpy.oldnumeric.linear_algebra.*',
              'numpy.numarray.linear_algebra._qr': 'numpy.linalg.qr',
              'numpy.numarray.linear_algebra.nol': 'numpy.oldnumeric.linear_algebra',
              'numpy.numarray.ma.*': 'numpy.oldnumeric.ma.*',
              'numpy.numarray.matrix._matrix': 'numpy.matrix',
              'numpy.numarray.mlab.*': 'numpy.oldnumeric.mlab.*',
              'numpy.numarray.mlab.nom': 'numpy.oldnumeric.mlab',
              'numpy.numarray.nd_image.*': 'scipy.ndimage.*',
              'numpy.numarray.numerictypes': 'numpy.numarray.numerictypes',
              'numpy.numarray.numerictypes.numpy': 'numpy',
              'numpy.numarray.random_array.*': 'numpy.oldnumeric.random_array.*',
              'numpy.numarray.session': 'numpy.numarray.session',
              'numpy.numarray.session.doctest': 'doctest',
              'numpy.numarray.session.numpy.numarray.session': 'numpy.numarray.session',
              'numpy.numarray.session.pickle': 'pickle',
              'numpy.numarray.session.sys': 'sys',
              'numpy.numarray.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.numarray.setup.join': 'os.path.join',
              'numpy.numarray.setup.setup': 'numpy.distutils.core.setup',
              'numpy.numarray.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.numarray.setupscons.join': 'os.path.join',
              'numpy.numarray.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.numarray.ufuncs': 'numpy.numarray.ufuncs',
              'numpy.numarray.ufuncs.abs': 'numpy.absolute',
              'numpy.numarray.ufuncs.absolute': 'numpy.absolute',
              'numpy.numarray.ufuncs.add': 'numpy.add',
              'numpy.numarray.ufuncs.arccos': 'numpy.arccos',
              'numpy.numarray.ufuncs.arccosh': 'numpy.arccosh',
              'numpy.numarray.ufuncs.arcsin': 'numpy.arcsin',
              'numpy.numarray.ufuncs.arcsinh': 'numpy.arcsinh',
              'numpy.numarray.ufuncs.arctan': 'numpy.arctan',
              'numpy.numarray.ufuncs.arctan2': 'numpy.arctan2',
              'numpy.numarray.ufuncs.arctanh': 'numpy.arctanh',
              'numpy.numarray.ufuncs.bitwise_and': 'numpy.bitwise_and',
              'numpy.numarray.ufuncs.bitwise_not': 'numpy.invert',
              'numpy.numarray.ufuncs.bitwise_or': 'numpy.bitwise_or',
              'numpy.numarray.ufuncs.bitwise_xor': 'numpy.bitwise_xor',
              'numpy.numarray.ufuncs.ceil': 'numpy.ceil',
              'numpy.numarray.ufuncs.conjugate': 'numpy.conjugate',
              'numpy.numarray.ufuncs.cos': 'numpy.cos',
              'numpy.numarray.ufuncs.cosh': 'numpy.cosh',
              'numpy.numarray.ufuncs.divide': 'numpy.divide',
              'numpy.numarray.ufuncs.equal': 'numpy.equal',
              'numpy.numarray.ufuncs.exp': 'numpy.exp',
              'numpy.numarray.ufuncs.fabs': 'numpy.fabs',
              'numpy.numarray.ufuncs.floor': 'numpy.floor',
              'numpy.numarray.ufuncs.floor_divide': 'numpy.floor_divide',
              'numpy.numarray.ufuncs.fmod': 'numpy.fmod',
              'numpy.numarray.ufuncs.greater': 'numpy.greater',
              'numpy.numarray.ufuncs.greater_equal': 'numpy.greater_equal',
              'numpy.numarray.ufuncs.hypot': 'numpy.hypot',
              'numpy.numarray.ufuncs.isnan': 'numpy.isnan',
              'numpy.numarray.ufuncs.less': 'numpy.less',
              'numpy.numarray.ufuncs.less_equal': 'numpy.less_equal',
              'numpy.numarray.ufuncs.log': 'numpy.log',
              'numpy.numarray.ufuncs.log10': 'numpy.log10',
              'numpy.numarray.ufuncs.logical_and': 'numpy.logical_and',
              'numpy.numarray.ufuncs.logical_not': 'numpy.logical_not',
              'numpy.numarray.ufuncs.logical_or': 'numpy.logical_or',
              'numpy.numarray.ufuncs.logical_xor': 'numpy.logical_xor',
              'numpy.numarray.ufuncs.lshift': 'numpy.left_shift',
              'numpy.numarray.ufuncs.maximum': 'numpy.maximum',
              'numpy.numarray.ufuncs.minimum': 'numpy.minimum',
              'numpy.numarray.ufuncs.minus': 'numpy.negative',
              'numpy.numarray.ufuncs.multiply': 'numpy.multiply',
              'numpy.numarray.ufuncs.negative': 'numpy.negative',
              'numpy.numarray.ufuncs.not_equal': 'numpy.not_equal',
              'numpy.numarray.ufuncs.power': 'numpy.power',
              'numpy.numarray.ufuncs.product': 'numpy.product',
              'numpy.numarray.ufuncs.remainder': 'numpy.remainder',
              'numpy.numarray.ufuncs.rshift': 'numpy.right_shift',
              'numpy.numarray.ufuncs.sign': 'numpy.sign',
              'numpy.numarray.ufuncs.sin': 'numpy.sin',
              'numpy.numarray.ufuncs.sinh': 'numpy.sinh',
              'numpy.numarray.ufuncs.sqrt': 'numpy.sqrt',
              'numpy.numarray.ufuncs.subtract': 'numpy.subtract',
              'numpy.numarray.ufuncs.sum': 'numpy.sum',
              'numpy.numarray.ufuncs.tan': 'numpy.tan',
              'numpy.numarray.ufuncs.tanh': 'numpy.tanh',
              'numpy.numarray.ufuncs.true_divide': 'numpy.true_divide',
              'numpy.numarray.util': 'numpy.numarray.util',
              'numpy.numarray.util.np': 'numpy',
              'numpy.numarray.util.os': 'os',
              'numpy.object': '__builtin__.object',
              'numpy.oldnumeric.*': 'numpy.oldnumeric.misc.*',
              'numpy.oldnumeric.Tester': 'numpy.testing.Tester',
              'numpy.oldnumeric.alter_code1.datetime': 'datetime',
              'numpy.oldnumeric.alter_code1.glob': 'glob',
              'numpy.oldnumeric.alter_code1.os': 'os',
              'numpy.oldnumeric.alter_code1.re': 're',
              'numpy.oldnumeric.alter_code1.sys': 'sys',
              'numpy.oldnumeric.alter_code2.datetime': 'datetime',
              'numpy.oldnumeric.alter_code2.glob': 'glob',
              'numpy.oldnumeric.alter_code2.os': 'os',
              'numpy.oldnumeric.alter_code2.re': 're',
              'numpy.oldnumeric.alter_code2.sys': 'sys',
              'numpy.oldnumeric.alter_code2.warnings': 'warnings',
              'numpy.oldnumeric.array_printer._array2string': 'numpy.array2string',
              'numpy.oldnumeric.arrayfns.asarray': 'numpy.asarray',
              'numpy.oldnumeric.arrayfns.digitize': 'numpy.digitize',
              'numpy.oldnumeric.arrayfns.histogram': 'numpy.bincount',
              'numpy.oldnumeric.arrayfns.np': 'numpy',
              'numpy.oldnumeric.compat': 'numpy.oldnumeric.compat',
              'numpy.oldnumeric.compat.array': 'numpy.core.numeric.array',
              'numpy.oldnumeric.compat.cPickle': 'cPickle',
              'numpy.oldnumeric.compat.copy': 'copy',
              'numpy.oldnumeric.compat.deprecate': 'numpy.deprecate',
              'numpy.oldnumeric.compat.dump': 'cPickle.dump',
              'numpy.oldnumeric.compat.dumps': 'cPickle.dumps',
              'numpy.oldnumeric.compat.functions': 'numpy.oldnumeric.functions',
              'numpy.oldnumeric.compat.multiarray': 'numpy.core.multiarray',
              'numpy.oldnumeric.compat.pickle': 'pickle',
              'numpy.oldnumeric.compat.sys': 'sys',
              'numpy.oldnumeric.compat.typeconv': 'numpy.oldnumeric.typeconv',
              'numpy.oldnumeric.compat.um': 'numpy.core.umath',
              'numpy.oldnumeric.fft.fft': 'numpy.fft.fft',
              'numpy.oldnumeric.fft.fft2d': 'numpy.fft.fft2',
              'numpy.oldnumeric.fft.fftnd': 'numpy.fft.fftn',
              'numpy.oldnumeric.fft.hermite_fft': 'numpy.fft.hfft',
              'numpy.oldnumeric.fft.inverse_fft': 'numpy.fft.ifft',
              'numpy.oldnumeric.fft.inverse_fft2d': 'numpy.fft.ifft2',
              'numpy.oldnumeric.fft.inverse_fftnd': 'numpy.fft.ifftn',
              'numpy.oldnumeric.fft.inverse_hermite_fft': 'numpy.fft.ihfft',
              'numpy.oldnumeric.fft.inverse_real_fft': 'numpy.fft.irfft',
              'numpy.oldnumeric.fft.inverse_real_fft2d': 'numpy.fft.irfft2',
              'numpy.oldnumeric.fft.inverse_real_fftnd': 'numpy.fft.irfftn',
              'numpy.oldnumeric.fft.real_fft': 'numpy.fft.rfft',
              'numpy.oldnumeric.fft.real_fft2d': 'numpy.fft.rfft2',
              'numpy.oldnumeric.fft.real_fftnd': 'numpy.fft.rfftn',
              'numpy.oldnumeric.fix_default_axis.glob': 'glob',
              'numpy.oldnumeric.fix_default_axis.os': 'os',
              'numpy.oldnumeric.fix_default_axis.re': 're',
              'numpy.oldnumeric.fix_default_axis.string': 'string',
              'numpy.oldnumeric.fix_default_axis.sys': 'sys',
              'numpy.oldnumeric.functions': 'numpy.oldnumeric.functions',
              'numpy.oldnumeric.functions.convtypecode': 'numpy.oldnumeric.typeconv.convtypecode',
              'numpy.oldnumeric.functions.convtypecode2': 'numpy.oldnumeric.typeconv.convtypecode2',
              'numpy.oldnumeric.functions.mu': 'numpy.core.multiarray',
              'numpy.oldnumeric.functions.nn': 'numpy.core.numeric',
              'numpy.oldnumeric.functions.np': 'numpy',
              'numpy.oldnumeric.linear_algebra.linalg': 'numpy.linalg',
              'numpy.oldnumeric.linear_algebra.transpose': 'numpy.core.transpose',
              'numpy.oldnumeric.ma.MethodType': 'types.MethodType',
              'numpy.oldnumeric.ma.amax': 'numpy.core.fromnumeric.amax',
              'numpy.oldnumeric.ma.amin': 'numpy.core.fromnumeric.amin',
              'numpy.oldnumeric.ma.bool_': 'numpy.core.numerictypes.bool_',
              'numpy.oldnumeric.ma.fromnumeric': 'numpy.core.fromnumeric',
              'numpy.oldnumeric.ma.inf': 'numpy.core.numeric.inf',
              'numpy.oldnumeric.ma.ndarray': 'numpy.core.numeric.ndarray',
              'numpy.oldnumeric.ma.newaxis': 'numpy.core.numeric.newaxis',
              'numpy.oldnumeric.ma.numeric': 'numpy.core.numeric',
              'numpy.oldnumeric.ma.reduce': 'functools.reduce',
              'numpy.oldnumeric.ma.sys': 'sys',
              'numpy.oldnumeric.ma.typecodes': 'numpy.core.numerictypes.typecodes',
              'numpy.oldnumeric.ma.types': 'types',
              'numpy.oldnumeric.ma.umath': 'numpy.core.umath',
              'numpy.oldnumeric.ma.warnings': 'warnings',
              'numpy.oldnumeric.matrix.LinearAlgebra': 'numpy.oldnumeric.linear_algebra',
              'numpy.oldnumeric.matrix.Matrix': 'numpy.matrix',
              'numpy.oldnumeric.matrix.Numeric': 'numpy.oldnumeric',
              'numpy.oldnumeric.matrix.UserArray': 'numpy.oldnumeric.user_array.UserArray',
              'numpy.oldnumeric.matrix.asarray': 'numpy.oldnumeric.user_array.asarray',
              'numpy.oldnumeric.matrix.dot': 'numpy.oldnumeric.dot',
              'numpy.oldnumeric.matrix.identity': 'numpy.oldnumeric.identity',
              'numpy.oldnumeric.matrix.multiply': 'numpy.oldnumeric.multiply',
              'numpy.oldnumeric.matrix.squeeze': 'numpy.squeeze',
              'numpy.oldnumeric.matrix.types': 'types',
              'numpy.oldnumeric.misc': 'numpy.oldnumeric.misc',
              'numpy.oldnumeric.misc.StringIO': 'StringIO',
              'numpy.oldnumeric.misc.allclose': 'numpy.allclose',
              'numpy.oldnumeric.misc.argsort': 'numpy.argsort',
              'numpy.oldnumeric.misc.around': 'numpy.around',
              'numpy.oldnumeric.misc.array2string': 'numpy.oldnumeric.array_printer.array2string',
              'numpy.oldnumeric.misc.array_repr': 'numpy.array_repr',
              'numpy.oldnumeric.misc.array_str': 'numpy.array_str',
              'numpy.oldnumeric.misc.choose': 'numpy.choose',
              'numpy.oldnumeric.misc.clip': 'numpy.clip',
              'numpy.oldnumeric.misc.concatenate': 'numpy.concatenate',
              'numpy.oldnumeric.misc.convolve': 'numpy.convolve',
              'numpy.oldnumeric.misc.copy': 'copy',
              'numpy.oldnumeric.misc.copy_reg': 'copy_reg',
              'numpy.oldnumeric.misc.copyreg': 'copyreg',
              'numpy.oldnumeric.misc.cross_correlate': 'numpy.correlate',
              'numpy.oldnumeric.misc.diagonal': 'numpy.diagonal',
              'numpy.oldnumeric.misc.dot': 'numpy.dot',
              'numpy.oldnumeric.misc.e': 'numpy.e',
              'numpy.oldnumeric.misc.innerproduct': 'numpy.inner',
              'numpy.oldnumeric.misc.insert': 'numpy.place',
              'numpy.oldnumeric.misc.io': 'io',
              'numpy.oldnumeric.misc.math': 'math',
              'numpy.oldnumeric.misc.outerproduct': 'numpy.outer',
              'numpy.oldnumeric.misc.pi': 'numpy.pi',
              'numpy.oldnumeric.misc.pickle': 'pickle',
              'numpy.oldnumeric.misc.put': 'numpy.put',
              'numpy.oldnumeric.misc.putmask': 'numpy.putmask',
              'numpy.oldnumeric.misc.rank': 'numpy.rank',
              'numpy.oldnumeric.misc.resize': 'numpy.resize',
              'numpy.oldnumeric.misc.searchsorted': 'numpy.searchsorted',
              'numpy.oldnumeric.misc.shape': 'numpy.shape',
              'numpy.oldnumeric.misc.sign': 'numpy.sign',
              'numpy.oldnumeric.misc.size': 'numpy.size',
              'numpy.oldnumeric.misc.sort': 'numpy.sort',
              'numpy.oldnumeric.misc.swapaxes': 'numpy.swapaxes',
              'numpy.oldnumeric.misc.sys': 'sys',
              'numpy.oldnumeric.misc.transpose': 'numpy.transpose',
              'numpy.oldnumeric.misc.types': 'types',
              'numpy.oldnumeric.misc.vdot': 'numpy.vdot',
              'numpy.oldnumeric.mlab.*': 'numpy.oldnumeric.misc.*',
              'numpy.oldnumeric.mlab.LinearAlgebra': 'numpy.oldnumeric.linear_algebra',
              'numpy.oldnumeric.mlab.RandomArray': 'numpy.oldnumeric.random_array',
              'numpy.oldnumeric.mlab._Ncumprod': 'numpy.cumprod',
              'numpy.oldnumeric.mlab._Nmax': 'numpy.amax',
              'numpy.oldnumeric.mlab._Nmean': 'numpy.mean',
              'numpy.oldnumeric.mlab._Nmin': 'numpy.amin',
              'numpy.oldnumeric.mlab._Nprod': 'numpy.prod',
              'numpy.oldnumeric.mlab._Nptp': 'numpy.ptp',
              'numpy.oldnumeric.mlab._Nstd': 'numpy.std',
              'numpy.oldnumeric.mlab._Ntrapz': 'numpy.trapz',
              'numpy.oldnumeric.mlab.angle': 'numpy.angle',
              'numpy.oldnumeric.mlab.bartlett': 'numpy.bartlett',
              'numpy.oldnumeric.mlab.blackman': 'numpy.blackman',
              'numpy.oldnumeric.mlab.compat': 'numpy.oldnumeric.compat',
              'numpy.oldnumeric.mlab.convtypecode': 'numpy.oldnumeric.typeconv.convtypecode',
              'numpy.oldnumeric.mlab.diag': 'numpy.diag',
              'numpy.oldnumeric.mlab.diff': 'numpy.diff',
              'numpy.oldnumeric.mlab.eig': 'numpy.linalg.eig',
              'numpy.oldnumeric.mlab.fliplr': 'numpy.fliplr',
              'numpy.oldnumeric.mlab.flipud': 'numpy.flipud',
              'numpy.oldnumeric.mlab.functions': 'numpy.oldnumeric.functions',
              'numpy.oldnumeric.mlab.hamming': 'numpy.hamming',
              'numpy.oldnumeric.mlab.hanning': 'numpy.hanning',
              'numpy.oldnumeric.mlab.kaiser': 'numpy.kaiser',
              'numpy.oldnumeric.mlab.median': 'numpy.median',
              'numpy.oldnumeric.mlab.misc': 'numpy.oldnumeric.misc',
              'numpy.oldnumeric.mlab.msort': 'numpy.msort',
              'numpy.oldnumeric.mlab.multiply': 'numpy.multiply',
              'numpy.oldnumeric.mlab.np': 'numpy',
              'numpy.oldnumeric.mlab.numpy': 'numpy',
              'numpy.oldnumeric.mlab.precision': 'numpy.oldnumeric.precision',
              'numpy.oldnumeric.mlab.rand': 'numpy.random.rand',
              'numpy.oldnumeric.mlab.randn': 'numpy.random.randn',
              'numpy.oldnumeric.mlab.roots': 'numpy.roots',
              'numpy.oldnumeric.mlab.rot90': 'numpy.rot90',
              'numpy.oldnumeric.mlab.sinc': 'numpy.sinc',
              'numpy.oldnumeric.mlab.sqrt': 'numpy.sqrt',
              'numpy.oldnumeric.mlab.squeeze': 'numpy.squeeze',
              'numpy.oldnumeric.mlab.svd': 'numpy.linalg.svd',
              'numpy.oldnumeric.mlab.transpose': 'numpy.transpose',
              'numpy.oldnumeric.mlab.tril': 'numpy.tril',
              'numpy.oldnumeric.mlab.triu': 'numpy.triu',
              'numpy.oldnumeric.mlab.ufuncs': 'numpy.oldnumeric.ufuncs',
              'numpy.oldnumeric.numpy': 'numpy',
              'numpy.oldnumeric.precision': 'numpy.oldnumeric.precision',
              'numpy.oldnumeric.precision.string': 'string',
              'numpy.oldnumeric.precision.zeros': 'numpy.oldnumeric.functions.zeros',
              'numpy.oldnumeric.random_array.mt': 'numpy.random.mtrand',
              'numpy.oldnumeric.random_array.np': 'numpy',
              'numpy.oldnumeric.rng.math': 'math',
              'numpy.oldnumeric.rng.mt': 'numpy.random.mtrand',
              'numpy.oldnumeric.rng_stats.Numeric': 'numpy.oldnumeric',
              'numpy.oldnumeric.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.oldnumeric.setup.setup': 'numpy.distutils.core.setup',
              'numpy.oldnumeric.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.oldnumeric.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.oldnumeric.typeconv.np': 'numpy',
              'numpy.oldnumeric.ufuncs': 'numpy.oldnumeric.ufuncs',
              'numpy.oldnumeric.ufuncs.absolute': 'numpy.absolute',
              'numpy.oldnumeric.ufuncs.add': 'numpy.add',
              'numpy.oldnumeric.ufuncs.arccos': 'numpy.arccos',
              'numpy.oldnumeric.ufuncs.arccosh': 'numpy.arccosh',
              'numpy.oldnumeric.ufuncs.arcsin': 'numpy.arcsin',
              'numpy.oldnumeric.ufuncs.arcsinh': 'numpy.arcsinh',
              'numpy.oldnumeric.ufuncs.arctan': 'numpy.arctan',
              'numpy.oldnumeric.ufuncs.arctan2': 'numpy.arctan2',
              'numpy.oldnumeric.ufuncs.arctanh': 'numpy.arctanh',
              'numpy.oldnumeric.ufuncs.bitwise_and': 'numpy.bitwise_and',
              'numpy.oldnumeric.ufuncs.bitwise_or': 'numpy.bitwise_or',
              'numpy.oldnumeric.ufuncs.bitwise_xor': 'numpy.bitwise_xor',
              'numpy.oldnumeric.ufuncs.ceil': 'numpy.ceil',
              'numpy.oldnumeric.ufuncs.conjugate': 'numpy.conjugate',
              'numpy.oldnumeric.ufuncs.cos': 'numpy.cos',
              'numpy.oldnumeric.ufuncs.cosh': 'numpy.cosh',
              'numpy.oldnumeric.ufuncs.divide': 'numpy.divide',
              'numpy.oldnumeric.ufuncs.divide_safe': 'numpy.divide',
              'numpy.oldnumeric.ufuncs.equal': 'numpy.equal',
              'numpy.oldnumeric.ufuncs.exp': 'numpy.exp',
              'numpy.oldnumeric.ufuncs.fabs': 'numpy.fabs',
              'numpy.oldnumeric.ufuncs.floor': 'numpy.floor',
              'numpy.oldnumeric.ufuncs.floor_divide': 'numpy.floor_divide',
              'numpy.oldnumeric.ufuncs.fmod': 'numpy.fmod',
              'numpy.oldnumeric.ufuncs.greater': 'numpy.greater',
              'numpy.oldnumeric.ufuncs.greater_equal': 'numpy.greater_equal',
              'numpy.oldnumeric.ufuncs.hypot': 'numpy.hypot',
              'numpy.oldnumeric.ufuncs.invert': 'numpy.invert',
              'numpy.oldnumeric.ufuncs.left_shift': 'numpy.left_shift',
              'numpy.oldnumeric.ufuncs.less': 'numpy.less',
              'numpy.oldnumeric.ufuncs.less_equal': 'numpy.less_equal',
              'numpy.oldnumeric.ufuncs.log': 'numpy.log',
              'numpy.oldnumeric.ufuncs.log10': 'numpy.log10',
              'numpy.oldnumeric.ufuncs.logical_and': 'numpy.logical_and',
              'numpy.oldnumeric.ufuncs.logical_not': 'numpy.logical_not',
              'numpy.oldnumeric.ufuncs.logical_or': 'numpy.logical_or',
              'numpy.oldnumeric.ufuncs.logical_xor': 'numpy.logical_xor',
              'numpy.oldnumeric.ufuncs.maximum': 'numpy.maximum',
              'numpy.oldnumeric.ufuncs.minimum': 'numpy.minimum',
              'numpy.oldnumeric.ufuncs.multiply': 'numpy.multiply',
              'numpy.oldnumeric.ufuncs.negative': 'numpy.negative',
              'numpy.oldnumeric.ufuncs.not_equal': 'numpy.not_equal',
              'numpy.oldnumeric.ufuncs.power': 'numpy.power',
              'numpy.oldnumeric.ufuncs.remainder': 'numpy.remainder',
              'numpy.oldnumeric.ufuncs.right_shift': 'numpy.right_shift',
              'numpy.oldnumeric.ufuncs.sin': 'numpy.sin',
              'numpy.oldnumeric.ufuncs.sinh': 'numpy.sinh',
              'numpy.oldnumeric.ufuncs.sqrt': 'numpy.sqrt',
              'numpy.oldnumeric.ufuncs.subtract': 'numpy.subtract',
              'numpy.oldnumeric.ufuncs.tan': 'numpy.tan',
              'numpy.oldnumeric.ufuncs.tanh': 'numpy.tanh',
              'numpy.oldnumeric.ufuncs.true_divide': 'numpy.true_divide',
              'numpy.oldnumeric.user_array.*': 'numpy.oldnumeric.*',
              'numpy.oldnumeric.user_array.UserArray': 'numpy.lib.user_array.container',
              'numpy.oldnumeric.user_array.nold': 'numpy.oldnumeric',
              'numpy.polynomial': 'numpy.polynomial',
              'numpy.polynomial.Chebyshev': 'numpy.polynomial.chebyshev.Chebyshev',
              'numpy.polynomial.Hermite': 'numpy.polynomial.hermite.Hermite',
              'numpy.polynomial.HermiteE': 'numpy.polynomial.hermite_e.HermiteE',
              'numpy.polynomial.Laguerre': 'numpy.polynomial.laguerre.Laguerre',
              'numpy.polynomial.Legendre': 'numpy.polynomial.legendre.Legendre',
              'numpy.polynomial.Polynomial': 'numpy.polynomial.polynomial.Polynomial',
              'numpy.polynomial.Tester': 'numpy.testing.Tester',
              'numpy.polynomial.as_series': 'numpy.polynomial.polyutils.as_series',
              'numpy.polynomial.cheb2poly': 'numpy.polynomial.chebyshev.cheb2poly',
              'numpy.polynomial.chebadd': 'numpy.polynomial.chebyshev.chebadd',
              'numpy.polynomial.chebder': 'numpy.polynomial.chebyshev.chebder',
              'numpy.polynomial.chebdiv': 'numpy.polynomial.chebyshev.chebdiv',
              'numpy.polynomial.chebfit': 'numpy.polynomial.chebyshev.chebfit',
              'numpy.polynomial.chebfromroots': 'numpy.polynomial.chebyshev.chebfromroots',
              'numpy.polynomial.chebint': 'numpy.polynomial.chebyshev.chebint',
              'numpy.polynomial.chebline': 'numpy.polynomial.chebyshev.chebline',
              'numpy.polynomial.chebmul': 'numpy.polynomial.chebyshev.chebmul',
              'numpy.polynomial.chebmulx': 'numpy.polynomial.chebyshev.chebmulx',
              'numpy.polynomial.chebpow': 'numpy.polynomial.chebyshev.chebpow',
              'numpy.polynomial.chebpts1': 'numpy.polynomial.chebyshev.chebpts1',
              'numpy.polynomial.chebpts2': 'numpy.polynomial.chebyshev.chebpts2',
              'numpy.polynomial.chebroots': 'numpy.polynomial.chebyshev.chebroots',
              'numpy.polynomial.chebsub': 'numpy.polynomial.chebyshev.chebsub',
              'numpy.polynomial.chebval': 'numpy.polynomial.chebyshev.chebval',
              'numpy.polynomial.chebvander': 'numpy.polynomial.chebyshev.chebvander',
              'numpy.polynomial.chebyshev.division': '__future__.division',
              'numpy.polynomial.chebyshev.la': 'numpy.linalg',
              'numpy.polynomial.chebyshev.np': 'numpy',
              'numpy.polynomial.chebyshev.polyadd': 'numpy.polynomial.polynomial.polyadd',
              'numpy.polynomial.chebyshev.polymulx': 'numpy.polynomial.polynomial.polymulx',
              'numpy.polynomial.chebyshev.polysub': 'numpy.polynomial.polynomial.polysub',
              'numpy.polynomial.chebyshev.polytemplate': 'numpy.polynomial.polytemplate.polytemplate',
              'numpy.polynomial.chebyshev.pu': 'numpy.polynomial.polyutils',
              'numpy.polynomial.chebyshev.warnings': 'warnings',
              'numpy.polynomial.deprecate': 'numpy.lib.deprecate',
              'numpy.polynomial.getdomain': 'numpy.polynomial.polyutils.getdomain',
              'numpy.polynomial.hermite.division': '__future__.division',
              'numpy.polynomial.hermite.la': 'numpy.linalg',
              'numpy.polynomial.hermite.np': 'numpy',
              'numpy.polynomial.hermite.polyadd': 'numpy.polynomial.polynomial.polyadd',
              'numpy.polynomial.hermite.polymulx': 'numpy.polynomial.polynomial.polymulx',
              'numpy.polynomial.hermite.polysub': 'numpy.polynomial.polynomial.polysub',
              'numpy.polynomial.hermite.polytemplate': 'numpy.polynomial.polytemplate.polytemplate',
              'numpy.polynomial.hermite.pu': 'numpy.polynomial.polyutils',
              'numpy.polynomial.hermite.warnings': 'warnings',
              'numpy.polynomial.hermite_e.division': '__future__.division',
              'numpy.polynomial.hermite_e.la': 'numpy.linalg',
              'numpy.polynomial.hermite_e.np': 'numpy',
              'numpy.polynomial.hermite_e.polyadd': 'numpy.polynomial.polynomial.polyadd',
              'numpy.polynomial.hermite_e.polymulx': 'numpy.polynomial.polynomial.polymulx',
              'numpy.polynomial.hermite_e.polysub': 'numpy.polynomial.polynomial.polysub',
              'numpy.polynomial.hermite_e.polytemplate': 'numpy.polynomial.polytemplate.polytemplate',
              'numpy.polynomial.hermite_e.pu': 'numpy.polynomial.polyutils',
              'numpy.polynomial.hermite_e.warnings': 'warnings',
              'numpy.polynomial.laguerre.division': '__future__.division',
              'numpy.polynomial.laguerre.la': 'numpy.linalg',
              'numpy.polynomial.laguerre.np': 'numpy',
              'numpy.polynomial.laguerre.polyadd': 'numpy.polynomial.polynomial.polyadd',
              'numpy.polynomial.laguerre.polymulx': 'numpy.polynomial.polynomial.polymulx',
              'numpy.polynomial.laguerre.polysub': 'numpy.polynomial.polynomial.polysub',
              'numpy.polynomial.laguerre.polytemplate': 'numpy.polynomial.polytemplate.polytemplate',
              'numpy.polynomial.laguerre.pu': 'numpy.polynomial.polyutils',
              'numpy.polynomial.laguerre.warnings': 'warnings',
              'numpy.polynomial.leg2poly': 'numpy.polynomial.legendre.leg2poly',
              'numpy.polynomial.legadd': 'numpy.polynomial.legendre.legadd',
              'numpy.polynomial.legder': 'numpy.polynomial.legendre.legder',
              'numpy.polynomial.legdiv': 'numpy.polynomial.legendre.legdiv',
              'numpy.polynomial.legendre.division': '__future__.division',
              'numpy.polynomial.legendre.la': 'numpy.linalg',
              'numpy.polynomial.legendre.np': 'numpy',
              'numpy.polynomial.legendre.polyadd': 'numpy.polynomial.polynomial.polyadd',
              'numpy.polynomial.legendre.polymulx': 'numpy.polynomial.polynomial.polymulx',
              'numpy.polynomial.legendre.polysub': 'numpy.polynomial.polynomial.polysub',
              'numpy.polynomial.legendre.polytemplate': 'numpy.polynomial.polytemplate.polytemplate',
              'numpy.polynomial.legendre.pu': 'numpy.polynomial.polyutils',
              'numpy.polynomial.legendre.warnings': 'warnings',
              'numpy.polynomial.legfit': 'numpy.polynomial.legendre.legfit',
              'numpy.polynomial.legfromroots': 'numpy.polynomial.legendre.legfromroots',
              'numpy.polynomial.legint': 'numpy.polynomial.legendre.legint',
              'numpy.polynomial.legline': 'numpy.polynomial.legendre.legline',
              'numpy.polynomial.legmul': 'numpy.polynomial.legendre.legmul',
              'numpy.polynomial.legmulx': 'numpy.polynomial.legendre.legmulx',
              'numpy.polynomial.legpow': 'numpy.polynomial.legendre.legpow',
              'numpy.polynomial.legroots': 'numpy.polynomial.legendre.legroots',
              'numpy.polynomial.legsub': 'numpy.polynomial.legendre.legsub',
              'numpy.polynomial.legval': 'numpy.polynomial.legendre.legval',
              'numpy.polynomial.legvander': 'numpy.polynomial.legendre.legvander',
              'numpy.polynomial.mapdomain': 'numpy.polynomial.polyutils.mapdomain',
              'numpy.polynomial.poly2cheb': 'numpy.polynomial.chebyshev.poly2cheb',
              'numpy.polynomial.poly2leg': 'numpy.polynomial.legendre.poly2leg',
              'numpy.polynomial.polyadd': 'numpy.polynomial.polynomial.polyadd',
              'numpy.polynomial.polyder': 'numpy.polynomial.polynomial.polyder',
              'numpy.polynomial.polydiv': 'numpy.polynomial.polynomial.polydiv',
              'numpy.polynomial.polyfit': 'numpy.polynomial.polynomial.polyfit',
              'numpy.polynomial.polyfromroots': 'numpy.polynomial.polynomial.polyfromroots',
              'numpy.polynomial.polyint': 'numpy.polynomial.polynomial.polyint',
              'numpy.polynomial.polyline': 'numpy.polynomial.polynomial.polyline',
              'numpy.polynomial.polymul': 'numpy.polynomial.polynomial.polymul',
              'numpy.polynomial.polymulx': 'numpy.polynomial.polynomial.polymulx',
              'numpy.polynomial.polynomial.division': '__future__.division',
              'numpy.polynomial.polynomial.la': 'numpy.linalg',
              'numpy.polynomial.polynomial.np': 'numpy',
              'numpy.polynomial.polynomial.polytemplate': 'numpy.polynomial.polytemplate.polytemplate',
              'numpy.polynomial.polynomial.pu': 'numpy.polynomial.polyutils',
              'numpy.polynomial.polynomial.warnings': 'warnings',
              'numpy.polynomial.polypow': 'numpy.polynomial.polynomial.polypow',
              'numpy.polynomial.polyroots': 'numpy.polynomial.polynomial.polyroots',
              'numpy.polynomial.polysub': 'numpy.polynomial.polynomial.polysub',
              'numpy.polynomial.polytemplate.string': 'string',
              'numpy.polynomial.polytemplate.sys': 'sys',
              'numpy.polynomial.polyutils.division': '__future__.division',
              'numpy.polynomial.polyutils.np': 'numpy',
              'numpy.polynomial.polyutils.sys': 'sys',
              'numpy.polynomial.polyutils.warnings': 'warnings',
              'numpy.polynomial.polyval': 'numpy.polynomial.polynomial.polyval',
              'numpy.polynomial.polyvander': 'numpy.polynomial.polynomial.polyvander',
              'numpy.polynomial.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.polynomial.setup.setup': 'numpy.distutils.core.setup',
              'numpy.polynomial.trimcoef': 'numpy.polynomial.polyutils.trimcoef',
              'numpy.polynomial.trimseq': 'numpy.polynomial.polyutils.trimseq',
              'numpy.polynomial.warnings': 'warnings',
              'numpy.random': 'numpy.random',
              'numpy.random.*': 'mtrand.*',
              'numpy.random.Tester': 'numpy.testing.Tester',
              'numpy.random.__all__': 'numpy.random.info.__all__',
              'numpy.random.__doc__': 'numpy.random.info.__doc__',
              'numpy.random.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.random.setup.dirname': 'os.path.dirname',
              'numpy.random.setup.get_mathlibs': 'numpy.distutils.misc_util.get_mathlibs',
              'numpy.random.setup.get_msvc_build_version': 'distutils.msvccompiler.get_build_version',
              'numpy.random.setup.join': 'os.path.join',
              'numpy.random.setup.newer': 'distutils.dep_util.newer',
              'numpy.random.setup.os': 'os',
              'numpy.random.setup.setup': 'numpy.distutils.core.setup',
              'numpy.random.setup.split': 'os.path.split',
              'numpy.random.setup.sys': 'sys',
              'numpy.random.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.random.setupscons.get_mathlibs': 'numpy.distutils.misc_util.get_mathlibs',
              'numpy.random.setupscons.glob': 'glob',
              'numpy.random.setupscons.join': 'os.path.join',
              'numpy.random.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.random.setupscons.split': 'os.path.split',
              'numpy.round': 'numpy.core.round',
              'numpy.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.setupscons.pjoin': 'os.path.join',
              'numpy.setupscons.scons_generate_config_py': 'numpy.distutils.misc_util.scons_generate_config_py',
              'numpy.show_config': 'numpy.__config__.show',
              'numpy.str': '__builtin__.str',
              'numpy.testing.*': 'numpy.testing.numpytest.*',
              'numpy.testing.TestCase': 'unittest.TestCase',
              'numpy.testing.Tester': 'numpy.testing.nosetester.NoseTester',
              'numpy.testing.dec': 'numpy.testing.decorators',
              'numpy.testing.decorators.KnownFailureTest': 'numpy.testing.noseclasses.KnownFailureTest',
              'numpy.testing.decorators.WarningManager': 'numpy.testing.utils.WarningManager',
              'numpy.testing.decorators.WarningMessage': 'numpy.testing.utils.WarningMessage',
              'numpy.testing.decorators.nose': 'nose',
              'numpy.testing.decorators.sys': 'sys',
              'numpy.testing.decorators.warnings': 'warnings',
              'numpy.testing.noseclasses.ErrorClass': 'nose.plugins.errorclass.ErrorClass',
              'numpy.testing.noseclasses.ErrorClassPlugin': 'nose.plugins.errorclass.ErrorClassPlugin',
              'numpy.testing.noseclasses.Plugin': 'nose.plugins.base.Plugin',
              'numpy.testing.noseclasses.doctest': 'doctest',
              'numpy.testing.noseclasses.get_package_name': 'numpy.testing.nosetester.get_package_name',
              'numpy.testing.noseclasses.getpackage': 'nose.util.getpackage',
              'numpy.testing.noseclasses.inspect': 'inspect',
              'numpy.testing.noseclasses.isclass': 'inspect.isclass',
              'numpy.testing.noseclasses.isfunction': 'inspect.isfunction',
              'numpy.testing.noseclasses.ismethod': 'inspect.ismethod',
              'numpy.testing.noseclasses.ismodule': 'inspect.ismodule',
              'numpy.testing.noseclasses.isroutine': 'inspect.isroutine',
              'numpy.testing.noseclasses.nose': 'nose',
              'numpy.testing.noseclasses.npd': 'nose.plugins.doctests',
              'numpy.testing.noseclasses.numpy': 'numpy',
              'numpy.testing.noseclasses.os': 'os',
              'numpy.testing.noseclasses.src': 'nose.util.src',
              'numpy.testing.nosetester.KnownFailure': 'numpy.testing.noseclasses.KnownFailure',
              'numpy.testing.nosetester.NumpyDoctest': 'numpy.testing.noseclasses.NumpyDoctest',
              'numpy.testing.nosetester.NumpyTestProgram': 'numpy.testing.noseclasses.NumpyTestProgram',
              'numpy.testing.nosetester.doctest': 'doctest',
              'numpy.testing.nosetester.nose': 'nose',
              'numpy.testing.nosetester.nose.plugins.builtin': 'nose.plugins.builtin',
              'numpy.testing.nosetester.numpy': 'numpy',
              'numpy.testing.nosetester.os': 'os',
              'numpy.testing.nosetester.raises': 'nose.tools.raises',
              'numpy.testing.nosetester.scipy': 'scipy',
              'numpy.testing.nosetester.sys': 'sys',
              'numpy.testing.nosetester.utils': 'numpy.testing.utils',
              'numpy.testing.numpytest.os': 'os',
              'numpy.testing.numpytest.sys': 'sys',
              'numpy.testing.numpytest.traceback': 'traceback',
              'numpy.testing.print_coercion_tables.np': 'numpy',
              'numpy.testing.run_module_suite': 'numpy.testing.nosetester.run_module_suite',
              'numpy.testing.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.testing.setup.setup': 'numpy.distutils.core.setup',
              'numpy.testing.setupscons.Configuration': 'numpy.distutils.misc_util.Configuration',
              'numpy.testing.setupscons.setup': 'numpy.distutils.core.setup',
              'numpy.testing.utils.any': 'numpy.core.any',
              'numpy.testing.utils.around': 'numpy.core.around',
              'numpy.testing.utils.array': 'numpy.core.array',
              'numpy.testing.utils.cStringIO': 'cStringIO',
              'numpy.testing.utils.difflib': 'difflib',
              'numpy.testing.utils.doctest': 'doctest',
              'numpy.testing.utils.float64': 'numpy.core.float64',
              'numpy.testing.utils.float_': 'numpy.core.float_',
              'numpy.testing.utils.imag': 'numpy.lib.imag',
              'numpy.testing.utils.imp': 'imp',
              'numpy.testing.utils.import_nose': 'numpy.testing.nosetester.import_nose',
              'numpy.testing.utils.iscomplexobj': 'numpy.lib.iscomplexobj',
              'numpy.testing.utils.isfinite': 'numpy.core.isfinite',
              'numpy.testing.utils.isfunction': 'inspect.isfunction',
              'numpy.testing.utils.isinf': 'numpy.core.isinf',
              'numpy.testing.utils.isnan': 'numpy.core.isnan',
              'numpy.testing.utils.isscalar': 'numpy.core.isscalar',
              'numpy.testing.utils.issubdtype': 'numpy.core.numerictypes.issubdtype',
              'numpy.testing.utils.ndarray': 'numpy.core.ndarray',
              'numpy.testing.utils.np': 'numpy',
              'numpy.testing.utils.npany': 'numpy.core.fromnumeric.any',
              'numpy.testing.utils.number': 'numpy.core.number',
              'numpy.testing.utils.operator': 'operator',
              'numpy.testing.utils.os': 'os',
              'numpy.testing.utils.pprint': 'pprint',
              'numpy.testing.utils.random': 'random',
              'numpy.testing.utils.re': 're',
              'numpy.testing.utils.real': 'numpy.lib.real',
              'numpy.testing.utils.seterr': 'numpy.core.seterr',
              'numpy.testing.utils.signbit': 'numpy.core.signbit',
              'numpy.testing.utils.sys': 'sys',
              'numpy.testing.utils.time': 'time',
              'numpy.testing.utils.types': 'types',
              'numpy.testing.utils.warnings': 'warnings',
              'numpy.testing.utils.win32pdh': 'win32pdh',
              'numpy.testing.utils.zeros': 'numpy.core.zeros',
              'numpy.unicode': '__builtin__.unicode',
              'paramiko.AUTH_FAILED': 'paramiko.common.AUTH_FAILED',
              'paramiko.AUTH_PARTIALLY_SUCCESSFUL': 'paramiko.common.AUTH_PARTIALLY_SUCCESSFUL',
              'paramiko.AUTH_SUCCESSFUL': 'paramiko.common.AUTH_SUCCESSFUL',
              'paramiko.Agent': 'paramiko.agent.Agent',
              'paramiko.AgentKey': 'paramiko.agent.AgentKey',
              'paramiko.AuthHandler': 'paramiko.auth_handler.AuthHandler',
              'paramiko.AuthenticationException': 'paramiko.ssh_exception.AuthenticationException',
              'paramiko.AutoAddPolicy': 'paramiko.client.AutoAddPolicy',
              'paramiko.BadAuthenticationType': 'paramiko.ssh_exception.BadAuthenticationType',
              'paramiko.BadHostKeyException': 'paramiko.ssh_exception.BadHostKeyException',
              'paramiko.BaseSFTP': 'paramiko.sftp.BaseSFTP',
              'paramiko.BufferedFile': 'paramiko.file.BufferedFile',
              'paramiko.Channel': 'paramiko.channel.Channel',
              'paramiko.ChannelException': 'paramiko.ssh_exception.ChannelException',
              'paramiko.ChannelFile': 'paramiko.channel.ChannelFile',
              'paramiko.DSSKey': 'paramiko.dsskey.DSSKey',
              'paramiko.HostKeys': 'paramiko.hostkeys.HostKeys',
              'paramiko.InteractiveQuery': 'paramiko.server.InteractiveQuery',
              'paramiko.Message': 'paramiko.message.Message',
              'paramiko.MissingHostKeyPolicy': 'paramiko.client.MissingHostKeyPolicy',
              'paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED': 'paramiko.common.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED',
              'paramiko.OPEN_FAILED_CONNECT_FAILED': 'paramiko.common.OPEN_FAILED_CONNECT_FAILED',
              'paramiko.OPEN_FAILED_RESOURCE_SHORTAGE': 'paramiko.common.OPEN_FAILED_RESOURCE_SHORTAGE',
              'paramiko.OPEN_FAILED_UNKNOWN_CHANNEL_TYPE': 'paramiko.common.OPEN_FAILED_UNKNOWN_CHANNEL_TYPE',
              'paramiko.OPEN_SUCCEEDED': 'paramiko.common.OPEN_SUCCEEDED',
              'paramiko.PKey': 'paramiko.pkey.PKey',
              'paramiko.Packetizer': 'paramiko.packet.Packetizer',
              'paramiko.PasswordRequiredException': 'paramiko.ssh_exception.PasswordRequiredException',
              'paramiko.ProxyCommand': 'paramiko.proxy.ProxyCommand',
              'paramiko.ProxyCommandFailure': 'paramiko.ssh_exception.ProxyCommandFailure',
              'paramiko.RSAKey': 'paramiko.rsakey.RSAKey',
              'paramiko.RejectPolicy': 'paramiko.client.RejectPolicy',
              'paramiko.SFTP': 'paramiko.sftp_client.SFTP',
              'paramiko.SFTPAttributes': 'paramiko.sftp_attr.SFTPAttributes',
              'paramiko.SFTPClient': 'paramiko.sftp_client.SFTPClient',
              'paramiko.SFTPError': 'paramiko.sftp.SFTPError',
              'paramiko.SFTPFile': 'paramiko.sftp_file.SFTPFile',
              'paramiko.SFTPHandle': 'paramiko.sftp_handle.SFTPHandle',
              'paramiko.SFTPServer': 'paramiko.sftp_server.SFTPServer',
              'paramiko.SFTPServerInterface': 'paramiko.sftp_si.SFTPServerInterface',
              'paramiko.SFTP_BAD_MESSAGE': 'paramiko.sftp.SFTP_BAD_MESSAGE',
              'paramiko.SFTP_CONNECTION_LOST': 'paramiko.sftp.SFTP_CONNECTION_LOST',
              'paramiko.SFTP_EOF': 'paramiko.sftp.SFTP_EOF',
              'paramiko.SFTP_FAILURE': 'paramiko.sftp.SFTP_FAILURE',
              'paramiko.SFTP_NO_CONNECTION': 'paramiko.sftp.SFTP_NO_CONNECTION',
              'paramiko.SFTP_NO_SUCH_FILE': 'paramiko.sftp.SFTP_NO_SUCH_FILE',
              'paramiko.SFTP_OK': 'paramiko.sftp.SFTP_OK',
              'paramiko.SFTP_OP_UNSUPPORTED': 'paramiko.sftp.SFTP_OP_UNSUPPORTED',
              'paramiko.SFTP_PERMISSION_DENIED': 'paramiko.sftp.SFTP_PERMISSION_DENIED',
              'paramiko.SSHClient': 'paramiko.client.SSHClient',
              'paramiko.SSHConfig': 'paramiko.config.SSHConfig',
              'paramiko.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.SecurityOptions': 'paramiko.transport.SecurityOptions',
              'paramiko.ServerInterface': 'paramiko.server.ServerInterface',
              'paramiko.SubsystemHandler': 'paramiko.server.SubsystemHandler',
              'paramiko.Transport': 'paramiko.transport.Transport',
              'paramiko.WarningPolicy': 'paramiko.client.WarningPolicy',
              'paramiko.agent.Channel': 'paramiko.channel.Channel',
              'paramiko.agent.Message': 'paramiko.message.Message',
              'paramiko.agent.PKey': 'paramiko.pkey.PKey',
              'paramiko.agent.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.agent.fcntl': 'fcntl',
              'paramiko.agent.io_sleep': 'paramiko.common.io_sleep',
              'paramiko.agent.os': 'os',
              'paramiko.agent.retry_on_signal': 'paramiko.util.retry_on_signal',
              'paramiko.agent.select': 'select.select',
              'paramiko.agent.socket': 'socket',
              'paramiko.agent.stat': 'stat',
              'paramiko.agent.struct': 'struct',
              'paramiko.agent.sys': 'sys',
              'paramiko.agent.tempfile': 'tempfile',
              'paramiko.agent.threading': 'threading',
              'paramiko.agent.time': 'time',
              'paramiko.agent.win_pageant': 'paramiko.win_pageant',
              'paramiko.auth_handler.*': 'paramiko.common.*',
              'paramiko.auth_handler.AuthenticationException': 'paramiko.ssh_exception.AuthenticationException',
              'paramiko.auth_handler.BadAuthenticationType': 'paramiko.ssh_exception.BadAuthenticationType',
              'paramiko.auth_handler.InteractiveQuery': 'paramiko.server.InteractiveQuery',
              'paramiko.auth_handler.Message': 'paramiko.message.Message',
              'paramiko.auth_handler.PartialAuthentication': 'paramiko.ssh_exception.PartialAuthentication',
              'paramiko.auth_handler.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.auth_handler.encodings.utf_8': 'encodings.utf_8',
              'paramiko.auth_handler.threading': 'threading',
              'paramiko.auth_handler.util': 'paramiko.util',
              'paramiko.auth_handler.weakref': 'weakref',
              'paramiko.ber.util': 'paramiko.util',
              'paramiko.buffered_pipe.array': 'array',
              'paramiko.buffered_pipe.threading': 'threading',
              'paramiko.buffered_pipe.time': 'time',
              'paramiko.channel.*': 'paramiko.common.*',
              'paramiko.channel.BufferedFile': 'paramiko.file.BufferedFile',
              'paramiko.channel.BufferedPipe': 'paramiko.buffered_pipe.BufferedPipe',
              'paramiko.channel.Message': 'paramiko.message.Message',
              'paramiko.channel.PipeTimeout': 'paramiko.buffered_pipe.PipeTimeout',
              'paramiko.channel.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.channel.binascii': 'binascii',
              'paramiko.channel.os': 'os',
              'paramiko.channel.pipe': 'paramiko.pipe',
              'paramiko.channel.socket': 'socket',
              'paramiko.channel.sys': 'sys',
              'paramiko.channel.threading': 'threading',
              'paramiko.channel.time': 'time',
              'paramiko.channel.util': 'paramiko.util',
              'paramiko.client.*': 'paramiko.common.*',
              'paramiko.client.Agent': 'paramiko.agent.Agent',
              'paramiko.client.BadHostKeyException': 'paramiko.ssh_exception.BadHostKeyException',
              'paramiko.client.DSSKey': 'paramiko.dsskey.DSSKey',
              'paramiko.client.HostKeys': 'paramiko.hostkeys.HostKeys',
              'paramiko.client.RSAKey': 'paramiko.rsakey.RSAKey',
              'paramiko.client.ResourceManager': 'paramiko.resource.ResourceManager',
              'paramiko.client.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.client.Transport': 'paramiko.transport.Transport',
              'paramiko.client.getpass': 'getpass',
              'paramiko.client.hexlify': 'binascii.hexlify',
              'paramiko.client.os': 'os',
              'paramiko.client.retry_on_signal': 'paramiko.util.retry_on_signal',
              'paramiko.client.socket': 'socket',
              'paramiko.client.warnings': 'warnings',
              'paramiko.common.Random': 'Crypto.Random',
              'paramiko.common.logging': 'logging',
              'paramiko.common.select': 'select',
              'paramiko.common.socket': 'socket',
              'paramiko.common.sys': 'sys',
              'paramiko.compress.zlib': 'zlib',
              'paramiko.config.fnmatch': 'fnmatch',
              'paramiko.config.os': 'os',
              'paramiko.config.re': 're',
              'paramiko.config.socket': 'socket',
              'paramiko.file.StringIO': 'cStringIO.StringIO',
              'paramiko.hostkeys.*': 'paramiko.common.*',
              'paramiko.hostkeys.DSSKey': 'paramiko.dsskey.DSSKey',
              'paramiko.hostkeys.HMAC': 'Crypto.Hash.HMAC',
              'paramiko.hostkeys.RSAKey': 'paramiko.rsakey.RSAKey',
              'paramiko.hostkeys.SHA': 'Crypto.Hash.SHA',
              'paramiko.hostkeys.UserDict': 'UserDict',
              'paramiko.hostkeys.base64': 'base64',
              'paramiko.hostkeys.binascii': 'binascii',
              'paramiko.io_sleep': 'paramiko.common.io_sleep',
              'paramiko.kex_gex.*': 'paramiko.common.*',
              'paramiko.kex_gex.Message': 'paramiko.message.Message',
              'paramiko.kex_gex.SHA': 'Crypto.Hash.SHA',
              'paramiko.kex_gex.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.kex_gex.number': 'Crypto.Util.number',
              'paramiko.kex_gex.util': 'paramiko.util',
              'paramiko.kex_group1.*': 'paramiko.common.*',
              'paramiko.kex_group1.Message': 'paramiko.message.Message',
              'paramiko.kex_group1.SHA': 'Crypto.Hash.SHA',
              'paramiko.kex_group1.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.kex_group1.util': 'paramiko.util',
              'paramiko.message.cStringIO': 'cStringIO',
              'paramiko.message.struct': 'struct',
              'paramiko.message.util': 'paramiko.util',
              'paramiko.packet.*': 'paramiko.common.*',
              'paramiko.packet.HMAC': 'Crypto.Hash.HMAC',
              'paramiko.packet.Message': 'paramiko.message.Message',
              'paramiko.packet.ProxyCommandFailure': 'paramiko.ssh_exception.ProxyCommandFailure',
              'paramiko.packet.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.packet.errno': 'errno',
              'paramiko.packet.r_hmac': 'r_hmac',
              'paramiko.packet.select': 'select',
              'paramiko.packet.socket': 'socket',
              'paramiko.packet.struct': 'struct',
              'paramiko.packet.threading': 'threading',
              'paramiko.packet.time': 'time',
              'paramiko.packet.util': 'paramiko.util',
              'paramiko.pipe.os': 'os',
              'paramiko.pipe.socket': 'socket',
              'paramiko.pipe.sys': 'sys',
              'paramiko.pkey.*': 'paramiko.common.*',
              'paramiko.pkey.AES': 'Crypto.Cipher.AES',
              'paramiko.pkey.DES3': 'Crypto.Cipher.DES3',
              'paramiko.pkey.MD5': 'Crypto.Hash.MD5',
              'paramiko.pkey.Message': 'paramiko.message.Message',
              'paramiko.pkey.PasswordRequiredException': 'paramiko.ssh_exception.PasswordRequiredException',
              'paramiko.pkey.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.pkey.base64': 'base64',
              'paramiko.pkey.hexlify': 'binascii.hexlify',
              'paramiko.pkey.os': 'os',
              'paramiko.pkey.unhexlify': 'binascii.unhexlify',
              'paramiko.pkey.util': 'paramiko.util',
              'paramiko.primes.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.primes.number': 'Crypto.Util.number',
              'paramiko.primes.util': 'paramiko.util',
              'paramiko.proxy.PIPE': 'subprocess.PIPE',
              'paramiko.proxy.Popen': 'subprocess.Popen',
              'paramiko.proxy.ProxyCommandFailure': 'paramiko.ssh_exception.ProxyCommandFailure',
              'paramiko.proxy.os': 'os',
              'paramiko.proxy.shlsplit': 'shlex.split',
              'paramiko.proxy.signal': 'signal',
              'paramiko.resource.weakref': 'weakref',
              'paramiko.rsakey.*': 'paramiko.common.*',
              'paramiko.rsakey.BER': 'paramiko.ber.BER',
              'paramiko.rsakey.BERException': 'paramiko.ber.BERException',
              'paramiko.rsakey.DES3': 'Crypto.Cipher.DES3',
              'paramiko.rsakey.MD5': 'Crypto.Hash.MD5',
              'paramiko.rsakey.Message': 'paramiko.message.Message',
              'paramiko.rsakey.PKey': 'paramiko.pkey.PKey',
              'paramiko.rsakey.RSA': 'Crypto.PublicKey.RSA',
              'paramiko.rsakey.SHA': 'Crypto.Hash.SHA',
              'paramiko.rsakey.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.rsakey.util': 'paramiko.util',
              'paramiko.server.*': 'paramiko.common.*',
              'paramiko.server.threading': 'threading',
              'paramiko.server.util': 'paramiko.util',
              'paramiko.sftp.*': 'paramiko.common.*',
              'paramiko.sftp.Channel': 'paramiko.channel.Channel',
              'paramiko.sftp.Message': 'paramiko.message.Message',
              'paramiko.sftp.select': 'select',
              'paramiko.sftp.socket': 'socket',
              'paramiko.sftp.struct': 'struct',
              'paramiko.sftp.util': 'paramiko.util',
              'paramiko.sftp_attr.*': 'paramiko.sftp.*',
              'paramiko.sftp_attr.stat': 'stat',
              'paramiko.sftp_attr.time': 'time',
              'paramiko.sftp_client.*': 'paramiko.sftp.*',
              'paramiko.sftp_client.SFTPAttributes': 'paramiko.sftp_attr.SFTPAttributes',
              'paramiko.sftp_client.SFTPFile': 'paramiko.sftp_file.SFTPFile',
              'paramiko.sftp_client.SSHException': 'paramiko.ssh_exception.SSHException',
              'paramiko.sftp_client.errno': 'errno',
              'paramiko.sftp_client.hexlify': 'binascii.hexlify',
              'paramiko.sftp_client.os': 'os',
              'paramiko.sftp_client.stat': 'stat',
              'paramiko.sftp_client.threading': 'threading',
              'paramiko.sftp_client.time': 'time',
              'paramiko.sftp_client.weakref': 'weakref',
              'paramiko.sftp_file.*': 'paramiko.sftp.*',
              'paramiko.sftp_file.BufferedFile': 'paramiko.file.BufferedFile',
              'paramiko.sftp_file.SFTPAttributes': 'paramiko.sftp_attr.SFTPAttributes',
              'paramiko.sftp_file.hexlify': 'binascii.hexlify',
              'paramiko.sftp_file.socket': 'socket',
              'paramiko.sftp_file.threading': 'threading',
              'paramiko.sftp_file.time': 'time',
              'paramiko.sftp_handle.*': 'paramiko.sftp.*',
              'paramiko.sftp_handle.SFTPServer': 'paramiko.sftp_server.SFTPServer',
              'paramiko.sftp_handle.os': 'os',
              'paramiko.sftp_server.*': 'paramiko.sftp_attr.*',
              'paramiko.sftp_server.MD5': 'Crypto.Hash.MD5',
              'paramiko.sftp_server.SFTPHandle': 'paramiko.sftp_handle.SFTPHandle',
              'paramiko.sftp_server.SHA': 'Crypto.Hash.SHA',
              'paramiko.sftp_server.SubsystemHandler': 'paramiko.server.SubsystemHandler',
              'paramiko.sftp_server.errno': 'errno',
              'paramiko.sftp_server.os': 'os',
              'paramiko.sftp_si.*': 'paramiko.sftp.*',
              'paramiko.sftp_si.os': 'os',
              'paramiko.sys': 'sys',
              'paramiko.util.*': 'paramiko.common.*',
              'paramiko.util.HostKeys': 'paramiko.hostkeys.HostKeys',
              'paramiko.util.SSHConfig': 'paramiko.config.SSHConfig',
              'paramiko.util.array': 'array',
              'paramiko.util.errno': 'errno',
              'paramiko.util.generators': '__future__.generators',
              'paramiko.util.hexlify': 'binascii.hexlify',
              'paramiko.util.struct': 'struct',
              'paramiko.util.sys': 'sys',
              'paramiko.util.threading': 'threading',
              'paramiko.util.traceback': 'traceback',
              'paramiko.util.unhexlify': 'binascii.unhexlify',
              'paramiko.win_pageant.array': 'array',
              'paramiko.win_pageant.ctypes': 'ctypes',
              'paramiko.win_pageant.ctypes.wintypes': 'ctypes.wintypes',
              'paramiko.win_pageant.mmap': 'mmap',
              'paramiko.win_pageant.os': 'os',
              'paramiko.win_pageant.platform': 'platform',
              'paramiko.win_pageant.struct': 'struct',
              'paramiko.win_pageant.tempfile': 'tempfile',
              'paramiko.win_pageant.win32gui': 'win32gui',
              'pyrex_ext.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'pyrex_ext.setup.setup': 'numpy.distutils.core.setup',
              'pytest.Numeric': 'Numeric',
              'serial.*': 'serial.serialjava.*',
              'serial.os': 'os',
              'serial.rfc2217.*': 'serial.serialutil.*',
              'serial.rfc2217.Queue': 'Queue',
              'serial.rfc2217.io': 'io',
              'serial.rfc2217.logging': 'logging',
              'serial.rfc2217.socket': 'socket',
              'serial.rfc2217.struct': 'struct',
              'serial.rfc2217.sys': 'sys',
              'serial.rfc2217.threading': 'threading',
              'serial.rfc2217.time': 'time',
              'serial.serialcli.*': 'serial.serialutil.*',
              'serial.serialcli.System': 'System',
              'serial.serialcli.System.IO.Ports': 'System.IO.Ports',
              'serial.serialcli.clr': 'clr',
              'serial.serialcli.io': 'io',
              'serial.serialcli.sys': 'sys',
              'serial.serialcli.time': 'time',
              'serial.serialjava.*': 'serial.serialutil.*',
              'serial.serialjava.io': 'io',
              'serial.serialposix.*': 'serial.serialutil.*',
              'serial.serialposix.FCNTL': 'FCNTL',
              'serial.serialposix.TERMIOS': 'TERMIOS',
              'serial.serialposix.array': 'array',
              'serial.serialposix.errno': 'errno',
              'serial.serialposix.fcntl': 'fcntl',
              'serial.serialposix.io': 'io',
              'serial.serialposix.os': 'os',
              'serial.serialposix.select': 'select',
              'serial.serialposix.struct': 'struct',
              'serial.serialposix.sys': 'sys',
              'serial.serialposix.termios': 'termios',
              'serial.serialposix.time': 'time',
              'serial.serialutil.array': 'array',
              'serial.serialutil.sys': 'sys',
              'serial.serialwin32.*': 'serial.serialutil.*',
              'serial.serialwin32.ctypes': 'ctypes',
              'serial.serialwin32.io': 'io',
              'serial.serialwin32.time': 'time',
              'serial.serialwin32.win32': 'serial.win32',
              'serial.sermsdos.os': 'os',
              'serial.sermsdos.serial.serialutil': 'serial.serialutil',
              'serial.sermsdos.string': 'string',
              'serial.sermsdos.sys': 'sys',
              'serial.sys': 'sys',
              'serial.tools.list_ports.*': 'serial.tools.list_ports_posix.*',
              'serial.tools.list_ports.optparse': 'optparse',
              'serial.tools.list_ports.os': 'os',
              'serial.tools.list_ports.re': 're',
              'serial.tools.list_ports.sys': 'sys',
              'serial.tools.list_ports_posix.glob': 'glob',
              'serial.tools.list_ports_posix.os': 'os',
              'serial.tools.list_ports_posix.re': 're',
              'serial.tools.list_ports_posix.subprocess': 'subprocess',
              'serial.tools.list_ports_posix.sys': 'sys',
              'serial.tools.list_ports_windows.BOOL': 'ctypes.wintypes.BOOL',
              'serial.tools.list_ports_windows.BYTE': 'ctypes.wintypes.BYTE',
              'serial.tools.list_ports_windows.DWORD': 'ctypes.wintypes.DWORD',
              'serial.tools.list_ports_windows.HANDLE': 'ctypes.wintypes.HANDLE',
              'serial.tools.list_ports_windows.HKEY': 'ctypes.wintypes.HKEY',
              'serial.tools.list_ports_windows.HWND': 'ctypes.wintypes.HWND',
              'serial.tools.list_ports_windows.LONG': 'ctypes.wintypes.LONG',
              'serial.tools.list_ports_windows.LPCSTR': 'ctypes.wintypes.LPCSTR',
              'serial.tools.list_ports_windows.ULONG': 'ctypes.wintypes.ULONG',
              'serial.tools.list_ports_windows.ULONG_PTR': 'serial.win32.ULONG_PTR',
              'serial.tools.list_ports_windows.WORD': 'ctypes.wintypes.WORD',
              'serial.tools.list_ports_windows.ctypes': 'ctypes',
              'serial.tools.list_ports_windows.is_64bit': 'serial.win32.is_64bit',
              'serial.tools.list_ports_windows.re': 're',
              'serial.tools.list_ports_windows.serial': 'serial',
              'serial.tools.miniterm.msvcrt': 'msvcrt',
              'serial.tools.miniterm.optparse': 'optparse',
              'serial.tools.miniterm.os': 'os',
              'serial.tools.miniterm.serial': 'serial',
              'serial.tools.miniterm.sys': 'sys',
              'serial.tools.miniterm.termios': 'termios',
              'serial.tools.miniterm.threading': 'threading',
              'serial.urlhandler.protocol_hwgrep.serial': 'serial',
              'serial.urlhandler.protocol_hwgrep.serial.tools.list_ports': 'serial.tools.list_ports',
              'serial.urlhandler.protocol_loop.*': 'serial.serialutil.*',
              'serial.urlhandler.protocol_loop.io': 'io',
              'serial.urlhandler.protocol_loop.logging': 'logging',
              'serial.urlhandler.protocol_loop.sys': 'sys',
              'serial.urlhandler.protocol_loop.threading': 'threading',
              'serial.urlhandler.protocol_loop.time': 'time',
              'serial.urlhandler.protocol_rfc2217.Serial': 'serial.rfc2217.Serial',
              'serial.urlhandler.protocol_socket.*': 'serial.serialutil.*',
              'serial.urlhandler.protocol_socket.io': 'io',
              'serial.urlhandler.protocol_socket.logging': 'logging',
              'serial.urlhandler.protocol_socket.socket': 'socket',
              'serial.urlhandler.protocol_socket.sys': 'sys',
              'serial.urlhandler.protocol_socket.time': 'time',
              'serial.win32.*': 'ctypes.*',
              'serial.win32.BOOL': 'ctypes.wintypes.BOOL',
              'serial.win32.BYTE': 'ctypes.wintypes.BYTE',
              'serial.win32.DWORD': 'ctypes.wintypes.DWORD',
              'serial.win32.HANDLE': 'ctypes.wintypes.HANDLE',
              'serial.win32.LPCSTR': 'ctypes.wintypes.LPCSTR',
              'serial.win32.LPCWSTR': 'ctypes.wintypes.LPCWSTR',
              'serial.win32.WORD': 'ctypes.wintypes.WORD',
              'setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'setup.setup': 'numpy.distutils.core.setup',
              'setup_example.Extension': 'numpy_distutils.core.Extension',
              'setup_example.setup': 'numpy_distutils.core.setup',
              'simpleindex.timeit': 'timeit',
              'sorting.Benchmark': 'benchmark.Benchmark',
              'swig_ext.setup.Configuration': 'numpy.distutils.misc_util.Configuration',
              'swig_ext.setup.setup': 'numpy.distutils.core.setup',
              'test__datasource.*': 'numpy.testing.*',
              'test__datasource.NamedTemporaryFile': 'tempfile.NamedTemporaryFile',
              'test__datasource.URLError': 'urllib2.URLError',
              'test__datasource.asbytes': 'numpy.compat.asbytes',
              'test__datasource.bz2': 'bz2',
              'test__datasource.datasource': 'numpy.lib._datasource',
              'test__datasource.gzip': 'gzip',
              'test__datasource.mkdtemp': 'tempfile.mkdtemp',
              'test__datasource.mkstemp': 'tempfile.mkstemp',
              'test__datasource.nose': 'nose',
              'test__datasource.os': 'os',
              'test__datasource.rmtree': 'shutil.rmtree',
              'test__datasource.urllib2': 'urllib2',
              'test__datasource.urlparse': 'urlparse.urlparse',
              'test__iotools.*': 'numpy.testing.*',
              'test__iotools.BytesIO': 'io.BytesIO',
              'test__iotools.LineSplitter': 'numpy.lib._iotools.LineSplitter',
              'test__iotools.NameValidator': 'numpy.lib._iotools.NameValidator',
              'test__iotools.StringConverter': 'numpy.lib._iotools.StringConverter',
              'test__iotools.StringIO': 'StringIO.StringIO',
              'test__iotools.asbytes': 'numpy.compat.asbytes',
              'test__iotools.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test__iotools.date': 'datetime.date',
              'test__iotools.easy_dtype': 'numpy.lib._iotools.easy_dtype',
              'test__iotools.flatten_dtype': 'numpy.lib._iotools.flatten_dtype',
              'test__iotools.has_nested_fields': 'numpy.lib._iotools.has_nested_fields',
              'test__iotools.np': 'numpy',
              'test__iotools.sys': 'sys',
              'test__iotools.time': 'time',
              'test_api.*': 'numpy.testing.*',
              'test_api.WarningManager': 'numpy.testing.utils.WarningManager',
              'test_api.np': 'numpy',
              'test_api.sys': 'sys',
              'test_api.warnings': 'warnings',
              'test_array_from_pyobj.*': 'numpy.testing.*',
              'test_array_from_pyobj.alltrue': 'numpy.alltrue',
              'test_array_from_pyobj.array': 'numpy.array',
              'test_array_from_pyobj.asarray': 'numpy.asarray',
              'test_array_from_pyobj.can_cast': 'numpy.can_cast',
              'test_array_from_pyobj.copy': 'copy',
              'test_array_from_pyobj.dtype': 'numpy.dtype',
              'test_array_from_pyobj.ndarray': 'numpy.ndarray',
              'test_array_from_pyobj.nose': 'nose',
              'test_array_from_pyobj.os': 'os',
              'test_array_from_pyobj.sys': 'sys',
              'test_array_from_pyobj.typeinfo': 'numpy.core.multiarray.typeinfo',
              'test_array_from_pyobj.unittest': 'unittest',
              'test_array_from_pyobj.util': 'util',
              'test_array_from_pyobj.zeros': 'numpy.zeros',
              'test_arrayprint.*': 'numpy.testing.*',
              'test_arrayprint.np': 'numpy',
              'test_arraysetops.*': 'numpy.lib.arraysetops.*',
              'test_arraysetops.np': 'numpy',
              'test_arraysetops.warnings': 'warnings',
              'test_arrayterator.Arrayterator': 'numpy.lib.Arrayterator',
              'test_arrayterator.mul': 'operator.mul',
              'test_arrayterator.np': 'numpy',
              'test_arrayterator.randint': 'numpy.random.randint',
              'test_arrayterator.reduce': 'functools.reduce',
              'test_arrayterator.run_module_suite': 'numpy.testing.run_module_suite',
              'test_arrayterator.sys': 'sys',
              'test_assumed_shape.*': 'numpy.testing.*',
              'test_assumed_shape.array': 'numpy.array',
              'test_assumed_shape.math': 'math',
              'test_assumed_shape.nose': 'nose',
              'test_assumed_shape.os': 'os',
              'test_assumed_shape.util': 'util',
              'test_blasdot.TestCase': 'numpy.testing.TestCase',
              'test_blasdot._dotblas': 'numpy.core._dotblas',
              'test_blasdot.alterdot': 'numpy.core.alterdot',
              'test_blasdot.assert_': 'numpy.testing.assert_',
              'test_blasdot.assert_allclose': 'numpy.testing.assert_allclose',
              'test_blasdot.assert_almost_equal': 'numpy.testing.assert_almost_equal',
              'test_blasdot.assert_array_equal': 'numpy.testing.assert_array_equal',
              'test_blasdot.assert_equal': 'numpy.testing.assert_equal',
              'test_blasdot.assert_raises': 'numpy.testing.assert_raises',
              'test_blasdot.dec': 'numpy.testing.dec',
              'test_blasdot.dot': 'numpy.core.dot',
              'test_blasdot.float64': 'numpy.core.float64',
              'test_blasdot.inner': 'numpy.core.inner',
              'test_blasdot.inner_': 'numpy.core.multiarray.inner',
              'test_blasdot.np': 'numpy',
              'test_blasdot.restoredot': 'numpy.core.restoredot',
              'test_blasdot.sys': 'sys',
              'test_blasdot.vdot': 'numpy.core.vdot',
              'test_blasdot.zeros': 'numpy.core.zeros',
              'test_build.PIPE': 'subprocess.PIPE',
              'test_build.Popen': 'subprocess.Popen',
              'test_build.TestCase': 'numpy.testing.TestCase',
              'test_build.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_build.call': 'subprocess.call',
              'test_build.dec': 'numpy.testing.dec',
              'test_build.lapack_lite': 'numpy.linalg.lapack_lite',
              'test_build.np': 'numpy',
              'test_build.re': 're',
              'test_build.sys': 'sys',
              'test_callback.*': 'numpy.testing.*',
              'test_callback.array': 'numpy.array',
              'test_callback.math': 'math',
              'test_callback.nose': 'nose',
              'test_callback.util': 'util',
              'test_chebyshev.*': 'numpy.testing.*',
              'test_chebyshev.ch': 'numpy.polynomial.chebyshev',
              'test_chebyshev.division': '__future__.division',
              'test_chebyshev.np': 'numpy',
              'test_core.*': 'numpy.ma.core.*',
              'test_core.asbytes': 'numpy.compat.asbytes',
              'test_core.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_core.cPickle': 'cPickle',
              'test_core.datetime': 'datetime',
              'test_core.deepcopy': 'copy.deepcopy',
              'test_core.fromnumeric': 'numpy.core.fromnumeric',
              'test_core.ndarray': 'numpy.ndarray',
              'test_core.np': 'numpy',
              'test_core.numpy.ma.core': 'numpy.ma.core',
              'test_core.reduce': 'functools.reduce',
              'test_core.sys': 'sys',
              'test_core.types': 'types',
              'test_core.warnings': 'warnings',
              'test_ctypeslib.*': 'numpy.testing.*',
              'test_ctypeslib.get_shared_lib_extension': 'numpy.distutils.misc_util.get_shared_lib_extension',
              'test_ctypeslib.load_library': 'numpy.ctypeslib.load_library',
              'test_ctypeslib.ndpointer': 'numpy.ctypeslib.ndpointer',
              'test_ctypeslib.np': 'numpy',
              'test_ctypeslib.sys': 'sys',
              'test_datetime.*': 'numpy.testing.*',
              'test_datetime.np': 'numpy',
              'test_datetime.path': 'os.path',
              'test_decorators.*': 'numpy.testing.*',
              'test_decorators.KnownFailureTest': 'numpy.testing.noseclasses.KnownFailureTest',
              'test_decorators.nose': 'nose',
              'test_decorators.np': 'numpy',
              'test_defchararray.*': 'numpy.core.*',
              'test_defchararray._vec_string': 'numpy.core.multiarray._vec_string',
              'test_defchararray.asbytes': 'numpy.compat.asbytes',
              'test_defchararray.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_defchararray.np': 'numpy',
              'test_defchararray.sys': 'sys',
              'test_defmatrix.*': 'numpy.core.*',
              'test_defmatrix.asmatrix': 'numpy.asmatrix',
              'test_defmatrix.bmat': 'numpy.bmat',
              'test_defmatrix.linalg': 'numpy.linalg',
              'test_defmatrix.mat': 'numpy.matrixlib.mat',
              'test_defmatrix.matrix': 'numpy.matrix',
              'test_defmatrix.matrix_power': 'numpy.matrixlib.defmatrix.matrix_power',
              'test_defmatrix.np': 'numpy',
              'test_dtype.*': 'numpy.testing.*',
              'test_dtype.np': 'numpy',
              'test_einsum.*': 'numpy.testing.*',
              'test_einsum.Decimal': 'decimal.Decimal',
              'test_einsum.WarningManager': 'numpy.testing.utils.WarningManager',
              'test_einsum.np': 'numpy',
              'test_einsum.sys': 'sys',
              'test_einsum.warnings': 'warnings',
              'test_errstate.sys': 'sys',
              'test_example.*': 'numpy.testing.*',
              'test_example.example': 'swig_ext.example',
              'test_example.sys': 'sys',
              'test_example2.*': 'numpy.testing.*',
              'test_example2.example2': 'swig_ext.example2',
              'test_example2.sys': 'sys',
              'test_extras.*': 'numpy.ma.extras.*',
              'test_extras.TestCase': 'numpy.testing.TestCase',
              'test_extras.np': 'numpy',
              'test_extras.run_module_suite': 'numpy.testing.run_module_suite',
              'test_fcompiler_gnu.*': 'numpy.testing.*',
              'test_fcompiler_gnu.numpy.distutils.fcompiler': 'numpy.distutils.fcompiler',
              'test_fcompiler_intel.*': 'numpy.testing.*',
              'test_fcompiler_intel.numpy.distutils.fcompiler': 'numpy.distutils.fcompiler',
              'test_fftpack.*': 'numpy.testing.*',
              'test_fftpack.np': 'numpy',
              'test_fib2.*': 'numpy.testing.*',
              'test_fib2.fib2': 'f2py_ext.fib2',
              'test_fib2.sys': 'sys',
              'test_fib3.*': 'numpy.testing.*',
              'test_fib3.fib3': 'gen_ext.fib3',
              'test_fib3.sys': 'sys',
              'test_financial.*': 'numpy.testing.*',
              'test_financial.np': 'numpy',
              'test_foo.*': 'numpy.testing.*',
              'test_foo.foo': 'f2py_f90_ext.foo',
              'test_foo.sys': 'sys',
              'test_format.*': 'numpy.testing.*',
              'test_format.StringIO': 'cStringIO.StringIO',
              'test_format.asbytes': 'numpy.compat.asbytes',
              'test_format.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_format.format': 'numpy.lib.format',
              'test_format.np': 'numpy',
              'test_format.os': 'os',
              'test_format.shutil': 'shutil',
              'test_format.sys': 'sys',
              'test_format.tempfile': 'tempfile',
              'test_function_base.*': 'numpy.testing.*',
              'test_function_base.asmatrix': 'numpy.asmatrix',
              'test_function_base.linspace': 'numpy.linspace',
              'test_function_base.logspace': 'numpy.logspace',
              'test_function_base.math': 'math',
              'test_function_base.matrix': 'numpy.matrix',
              'test_function_base.np': 'numpy',
              'test_function_base.numpy.lib': 'numpy.lib',
              'test_function_base.random': 'random',
              'test_function_base.warnings': 'warnings',
              'test_getlimits.*': 'numpy.testing.*',
              'test_getlimits.double': 'numpy.double',
              'test_getlimits.finfo': 'numpy.core.finfo',
              'test_getlimits.half': 'numpy.half',
              'test_getlimits.iinfo': 'numpy.core.iinfo',
              'test_getlimits.longdouble': 'numpy.longdouble',
              'test_getlimits.np': 'numpy',
              'test_getlimits.single': 'numpy.single',
              'test_half.TestCase': 'numpy.testing.TestCase',
              'test_half.assert_': 'numpy.testing.assert_',
              'test_half.assert_equal': 'numpy.testing.assert_equal',
              'test_half.float16': 'numpy.float16',
              'test_half.float32': 'numpy.float32',
              'test_half.float64': 'numpy.float64',
              'test_half.np': 'numpy',
              'test_half.run_module_suite': 'numpy.testing.run_module_suite',
              'test_half.uint16': 'numpy.uint16',
              'test_half.warnings': 'warnings',
              'test_helper.*': 'numpy.testing.*',
              'test_helper.fftfreq': 'numpy.fft.fftfreq',
              'test_helper.fftshift': 'numpy.fft.fftshift',
              'test_helper.ifftshift': 'numpy.fft.ifftshift',
              'test_helper.pi': 'numpy.pi',
              'test_hermite.*': 'numpy.testing.*',
              'test_hermite.division': '__future__.division',
              'test_hermite.herm': 'numpy.polynomial.hermite',
              'test_hermite.np': 'numpy',
              'test_hermite.poly': 'numpy.polynomial.polynomial',
              'test_hermite_e.*': 'numpy.testing.*',
              'test_hermite_e.division': '__future__.division',
              'test_hermite_e.herme': 'numpy.polynomial.hermite_e',
              'test_hermite_e.np': 'numpy',
              'test_hermite_e.poly': 'numpy.polynomial.polynomial',
              'test_index_tricks.*': 'numpy.testing.*',
              'test_index_tricks.array': 'numpy.array',
              'test_index_tricks.diag_indices': 'numpy.diag_indices',
              'test_index_tricks.diag_indices_from': 'numpy.diag_indices_from',
              'test_index_tricks.fill_diagonal': 'numpy.fill_diagonal',
              'test_index_tricks.index_exp': 'numpy.index_exp',
              'test_index_tricks.mgrid': 'numpy.mgrid',
              'test_index_tricks.ndenumerate': 'numpy.ndenumerate',
              'test_index_tricks.np': 'numpy',
              'test_index_tricks.ones': 'numpy.ones',
              'test_index_tricks.r_': 'numpy.r_',
              'test_index_tricks.s_': 'numpy.s_',
              'test_index_tricks.unravel_index': 'numpy.unravel_index',
              'test_index_tricks.where': 'numpy.where',
              'test_index_tricks.zeros': 'numpy.zeros',
              'test_io.BytesIO': 'io.BytesIO',
              'test_io.ConversionWarning': 'numpy.lib._iotools.ConversionWarning',
              'test_io.ConverterError': 'numpy.lib._iotools.ConverterError',
              'test_io.ConverterLockError': 'numpy.lib._iotools.ConverterLockError',
              'test_io.NamedTemporaryFile': 'tempfile.NamedTemporaryFile',
              'test_io.StringIO': 'StringIO.StringIO',
              'test_io.TestCase': 'numpy.ma.testutils.TestCase',
              'test_io.WarningManager': 'numpy.testing.utils.WarningManager',
              'test_io.asbytes': 'numpy.compat.asbytes',
              'test_io.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_io.assert_': 'numpy.testing.assert_',
              'test_io.assert_array_equal': 'numpy.ma.testutils.assert_array_equal',
              'test_io.assert_equal': 'numpy.ma.testutils.assert_equal',
              'test_io.assert_raises': 'numpy.ma.testutils.assert_raises',
              'test_io.assert_warns': 'numpy.testing.assert_warns',
              'test_io.build_err_msg': 'numpy.testing.build_err_msg',
              'test_io.bytes': 'numpy.compat.bytes',
              'test_io.date': 'datetime.date',
              'test_io.datetime': 'datetime.datetime',
              'test_io.gc': 'gc',
              'test_io.gzip': 'gzip',
              'test_io.ma': 'numpy.ma',
              'test_io.mkstemp': 'tempfile.mkstemp',
              'test_io.np': 'numpy',
              'test_io.os': 'os',
              'test_io.run_module_suite': 'numpy.ma.testutils.run_module_suite',
              'test_io.sys': 'sys',
              'test_io.threading': 'threading',
              'test_io.time': 'time',
              'test_io.warnings': 'warnings',
              'test_iterator.*': 'numpy.testing.*',
              'test_iterator.all': 'numpy.all',
              'test_iterator.arange': 'numpy.arange',
              'test_iterator.array': 'numpy.array',
              'test_iterator.asbytes': 'numpy.compat.asbytes',
              'test_iterator.nditer': 'numpy.nditer',
              'test_iterator.np': 'numpy',
              'test_iterator.sys': 'sys',
              'test_iterator.warnings': 'warnings',
              'test_kind.*': 'numpy.testing.*',
              'test_kind.array': 'numpy.array',
              'test_kind.math': 'math',
              'test_kind.nose': 'nose',
              'test_kind.os': 'os',
              'test_kind.selected_int_kind': 'numpy.f2py.crackfortran._selected_int_kind_func',
              'test_kind.selected_real_kind': 'numpy.f2py.crackfortran._selected_real_kind_func',
              'test_kind.util': 'util',
              'test_laguerre.*': 'numpy.testing.*',
              'test_laguerre.division': '__future__.division',
              'test_laguerre.lag': 'numpy.polynomial.laguerre',
              'test_laguerre.np': 'numpy',
              'test_laguerre.poly': 'numpy.polynomial.polynomial',
              'test_legendre.*': 'numpy.testing.*',
              'test_legendre.division': '__future__.division',
              'test_legendre.leg': 'numpy.polynomial.legendre',
              'test_legendre.np': 'numpy',
              'test_legendre.poly': 'numpy.polynomial.polynomial',
              'test_linalg.*': 'numpy.testing.*',
              'test_linalg.array': 'numpy.array',
              'test_linalg.asarray': 'numpy.asarray',
              'test_linalg.atleast_2d': 'numpy.atleast_2d',
              'test_linalg.cdouble': 'numpy.cdouble',
              'test_linalg.csingle': 'numpy.csingle',
              'test_linalg.dot': 'numpy.dot',
              'test_linalg.double': 'numpy.double',
              'test_linalg.identity': 'numpy.identity',
              'test_linalg.inf': 'numpy.inf',
              'test_linalg.linalg': 'numpy.linalg',
              'test_linalg.matrix': 'numpy.matrix',
              'test_linalg.matrix_power': 'numpy.linalg.matrix_power',
              'test_linalg.matrix_rank': 'numpy.linalg.matrix_rank',
              'test_linalg.multiply': 'numpy.multiply',
              'test_linalg.norm': 'numpy.linalg.norm',
              'test_linalg.np': 'numpy',
              'test_linalg.numpy.linalg': 'numpy.linalg',
              'test_linalg.single': 'numpy.single',
              'test_machar.*': 'numpy.testing.*',
              'test_machar.MachAr': 'numpy.core.machar.MachAr',
              'test_machar.array': 'numpy.array',
              'test_machar.ntypes': 'numpy.core.numerictypes',
              'test_machar.seterr': 'numpy.seterr',
              'test_matlib.assert_': 'numpy.testing.assert_',
              'test_matlib.assert_array_equal': 'numpy.testing.assert_array_equal',
              'test_matlib.np': 'numpy',
              'test_matlib.numpy.matlib': 'numpy.matlib',
              'test_memmap.NamedTemporaryFile': 'tempfile.NamedTemporaryFile',
              'test_memmap.TestCase': 'numpy.testing.TestCase',
              'test_memmap.allclose': 'numpy.allclose',
              'test_memmap.arange': 'numpy.arange',
              'test_memmap.assert_': 'numpy.testing.assert_',
              'test_memmap.assert_array_equal': 'numpy.testing.assert_array_equal',
              'test_memmap.memmap': 'numpy.memmap',
              'test_memmap.mktemp': 'tempfile.mktemp',
              'test_memmap.os': 'os',
              'test_memmap.warnings': 'warnings',
              'test_misc_util.*': 'numpy.testing.*',
              'test_misc_util.appendpath': 'numpy.distutils.misc_util.appendpath',
              'test_misc_util.dirname': 'os.path.dirname',
              'test_misc_util.gpaths': 'numpy.distutils.misc_util.gpaths',
              'test_misc_util.join': 'os.path.join',
              'test_misc_util.minrelpath': 'numpy.distutils.misc_util.minrelpath',
              'test_misc_util.rel_path': 'numpy.distutils.misc_util.rel_path',
              'test_misc_util.sep': 'os.path.sep',
              'test_mixed.*': 'numpy.testing.*',
              'test_mixed.array': 'numpy.array',
              'test_mixed.math': 'math',
              'test_mixed.nose': 'nose',
              'test_mixed.os': 'os',
              'test_mixed.util': 'util',
              'test_mrecords.*': 'numpy.ma.testutils.*',
              'test_mrecords.MaskedRecords': 'numpy.ma.mrecords.MaskedRecords',
              'test_mrecords.addfield': 'numpy.ma.mrecords.addfield',
              'test_mrecords.asbytes': 'numpy.compat.asbytes',
              'test_mrecords.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_mrecords.cPickle': 'cPickle',
              'test_mrecords.fromarrays': 'numpy.ma.mrecords.fromarrays',
              'test_mrecords.fromrecords': 'numpy.ma.mrecords.fromrecords',
              'test_mrecords.fromtextfile': 'numpy.ma.mrecords.fromtextfile',
              'test_mrecords.ma': 'numpy.ma',
              'test_mrecords.masked': 'numpy.ma.masked',
              'test_mrecords.mrecarray': 'numpy.ma.mrecords.mrecarray',
              'test_mrecords.nomask': 'numpy.ma.nomask',
              'test_mrecords.np': 'numpy',
              'test_mrecords.numpy.ma.testutils': 'numpy.ma.testutils',
              'test_mrecords.os': 'os',
              'test_mrecords.recarray': 'numpy.recarray',
              'test_mrecords.recfromarrays': 'numpy.core.records.fromarrays',
              'test_mrecords.recfromrecords': 'numpy.core.records.fromrecords',
              'test_mrecords.sys': 'sys',
              'test_mrecords.tempfile': 'tempfile',
              'test_mrecords.warnings': 'warnings',
              'test_multiarray.*': 'numpy.testing.*',
              'test_multiarray.Decimal': 'decimal.Decimal',
              'test_multiarray._dtype_from_pep3118': 'numpy.core._internal._dtype_from_pep3118',
              'test_multiarray.asbytes': 'numpy.compat.asbytes',
              'test_multiarray.dot': 'numpy.core.multiarray.dot',
              'test_multiarray.getexception': 'numpy.compat.getexception',
              'test_multiarray.in_foreign_locale': 'test_print.in_foreign_locale',
              'test_multiarray.memoryview': 'numpy.core.multiarray.memorysimpleview',
              'test_multiarray.np': 'numpy',
              'test_multiarray.os': 'os',
              'test_multiarray.pickle': 'pickle',
              'test_multiarray.strchar': 'numpy.compat.strchar',
              'test_multiarray.sys': 'sys',
              'test_multiarray.tempfile': 'tempfile',
              'test_multiarray.test_neighborhood_iterator': 'numpy.core.multiarray_tests.test_neighborhood_iterator',
              'test_multiarray.test_neighborhood_iterator_oob': 'numpy.core.multiarray_tests.test_neighborhood_iterator_oob',
              'test_multiarray.timedelta': 'datetime.timedelta',
              'test_multiarray.warnings': 'warnings',
              'test_npy_pkg_config.*': 'numpy.testing.*',
              'test_npy_pkg_config.mkstemp': 'tempfile.mkstemp',
              'test_npy_pkg_config.os': 'os',
              'test_npy_pkg_config.parse_flags': 'numpy.distutils.npy_pkg_config.parse_flags',
              'test_npy_pkg_config.read_config': 'numpy.distutils.npy_pkg_config.read_config',
              'test_numeric.*': 'numpy.testing.*',
              'test_numeric.Decimal': 'decimal.Decimal',
              'test_numeric.TestCase': 'numpy.testing.TestCase',
              'test_numeric.WarningManager': 'numpy.testing.utils.WarningManager',
              'test_numeric.assert_equal': 'numpy.testing.assert_equal',
              'test_numeric.dot_': 'numpy.core.multiarray.dot',
              'test_numeric.matrix': 'numpy.matrix',
              'test_numeric.np': 'numpy',
              'test_numeric.ones': 'numpy.core.ones',
              'test_numeric.platform': 'platform',
              'test_numeric.rand': 'numpy.random.rand',
              'test_numeric.randint': 'numpy.random.randint',
              'test_numeric.randn': 'numpy.random.randn',
              'test_numeric.sys': 'sys',
              'test_numeric.warnings': 'warnings',
              'test_numerictypes.*': 'numpy.testing.*',
              'test_numerictypes.asbytes': 'numpy.compat.asbytes',
              'test_numerictypes.asunicode': 'numpy.compat.asunicode',
              'test_numerictypes.np': 'numpy',
              'test_numerictypes.sys': 'sys',
              'test_old_ma.*': 'numpy.testing.*',
              'test_old_ma.float32': 'numpy.core.numerictypes.float32',
              'test_old_ma.numpy': 'numpy',
              'test_old_ma.pickle': 'pickle',
              'test_old_ma.reduce': 'functools.reduce',
              'test_old_ma.sys': 'sys',
              'test_old_ma.types': 'types',
              'test_old_ma.umath': 'numpy.ma.core.umath',
              'test_oldnumeric.*': 'numpy.oldnumeric.*',
              'test_oldnumeric.array': 'numpy.array',
              'test_oldnumeric.complex128': 'numpy.core.numeric.complex128',
              'test_oldnumeric.complex64': 'numpy.core.numeric.complex64',
              'test_oldnumeric.float32': 'numpy.core.numeric.float32',
              'test_oldnumeric.float64': 'numpy.core.numeric.float64',
              'test_oldnumeric.int16': 'numpy.core.numeric.int16',
              'test_oldnumeric.int32': 'numpy.core.numeric.int32',
              'test_oldnumeric.int64': 'numpy.core.numeric.int64',
              'test_oldnumeric.int8': 'numpy.core.numeric.int8',
              'test_oldnumeric.nose': 'nose',
              'test_oldnumeric.uint': 'numpy.core.numeric.uint',
              'test_oldnumeric.uint16': 'numpy.core.numeric.uint16',
              'test_oldnumeric.uint32': 'numpy.core.numeric.uint32',
              'test_oldnumeric.uint64': 'numpy.core.numeric.uint64',
              'test_oldnumeric.uint8': 'numpy.core.numeric.uint8',
              'test_oldnumeric.unittest': 'unittest',
              'test_polynomial.*': 'numpy.testing.*',
              'test_polynomial.Decimal': 'decimal.Decimal',
              'test_polynomial.division': '__future__.division',
              'test_polynomial.np': 'numpy',
              'test_polynomial.poly': 'numpy.polynomial.polynomial',
              'test_polyutils.*': 'numpy.testing.*',
              'test_polyutils.division': '__future__.division',
              'test_polyutils.np': 'numpy',
              'test_polyutils.pu': 'numpy.polynomial.polyutils',
              'test_primes.*': 'numpy.testing.*',
              'test_primes.primes': 'pyrex_ext.primes.primes',
              'test_primes.sys': 'sys',
              'test_print.*': 'numpy.testing.*',
              'test_print.StringIO': 'StringIO.StringIO',
              'test_print.locale': 'locale',
              'test_print.nose': 'nose',
              'test_print.np': 'numpy',
              'test_print.sys': 'sys',
              'test_printing.TestCase': 'numpy.testing.TestCase',
              'test_printing.assert_': 'numpy.testing.assert_',
              'test_printing.poly': 'numpy.polynomial',
              'test_printing.run_module_suite': 'numpy.testing.run_module_suite',
              'test_random.TestCase': 'numpy.testing.TestCase',
              'test_random.asbytes': 'numpy.compat.asbytes',
              'test_random.assert_': 'numpy.testing.assert_',
              'test_random.assert_raises': 'numpy.testing.assert_raises',
              'test_random.np': 'numpy',
              'test_random.random': 'numpy.random',
              'test_random.run_module_suite': 'numpy.testing.run_module_suite',
              'test_recfunctions.*': 'numpy.lib.recfunctions.*',
              'test_recfunctions.MaskedRecords': 'numpy.ma.mrecords.MaskedRecords',
              'test_recfunctions.ma': 'numpy.ma',
              'test_recfunctions.np': 'numpy',
              'test_recfunctions.sys': 'sys',
              'test_records.*': 'numpy.testing.*',
              'test_records.asbytes': 'numpy.compat.asbytes',
              'test_records.asunicode': 'numpy.compat.asunicode',
              'test_records.np': 'numpy',
              'test_records.path': 'os.path',
              'test_records.warnings': 'warnings',
              'test_regression.*': 'numpy.testing.*',
              'test_regression.MaskType': 'numpy.ma.MaskType',
              'test_regression.StringIO': 'StringIO.StringIO',
              'test_regression.TestCase': 'numpy.testing.TestCase',
              'test_regression.WarningManager': 'numpy.testing.utils.WarningManager',
              'test_regression._assert_valid_refcount': 'numpy.testing.utils._assert_valid_refcount',
              'test_regression.append_fields': 'numpy.lib.recfunctions.append_fields',
              'test_regression.arange': 'numpy.arange',
              'test_regression.array': 'numpy.array',
              'test_regression.asbytes': 'numpy.compat.asbytes',
              'test_regression.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_regression.assert_': 'numpy.testing.assert_',
              'test_regression.assert_array_equal': 'numpy.testing.assert_array_equal',
              'test_regression.asunicode': 'numpy.compat.asunicode',
              'test_regression.cPickle': 'cPickle',
              'test_regression.copy': 'copy',
              'test_regression.dot': 'numpy.dot',
              'test_regression.float64': 'numpy.float64',
              'test_regression.gc': 'gc',
              'test_regression.io': 'io',
              'test_regression.linalg': 'numpy.linalg',
              'test_regression.masked_where': 'numpy.ma.masked_where',
              'test_regression.md5': 'md5.new',
              'test_regression.np': 'numpy',
              'test_regression.numarray': 'numpy.numarray',
              'test_regression.os': 'os',
              'test_regression.path': 'os.path',
              'test_regression.pickle': 'pickle',
              'test_regression.platform': 'platform',
              'test_regression.radians': 'math.radians',
              'test_regression.randint': 'numpy.oldnumeric.random_array.randint',
              'test_regression.random': 'numpy.random',
              'test_regression.run_module_suite': 'numpy.testing.run_module_suite',
              'test_regression.sys': 'sys',
              'test_regression.tempfile': 'tempfile',
              'test_regression.transpose': 'numpy.transpose',
              'test_regression.warnings': 'warnings',
              'test_return_character.*': 'numpy.testing.*',
              'test_return_character.array': 'numpy.array',
              'test_return_character.asbytes': 'numpy.compat.asbytes',
              'test_return_character.nose': 'nose',
              'test_return_character.util': 'util',
              'test_return_complex.*': 'numpy.testing.*',
              'test_return_complex.array': 'numpy.array',
              'test_return_complex.nose': 'nose',
              'test_return_complex.util': 'util',
              'test_return_integer.*': 'numpy.testing.*',
              'test_return_integer.array': 'numpy.array',
              'test_return_integer.nose': 'nose',
              'test_return_integer.util': 'util',
              'test_return_logical.*': 'numpy.testing.*',
              'test_return_logical.array': 'numpy.array',
              'test_return_logical.nose': 'nose',
              'test_return_logical.util': 'util',
              'test_return_real.*': 'numpy.testing.*',
              'test_return_real.array': 'numpy.array',
              'test_return_real.math': 'math',
              'test_return_real.nose': 'nose',
              'test_return_real.util': 'util',
              'test_scalarmath.*': 'numpy.testing.*',
              'test_scalarmath.np': 'numpy',
              'test_scalarmath.sys': 'sys',
              'test_shape_base.*': 'numpy.testing.*',
              'test_shape_base.array': 'numpy.core.array',
              'test_shape_base.asmatrix': 'numpy.asmatrix',
              'test_shape_base.atleast_1d': 'numpy.core.atleast_1d',
              'test_shape_base.atleast_2d': 'numpy.core.atleast_2d',
              'test_shape_base.atleast_3d': 'numpy.core.atleast_3d',
              'test_shape_base.hstack': 'numpy.core.hstack',
              'test_shape_base.matrix': 'numpy.matrix',
              'test_shape_base.newaxis': 'numpy.core.newaxis',
              'test_shape_base.nr': 'numpy.random',
              'test_shape_base.vstack': 'numpy.core.vstack',
              'test_size.*': 'numpy.testing.*',
              'test_size.array': 'numpy.array',
              'test_size.math': 'math',
              'test_size.nose': 'nose',
              'test_size.os': 'os',
              'test_size.util': 'util',
              'test_stride_tricks.*': 'numpy.testing.*',
              'test_stride_tricks.broadcast_arrays': 'numpy.lib.stride_tricks.broadcast_arrays',
              'test_stride_tricks.np': 'numpy',
              'test_subclassing.*': 'numpy.ma.core.*',
              'test_subclassing.np': 'numpy',
              'test_twodim_base.*': 'numpy.testing.*',
              'test_twodim_base.add': 'numpy.add',
              'test_twodim_base.arange': 'numpy.arange',
              'test_twodim_base.array': 'numpy.array',
              'test_twodim_base.asbytes': 'numpy.compat.asbytes',
              'test_twodim_base.asbytes_nested': 'numpy.compat.asbytes_nested',
              'test_twodim_base.diag': 'numpy.diag',
              'test_twodim_base.eye': 'numpy.eye',
              'test_twodim_base.fliplr': 'numpy.fliplr',
              'test_twodim_base.flipud': 'numpy.flipud',
              'test_twodim_base.histogram2d': 'numpy.histogram2d',
              'test_twodim_base.mask_indices': 'numpy.mask_indices',
              'test_twodim_base.np': 'numpy',
              'test_twodim_base.ones': 'numpy.ones',
              'test_twodim_base.rot90': 'numpy.rot90',
              'test_twodim_base.tri': 'numpy.tri',
              'test_twodim_base.tril_indices': 'numpy.tril_indices',
              'test_twodim_base.tril_indices_from': 'numpy.tril_indices_from',
              'test_twodim_base.triu_indices': 'numpy.triu_indices',
              'test_twodim_base.triu_indices_from': 'numpy.triu_indices_from',
              'test_twodim_base.zeros': 'numpy.zeros',
              'test_type_check.*': 'numpy.core.*',
              'test_type_check.asbytes': 'numpy.compat.asbytes',
              'test_type_check.ctypes': 'ctypes',
              'test_ufunc.*': 'numpy.testing.*',
              'test_ufunc.np': 'numpy',
              'test_ufunc.sys': 'sys',
              'test_ufunc.umt': 'numpy.core.umath_tests',
              'test_ufunclike.*': 'numpy.testing.*',
              'test_ufunclike.deprecated': 'numpy.testing.decorators.deprecated',
              'test_ufunclike.nx': 'numpy.core',
              'test_ufunclike.ufl': 'numpy.lib.ufunclike',
              'test_umath_complex.*': 'numpy.testing.*',
              'test_umath_complex.ncu': 'numpy.core.umath',
              'test_umath_complex.np': 'numpy',
              'test_umath_complex.platform': 'platform',
              'test_umath_complex.sys': 'sys',
              'test_unicode.*': 'numpy.core.*',
              'test_unicode._array': 'array',
              'test_unicode.asbytes': 'numpy.compat.asbytes',
              'test_unicode.sys': 'sys',
              'test_utils.*': 'numpy.testing.*',
              'test_utils.StringIO': 'StringIO.StringIO',
              'test_utils.deprecate': 'numpy.lib.deprecate',
              'test_utils.np': 'numpy',
              'test_utils.sys': 'sys',
              'test_utils.unittest': 'unittest',
              'test_utils.utils': 'numpy.lib.utils',
              'test_utils.warnings': 'warnings',
              'util.Configuration': 'numpy.distutils.misc_util.Configuration',
              'util.asbytes': 'numpy.compat.asbytes',
              'util.asstr': 'numpy.compat.asstr',
              'util.atexit': 'atexit',
              'util.md5': 'md5.new',
              'util.nose': 'nose',
              'util.numpy.f2py': 'numpy.f2py',
              'util.os': 'os',
              'util.random': 'random',
              'util.re': 're',
              'util.setup': 'numpy.distutils.core.setup',
              'util.shutil': 'shutil',
              'util.subprocess': 'subprocess',
              'util.sys': 'sys',
              'util.tempfile': 'tempfile',
              'util.textwrap': 'textwrap'}}
