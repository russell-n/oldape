[TEST]
operation_setup = oscillate
setup_test = poweron,timetorecovery,dumpdevicestate
execute_test = iperf
#test_teardown = 
#operation_setup = 
output_folder = {t}
# The data files will be appended with .iperf
# This is the number of times to repeat the throughput test
repeat = 1

# The `recovery_time` is how much time the system waits between changes to the system
# You should leave at least some time, since we are running things on different systems
# The actual amount you need depends on the systems
# If you leave this out it defaults to 1 second
# As with other 'times' you can give it units or it will default to seconds
recovery_time = 1 Second

[OSCILLATE]
# The information needed is for an ssh-connection to the Oscillation Master
hostname = apocephalus
username = root
#password

[POWERON]
e2000 = hostname:donna,switch:2
wndr3700 = hostname:alice,switch:1

[COMMANDWATCH]
command = wifi.sh status
expression = :\s+([^\s]+)

[NODES]
#igor = hostname:igor,login:developer,operating_system:windows,connection:ssh
#eyegore = hostname:eyegore,login:developer,operating_system:windows,connection:ssh
tate = hostname:apocephalus,login:root,operating_system:android,connection:adbshellssh

[APCONNECT]
ssids=wndr3700v3_5

[ROTATE]
hostname = phoridfly
username = root
#password = 
angles = 180,0:50,45,90:100, 500:10

[TRAFFIC_PC]
# currently this only takes the first tpc node given
tpc = operating_system:linux,connection:ssh,test_interface:eth3,hostname:lancet,login:allion
# if you have ssh-keys set up you can leave the password commented out
#password=

#[LOGWATCHER]
# The logwatcher watches a blocking log-buffer (e.g. /proc/kmsg)
# If you find more than one, add it by separating with commas (e.g. /proc/kmsg, /dev/log)
#paths=/proc/kmsg

#[LOGCATWATCHER]
# This is only for the adb logcat watcher
# comment it out or delete it to not use it
# If you put 'all' for the buffers it will dump all the logs
# other wise you can specify them as a list (e.g. system,radio)
#buffers = all

[IPERF]
# `directions` determines what address is passed to the client flag.
# Only the first letter is checked (except for `t` as it's ambiguous) so you can
# use whatever mnemonics help (e.g. 'receive' will only be read as 'r')
# Traffic from the TPC -> DUT can be one of:
#    to, d, r  (to_dut, downlink, receive|rx)
# Traffic from the DUT -> TPC can be one of:
#    f, u, tr, tx, s  (from_dut, uplink, transmit | tx, send)
# this is a plural property so you can have more than one if you use comma-separation (e.g. 'f, t')
# If you omit this the default is to_dut
directions = from_dut, to_dut

# The names of the options below should conform to the long-format options
# e.g. -P would be `parallel`

# this is the -t flag: (n) [seconds | minutes | hours | days] (defaults to seconds)
time = 10 seconds

# **** the following are Allion's defaults ****

# tcp window size
# this is the -w flag: n[KM]
window = 256K

# buffer-length
#this is the -l flag: (n)
length = 1470

# Parallel Threads
# This is the -P flag: (n)
parallel = 4

# time between data reports
# this is the -i flag: (n) 
interval = 1

# Data Units
# this is the -f flag: b|k|m|K|M
format = m

reportstyle = c